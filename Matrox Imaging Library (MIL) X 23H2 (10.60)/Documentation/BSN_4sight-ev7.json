[{
  "id": "BSN_4sight-ev7",
  "version": "2024020714",
  "title": "Zebra 4Sight EV7",
  "subTitles": null,
  "location": "MIL Hardware-specific Notes",
  "pageURL": "content\\BoardSpecificNotes\\4sight-ev7\\ChapterInformation.htm",
  "text": " Zebra 4Sight EV7 This chapter discusses features of MIL that are particular to Zebra 4Sight EV7, and ways that optimize its performance. Zebra 4Sight EV7 overview Summary of Zebra 4Sight EV7 features Using Zebra 4Sight EV7 with MIL Using the Advanced I/O Engine of Zebra 4Sight EV7 Using EtherNet/IP, Modbus, CC-Link, or PROFINET Using timers and rotary decoders with Zebra 4Sight EV7 Timers Quadrature decoders Zebra 4Sight EV7 connectors and signal names Board connectors Signal names and their matching MIL constants Zebra 4Sight EV7 data flow diagram ",
  "wordCount": 89,
  "subEntries": [
    {
      "id": "BSN_4sight-ev7_4SightEV7_specific_features",
      "version": null,
      "title": "Zebra 4Sight EV7 overview",
      "subTitles": [
        "Summary of Zebra 4Sight EV7 features"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\4sight-ev7\\4SightEV7_specific_features.htm",
      "text": " Zebra 4Sight EV7 overview The Zebra 4Sight EV7 unit is a self-contained, imaging computer (unit) that integrates processing and display capabilities, along with image capture from multiple GigE Vision and/or USB3 Vision cameras. Zebra 4Sight EV7 has 2.5 Gigabit Ethernet networking capabilities with support for Power-over-Ethernet (PoE), as well as industrial communication using the PROFINET, EtherNet/IP, CC-Link, or Modbus/TCP industrial protocol. Zebra 4Sight EV7 also has an Advanced I/O Engine; the engine provides use of 16 optically-isolated digital auxiliary I/O signals (8 inputs and 8 outputs), and includes I/O command lists, timers, quadrature decoders, and user outputs. The graphics controller allows you to connect two digital display devices. Summary of Zebra 4Sight EV7 features The following table outlines the features currently available for Zebra 4Sight EV7. Features Zebra 4Sight EV7 CPU Yes (Intel Core i3-1220PE or i5-1250PE) Host memory Up to 64 Gbytes Networking Four (4) 2.5 Gigabit Ethernet ports with PoE Two (2) standard Gigabit Ethernet ports (1 of which provides hardware-assisted PROFINET) USB Four (4) USB 3.2 SuperSpeed ports Two (2) USB 2.0 ports Number of supported UARTS Two (2) serial ports (one RS-232 and one RS-232/RS-485) Number of auxiliary signals Eight (8) inputs Eight (8) outputs Matrox PROFINET Engine Yes Number of timers Sixteen (16) Number of quadrature decoders Two (2) Number of I/O command lists Two (2) Zebra 4Sight EV7 overview Summary of Zebra 4Sight EV7 features ",
      "wordCount": 233,
      "subEntries": []
    },
    {
      "id": "BSN_4sight-ev7_Using_4SightEV7",
      "version": null,
      "title": "Using Zebra 4Sight EV7 with MIL",
      "subTitles": [
        "Using the Advanced I/O Engine of Zebra 4Sight EV7",
        "Using EtherNet/IP, Modbus, CC-Link, or PROFINET"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\4sight-ev7\\Using_4SightEV7.htm",
      "text": " Using Zebra 4Sight EV7 with MIL MIL treats Zebra 4Sight EV7 as a normal computer. To use the processing power or to use the capabilities of the auxiliary I/O interface (auxiliary signals) of Zebra 4Sight EV7, allocate a Host system using MsysAlloc() with M_SYSTEM_HOST. Zebra 4Sight EV7 allows you to use either GigE Vision-compliant cameras or USB3 Vision-compliant cameras directly connected to the unit. Camera type System name For more information MIL system-specific information (MIL Reference) GigE Vision M_SYSTEM_GIGE_VISION See the Matrox GigE Vision driver chapter in the MIL Hardware-specific Notes, Matrox GigE Vision driver release notes. GigE Vision USB3 Vision M_SYSTEM_USB3_VISION See the Matrox USB3 Vision driver chapter in the MIL Hardware-specific Notes, Matrox USB3 Vision release notes. USB3 Vision Zebra 4Sight EV7 comes with the Windows 10 IoT enterprise operating system preinstalled, and a runtime license for both MIL and DA, or just MIL (depending on your model). The runtime license includes the industrial and robot communication module. This might change over time; contact your Zebra/Matrox representative for more information. This license also allows for Distributed MIL configurations. Note that when installing a redistribution (runtime) version of MIL on Zebra 4Sight EV7, the license number will be based on the hardware fingerprint of your unit. This means that you will not be able to copy the licensed version of MIL to another computer. Using the Advanced I/O Engine of Zebra 4Sight EV7 Zebra 4Sight EV7 has an Advanced I/O Engine that controls the auxiliary I/O interface. The engine includes 16 timers, 2 quadrature decoders, 2 I/O command lists, 8 auxiliary output signals, and 8 auxiliary input signals. To route auxiliary I/O signals and configure interrupts, use MsysControl(). To inquire this information, use MsysInquire(). For more information on some of these features, refer to Chapter 56: I/O signals and communicating with external devices. Using EtherNet/IP, Modbus, CC-Link, or PROFINET You can use the Gigabit Ethernet ports for communication with external devices using the EtherNet/IP, Modbus (over TCP/IP), CC-Link, or PROFINET industrial protocol. For PROFINET support, you must use the port with access to the Matrox PROFINET Engine (LAN 2); the interface of this engine is recognized as a second network device with its own IP and MAC settings (when the PROFINET service is enabled) even though it shares the same LAN connection. By default, PROFINET is disabled. To enable it, open the MILConfig utility, expand the Communication tab, select the PROFINET page, and add a PROFINET protocol instance; note that instance names are case sensitive. Once the protocol instance is added, the status of the protocol instance should be Ready. If the status is Waiting NIC, there is no cable connected to the Ethernet port. For more information, see the Steps to perform industrial communication section of Chapter 57: Industrial communication. Using Zebra 4Sight EV7 with MIL Using the Advanced I/O Engine of Zebra 4Sight EV7 Using EtherNet/IP, Modbus, CC-Link, or PROFINET ",
      "wordCount": 485,
      "subEntries": []
    },
    {
      "id": "BSN_4sight-ev7_Using_Timers_and_rotary_decoders_with_4SightEV7",
      "version": null,
      "title": "Using timers and rotary decoders with Zebra 4Sight EV7",
      "subTitles": [
        "Timers",
        "Quadrature decoders"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\4sight-ev7\\Using_Timers_and_rotary_decoders_with_4SightEV7.htm",
      "text": " Using timers and rotary decoders with Zebra 4Sight EV7 Zebra 4Sight EV7 has 16 timers and 2 quadrature decoders that can be used to synchronize with external devices. Timers are used with I/O signals to coordinate events with external devices. Quadrature decoders are used to decode quadrature input (2-bit Gray code derived from two signals) from a quadrature encoder. Timers The 16 timers on Zebra 4Sight EV7 can be configured using MsysControl(). The timers are configured in a similar way to what is described in the Timers and coordinating events section of Chapter 56: I/O signals and communicating with external devices. There are some differences, however, such as: A timer arming mechanism can be configured and enabled for each timer. If timer arming is enabled, the timer will ignore its trigger signal (MsysControl() with M_TIMER_TRIGGER_SOURCE) until a signal transition, specified using MsysControl() with M_TIMER_ARM_ACTIVATION, occurs on the signal specified using MsysControl() with M_TIMER_ARM_SOURCE. To enable timer arming, use MsysControl() with M_TIMER_ARM. The clock source can be specified for both the delay portion and duration portion of the timer output signal. For example, a rotary decoder output signal can be used to set the delay between the timer trigger and the active portion of the timer's output signal, and the unit's clock generator can be used to set the duration of the active portion of the timer's output signal. The timer can measure the duration of a pulse on a signal. To enable this functionality, use MsysControl() with M_TIMER_USAGE set to M_PULSE_MEASUREMENT. When a timer is set in this mode, the duration of pulses that occur on the timer's trigger source (M_TIMER_TRIGGER_SOURCE) are measured with respect to the clock source for the active portion of the timer (M_TIMER_CLOCK_SOURCE). To measure active-high pulses, set M_TIMER_TRIGGER_ACTIVATION to M_LEVEL_HIGH; to measure active-low pulses, set M_TIMER_TRIGGER_ACTIVATION to M_LEVEL_LOW. The measured value can be inquired using MsysInquire() with M_TIMER_VALUE. Note that when in this mode, the timer's output always remains low, and the values set using M_TIMER_DELAY_CLOCK_SOURCE, M_TIMER_DELAY, and M_TIMER_DURATION are ignored. Quadrature decoders The two quadrature decoders on Zebra 4Sight EV7 can be configured using MsysControl() with M_ROTARY_ENCODER_.... The quadrature decoders are configured in a similar way to what is described in the Using quadrature input from a rotary encoder section of Chapter 56: I/O signals and communicating with external devices. However, the following settings are unavailable when using Zebra 4Sight EV7: setting the direction of movement (M_ROTARY_ENCODER_DIRECTION), setting a signal source that changes the rotary decoder counter value (M_ROTARY_ENCODER_FORCE_VALUE_SOURCE), setting whether to enable the rotary decoder to store the counter value at the end of the last grab or frame interrupt (M_ROTARY_ENCODER_FRAME_END_READ), and setting a multiplying factor to each increment/decrement of the rotary decoder counter (M_ROTARY_ENCODER_MULTIPLIER). There are two data latches associated with the rotary decoders on Zebra 4sight EV7. You can store the counter value of a rotary decoder in either of these data latches whenever a signal is received from a timer or auxiliary I/O, using MsysControl() with settings from the table For controlling the settings of a data latch associated with rotary encoders. You can retrieve the stored value within a hook function (hooked using MsysHookFunction()) using MsysGetHookInfo() with M_SYS_DATA_LATCH_VALUE. Note that the function must be hooked to the same type of event that triggers the latch. For example, if the latch is triggered by a timer (M_SYS_DATA_LATCH_TRIGGER_SOURCE with M_TIMERn), the hook function must be hooked to a timer event (M_TIMER_START or M_TIMER_END). Using timers and rotary decoders with Zebra 4Sight EV7 Timers Quadrature decoders ",
      "wordCount": 586,
      "subEntries": []
    },
    {
      "id": "BSN_4sight-ev7_4SightEV7_connectors_and_signal_names",
      "version": null,
      "title": "Zebra 4Sight EV7 connectors and signal names",
      "subTitles": [
        "Board connectors",
        "Signal names and their matching MIL constants"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\4sight-ev7\\4SightEV7_connectors_and_signal_names.htm",
      "text": " Zebra 4Sight EV7 connectors and signal names This section serves as a reference to match Zebra 4Sight EV7's connectors and auxiliary signals with MIL information, such as MIL auxiliary signal numbers. Only those auxiliary signals that have matching MIL information are included in this section. To set/inquire all the settings for this computer's auxiliary signals, use MsysControl() / MsysInquire(). For information on other connectors and a comprehensive list of all available input and output signals, refer to the computer's installation and hardware reference manual. Board connectors Only the following connector has auxiliary signals with matching MIL information. Connector Name Image Description Auxiliary I/O terminal block connector The auxiliary I/O interface connector is a terminal block connector. It is composed of 8 isolated auxiliary output signals and 8 isolated auxiliary input signals. These auxiliary signals can be used to send and receive digital control signals to and from external devices, respectively. Signal names and their matching MIL constants The table below lists the auxiliary signals with their associated MIL information. Sort by: MIL I/O information Connector and pin Hardware manual signal name Filter by: Show all Direction: input Direction: output Direction: input/output Timers Triggers Tables: Expanded Collapsed System Description MIL I/O # Pin information Direction User-bit information Trigger information Timer information Hardware manual signal name System 1 Indicates the following. MIL I/O #: M_AUX_IO0 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 1+ Direction Output User-bit information MIL user-bit #: M_USER_BIT0; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT1 MIL I/O #: M_AUX_IO1 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 2+ Direction Output User-bit information MIL user-bit #: M_USER_BIT1; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT2 MIL I/O #: M_AUX_IO2 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 3+ Direction Output User-bit information MIL user-bit #: M_USER_BIT2; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT3 MIL I/O #: M_AUX_IO3 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 4+ Direction Output User-bit information MIL user-bit #: M_USER_BIT3; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT4 MIL I/O #: M_AUX_IO4 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 5+ Direction Output User-bit information MIL user-bit #: M_USER_BIT4; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT5 MIL I/O #: M_AUX_IO5 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 6+ Direction Output User-bit information MIL user-bit #: M_USER_BIT5; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT6 MIL I/O #: M_AUX_IO6 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 7+ Direction Output User-bit information MIL user-bit #: M_USER_BIT6; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT7 MIL I/O #: M_AUX_IO7 Industrial auxiliary signal (output), which supports: user output, timer output, and outputting the state of an I/O command register bit. Pin information Connector: Terminal block (Output)&nbsp;Pin: 8+ Direction Output User-bit information MIL user-bit #: M_USER_BIT7; Timer information Timer: M_TIMERn 2 Hardware manual signal name AUX_ISOIND_OUT8 MIL I/O #: M_AUX_IO8 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 1+ Direction Input Hardware manual signal name AUX_ISOIND_IN1 MIL I/O #: M_AUX_IO9 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 2+ Direction Input Hardware manual signal name AUX_ISOIND_IN2 MIL I/O #: M_AUX_IO10 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 3+ Direction Input Hardware manual signal name AUX_ISOIND_IN3 MIL I/O #: M_AUX_IO11 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 4+ Direction Input Hardware manual signal name AUX_ISOIND_IN4 MIL I/O #: M_AUX_IO12 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 5+ Direction Input Hardware manual signal name AUX_ISOIND_IN5 MIL I/O #: M_AUX_IO13 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 6+ Direction Input Hardware manual signal name AUX_ISOIND_IN6 MIL I/O #: M_AUX_IO14 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 7+ Direction Input Hardware manual signal name AUX_ISOIND_IN7 MIL I/O #: M_AUX_IO15 Industrial auxiliary signal (input), which supports: user input or quadrature input. Pin information Connector: Terminal block (Input)&nbsp;Pin: 8+ Direction Input Hardware manual signal name AUX_ISOIND_IN8 expandTable(\"mil_io_information_show_all\"); 1 The digitizer device number is not applicable for Zebra 4Sight EV7. 2 Where n is a value between 1 and 16. Zebra 4Sight EV7 connectors and signal names Board connectors Signal names and their matching MIL constants ",
      "wordCount": 884,
      "subEntries": []
    },
    {
      "id": "BSN_4sight-ev7_4SightEV7_board_flow_diagram",
      "version": null,
      "title": "Zebra 4Sight EV7 data flow diagram",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\4sight-ev7\\4SightEV7_board_flow_diagram.htm",
      "text": " Zebra 4Sight EV7 data flow diagram The following diagram illustrates the data flow of a Zebra 4Sight EV7 unit. Zebra 4Sight EV7 data flow diagram ",
      "wordCount": 27,
      "subEntries": []
    }
  ]
}]