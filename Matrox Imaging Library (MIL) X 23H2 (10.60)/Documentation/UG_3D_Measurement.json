[{
  "id": "UG_3D_Measurement",
  "version": "2024020714",
  "title": "3D measurement",
  "subTitles": null,
  "location": "MIL UG P05: 3D processing and analysis",
  "pageURL": "content\\UserGuide\\3D_Measurement\\ChapterInformation.htm",
  "text": " Chapter 38: 3D measurement This chapter describes how to use the 3D Measurement module to find markers in a depth map and fit a geometry to found markers. MIL 3D Measurement module Steps to finding markers Basic concepts for the MIL 3D Measurement module Types of 3D measurement contexts Path 3D measurement context Template 3D measurement context Profile 3D measurement context Fit 3D measurement context Extracting profiles Number of profiles Profile length Relative profile position Extended search Thickness Sampling distance, interpolation mode, minimum valid percentage, and accumulation type Finding markers Minimum strength Minimum strength variation Transition type Polarity Invalid position Expected number of markers Selection policy Relative position Retrieving and drawing results Possible results Find marker results Fit results Drawing results 3D measurement example ",
  "wordCount": 126,
  "subEntries": [
    {
      "id": "UG_3D_Measurement_3D_Measurement_overview",
      "version": null,
      "title": "MIL 3D Measurement module",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\3D_Measurement_overview.htm",
      "text": " MIL 3D Measurement module The MIL 3D Measurement module allows you to find markers in a depth map and to fit a geometry to found markers. Markers denote the location of transitions along a profile. Edge transitions go from a lower Z-value to a higher Z-value (or vice versa). Note that invalid transitions can also be identified, either in the middle of an invalid region, or where the data goes from valid to invalid (or vice versa). The 3D Measurement module allows you to search for markers in each row (profile) of a depth map (useful for analyzing the entire depth map), in a profile extracted from a depth map along a path (useful for finding an object when you don't know its exact location), or in profiles extracted from a depth map at regular intervals perpendicular to a template (useful for verifying the location or shape of an object). Note that the 3D Measurement module can only fit a geometry to markers found in a template's perpendicular profiles. To help locate the marker in a depth map, you can define its essential characteristics, such as the required polarity and location. The more precisely you define the characteristics of a marker, the more likely MIL can distinguish it from other similar (though unwanted) aspects of the depth map. The module also allows you to restore a 3D measurement context from a file or memory stream, or to save a 3D measurement context to a file or memory stream. MIL 3D Measurement module ",
      "wordCount": 254,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_Steps_to_finding_markers",
      "version": null,
      "title": "Steps to finding markers",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\Steps_to_finding_markers.htm",
      "text": " Steps to finding markers The following steps provide a basic methodology for using the 3D Measurement module: Allocate a profile, path, or template 3D measurement context, using M3dmeasAlloc() with M_FIND_MARKER_PROFILE_CONTEXT, M_FIND_MARKER_PATH_CONTEXT, or M_FIND_MARKER_TEMPLATE_CONTEXT. If using a template 3D measurement context, you can also allocate a fit 3D measurement context, using M3dmeasAlloc() with M_FIT_CONTEXT, to fit a geometry after finding the markers. Allocate a profile, path, or template 3D measurement result buffer, using M3dmeasAllocResult() with M_FIND_MARKER_PROFILE_RESULT, M_FIND_MARKER_PATH_RESULT, or M_FIND_MARKER_TEMPLATE_RESULT. If using a path or template 3D measurement context, allocate a 3D geometry object, using M3dgeoAlloc() with M_GEOMETRY. Then, define and add the path or template to the path or template 3D measurement context, using M3dmeasDefine(). Specify your required settings, such as profile extraction settings, if required, and essential marker characteristics, using M3dmeasControl(). Search for markers, using M3dmeasFindMarker(). If using a template 3D measurement context, you can fit a geometry to the found markers, using M3dmeasFit(). Alternatively, you can find the markers from the template's perpendicular profiles and perform the fit simultaneously, using M3dmeasFit() with a template 3D measurement context and a depth map. Retrieve the required results from the 3D measurement result buffer, using M3dmeasGetResult(). If required, copy results from the path or template 3D measurement result buffer into a 3D geometry object, container, or image buffer, using M3dmeasCopyResult(). If required, use M3dmeasDraw() to draw extracted features from the 3D measurement context or result buffer into an image buffer or 2D graphics list. To draw extracted features into a 3D graphics list, perform the following: Allocate a draw profile, path, or template 3D measurement analysis context, using M3dmeasAlloc() with M_DRAW_3D_PROFILE_CONTEXT, M_DRAW_3D_PATH_CONTEXT, or M_DRAW_3D_TEMPLATE_CONTEXT, to hold the settings for the draw. Note that you can skip this step and use a default context instead. Specify the draw operations and options for the draw, using M3dmeasControlDraw(). Draw the features, using M3dmeasDraw3d(). If required, save your 3D measurement context, using M3dmeasSave() or M3dmeasStream(). Free all your allocated objects, using M3dmeasFree(), unless M_UNIQUE_ID was specified during allocation. Steps to finding markers ",
      "wordCount": 338,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_Basic_concepts",
      "version": null,
      "title": "Basic concepts for the MIL 3D Measurement module",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\Basic_concepts.htm",
      "text": " Basic concepts for the MIL 3D Measurement module The basic concepts and vocabulary conventions for the MIL 3D Measurement module are: Depth map. An image where the gray value of a pixel represents its depth in the world, or a container where the range component stores depth values with X and Y-coordinates identified by column and row index, respectively. Edge transition. A transition from a lower Z-value to a higher Z-value, or vice versa. Gap. An invalid region in the profile resulting from missing data in the source depth map. Invalid transition. A transition from valid data to invalid data, or vice versa. Marker. Identifies the location of a transition along a profile. The MIL 3D Measurement module allows you to search for edge transitions and invalid transitions. Path. The route along which to find transitions. Profile. A representation of the depth information in a cross-section of data. Template. Represents the location of an expected edge in a depth map. Basic concepts for the MIL 3D Measurement module ",
      "wordCount": 170,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_Types_of_3D_measurement_contexts",
      "version": null,
      "title": "Types of 3D measurement contexts",
      "subTitles": [
        "Path 3D measurement context",
        "Template 3D measurement context",
        "Profile 3D measurement context",
        "Fit 3D measurement context"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\Types_of_3D_measurement_contexts.htm",
      "text": " Types of 3D measurement contexts Using M3dmeasAlloc(), you can allocate one of three types of 3D measurement contexts to find markers: a path 3D measurement context (M_FIND_MARKER_PATH_CONTEXT), a template 3D measurement context (M_FIND_MARKER_TEMPLATE_CONTEXT), or a profile 3D measurement context (M_FIND_MARKER_PROFILE_CONTEXT). You can also allocate a fit 3D measurement context (M_FIT_CONTEXT) to fit a 3D geometry to markers found in a template's perpendicular profiles. Path 3D measurement context You can use a path 3D measurement context to find a specified number of markers along a path. This type of context is useful when you want to find an object but you don't know its exact location. You must provide the path along which to extract a profile, using M3dmeasDefine() with a line geometry object. The path should cross through the possible locations of your object. After extracting the profile along the path, the 3D Measurement module will find the specified number of markers in the profile. Template 3D measurement context You can use a template 3D measurement context to find the markers that can form the specified template. A template represents the location of an expected edge in the depth map. This type of context is useful when you want to verify the location or shape of an object. For example, if you want to verify that the edge of an object is at a particular location and angle, you can use a template 3D measurement context and define a template with the expected pose, using M3dmeasDefine() with a line geometry object. The 3D Measurement module will extract profiles at regular intervals perpendicular to the template and find a single marker in each profile. You will then be able to fit a 3D geometry to the found markers. See the Fit 3D measurement context subsection of this section for more information. Profile 3D measurement context You can use a profile 3D measurement context to find markers in each row of a depth map, where each row is interpreted as a single profile. The 3D Measurement module can find the specified number of markers along each profile. This type of context is useful when you want to analyze the entire depth map. A profile 3D measurement context contains a default template. The default template in a profile 3D measurement context is different from an explicitly defined template in a template 3D measurement context. The default template is inherent to the supplied profiles, such that it is the theoretical template that would result in these profiles. Note that if you need to fit a geometry to the found markers to compare their location to that of the template, you must use a template 3D measurement context. Fit 3D measurement context You can use a fit 3D measurement context to fit a 3D geometry to markers found in a template's perpendicular profiles. After finding the markers, using M3dmeasFindMarker() with a template 3D measurement context, you can fit a 3D geometry to them, using M3dmeasFit(). Note that you can also use M3dmeasFit() to find the markers and perform the fit simultaneously, in which case, all possible markers are extracted and the one in each profile that provides the best fit is kept. You can then use M3dmeasGetResult() to retrieve information about the fitted 3D geometry and compare it to the defined template. Types of 3D measurement contexts Path 3D measurement context Template 3D measurement context Profile 3D measurement context Fit 3D measurement context ",
      "wordCount": 570,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_Extracting_profiles",
      "version": null,
      "title": "Extracting profiles",
      "subTitles": [
        "Number of profiles",
        "Profile length",
        "Relative profile position",
        "Extended search",
        "Thickness",
        "Sampling distance, interpolation mode, minimum valid percentage, and accumulation type"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\Extracting_profiles.htm",
      "text": " Extracting profiles The 3D Measurement module analyzes profiles to find markers. If you are finding markers using a profile 3D measurement context, each row of the depth map is interpreted as a single profile. If you are finding markers using a path or template 3D measurement context, the profiles must be extracted along a path or perpendicular to a template before the search. This section describes the various settings that you can use to customize how the profiles are generated. After allocating a path or template 3D measurement context using M3dmeasAlloc(), you must add a path or template to it, respectively, using M3dmeasDefine(). Most of the settings available when defining the path or template can be adjusted later using M3dmeasControl(). Note that you cannot add a path or template to a profile 3D measurement context. The profiles in a profile 3D measurement context have a corresponding default template that cannot be defined nor deleted. Number of profiles When using a path 3D measurement context, a single profile is extracted along the path. When using a template 3D measurement context, you can customize how many profiles to extract perpendicular to the template. For a template 3D measurement context, you can specify the mode with which to set the number of profiles, using the NumberMode parameter in M3dmeasDefine(). To explicitly define the number of profiles, you can set this parameter to M_USER_DEFINED and specify the number of profiles to extract using the NumberValue parameter. The specified number of profiles are evenly distributed perpendicular to the template. If you do not know how many profiles are needed, the number of profiles can be based on how many profiles fit with a required spacing between them. You must set the NumberMode parameter to M_SPACING and then specify the required spacing between the profiles using M3dmeasControl() with M_TEMPLATE_PROFILE_SPACING. Note that you must also set whether to interpret the specified spacing value as an absolute value or relative to a pixel size, using M_TEMPLATE_PROFILE_SPACING_MODE. Note that the mode used to determine the number of profiles and the precise number of profiles can be later adjusted using M3dmeasControl() with M_TEMPLATE_PROFILE_NUMBER_MODE and M_TEMPLATE_PROFILE_NUMBER_VALUE, respectively. Profile length When using a template 3D measurement context, you can customize the profile length. The length of a profile in a template 3D measurement context is defined by its nominal length plus its margin. Note that you cannot customize the length of the profile when using a path 3D measurement context because the length of the profile is equivalent to the length of the path. For a template 3D measurement context, you should set the nominal length large enough to include the expected position variation of the marker. Typically, the nominal length should be the same for all of the template's perpendicular profiles. In this case, you should set the M3dmeasDefine() LengthSource parameter to M_TEMPLATE and specify a global nominal profile length by passing a single value to the ParamArrayPtr parameter. If the same nominal length does not work for all of the template's perpendicular profiles (for example, there are areas where another object could interfere, and some profiles need to be shorter than others to exclude it), you can set the LengthSource parameter to M_PROFILE and specify the nominal length of each individual profile by passing an array of values to the ParamArrayPtr parameter. Note that you must know the exact number of profiles to specify the length of each profile (NumberMode must be set to M_USER_DEFINED). Alternatively, you can set a global nominal profile length that works for most profiles, using the method described in the preceding paragraph, or using M3dmeasControl() with M_TEMPLATE_PROFILE_LENGTH, and then set custom nominal lengths for specific profiles using M3dmeasControl() with M_TEMPLATE_PROFILE_LENGTH. In this case, for each profile that you specify a custom nominal length, you must set M_TEMPLATE_PROFILE_LENGTH_SOURCE to M_PROFILE to use it. In the example below, the global nominal profile length value is 10 and the nominal length value of the third profile is 20. Note that when you specify a nominal length, you must also specify the mode with which to interpret it, using the M3dmeasDefine() LengthMode parameter or M3dmeasControl() with M_TEMPLATE_PROFILE_LENGTH_MODE. For example, you can specify to interpret the specified nominal length value as an absolute value or relative to a pixel size. In the example above, M_TEMPLATE_PROFILE_LENGTH_MODE is set to M_RELATIVE_TO_PIXEL_SIZE_MIN (default), so the specified nominal profile length values are multiplied by the minimum pixel size. If you want to return a transition even when it is outside the expected range of positions, you can add a margin to the length, using M3dmeasControl() with M_TEMPLATE_PROFILE_LENGTH_MARGIN. Specify the margin as a percentage of the nominal length. You can set a global margin for the template's perpendicular profiles and, if necessary, you can set custom margins for specific profiles. For each profile in which you specify a custom margin, you must set M_TEMPLATE_PROFILE_LENGTH_MARGIN_SOURCE to M_PROFILE to use it. Relative profile position When using a template 3D measurement context, you can also customize the position of the profiles, relative to the template. For example, if there is another object to the left of the template that could interfere, you can move the profiles toward the right of the template to exclude it. You can set the relative position of a profile using M3dmeasControl() with M_TEMPLATE_PROFILE_POSITION_RELATIVE. Specify the relative position as a percentage of the profile's nominal length. When the relative position is 0% (default), the center of the profile touches the template. If you specify a value of -50%, the profile is moved forwards, such that the end of its nominal length touches the template, and if you specify a value of 50%, the profile is moved backwards, such that the start of its nominal length touches the template. You can set a global relative position for the template's perpendicular profiles and, if necessary, you can set custom relative positions for specific profiles. For each profile in which you specify a custom relative position, you must set M_TEMPLATE_PROFILE_POSITION_SOURCE to M_PROFILE to use it. The example above illustrates the profile positions when M_TEMPLATE_PROFILE_POSITION_RELATIVE is set to 0% (top) and -40% (bottom). Extended search When using a template 3D measurement context, you can set whether to extend the search outside of the template's defined area, using M3dmeasControl() with M_TEMPLATE_EXTENDED_SEARCH. By default, extended search is enabled. You can set M_TEMPLATE_EXTENDED_SEARCH to M_DISABLE to constrain the profile extraction so that it does not use data beyond the limits of the template. The profiles will be distributed such that no profile region extends past the start or end point of the template. If the number of profiles is set with an explicit value, the number of profiles remains the same, but the spacing between them decreases. If the number of profiles is dependent on the spacing, the number of profiles can decrease depending on the maximum number of profiles whose region fits within the template while respecting the spacing between them. The example above illustrates the profile regions perpendicular to a template when M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING and M_TEMPLATE_EXTENDED_SEARCH is set to M_ENABLE (top) and M_DISABLE (bottom). Thickness The thickness of the profile line determines the size of the profile region. Use M3dmeasControl() with M_PROFILE_THICKNESS to set the thickness value. You can use M_PROFILE_THICKNESS_MODE to specify whether to interpret the specified thickness as an absolute value or whether to multiply it by a pixel size or by the spacing between profiles. For example, if you want don't want gaps between the profile regions, you can set M_PROFILE_THICKNESS to 1 and set M_PROFILE_THICKNESS_MODE to M_RELATIVE_TO_SPACING. Pixels along the profile line, within the specified thickness, are sampled and corresponding points are considered for the profile. See the Sampling distance, interpolation mode, minimum valid percentage, and accumulation type subsection of this section for more information. The example above illustrates the resulting profile regions when M_PROFILE_THICKNESS is set to 1 and M_PROFILE_THICKNESS_MODE is set to M_RELATIVE_TO_SPACING (top), and when M_PROFILE_THICKNESS is set to 25 and M_PROFILE_THICKNESS_MODE is set to M_RELATIVE_TO_PIXEL_SIZE_MIN (bottom). Sampling distance, interpolation mode, minimum valid percentage, and accumulation type When extracting the profile along the path or the profiles at regular intervals perpendicular to the template, you can use M3dmeasControl() with M_PROFILE_SAMPLE_SIZE and M_PROFILE_SAMPLE_SIZE_MODE to set the sampling distance used to extract consecutive profile points along the profile line. The sampling distance determines where each profile point will be extracted from the depth map. The points within the thickness of the profile line at each of these positions are considered a sample, and a single profile point is calculated from the points in each sample. You can use M_PROFILE_INTERPOLATION_MODE to specify the interpolation mode used to calculate the value for each point in the sample. Use M_PROFILE_MIN_VALID_PERCENTAGE to set the minimum percentage of points in a sample that must be valid to set the corresponding profile point to a valid value, and use M_PROFILE_ACCUMULATE_TYPE to specify whether to take the minimum, maximum, or mean value of the points in the sample to create the profile point when the minimum valid percentage is met. These concepts are shown in the image below. The image above illustrates the extracted profile when M_PROFILE_SAMPLE_SIZE is set to 2, M_PROFILE_SAMPLE_SIZE_MODE is set to M_RELATIVE_TO_PIXEL_SIZE_X, M_PROFILE_THICKNESS is set to 5, M_PROFILE_THICKNESS_MODE is set to M_RELATIVE_TO_PIXEL_SIZE_Y, M_PROFILE_INTERPOLATION_MODE is set to M_NEAREST_NEIGHBOR, M_PROFILE_MIN_VALID_PERCENTAGE is set to 50%, and M_PROFILE_ACCUMULATE_TYPE is set to M_MEAN. Extracting profiles Number of profiles Profile length Relative profile position Extended search Thickness Sampling distance, interpolation mode, minimum valid percentage, and accumulation type ",
      "wordCount": 1579,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_Finding_markers",
      "version": null,
      "title": "Finding markers",
      "subTitles": [
        "Minimum strength",
        "Minimum strength variation",
        "Transition type",
        "Polarity",
        "Invalid position",
        "Expected number of markers",
        "Selection policy",
        "Relative position"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\Finding_markers.htm",
      "text": " Finding markers You can search for markers in a depth map using M3dmeasFindMarker() or M3dmeasFit(). Markers denote the location of transitions along a profile. With successive calls to M3dmeasControl(), you can specify the characteristics of the markers you want to find. MIL can only find a marker if it meets all the specified characteristics. Minimum strength MIL establishes the strength of transitions by taking the normalized first derivative of the profile. When you draw the strengths of the transition at each profile point, the graph generally resembles a peak when a valid transition is present. The minimum strength is a type of threshold characteristic that you can set to represent the strength above which a Z-value variation can be considered a valid transition signifying a marker. Any Z-value variation in the profile response that does not meet the specified minimum strength is therefore discarded when MIL is searching for the marker. Although the default minimum strength is typically sufficient, you can change it using M3dmeasControl() with M_MARKER_STRENGTH_MIN. MIL finds the highest peak among those for which the profile response rises above and then falls below the minimum strength on both sides. By default, only one possible transition is established from each interval above the specified minimum strength. Minimum strength variation When searching for multiple transitions, some advanced applications might also need you to specify the minimum prominence required for a peak for it to be considered a transition signifying a marker, using M3dmeasControl() with M_MARKER_STRENGTH_MIN_VAR. For example, in the image above, you can see that M_MARKER_STRENGTH_MIN does not give you enough control to establish 3 transitions. A peak's prominence is the strength difference between the summit of the peak and the dip that connects it to a higher peak. To determine if the minimum prominence is met, MIL establishes a local threshold for each peak in the profile response by subtracting M_MARKER_STRENGTH_MIN_VAR from the strength of each peak's summit. The portion of the profile response above the local threshold that contains the peak can be referred to as the peak's interval, provided that the profile response eventually dips below the local threshold on both sides of its peak. For MIL to consider a peak to be a valid transition, there must be no strength greater than that peak's summit within its interval. If the local threshold calculated with M_MARKER_STRENGTH_MIN_VAR is less than M_MARKER_STRENGTH_MIN, the local threshold equals M_MARKER_STRENGTH_MIN. Transition type You can use M3dmeasControl() with M_MARKER_TRANSITION to specify whether to search for edge transitions, invalid transitions, or both. You should set M_MARKER_TRANSITION to M_EDGE to identify height changes along the profile. Edge transitions go from a lower Z-value to a higher Z-value, or vice versa, depending on the specified polarity (M_MARKER_POLARITY). See the Polarity subsection of this section for more information. You should set M_MARKER_TRANSITION to M_INVALID to identify invalid regions along the profile. Invalid regions in a profile result from missing data in the source depth map due to occlusion, reflections, or areas out of the camera's field of view. You can specify where to identify an invalid transition relative to the invalid region, using M_MARKER_POSITION_INVALID. See the Invalid position subsection of this section for more information. Note that you can set M_MARKER_TRANSITION to M_EDGE_OR_INVALID to find both edge transitions and invalid transitions. Polarity The polarity of an edge transition describes whether it is rising or falling, relative to the direction of the search along the profile. A rising edge denotes an increase in Z-value and a positive polarity, while a falling edge denotes a decrease in Z-value and a negative polarity. Use M_MARKER_POLARITY to specify that the polarity of the edge transition must be positive (M_POSITIVE) or negative (M_NEGATIVE). You can also specify that the edge transition can have any polarity (M_ANY), in which case MIL does not consider polarity when trying to find the marker. The example above illustrates the different markers found in each row (profile) of a depth map when M_MARKER_POLARITY is set to M_POSITIVE (top) and M_NEGATIVE (bottom). Invalid position When searching for invalid transitions, you should use M3dmeasControl() with M_MARKER_POSITION_INVALID to specify where to identify a transition when an invalid region is encountered in the profile. You can specify to identify a transition before and/or after the invalid region, or in the middle of the invalid region. Expected number of markers You can set the expected number of markers to find in the profile, using M3dmeasControl() with M_MARKER_NUMBER. The default value is 1. To find all markers, set M_MARKER_NUMBER to M_ALL. Note that this control type is only available when using a profile or path 3D measurement context. When using a template 3D measurement context, the find marker operation always looks for 1 marker in each perpendicular profile of the template. If the number of candidates is greater than the expected number of markers, the candidates are filtered out based on their location, strength, or depth, depending on the selection policy chosen (M_MARKER_SELECTION). See the Selection policy subsection of this section for more information. Selection policy MIL can only find a maximum of M_MARKER_NUMBER markers in a profile. If the number of candidates that meet the specified characteristics is greater than M_MARKER_NUMBER, the candidates are ranked according to a selection policy. Only the top candidates are returned as found markers. You can use M3dmeasControl() with M_MARKER_SELECTION to set the selection policy. You can choose to return only the specified number of markers that are the strongest or tallest, or closest to the profile's origin, the end of the profile, or the specified relative position (M_MARKER_POSITION_RELATIVE). Note that when using M3dmeasFit() to find markers and perform the fit simultaneously, you can choose to return the marker in each profile that would result in the best fit possible, by setting M_MARKER_SELECTION to M_BEST_FIT. The example above illustrates the different markers found in each row (profile) of a depth map when M_MARKER_NUMBER is set to 1 and M_MARKER_SELECTION is set to M_POSITION_FIRST (top) and M_POSITION_LAST (bottom). Relative position When the number of candidates is greater than M_MARKER_NUMBER and the specified selection policy is M_POSITION_RELATIVE, markers are returned based on their proximity to a specified relative position. You can set the relative position using M3dmeasControl() with M_MARKER_POSITION_RELATIVE. Specify the position as a percentage of the profile length. For example, if the profile is 10 mm in length and you set M_MARKER_POSITION_RELATIVE to 60%, the relative position is 6 mm from the start of the profile. In this case, if M_MARKER_NUMBER is set to M_POSITION_RELATIVE, M_MARKER_NUMBER is set to 1, and there are marker candidates 2 mm from the start of the profile and 4 mm from the start of the profile, only the latter candidate is returned as a found marker since it is closer to the relative position. Note that the specified relative position is also used when calculating the M3dmeasGetResult() M_OFFSET result type. Finding markers Minimum strength Minimum strength variation Transition type Polarity Invalid position Expected number of markers Selection policy Relative position ",
      "wordCount": 1160,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_Retrieving_and_drawing_results",
      "version": null,
      "title": "Retrieving and drawing results",
      "subTitles": [
        "Possible results",
        "Find marker results",
        "Fit results",
        "Drawing results"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\Retrieving_and_drawing_results.htm",
      "text": " Retrieving and drawing results After successfully performing an M3dmeasFindMarker() or M3dmeasFit() operation, you can retrieve the required results from your 3D measurement result buffer using M3dmeasGetResult(). You can also copy certain results using M3dmeasCopyResult(). Possible results You can retrieve several types of results with the 3D Measurement module. These results provide considerable information about the find marker and fit operations. Find marker results For find marker operations, you can retrieve numerous details about the markers/transitions found and the profiles analyzed, as well as general information. After a successful find marker operation, you can retrieve the following results about a marker or marker transition, using M3dmeasGetResult(): The maximum and minimum Z-values of the marker or transition (M_MAX_Z and M_MIN_Z). The difference between the maximum and minimum Z-values of the marker or transition (M_DEPTH). Whether the marker was inside or outside the fit (M_FIT_INLIER_STATUS). The position of the marker or transition (M_POSITION_...). The offset (M_OFFSET) of the marker or transition from a specified relative position (M3dmeasControl() with M_MARKER_POSITION_RELATIVE). The polarity of the transition (M_POLARITY). The strength of the marker or transition (M_STRENGTH). The strength considers the Z-value variation and slope of the transition. The type of transition (M_TRANSITION). A transition is either an edge transition or an invalid transition. You can retrieve the following information about a profile, using M3dmeasGetResult(): The response of the profile after applying a filter (M_PROFILE_RESPONSE). The size in X of the profile response (M_RESULT_SIZE_X). This corresponds to the number of profile points. The number of markers found in the profile (M_NUMBER_MARKER). You can also retrieve the following general results, using M3dmeasGetResult(): Whether the find marker operation was successful, or why the find marker operation failed (M_STATUS_FIND). The number of profiles analyzed (M_NUMBER_PROFILE). The sampling distance between profile points (M_PROFILE_SAMPLE_SIZE). Fit results For an M3dmeasFit() operation, you can retrieve numerous details about the fitted 3D geometry and differences between the fitted 3D geometry and template, as well as general information. After a successful fit operation, you can retrieve the following results about a fitted 3D geometry, using M3dmeasGetResult(): The components of the fitted 3D geometry's unit vector (M_AXIS_...). The center point of the fitted 3D geometry (M_CENTER_...). The start and end point of the fitted 3D geometry (M_START_POINT_... and M_END_POINT_..., respectively). You can retrieve the following information to compare the fitted 3D geometry to the defined template, using M3dmeasGetResult(): The angle between the fitted 3D geometry and the template (M_ANGULARITY). The distance between the center of the fitted 3D geometry and the template (M_CENTER_DISTANCE). The maximum distance between the fitted 3D geometry and the template (M_DISTANCE_MAX). You can also retrieve the following information about the fit operation itself, using M3dmeasGetResult(): The root-mean-squared (RMS) error for the fit (M_FIT_RMS_ERROR). The number of markers used for the fit (M_NUMBER_MARKER_FITTED) and the number of marker outliers (M_NUMBER_MARKER_OUTLIERS). Whether the fit operation was successful, or why the fit operation failed (M_STATUS_FIT). To obtain the fitted 3D geometry itself, copy it into a 3D geometry object using M3dmeasCopyResult(): Drawing results The M3dmeasDraw() function provides several operations for drawing results in any specified image buffer or 2D graphics list. You can also choose to draw in the display's overlay buffer. By drawing into the display's overlay buffer, you can annotate an image non-destructively (see the Annotating the displayed image non-destructively section of Chapter 25: Displaying an image). You can use a previously allocated 2D graphics context (see Chapter 26: Generating graphics) to control the drawing color, or use the default 2D graphics context (M_DEFAULT). Supported drawing operations include drawing the path or template, the profile region or direction of the search along the profile, a cross at the found marker or transition positions, a cross at the positions of the markers that were used for fit or the positions of the marker outliers, or the fitted 3D geometry. The M3dmeasDraw3d() function provides several operations for drawing results into a 3D graphics list. You can draw: A cross at the found marker's position. A step at the found marker's transition position. The extracted points that form the profile. The profile region. The profile response. The defined path or template, or the fitted 3D geometry. The projection of the defined path or template, or of the fitted 3D geometry. You can also specify how to draw the above graphics with successive calls to M3dmeasControlDraw(). For example, you can set the color and thickness for each type of drawn graphic. You can also specify to draw it as a solid, a wireframe, or as points. For a complete description of all possible options for the draw, refer to the description of M3dmeasControlDraw() in the MIL Reference. To perform a 3D draw operation, you typically allocate a draw 3D measurement context to hold the settings for the draw, using M3dmeasAlloc() with M_DRAW_3D_PROFILE_CONTEXT, M_DRAW_3D_PATH_CONTEXT, or M_DRAW_3D_TEMPLATE_CONTEXT. You then specify draw operations and options for the draw with successive calls to M3dmeasControlDraw(). Finally, you call M3dmeasDraw3d() to perform the draw. Alternatively, you can skip allocating a draw 3D measurement context and instead use a predefined draw 3D measurement context with default draw settings. To do so, directly call M3dmeasDraw3d() with M_DEFAULT. Retrieving and drawing results Possible results Find marker results Fit results Drawing results ",
      "wordCount": 866,
      "subEntries": []
    },
    {
      "id": "UG_3D_Measurement_3D_Measurement_example",
      "version": null,
      "title": "3D measurement example",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Measurement\\3D_Measurement_example.htm",
      "text": " 3D measurement example The following example demonstrates how to find markers in a depth map and fit a geometry to found markers. 3dmeasoverview.cpp To run this example, use the Matrox Example Launcher in the MIL Control Center. The example, 3dMeasOverview.cpp does the following: Finds markers in each row (profile) of a depth map. Extracts a profile along a path and then finds markers in the extracted profile. Extracts profiles at regular intervals perpendicular to a template, finds a marker in each extracted profile, and then fits a geometry to the found markers. 3D measurement example ",
      "wordCount": 97,
      "subEntries": []
    }
  ]
}]