[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_bottlecapandlabelinspection_cpp",
      "version": "2024020714",
      "title": "bottlecapandlabelinspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //***************************************************************************************/ // // File name: BottleCapAndLabelInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program contains an example of bottle inspection using various modules. // See the PrintHeader() function below for detailed description. // // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ExampleManager.h\" // Include the different tasks that can be performed. #include \"CapColorIdentification.h\" #include \"CapScrewInspection_CapAndLabel.h\" #include \"ThreadInspection.h\" #include \"LabelAlignmentInspection.h\" #include \"ReadDatamatrixTask.h\" #include \"ReadStringTask.h\" #include \"ProductTypeIdentification.h\" #include \"HorizontalAlignment.h\" #include \"MeasurementAlignment.h\" #include \"ModelFinderAlignmentTask.h\" #include \"PositionInspection.h\" #include \"SimpleFixture.h\" #include \"Region/RectangleRegion.h\" //**************************************************************************** // Example description. //**************************************************************************** void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"BottleCapAndLabelInspection\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This example shows some basic inspection steps for bottle\\n\") MIL_TEXT(\"caps and labels. The following features will be inspected:\\n\") MIL_TEXT(\" 1. Neck thread metrology\\n\") MIL_TEXT(\" 2. Label and cap, color and alignment\\n\") MIL_TEXT(\" - Verification of the cap screw\\n\") MIL_TEXT(\" - Verification of the cap color\\n\") MIL_TEXT(\" - Verification of label alignment\\n\") MIL_TEXT(\" - Product type identification using label\\n\") MIL_TEXT(\" 3. Lot, expiry date and datamatrix reading\\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: Application, system, graphic, measurement, metrology,\\n\") MIL_TEXT(\" color, model finder\\n\\n\") MIL_TEXT(\"[ADDITIONNAL INSTRUCTIONS]\\n\") MIL_TEXT(\"Left click on an image to view results in a zoomable display.\\n\\n\") MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } //**************************************************************************** // General Constants. //**************************************************************************** #define ARRAY_COUNT(x) (sizeof((x))/sizeof((x)[0])) // for array on the stack only // Root filename. #define EXAMPLE_IMAGE_PATH M_IMAGE_PATH MIL_TEXT(\"BottleCapAndLabelInspection/\") //**************************************************************************** // Product 0 : Pain pills. //**************************************************************************** // Image path #define PRODUCT0_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Product0/\") //***************************************************************************** // Main. //***************************************************************************** int MosMain(void) { // Declare and the tasks associated to each image associated with the product. // Image 0: Neck of the bottle. CModAlignmentTask Prod0View0Alignment (PRODUCT0_PATH MIL_TEXT(\"Thread.mmf\"), M_RED); CThreadInspection Prod0Thread (PRODUCT0_PATH MIL_TEXT(\"CapThreadContext.met\"), M_RED, &amp;Prod0View0Alignment); CInspectionTask* Prod0Image0Tasks[] = { &amp;Prod0View0Alignment, &amp;Prod0Thread }; // Image 1: Front label of the bottle with the cap. CHorizontalAlignment Prod0View1HorzAlignment (PRODUCT0_PATH MIL_TEXT(\"HorizontalAlignmentBottle.mrk\"), M_RED); CSimpleFixture Prod0CapScrewFixture (121, 30, 0, &amp;Prod0View1HorzAlignment); CCapScrewInspection Prod0CapScrew (PRODUCT0_PATH MIL_TEXT(\"CapScrew.mrk\"), 5, 2, M_RED, &amp;Prod0CapScrewFixture); CRectangleRegion Prod0CapColorRegion (M_WORLD, 0, 15, 100, 30, 0, M_CENTER_AND_DIMENSION); static const MIL_INT ExpectedCapMatch[] = { 0 }; CCapColorInspection Prod0CapColor (PRODUCT0_PATH MIL_TEXT(\"CapColorContext.mcol\"), ExpectedCapMatch, M_NONE, &amp;Prod0CapScrew, M_NULL, &amp;Prod0CapColorRegion); CLabelAlignmentInspection Prod0LabelAlignment (PRODUCT0_PATH MIL_TEXT(\"LabelAlignment.mrk\"), 1, 165, 10, M_BLUE, &amp;Prod0View1HorzAlignment); CRectangleRegion Prod0LabelColorRegion (M_WORLD, 120, 156, 226, 312, 0, M_CENTER_AND_DIMENSION); static const MIL_INT ExpectedLabelMatch[] = { 0 }; CProductTypeIdentification Prod0Identification (PRODUCT0_PATH MIL_TEXT(\"ProductIdentification.mcol\"), ExpectedLabelMatch, M_NONE, &amp;Prod0LabelAlignment, M_NULL, &amp;Prod0LabelColorRegion); CInspectionTask* Prod0Image1Tasks[] = { &amp;Prod0View1HorzAlignment, &amp;Prod0CapScrewFixture, &amp;Prod0CapScrew, &amp;Prod0CapColorRegion, &amp;Prod0CapColor, &amp;Prod0LabelAlignment, &amp;Prod0LabelColorRegion, &amp;Prod0Identification }; // Image 2: Part of the label of the object. CMeasAlignment Prod0View2Alignment (PRODUCT0_PATH MIL_TEXT(\"HorizontalAlignmentBottleRead.mrk\"), M_RED); CRectangleRegion Prod0ReadLotRegion (M_WORLD, 62, 180, 220, 40, 90, M_CENTER_AND_DIMENSION); CReadStringTask Prod0ReadLot (PRODUCT0_PATH MIL_TEXT(\"PainPillStrContext.msr\"), M_RED, &amp;Prod0View2Alignment, M_NULL, &amp;Prod0ReadLotRegion); CRectangleRegion Prod0ReadExpiryRegion (M_WORLD, 87, 180, 220, 40, 90, M_CENTER_AND_DIMENSION); CReadStringTask Prod0ReadExpiry (PRODUCT0_PATH MIL_TEXT(\"PainPillStrContext.msr\"), M_RED, &amp;Prod0View2Alignment, M_NULL, &amp;Prod0ReadExpiryRegion); CRectangleRegion Prod0DatamatrixRegion (M_WORLD, 75, 310, 110, 130, 0, M_CENTER_AND_DIMENSION); CReadDatamatrixTask Prod0Datamatrix (PRODUCT0_PATH MIL_TEXT(\"Datamatrix.mco\"), M_RED, &amp;Prod0View2Alignment, M_NULL, &amp;Prod0DatamatrixRegion); CInspectionTask* Prod0Image2Tasks[] = { &amp;Prod0View2Alignment, &amp;Prod0ReadLotRegion, &amp;Prod0ReadLot, &amp;Prod0ReadExpiryRegion, &amp;Prod0ReadExpiry, &amp;Prod0DatamatrixRegion, &amp;Prod0Datamatrix }; // Table of the task associated to each image. SImageTaskList Prod0ImagesTaskList[] = { CREATE_LIST(Prod0Image0Tasks, MIL_TEXT(\"Neck thread metrology\")), CREATE_LIST(Prod0Image1Tasks, MIL_TEXT(\"Label and cap, color and alignment\")), CREATE_LIST(Prod0Image2Tasks, MIL_TEXT(\"Lot and expiry date reading\")) }; // The filenames of the avi files. static MIL_CONST_TEXT_PTR Prod0ImagesAvi[ARRAY_COUNT(Prod0ImagesTaskList)] = { PRODUCT0_PATH MIL_TEXT(\"View0.avi\"), PRODUCT0_PATH MIL_TEXT(\"View1.avi\"), PRODUCT0_PATH MIL_TEXT(\"View2.avi\"), }; //***************************************************************************** // The product info structure that indicates the task and avi to load. SProductInfo ProductsInfoList[] = { { ARRAY_COUNT(Prod0ImagesTaskList), enSequential, Prod0ImagesAvi, Prod0ImagesTaskList } }; //***************************************************************************** // Allocate application. MIL_ID MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_NULL); // Allocate system. MIL_ID MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_NULL); MosPrintf(MIL_TEXT(\"BOTTLE CAP AND LABEL INSPECTION:\\n\")); MosPrintf(MIL_TEXT(\"---------------------------------------\\n\\n\")); // Print the header. PrintHeader(); // Allocate the example manager. CExampleMngr *pExampleManager = new CExampleMngr(MilSystem); // Run the example. pExampleManager-&gt;Run(ProductsInfoList, ARRAY_COUNT(ProductsInfoList)); // Free the example manager. delete pExampleManager; // Free the system. MsysFree(MilSystem); // Free the application. MappFree(MilApplication); return 0; } ",
      "wordCount": 616
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_capcoloridentification_cpp",
      "version": "2024020714",
      "title": "capcoloridentification.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: CapColorIdentification.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CCapColorInspection class // which is the inspection task used to check if the cap color is ok. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"CapColorIdentification.h\" //***************************************************************************** // Constants. //***************************************************************************** static const MIL_INT NB_PRODUCT = 2; static MIL_CONST_TEXT_PTR PRODUCT_LABEL[NB_PRODUCT] = { MIL_TEXT(\"Red\"), MIL_TEXT(\"White\") }; //***************************************************************************** // Constructor. //***************************************************************************** CCapColorInspection::CCapColorInspection(MIL_CONST_TEXT_PTR ColContextPath, const MIL_INT* ExpectedMatches, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CColorMatchTask(ColContextPath, ExpectedMatches, ColorConversion, FixtureProvider, ImageProvider, RegionProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CCapColorInspection::~CCapColorInspection() { } //***************************************************************************** // Get the best match label //***************************************************************************** MIL_CONST_TEXT_PTR CCapColorInspection::GetBestMatchLabel(MIL_INT MatchIdx) const { if(MatchIdx == -1) return MIL_TEXT(\"None\"); else return PRODUCT_LABEL[MatchIdx]; } ",
      "wordCount": 154
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_capscrewinspection_capandlabel_cpp",
      "version": "2024020714",
      "title": "capscrewinspection_capandlabel.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: CapScrewInspection_CapAndLabel.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CCapScrewInspection class // which is the inspection task used to check if the cap is well screwed. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include &lt;math.h&gt; #include \"CapScrewInspection_CapAndLabel.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CCapScrewInspection::CCapScrewInspection(MIL_CONST_TEXT_PTR MeasContextPath, MIL_DOUBLE PositionYTolerance, MIL_DOUBLE AngleTolerance, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasContextPath, ColorConversion, FixtureProvider, ImageProvider), m_AngleTolerance(AngleTolerance), m_PositionTolerance(PositionYTolerance) { } //***************************************************************************** // Destructor. //***************************************************************************** CCapScrewInspection::~CCapScrewInspection() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CCapScrewInspection::Calculate(MIL_ID MilImage) { // Do the measurement task. if(CMeasInspectionTask::Calculate(MilImage)) { MmeasGetResult(MilResult(), M_POSITION, &amp;m_PosX, &amp;m_PosY); MmeasGetResult(MilResult(), M_ANGLE, &amp;m_Angle, M_NULL); // Put the angle fro -Pi to PI. PutAngleBetweenMinus180And180(m_Angle); return true; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CCapScrewInspection::SetFixture() { SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, m_PosX, m_PosY, m_Angle, M_DEFAULT); } //***************************************************************************** // Draw text result. //***************************************************************************** void CCapScrewInspection::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { MIL_DOUBLE AngleDiff = fabs(m_Angle); if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Cap screw: UNKNOWN\")); } else { if(IsResultValid() &amp;&amp; (AngleDiff &lt;= m_AngleTolerance) &amp;&amp; fabs(m_PosY) &lt;= m_PositionTolerance) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Cap screw: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Cap screw: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CCapScrewInspection::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_EDGES, M_DEFAULT, M_RESULT); } ",
      "wordCount": 273
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_horizontalalignment_cpp",
      "version": "2024020714",
      "title": "horizontalalignment.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: HorizontalAlignment.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CHorizontalALignment class // which is the class that manages the use of a region in an inspection task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"HorizontalAlignment.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CHorizontalAlignment::CHorizontalAlignment(MIL_CONST_TEXT_PTR MeasMarkerPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasMarkerPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CHorizontalAlignment::~CHorizontalAlignment() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CHorizontalAlignment::Calculate(MIL_ID MilImage) { // Do the measurement task. if(CMeasInspectionTask::Calculate(MilImage)) { // Get the measurement result. MmeasGetResult(MilResult(), M_POSITION, &amp;m_PosX, M_NULL); return true; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CHorizontalAlignment::SetFixture() { SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, m_PosX, 0, 0, M_DEFAULT); } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CHorizontalAlignment::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_POSITION, M_DEFAULT, M_RESULT); } //***************************************************************************** // Draw text result. //***************************************************************************** void CHorizontalAlignment::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Horizontal alignment: UNKNOWN\")); } else { if(IsResultValid()) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Horizontal alignment: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Horizontal alignment: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 246
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_labelalignmentinspection_cpp",
      "version": "2024020714",
      "title": "labelalignmentinspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: LabelAlignmentInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CLabelAlignmentInspection class // which is the inspection task used to check if the alignment of the label is good. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include &lt;math.h&gt; #include \"LabelAlignmentInspection.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CLabelAlignmentInspection::CLabelAlignmentInspection(MIL_CONST_TEXT_PTR MeasContextPath, MIL_DOUBLE AngleTolerance, MIL_DOUBLE ExpectedPosY, MIL_DOUBLE PosYTolerance, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasContextPath, ColorConversion, FixtureProvider, ImageProvider), m_AngleTolerance(AngleTolerance), m_PosYTolerance(PosYTolerance), m_ExpectedPosY(ExpectedPosY) { } //***************************************************************************** // Destructor. //***************************************************************************** CLabelAlignmentInspection::~CLabelAlignmentInspection() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CLabelAlignmentInspection::Calculate(MIL_ID MilImage) { // Do the measurement task. if(CMeasInspectionTask::Calculate(MilImage)) { MmeasGetResult(MilResult(), M_ANGLE, &amp;m_Angle, M_NULL); MmeasGetResult(MilResult(), M_POSITION, &amp;m_PosX, &amp;m_PosY); // Put the angle between -PI and PI. PutAngleBetweenMinus180And180(m_Angle); return true; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CLabelAlignmentInspection::SetFixture() { MIL_DOUBLE LineB, LineC; MmeasGetResult(MilResult(), M_LINE_B, &amp;LineB, M_NULL); MmeasGetResult(MilResult(), M_LINE_C, &amp;LineC, M_NULL); // Create the output fixture intersection of the line and the x = 0(according to the source fixture) vertical axis. SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, 0, -LineC/LineB, m_Angle, M_DEFAULT); } //***************************************************************************** // Draw text result. //***************************************************************************** void CLabelAlignmentInspection::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { MIL_DOUBLE PosYDiff = fabs(m_PosY - m_ExpectedPosY); MIL_DOUBLE AngleDiff = fabs(m_Angle); if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Label alignment: UNKNOWN\")); } else { if(IsResultValid() &amp;&amp; (AngleDiff &lt;= m_AngleTolerance) &amp;&amp; (PosYDiff &lt;= m_PosYTolerance)) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Label alignment: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Label alignment: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CLabelAlignmentInspection::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_EDGES, M_DEFAULT, M_RESULT); } ",
      "wordCount": 315
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_producttypeidentification_cpp",
      "version": "2024020714",
      "title": "producttypeidentification.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ProductTypeIdentification.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CproductTypeIdentification class // which is the inspection task used to identify what is the type of product. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ProductTypeIdentification.h\" //***************************************************************************** // Constants. //***************************************************************************** static const MIL_INT NB_PRODUCT = 2; static MIL_CONST_TEXT_PTR PRODUCT_LABEL[NB_PRODUCT] = { MIL_TEXT(\"Extra Strength\"), MIL_TEXT(\"Cold\") }; //***************************************************************************** // Constructor. //***************************************************************************** CProductTypeIdentification::CProductTypeIdentification(MIL_CONST_TEXT_PTR ColContextPath, const MIL_INT* ExpectedMatches, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CColorMatchTask(ColContextPath, ExpectedMatches, ColorConversion, FixtureProvider, ImageProvider, RegionProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CProductTypeIdentification::~CProductTypeIdentification() { } //***************************************************************************** // Get the best match label //***************************************************************************** MIL_CONST_TEXT_PTR CProductTypeIdentification::GetBestMatchLabel(MIL_INT MatchIdx) const { if(MatchIdx == -1) return MIL_TEXT(\"None\"); else return PRODUCT_LABEL[MatchIdx]; } ",
      "wordCount": 155
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_readdatamatrixtask_cpp",
      "version": "2024020714",
      "title": "readdatamatrixtask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ReadDatamatrixTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CReadDatamatrixTask class // which is the inspection task used to read a datamatrix. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ReadDatamatrixTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CReadDatamatrixTask::CReadDatamatrixTask(MIL_CONST_TEXT_PTR CodeContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CReadCodeTask(CodeContextPath, ColorConversion, FixtureProvider, ImageProvider, RegionProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CReadDatamatrixTask::~CReadDatamatrixTask() { } //***************************************************************************** // Draw text result. //***************************************************************************** void CReadDatamatrixTask::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { MIL_TEXT_CHAR OutputString[256]; MgraControl(MilGraContext, M_COLOR, GetReadStatus() ? M_COLOR_GREEN : M_COLOR_RED); MosSprintf(OutputString, 256, MIL_TEXT(\"Datamatrix read: %s\"), GetReadString()); MgraText(MilGraContext, MilDest, 0, 0, OutputString); MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 145
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_readstringtask_cpp",
      "version": "2024020714",
      "title": "readstringtask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ReadStringTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CReadStringTask class // which is the inspection task used to read the a string. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ReadStringTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CReadStringTask::CReadStringTask(MIL_CONST_TEXT_PTR StrContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CReadStrTask(StrContextPath, ColorConversion, FixtureProvider, ImageProvider, RegionProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CReadStringTask::~CReadStringTask() { } //***************************************************************************** // Draw text result. //***************************************************************************** void CReadStringTask::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { MIL_TEXT_CHAR OutputString[256]; MgraControl(MilGraContext, M_COLOR, GetReadStatus() ? M_COLOR_GREEN : M_COLOR_RED); MosSprintf(OutputString, 256, MIL_TEXT(\"String read: %s\"), GetReadString()); MgraText(MilGraContext, MilDest, 0, 0, OutputString); MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 146
    },
    {
      "id": "Examples_Processing_ProductInspection_BottleCapAndLabelInspection_CPP_threadinspection_cpp",
      "version": "2024020714",
      "title": "threadinspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ThreadInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CThreadInspection class // which is the inspection task used to check if the thread of the bottle is ok. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ThreadInspection.h\" //***************************************************************************** // Constants. //***************************************************************************** static const MIL_INT NB_FEATURE_TO_DRAW = 6; static MIL_CONST_TEXT_PTR FEATURES_TO_DRAW[NB_FEATURE_TO_DRAW] = { MIL_TEXT(\"BottomTopSegment\"), MIL_TEXT(\"ThreadInsideSegment\"), MIL_TEXT(\"ThreadDiagonalSegment\"), MIL_TEXT(\"BottomSideSegment\"), MIL_TEXT(\"ThreadTipEdgels\"), MIL_TEXT(\"ThreadTipPoint\"), }; static const MIL_INT NB_TOLERANCE_TO_DRAW = 4; static MIL_CONST_TEXT_PTR TOLERANCES_TO_DRAW[NB_TOLERANCE_TO_DRAW] = { MIL_TEXT(\"BottomWidth\"), MIL_TEXT(\"ThreadTipWidth\"), MIL_TEXT(\"BottomToThreadSpacing\"), MIL_TEXT(\"ThreadAngularity\"), }; //***************************************************************************** // Constructor. //***************************************************************************** CThreadInspection::CThreadInspection(MIL_CONST_TEXT_PTR MetContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMetInspectionTask(MetContextPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CThreadInspection::~CThreadInspection() { } //***************************************************************************** // Draw the graphical result. //***************************************************************************** void CThreadInspection::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the features for(MIL_INT FeatureIdx = 0; FeatureIdx &lt; NB_FEATURE_TO_DRAW; FeatureIdx++) CMetInspectionTask::DrawFeatureByName(MilGraContext, FEATURES_TO_DRAW[FeatureIdx], MilDest, M_RGB888(64, 0, 128)); // Draw the tolerances for(MIL_INT ToleranceIdx = 0; ToleranceIdx &lt; NB_TOLERANCE_TO_DRAW; ToleranceIdx++) CMetInspectionTask::DrawToleranceByName(MilGraContext, TOLERANCES_TO_DRAW[ToleranceIdx], MilDest, M_COLOR_DARK_GREEN, M_COLOR_DARK_RED, M_COLOR_DARK_YELLOW); } //***************************************************************************** // Draw text result. //***************************************************************************** void CThreadInspection::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Thread metrology: UNKNOWN\")); } else { if(IsResultValid()) { switch(GetOverallStatus()) { case M_PASS: MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Thread metrology: PASS\")); break; case M_WARNING: MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Thread metrology: WARNING\")); break; default: case M_FAIL: MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Thread metrology: FAIL\")); break; } } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Thread metrology: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 285
    }
  ]
}]