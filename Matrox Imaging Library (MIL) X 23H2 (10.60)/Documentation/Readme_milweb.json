[{
  "id": "Readme_milweb",
  "version": "2023100322",
  "title": "milweb",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Readme_milweb_milweb",
      "title": "milweb",
      "location": "MIL Release Notes",
      "pageURL": "\\milweb\\milweb.htm",
      "text": " -------------------------------------------------------------------------------- Matrox Imaging Library (MIL) 10.0 Release Notes (MILweb) May 2018 (c) Copyright Matrox Electronic Systems Ltd., 1992-2016. All rights reserved. -------------------------------------------------------------------------------- MILweb has been formally documented in the online release of the MIL X SP4 documentation update (available to registered users at https://www.matrox.com/en/imaging/apps/documentation). For clarified and expanded information about MILweb, refer to the formal documentation. 1. Overview 2. Server 2.1 Messages 3. Client 3.1 Javascript 3.1.1. Javascript Notes: 3.1.1.1 UserData 3.1.1.2 Hook Handler 3.1.1.3 Global context 3.1.1.4 Display 3.1.2 - API 3.2 C/C++ 3.2.1 C/C++ Notes 3.2.1.1 Display 3.2.2 API 4. Example 5. Deploying application 5.1 Web application 5.2 Standalone application -------------------------------------------------------------------------------- 1. Overview MILweb allows an application to publish MIL object data for access from a web browser or another standalone application using the HTML5 WebSocket communication protocol. MILweb uses a client-server architecture where the server is the MIL-based application and the client is a Javascript program running in a browser or a standalone application. The client requests data for an object, the server accepts the request and sends updated object data to the client. The client can also send custom data to the server using MIL messages. MILweb can be used locally on the same device running the MIL-based application or remotely on another device that doesn't have MIL installed on it. MILweb supports client-side programming in Javascript or C/C++ The MIL objects currently supported are the buffer and display objects. This functionality serves to view and interact with a MIL display (i.e., pan, scroll, zoom, etc.). -------------------------------------------------------------------------------- 2. Server The Server is a MIL application which publishes objects to the web using the following MIL API: MappControl/MappInquire: M_WEB_CONNECTION,M_WEB_CONNECTION_PORT; MappHookFunction: M_WEB_CLIENT_CONNECTED, M_WEB_CLIENT_DISCONNECTED; MappGetHooInfo: M_WEB_CLIENT_INDEX; MdispAlloc: Where the InitFlag parameter is set to M_WEB; MobjControl: M_UPDATE_START, M_UPDATE_END,M_WEB_PUBLISH; 2.1 Messages MIL messages (using MobjAlloc() with M_MESSAGE_MAILBOX) are used to exchange data between the server and clients. By convention, messages with the InitFlag of M_OVERWRITE are used by the server to send data to clients, and messages with the InitFlag of M_DEFAULT or M_QUEUE are used by clients to send data back to the server. Note that the access type (set using MobjControl with M_WEB_PUBLISH set to M_READ_ONLY or M_READ_WRITE) must be set accordingly. -------------------------------------------------------------------------------- 3. Client 3.1 Javascript (mil.js) The Javascript web client application is based on mil.js library. The library (mil.js) provides functions to access objects, hook onto updates, select display and send input data to the server. It maps a subset of the MIL API functions to Javascript. Note that not all inquires and controls are supported. 3.1.1 Javascript Notes 3.1.1.1 Userdata in inquires Javascript doesn't support passing parameters by reference, instead an object must be used. The return value will be set in a property of the object called &quot;data&quot;. Example: var UserVar = {} MIL.MappInquire(MilAp,MIL.M_WEB_CLIENT_INDEX, UserVar) The result will be in UserVar.data 3.1.1.2 Hook Handler The hook handler function in mil.js must be declared as: function hookHandler(hookType, eventId, UserVar) Note that parameters can be omitted from this call. 3.1.1.3 Global Context The MIL Javascript library uses a global &quot;MIL&quot; context. Each function and define must also use this context. 3.1.1.4 Display MdispSelect is available and an HTML5 canvas is used as the default selected display. 3.2 MIL.JS Javascript API --------------------------------------------------------------------------- MIL.MappOpenConnection(URL, InitFlag, ControlFlag, UserVar) URL Specifies the computer to which to connect, and if necessary the listening port of the publishing application. e.g. &quot;ws://localhost:7861:&quot; InitFlag Reserved for future expansion. Set to MIL.M_DEFAULT ControlFlag Reserved for future expansion. Set to MIL.M_DEFAULT UserVar Specifies A Javascript object, where userVar.data contains the ApplicationID. This function opens a connection to a remote computer that is running a publishing application, through the listening port of the publishing application. Once it opens the connection, this function returns the MIL application context identifier of the publishing application. Note that the MIL application context identifier is always returned even when the connection fails. This allows you to hook onto M_CONNECT or M_ERROR validate the connection status. --------------------------------------------------------------------------- MIL.MappCloseConnection(ApplicationID) ApplicationID Specifies the MIL application context identifier of the publishing application. This function closes the connection opened by MIL.MappOpenConnection. --------------------------------------------------------------------------- MIL.MappInquire(ApplicationId, inquireType, userVar) ApplicationId: Specifies the MIL application context identifier of the publishing application. InquireType Specifies the type of application setting about which to inquire: MIL.M_WEB_CLIENT_INDEX Returns the unique identifier for the web client. MIL.M_OBJECT_TYPE Returns the MIL.M_APPLICATION unique identifier. MIL.M_ERROR Returns whether to print error messages. MIL.M_PRINT_ENABLE Specifies to print error messages. MIL.M_PRINT_DISABLE Specifies to print error messages. userVar Specifies a Javascript object. userVar.data always contains a result. This function inquires a specific information on a MIL application, where the inquireType parameter specifies the type of information to be read. --------------------------------------------------------------------------- MIL.MappControl(ApplicationId, controlType, controlValue) ApplicationId Specifies the MIL application context identifier of the publishing application. controlType Specifies the type of application environment setting to control. This parameter can be set to one of the values below. controlValue Specifies the setting's new value. This parameter can be set to one of the values below. The table below list possible values for the ControlType and ControlValue parameters. controlType controlValue Description MIL.M_ERROR Sets whether the printing of error messages to screen is enabled. MIL.M_PRINT_ENABLE Specifies to print error messages. MIL.M_PRINT_DISABLE Specifies to not print error messages. This function controls the settings of a MIL application environment. --------------------------------------------------------------------------- MIL.MappHookFunction(ApplicationId, HookType, HookHandler) ApplicationId Specifies the MIL application context identifier of the publishing application. HookType Specifies the event type. This parameter can be set to one of the following values. Value Description MIL.M_ERROR Calls the hook-handler function each time an error occurs. MIL.M_CONNECT Calls the hook-handler function each time a connection is established. MIL.M_DISCONNECT Calls the hook-handler function each time a connection is disconnected. MIL.M_OBJECT_PUBLISH_WEB Calls the hook-handler function each time the published list of objects changes. HookHandler Specifies the Javascript function to be called as the hook-handler function. This function allows you to attach or detach a user-defined function to a specified application event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. --------------------------------------------------------------------------- MIL.MappGetHookInfo(EventId, InfoType, UserVar) EventId Specifies the application event identifier received by the hook-handler function. InfoType: Specifies the type of information to get. Possible values include: MIL.M_OBJECT_ID Retrieves the MIL identifier of the object whose publication state was modified. userVar Specifies a Javascript object. userVar.data always contains a result. --------------------------------------------------------------------------- MIL.MappInquireConnection(ApplicationId, InquireType, ControlFlag, ExtraFlag, UserVar) ApplicationId Specifies the MIL application context identifier of the publishing application. InquireType Specifies the type of Distributed MIL connection setting about which to inquire. This parameter can be set to one of the values below. ControlFlag Specifies an attribute of the inquire operation to perform. This parameter can be set to one of the values below. Extraflag Reserved for future use. Omit. UserVar Specifies a Javascript object. userVar.data always contains a result. The table below list possible values for the InquireType and ControlFlag parameters. InquireType ControlFlag Description MIL.M_WEB_PUBLISHED_NAME Inquires the object identifier associated with its name. ObjectId Specifies the object associated with the name. MIL.M_WEB_PUBLISHED_LIST Inquires the list of MIL identifiers associated with the published MIL objects ArrayofMILObjects Specifies the array of published MIL objects. MIL.M_WEB_PUBLISHED_LIST_SIZE returns the number of published MIL_IDs on a host. This function inquires about the published MIL web objects. --------------------------------------------------------------------------- MIL.MdispInquire(DisplayId, InquireType, UserVar) DisplayId Specifies the identifier of the display. InquireType: Specifies the type of display setting about which to inquire. This parameter can be set to one of the values below. UserVar Specifies a Javascript object, userVar.data will be filled with result. This parameter can return one of the values below. The table below list possible values for the InquireType and ControlFlag parameters. InquireType UserVar Description MIL.M_INTERACTIVE Inquires whether the user can interact with the display. M_ENABLE Specifies that the user can interact with the display, using a keyboard and mouse. M_DISABLE Specifies that the user cannot interact with the display. MIL.M_HOST_ADDRESS Inquires the Host address of the current image in the display. ArrayBuffer Specifies the Host address. This function inquires about a specified display setting. It returns the requested information as a number. If userVar is a non-null Javascript object, the requested information is also returned in the variable userVar.data. For other possible inquires see MobjInquire, described later in this section. --------------------------------------------------------------------------- MIL.MdispControl(DisplayId, ControlType, ControlValue) DisplayId Specifies the identifier of the target display. ControlType Specifies the type of display setting to control. This parameter can be set to one of the values below. ControlValue Specifies the new value to assign to the display setting. This parameter can be set to one of the values below. The table below list possible values for the InquireType and ControlFlag parameters. ControlType ControlValue Description MIL.M_UPDATE_WEB Sets whether MIL should update the display. M_NOW Specifies to force an immediate update of the display. M_DISABLE Specifies not to update the display. MIL.M_INTERACTIVE Sets whether the user can interact with the display. M_ENABLE Specifies that the user can interact with the display, using a keyboard and mouse. Note that only one client can enable this feature at a time. M_DISABLE Specifies not to update the display. This function allows you to control the specified MIL display setting. --------------------------------------------------------------------------- MIL.MdispMessage(DisplayId, EventType, MousePositionX, MousePositionY, EventValue, CombinationKeys, UserVar) DisplayId Specifies the identifier of the target display. EventType Specifies the type of message to process as an event. This parameter can be set to one of the following values: MIL.M_MOUSE_LEFT_BUTTON_DOWN Specifies that the left mouse button was depressed. MIL.M_MOUSE_LEFT_BUTTON_UP Specifies that the left-mouse button was released. MIL.M_MOUSE_RIGHT_BUTTON_DOWN Specifies that the right-mouse button was depressed. MIL.M_MOUSE_RIGHT_BUTTON_UP Specifies that the right-mouse button was released. MIL.M_MOUSE_MOVE Specifies that the mouse has moved. MIL.M_MOUSE_WHEEL Specifies that the mouse-wheel has moved. MIL.M_MOUSE_MIDDLE_BUTTON_DOWN Specifies that the middle-mouse button was depressed. MIL.M_MOUSE_MIDDLE_BUTTON_UP Specifies that the middle-mouse button was released. MIL.M_KEY_DOWN Specifies that the down-key was depressed. MIL.M_KEY_UP Specifies that the up-key was depressed. MousePositionX Specifies the position of the mouse cursor along the X-axis. This parameter can be set to the following: M_DEFAULT Specifies that a keyboard (or other) message is to be displayed. MousePositionY Specifies the position of the mouse cursor along the YX-axis. This parameter can be set to the following: M_DEFAULT Specifies that a keyboard (or other) message is to be displayed. EventValue Specifies that type of event to be displayed. Set this value to MIL.M_NULL if not used. Example given: When using MIL.M_MOUSE_WHEEL, the EventValue is the Mouse wheel delta. When using MIL.M_KEY_DOWN, the EventValue is the code of the key pressed. Combination Keys: MIL.M_MOUSE_LEFT_BUTTON MIL.M_MOUSE_RIGHT_BUTTON MIL.M_MOUSE_MIDDLE_BUTTON UserVar Not used. Always set this value to null. This function sends a mouse or keyboard event to a specific display. --------------------------------------------------------------------------- MIL.MdispZoom(DisplayId, XFactor, YFactor) DisplayId Specifies the identifier of the target display. XFactor Specifies the zoom factor for the X-direction of the display. This parameter must be set to one of the following values: Value &gt;0 Specifies the zoom factor for the X-direction of the display. YFactor Specifies the zoom factor for the Y-direction of the display. This parameter must be set to one of the following values: Value &gt;0 Specifies the zoom factor for the Y-direction of the display. This function associates a zoom factor in X and/or in Y with the specified display. --------------------------------------------------------------------------- MIL.MdispPan(DisplayId, XOffset, YOffset) DisplayId Specifies the identifier of the target display. XOffset Specifies the number of image pixels by which to pan an image buffer horizontally when it is displayed. This value is a double. YOffset Specifies the number of image pixels by which to pan an image buffer vertically when it is displayed. This value is a double. Pans and scrolls the target display to have the top left corner of the display at XOffset pixels in X and YOffset pixels in Y from the to left (0,0) corner of the buffer. --------------------------------------------------------------------------- MIL.MdispSelectWindow(DisplayId, CanvasElement) DisplayId Specifies the identifier of the target display. CanvasElement Specifies an HTML5 DOM Canvas-element. Displays the content (and any updates) of the display in the HTML5 Canvas. --------------------------------------------------------------------------- MIL.MdispHookFunction(DisplayId, HookType, HookHandler) DisplayId Specifies the identifier of the target display. HookType Specifies the display event type. This parameter can be set tot he following: MIL.M_UPDATE_WEB Specifies that the HookHandler function will be called when the contents of display has changed. MIL.M_KEY_UP Specifies that the HookHandler function will be called when the user releases a keyboard key, MIL.M_KEY_DOWN Specifies that the HookHandler function will be called when the user presses a keyboard key, MIL.M_MOUSE_LEFT_BUTTON_UP Specifies that the HookHandler function will be called when the user releases left mouse button MIL.M_MOUSE_LEFT_BUTTON_DOWN Specifies that the HookHandler function will be called when the user presses left mouse button MIL.M_MOUSE_RIGHT_BUTTON_UP Specifies that the HookHandler function will be called when the user release right mouse button MIL.M_MOUSE_RIGHT_BUTTON_DOWN Specifies that the HookHandler function will be called when the user presses right mouse button MIL.M_MOUSE_MIDDLE_BUTTON_UP Specifies that the HookHandler function will be called when the user releases middle mouse button MIL.M_MOUSE_MIDDLE_BUTTON_DOWN:Specifies that the HookHandler function will be called when the user press middle mouse button MIL.M_MOUSE_MOVE Specifies that the HookHandler function will be called when the user moves the mouse. MIL.M_MOUSE_WHEEL Specifies that the HookHandler function will be called when the user uses scroll the mouse wheel (up/down). MIL.M_UPDATE_INTERACTIVE_STATE Specifies that the HookHandler function will be called when a web client take control of interaction control ( mouse/keyboard). HookHandler Specifies the function that should be called when the event occurs. This function allows you to attach a user-defined function to a specified display event. --------------------------------------------------------------------------- MIL.MdispGetHookInfo(EventId, InfoType, UserVar) EventId Specifies the application event identifier received by the hook-handler function. InfoType Specifies the type of information about the event to return. This parameter can be set tot he following: MIL.M_DISPLAY Retrieves the identifier of the the display ID of the object generating the hook. MIL.M_MOUSE_POSITION_X Retrieves the X-position of the cursor, in display coordinates. MIL.M_MOUSE_POSITION_Y Retrieves the Y-position of the cursor, in display coordinates. MIL.M_MOUSE_WHEEL_VALUE Retrieves the value for the mouse wheel's rotation. MIL.M_KEY_VALUE Retrieves the ASCII value of the key that triggered the event. UserVar Specifies a Javascript object. userVar.data always contains a result. This function allows you to get information about the event that caused the hook-handler function to be called. --------------------------------------------------------------------------- MIL.MbufInquire(ImageId, InquireType, UserVar) See MobjInquire, described later in this section. --------------------------------------------------------------------------- MIL.MbufGetHookInfo(EventId, InfoType, UserVar) See MobjGetHookInfo, described later in this section. --------------------------------------------------------------------------- MIL.MbufGet(ImageId, UserVar) ImageId: Identifier of the target buffer UserData: If not null UserData.data will be filled with buffer data (Javascript arraybuffer type). Get data from a buffer and place it in a user-supplied array. --------------------------------------------------------------------------- MIL.MbufpGetHookInfo(EventId, InfoType, UserVar) EventId Specifies the application event identifier received by the hook-handler function. InfoType: Type of information to get MIL.M_BUFFER: return the buffer ID of the object generating the hook UserVar Specifies a Javascript object. userVar.data always contains a result. Inquire about a MIL data buffer setting. --------------------------------------------------------------------------- MIL.MobjHookFunction(ObjectId, HookType, HookHandler) ObjectId Specifies the identifier of the object on which to hook a function. HookType Specifies the object-related event on which to hook the function. This parameter can be set to one of the following values. MIL.M_UPDATE_WEB Specifies that the HookHandler function will be called when contents of the object has changed. HookHandler Specifies the function that should be called when the specified event occurs Hook a function to an object-related event. --------------------------------------------------------------------------- MIL.MobjInquire(ObjectId, InquireType, UserVar) ObjectId Specifies the identifier of the object to be inquired. InquireType Specifies the MIL object setting about which to inquire. This parameter can be set to one of the following values. MIL.M_OBJECT_NAME Inquires the name associated with the specified object, MIL.M_OBJECT_TYPE Inquires the object type (such as, MIL.M_APPLICATION, MIL.M_DISPLAY, MIL.M_IMAGE, etc) MIL.M_WEB_PUBLISH Inquires the access type (MIL.M_READ_WRITE or MIL.M_READ_ONLY) MIL.M_SIZE_X Inquires the Size X of the object, if supported. MIL.M_SIZE_Y Inquires theSize Y of the object ,if supported. MIL.M_TYPE Inquires theData type of the object, if supported. MIL.M_SIZE_BYTE Inquires theSize of the the object, if supported. MIL.M_SIZE_BAND Inquires the size band of the object, if supported. MIL.M_TYPE Inquires the data type of the object, if supported. UserVar Specifies a Javascript object. userVar.data always contains a result. This function inquires about general MIL object settings in a publishing application. Note that not all of the inquire types, described above, are supported by all objects. --------------------------------------------------------------------------- MIL.MobjGetHookInfo(EventId, InfoType, UserVar) EventId Specifies the application event identifier received by the hook-handler function. InfoType Specifies the type of information to retrieve. This parameter can be set to the following value: MIL.M_OBJECT_ID Retrieves the object identifier of the object generating the hook. UserVar Specifies a Javascript object. This function allows you to get information about the event that caused the hook to be called. --------------------------------------------------------------------------- MIL.MobjMessageRead(MessageId, MessageVar, MessageInSize, MessagemsgOutSize, MessageTag, MessageStatus, OperationFlag) MessageId Specifies the identifier of the MIL.M_MESSAGE_MAILBOX object. MessageVar Specifies that, if not null, the message data is stored in MessageVar.data MessageInSize Reserved for future use. Not used. MessageOutSize. Specifies the message length of the data stored in MessageOutSize.data If not used, this parameter can return null. MessageTag Specifies the message tag is stored in MessageTag.data If not used, this parameter can return null. MessageStatus Specifies that the MIL.M_SUCCESS tag is stored in MessageStatus.data If not used, this parameter can return null. OperationFlags Reserved for future use. Not used. This function allows you to read a message sent to the server. --------------------------------------------------------------------------- MIL.objMessageWrite(MessageId, MessageData, MessageLength, MessageTag, OperationFlag) MessageId Specifies the identifier of the MIL.M_MESSAGE_MAILBOX object. MessageData Specifies the message to send. MessageTag Specifies the message tag to send. OperationFlags Specifies the operation flag. This parameter can be set to the following value: MIL.M_DEFAULT Specifies that the message is to be sent. This function allows you to send a message to the client. -------------------------------------------------------------------------------- 3.2 C/C++ API The C/C++ web client application uses milwebclient.dll library. This library provides function to access objects, hooks on updates, and send input data to the server. 3.2.1 C/C++ Notes 3.2.1.1 Display MdispSelect function is not available. The user has to get the image data and blit it to a user defined window. 3.2.2. API The C/C++ web client implements only a subset of MIL API functions. Note that not all inquires and controls are supported. What follows is a detailed list of the additions and limited list of supported values in various functions. For more details, consult the MIL online help. * Additions to MappOpenConnection(), ConnectionDescriptor parameter * MILTEXT(&quot;ws://localhost[:Port]&quot;) Opens a connection to a valid websocket URL. The connection uses the WebSocket protocol (ws://). Unlike the Javascript API this function is synchronous and will return a valid Application Id or NULL if the connection fails. No M_CONNECT hook is generated. * Other ConnectionDescriptor values are not supported by this update. * Notes regarding MappCloseConnection() * Unlike in the Javascript API, this function waits until the close is terminated. * Additions to MappInquire(), InquireType parameter. * MIL.M_WEB_CLIENT_INDEX Returns the unique identifier for the web client. * Of the documented InquireTypes, only the following are supported by the C/C++ web client: * MIL.M_OBJECT_TYPE * MIL.M_ERROR * Additions to MappControl() * Of the documented InquireTypes, only the following are supported by the C/C++ web client: * MIL.M_ERROR * Additions to MappHookFunction(), HookType parameter: * MIL.M_ERROR Calls the hook-handler function each time an error occurs. * MIL.M_CONNECT Calls the hook-handler function each time a connection is established. * MIL.M_DISCONNECT Calls the hook-handler function each time a connection is disconnected. * MIL.M_OBJECT_PUBLISH_WEB Calls the hook-handler function each time the published list of objects changes. The HookHandler parameter must be a valid MIL call, see MappHookFunction() in the MIL online help for details. * Additions to MappGetInfo(), InfoType parameter: * M_WEB_CLIENT_INDEX Retrieves the client Identifier from the location pointed to by UserVarPtr, as a MIL_INT. In addition to the above specified value, only the following values are supported by the C/C++ web client for the InfoType parameter: * M_OBJECT_ID * M_CURRENT * M_CURRENT_SUB_NB * M_CURRENT_SUB_1 * M_MESSAGE+M_CURRENT * M_MESSAGE+M_CURRENT_SUB_1 * Additions to MappInquireConnection(), InquireTYpe parameter: Of the documented InquireTypes, only the following are supported by the C/C++ web client: * M_WEB_PUBLISHED_NAME Inquires the object identifier associated with its name. The associated ControlValue must be a MIL object identifier. * M_WEB_PUBLISHED_LIST Inquires the list of MIL identifiers associated with the published MIL objects. The associated ControlVlaue must be an array of MIL objects. * Additions to MdispInquire(), InquireType parameter: Of the documented InquireTypes, only the following are supported by the C/C++ web client: * M_INTERACTIVE Inquires whether the user can interact with the display. The associated UserVarPtr can be set to either M_ENABLE or M_DISABLE. * M_HOST_ADDRESS Inquires the Host address of the current image in the display. The associated UserVarPtr must be an array buffer that contains the Host address. * Additions to MdispControl(), ControlType parameter: Of the documented ControlTypes, only the following are supported by the C/C++ web client: * M_UPDATE_WEB Sets whether MIL should update the display. The associated ControlValues are: M_NOW Specifies to force an immediate update of the display. M_DISABLE Specifies not to update the display. * M_INTERACTIVE Sets whether the user can interact with the display. The associated ControlValues are: M_ENABLE Specifies that the user can interact with the display, using a keyboard and mouse. Note that only one client can enable this feature at a time. M_DISABLE Specifies not to update the display. * M_WEB_PUBLISHED_FORMAT Specifies the format of the image data published. The associated ControlValue is: M_BGR32 Specifies that image data is in BGR32 format. * New function: MdispMessage(DisplayId, EventType, MousePositionX, MousePositionY, EventValue, CombinationKeys, UserValue) MIL_ID DisplayId; /* ID of the target Display */ MIL_INT EventType; /* Message to process */ MIL_INT MousePositionX; /* Mouse cursor position in X */ MIL_INT MousePositionY; /* Mouse cursor position in Y */ MIL_INT EventValue; /* Message-specific parameter */ MIL_INT CombinationKeys; /* Indicates whether various keys are down. */ MIL_INT UserValue; /* User value */ Processes a message as if sent by the mouse or the keyboard directly. EventType Specifies the type of message to process as an event. This parameter can be set to one of the following values: M_MOUSE_LEFT_BUTTON_DOWN Specifies that the left mouse button was depressed. M_MOUSE_LEFT_BUTTON_UP Specifies that the left-mouse button was released. M_MOUSE_RIGHT_BUTTON_DOWN Specifies that the right-mouse button was depressed. M_MOUSE_RIGHT_BUTTON_UP Specifies that the right-mouse button was released. M_MOUSE_MOVE Specifies that the mouse has moved. M_MOUSE_WHEEL Specifies that the mouse-wheel has moved. M_MOUSE_MIDDLE_BUTTON_DOWN Specifies that the middle-mouse button was depressed. M_MOUSE_MIDDLE_BUTTON_UP Specifies that the middle-mouse button was released. M_KEY_DOWN Specifies that the down-key was depressed. M_KEY_UP Specifies that the up-key was depressed. MousePositionX Specifies the position of the mouse cursor along the X-axis. This parameter can be set to the following: M_DEFAULT Specifies that a keyboard (or other) message is to be displayed. MousePositionY Specifies the position of the mouse cursor along the YX-axis. This parameter can be set to the following: M_DEFAULT Specifies that a keyboard (or other) message is to be displayed. EventValue Specifies that type of event to be displayed. Set this value to MIL.M_NULL if not used. Example given: When using MIL.M_MOUSE_WHEEL, the EventValue is the Mouse wheel delta. When using MIL.M_KEY_DOWN, the EventValue is the code of the key pressed. Combination Keys: MIL.M_MOUSE_LEFT_BUTTON MIL.M_MOUSE_RIGHT_BUTTON MIL.M_MOUSE_MIDDLE_BUTTON UserVar Not used. Always set this value to null. This function sends a mouse or keyboard event to a specific display. * Addition to MdispHookFunction HookType M_UPDATE_INTERACTIVE_STATE: Calls the hook-handler each time a web client take control of the display interaction ( mouse/keyboard) with the MdispControl M_INTERCATIVE. * MdispHetHookInfo support only M_DISPLAY as InfoType * Additional supported functions in the Mdisp module: * MdispZoom() * MdispPan(() * Functions that are not supported in the Mdisp module: * MdispSelectWindow() * Additions to MbufInquire() See MobjInquire * Additions to MbufGetHookInfo(EventId, InfoType, TargetVarPtr) See MobjGetHookInfo * MbufGet() is supported. * Additions to MobjHookFunction(), HookType parameter Of the documented HookTypes, only the following are supported by the C/C++ web client: * M_UPDATE_WEB Specifies that the HookHandler function will be called when the contents of the object has changed. * Additions and modifications to MobjInquire(), InquireType parameter Of the documented InqureTypes, only the following are supported by the C/C++ web client: * M_OBJECT_NAME * M_OBJECT_TYPE * M_WEB_PUBLISH Inquires the access type (M_READ_WRITE or M_READ_ONLY) * M_SIZE_X Inquires the Size X of the object, if supported. * M_SIZE_Y Inquires theSize Y of the object, if supported. * M_TYPE Inquires theData type of the object, if supported. * M_SIZE_BYTE Inquires theSize of the the object, if supported. * M_SIZE_BAND Inquires the size band of the object, if supported. * Modifications to MobjGetHookInfo(), HookType parameter Of the documented HookTypes, only the following are supported by the C/C++ web client: * M_OBJECT_ID * Modifications to MobjMessageRead(), StatusPtr and OperationFlag parameters Of the documented StatusPtr, only the following are supported by the C/C++ web client: * M_SUCCESS * M_BUFFER_TOO_SMALL Of the documented OperationFlag, only the following are supported by the C/C++ web client: * M_DEFAULT * MobjMessageWrite () is supported. -------------------------------------------------------------------------------- 4. Example See the MdispWeb example. -------------------------------------------------------------------------------- 5. Deploying application This section describes how to deploy MIL web client application. 5.1. Web application Javascript applications are integrated in HTML pages running in a web browser locally or remotely. The web application can be run in any recent web browser which support HTML5 features (see the Known limitation, later in this section). Here are the basic steps to build a Javascript application - Create a directory for the application (Exp App1) - Copy MIL Javascript library (mil.js) to this folder - Put the application code in a Javascript file (exp App1.js) - Create a simple HTML page (page.html) that loads the MIL libary and the application code. Exp: &lt;script type=&quot;text/javascript&quot; src=&quot;mil.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;App1.js&quot;&gt;&lt;/script&gt; - Test the application by loading the file page.html into a web browser. - When deploying for remote access, the folder App1 now contains all needed files to run the client application. To make the application accessible from a remote PCs: - Use MIL HTTP API or other web server (IIS/apache....) to make web application available to other PCs. - Using other web server. See documentation of the web server how make contents of the application folder (App1) available for web access. Try access the web page from a remote web browser by using: http:://[THIS_PC_NAME/THIS_PC_IP]/page.html Replace [THIS_PC_NAME/THIS_PC_IP] by your computer's name or IP address. Note on browsers: - The performance and functionality of a web application can be affected by the browser used, its version, installed extensions and add-ons. - MILweb has been tested with the following browsers: Internet Explorer, Edge, Chrome and Firefox. - Version 11 is the minimum requirement for Internet Explorer. - Edge supports a maximum of 5 websockets at a time, which restricts a web application to accessing a maximum of 5 published objects at a time. 5.2 Standalone application When deploying a C/C++ application, the milwebclient.dll library must be added as a dependency. Note that no MIL dependency is required). ",
      "wordCount": 4434,
      "subEntries": []
    }
  ]
}]