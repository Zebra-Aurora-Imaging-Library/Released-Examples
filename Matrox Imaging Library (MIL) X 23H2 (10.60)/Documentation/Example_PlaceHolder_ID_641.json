[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_M3dmod_CS_cdisplay_cs",
      "version": "2024020714",
      "title": "cdisplay.cs",
      "location": "Sample Code from MIL Examples",
      "text": " Top /******************************************************************************/ /* /* File name: CDisplay.cs /* Location: See Matrox Example Launcher in the MIL Control Center /* /* Synopsis: Class that manages the 2D/3D mil displays for 3D /* examples. /* /* Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. /* All Rights Reserved /******************************************************************************/ // using System; using System.Collections.Generic; using System.Linq; using Matrox.MatroxImagingLibrary; namespace M3dmod { internal class CDisplay { public CDisplay(MIL_ID MilSystem) { m_MilSystem = MilSystem; } /* -------------------------------------------------------------- */ /* Allocates a 3D display and returns its MIL identifier. */ /* -------------------------------------------------------------- */ public void Alloc3dDisplayId() { // Try to allocate a 3d display. MIL.MappControl(MIL.M_DEFAULT, MIL.M_ERROR, MIL.M_PRINT_DISABLE); m_MilDisplay = MIL.M3ddispAlloc(m_MilSystem, MIL.M_DEFAULT, \"M_DEFAULT\", MIL.M_DEFAULT, MIL.M_NULL); MIL.MappControl(MIL.M_DEFAULT, MIL.M_ERROR, MIL.M_PRINT_ENABLE); if (m_MilDisplay == MIL.M_NULL) { Console.WriteLine(); Console.WriteLine(\"The current system does not support the 3D display.\"); Console.WriteLine(\"A 2D display will be used instead.\"); // Allocate a 2d display instead. m_MilDisplay = MIL.MdispAlloc(m_MilSystem, MIL.M_DEFAULT, \"M_DEFAULT\", MIL.M_DEFAULT, MIL.M_NULL); m_Lut = MIL.MbufAllocColor(m_MilSystem, 3, 256, 1, MIL.M_UNSIGNED + 8, MIL.M_LUT, MIL.M_NULL); MIL.MgenLutFunction(m_Lut, MIL.M_COLORMAP_TURBO + MIL.M_FLIP, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); } MIL.MobjInquire(m_MilDisplay, MIL.M_OBJECT_TYPE, ref m_DisplayType); GetGraphicListId(); } /* -------------------------------------------------------------- */ /* Sets the window size. */ /* -------------------------------------------------------------- */ public void Size(MIL_INT SizeX, MIL_INT SizeY) { if (m_DisplayType == MIL.M_3D_DISPLAY) { MIL.M3ddispControl(m_MilDisplay, MIL.M_SIZE_X, SizeX); MIL.M3ddispControl(m_MilDisplay, MIL.M_SIZE_Y, SizeY); } else { m_MilDepthMap = MIL.MbufAlloc2d(m_MilSystem, SizeX, SizeY, MIL.M_UNSIGNED + 8, MIL.M_IMAGE | MIL.M_PROC | MIL.M_DISP, MIL.M_NULL); m_IntensityMap = MIL.MbufAllocColor(m_MilSystem, 3, SizeX, SizeY, MIL.M_UNSIGNED + 8, MIL.M_IMAGE | MIL.M_PROC | MIL.M_DISP, MIL.M_NULL); } } /* ----------------------------------------------- */ /* Sets the window position x. */ /* ----------------------------------------------- */ public void PositionX(MIL_INT PositionX) { if (m_DisplayType == MIL.M_3D_DISPLAY) { MIL.M3ddispControl(m_MilDisplay, MIL.M_WINDOW_INITIAL_POSITION_X, PositionX); } else { MIL.MdispControl(m_MilDisplay, MIL.M_WINDOW_INITIAL_POSITION_X, PositionX); } } /* -------------------------------------------------------------- */ /* Displays the container in the 3D or 2D display. */ /* -------------------------------------------------------------- */ public void DisplayContainer(MIL_ID MilContainer, bool UseLut) { if (m_DisplayType == MIL.M_3D_DISPLAY) { MIL_INT Label = MIL.M3ddispSelect(m_MilDisplay, MilContainer, MIL.M_DEFAULT, MIL.M_DEFAULT); if (UseLut) { MIL.M3dgraCopy(MIL.M_COLORMAP_TURBO + MIL.M_FLIP, MIL.M_DEFAULT, m_MilGraphicList, Label, MIL.M_COLOR_LUT, MIL.M_DEFAULT); MIL.M3dgraControl(m_MilGraphicList, Label, MIL.M_COLOR_USE_LUT, MIL.M_TRUE); MIL.M3dgraControl(m_MilGraphicList, Label, MIL.M_COLOR_COMPONENT_BAND, 2); MIL.M3dgraControl(m_MilGraphicList, Label, MIL.M_COLOR_COMPONENT, MIL.M_COMPONENT_RANGE); } // Set the display's rotation axis center. This will keep the // behaviour of auto rotate consistent as we move its interest point. MIL.M3ddispCopy(MIL.M_VIEW_INTEREST_POINT, m_MilDisplay, MIL.M_ROTATION_AXIS_CENTER, MIL.M_DEFAULT); } else // M_DISPLAY { // Project into a depthmap. MIL.M3dimCalibrateDepthMap(MilContainer, m_MilDepthMap, m_IntensityMap, MIL.M_NULL, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_CENTER); if (UseLut) { // Associate a LUT. MIL.MbufControl(m_MilDepthMap, MIL.M_ASSOCIATED_LUT, m_Lut); MIL.M3dimProject(MilContainer, m_MilDepthMap, MIL.M_NULL, MIL.M_POINT_BASED, MIL.M_MAX_Z, MIL.M_DEFAULT, MIL.M_DEFAULT); MIL.MdispSelect(m_MilDisplay, m_MilDepthMap); } else { bool HasColor = MIL.MbufInquireContainer(MilContainer, MIL.M_COMPONENT_REFLECTANCE, MIL.M_COMPONENT_ID, MIL.M_NULL) != MIL.M_NULL || MIL.MbufInquireContainer(MilContainer, MIL.M_COMPONENT_INTENSITY, MIL.M_COMPONENT_ID, MIL.M_NULL) != MIL.M_NULL; if (HasColor) { MIL.M3dimProject(MilContainer, m_MilDepthMap, m_IntensityMap, MIL.M_POINT_BASED, MIL.M_MAX_Z, MIL.M_DEFAULT, MIL.M_DEFAULT); MIL.MdispSelect(m_MilDisplay, m_IntensityMap); } else { MIL.M3dimProject(MilContainer, m_MilDepthMap, MIL.M_NULL, MIL.M_POINT_BASED, MIL.M_MAX_Z, MIL.M_DEFAULT, MIL.M_DEFAULT); MIL.MdispSelect(m_MilDisplay, m_MilDepthMap); } } } } public void Title(string Title) { if (m_DisplayType == MIL.M_3D_DISPLAY) { MIL.M3ddispControl(m_MilDisplay, MIL.M_TITLE, Title); } else { MIL.MdispControl(m_MilDisplay, MIL.M_TITLE, Title); } } /*--------------------------------------------------------------- * / /* Set the 3D disply view . */ /* -------------------------------------------------------------- */ public void SetView(MIL_INT Mode, double Param1, double Param2, double Param3) { if (m_DisplayType == MIL.M_3D_DISPLAY) { MIL.M3ddispSetView(m_MilDisplay, Mode, Param1, Param2, Param3, MIL.M_DEFAULT); // Set the display's rotation axis center. This will keep the // behaviour of auto rotate consistent as we move its interest point. MIL.M3ddispCopy(MIL.M_VIEW_INTEREST_POINT, m_MilDisplay, MIL.M_ROTATION_AXIS_CENTER, MIL.M_DEFAULT); } } /*-------------------------------------------------------------- */ /* Draw the 3d model occurrences found. */ /* ------------------------------------------------------------- */ public MIL_INT Draw(MIL_ID MilResult) { if (m_DisplayType == MIL.M_3D_DISPLAY) { return MIL.M3dmodDraw3d(MIL.M_DEFAULT, MilResult, MIL.M_ALL, m_MilGraphicList, MIL.M_DEFAULT, MIL.M_DEFAULT); } else { MIL_ID Mil3dGraphicList = MIL.M3dgraAlloc(m_MilSystem, MIL.M_DEFAULT, MIL.M_NULL); MIL.M3dmodDraw3d(MIL.M_DEFAULT, MilResult, MIL.M_ALL, Mil3dGraphicList, MIL.M_DEFAULT, MIL.M_DEFAULT); // Clear the graphic list. MIL.MgraControlList(m_MilGraphicList, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DELETE, MIL.M_DEFAULT); // Get all 3d graphics. IList&lt;double&gt; PointsX, PointsY; IList&lt;MIL_INT&gt; Labels; MIL.M3dgraInquire(Mil3dGraphicList, MIL.M_ROOT_NODE, MIL.M_CHILDREN + MIL.M_RECURSIVE,out Labels); MIL_ID Matrix = MIL.M3dgeoAlloc(m_MilSystem, MIL.M_TRANSFORMATION_MATRIX, MIL.M_DEFAULT, MIL.M_NULL); MIL_ID MilContainer = MIL.MbufAllocContainer(m_MilSystem, MIL.M_PROC| MIL.M_DISP, MIL.M_DEFAULT, MIL.M_NULL); // Draw all 3d boxes and dots in the 2d display. for (int i = 0; i &lt; Labels.Count(); i++) { MIL_INT GraphicType = MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_GRAPHIC_TYPE, MIL.M_NULL); if (GraphicType == MIL.M_GRAPHIC_TYPE_DOTS) { // Dots. MIL_INT Color = MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_COLOR, MIL.M_NULL); MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_POINTS_X, out PointsX); MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_POINTS_Y, out PointsY); MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, (double)Color); MIL.MgraControl(MIL.M_DEFAULT, MIL.M_INPUT_UNITS, MIL.M_WORLD); MIL.MgraDots(MIL.M_DEFAULT, m_MilGraphicList, MIL.M_DEFAULT, PointsX, PointsY, MIL.M_DEFAULT); } else if (GraphicType == MIL.M_GRAPHIC_TYPE_BOX) { // Boxes. double RotX = 0.0, RotY=0.0, RotZ=0.0, CenterX=0.0, CenterY=0.0, SizeX=0.0, SizeY=0.0; MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_CENTER_X, ref CenterX); MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_CENTER_Y, ref CenterY); MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_SIZE_X , ref SizeX); MIL.M3dgraInquire(Mil3dGraphicList, Labels[i], MIL.M_SIZE_Y , ref SizeY); MIL.M3dgraCopy(Mil3dGraphicList, Labels[i], Matrix, MIL.M_DEFAULT, MIL.M_TRANSFORMATION_MATRIX, MIL.M_DEFAULT); MIL.M3dgeoMatrixGetTransform(Matrix, MIL.M_ROTATION_ZXY, ref RotZ, ref RotY, ref RotX, MIL.M_NULL, MIL.M_DEFAULT); MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_WHITE); MIL.MgraControl(MIL.M_DEFAULT, MIL.M_INPUT_UNITS, MIL.M_WORLD); MIL.MgraRectAngle(MIL.M_DEFAULT, m_MilGraphicList, CenterX, CenterY, SizeX, SizeY, -RotZ, MIL.M_CENTER_AND_DIMENSION); } } MIL.M3dgeoFree(Matrix); MIL.M3dgraFree(Mil3dGraphicList); MIL.MbufFree(MilContainer); } return 0; } /* -------------------------------------------------------------- */ /* Updates the displayed image. */ /* -------------------------------------------------------------- */ public void UpdateDisplay(MIL_ID MilContainer, bool UseLut) { if (m_DisplayType == MIL.M_3D_DISPLAY) { return; // Containers are updated automatically in the 3D display } else { DisplayContainer(MilContainer, UseLut); } } public void Clear(MIL_INT Label) { if (m_DisplayType == MIL.M_3D_DISPLAY) MIL.M3dgraRemove(m_MilGraphicList, Label, MIL.M_DEFAULT); else { MIL.MgraControlList(m_MilGraphicList, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DELETE, MIL.M_DEFAULT); } } /* -------------------------------------------------------------- */ /* Free the display. */ /* -------------------------------------------------------------- */ public void FreeDisplay() { if (m_DisplayType == MIL.M_DISPLAY) { MIL.MdispFree(m_MilDisplay); MIL.MbufFree(m_Lut); MIL.MbufFree(m_MilDepthMap); MIL.MbufFree(m_IntensityMap); MIL.MgraFree(m_MilGraphicList); } else { MIL.M3ddispFree(m_MilDisplay); } } private /* -------------------------------------------------------------- */ /* Gets the display's graphic list, or allocates a standalone one.*/ /* -------------------------------------------------------------- */ void GetGraphicListId() { if (m_DisplayType == MIL.M_3D_DISPLAY) { m_MilGraphicList = (MIL_ID)MIL.M3ddispInquire(m_MilDisplay, MIL.M_3D_GRAPHIC_LIST_ID, MIL.M_NULL); } else // M_DISPLAY { // Associate a graphic list. m_MilGraphicList = MIL.MgraAllocList(m_MilSystem, MIL.M_DEFAULT, MIL.M_NULL); MIL.MdispControl(m_MilDisplay, MIL.M_ASSOCIATED_GRAPHIC_LIST_ID, m_MilGraphicList); } } MIL_ID m_MilSystem = MIL.M_NULL; MIL_ID m_MilDisplay = MIL.M_NULL; MIL_ID m_MilGraphicList = MIL.M_NULL; MIL_INT m_DisplayType = MIL.M_NULL; MIL_ID m_Lut = MIL.M_NULL; MIL_ID m_MilDepthMap = MIL.M_NULL; MIL_ID m_IntensityMap = MIL.M_NULL; } } ",
      "wordCount": 934
    },
    {
      "id": "Examples_General_M3dmod_CS_m3dmod_cs",
      "version": "2024020714",
      "title": "m3dmod.cs",
      "location": "Sample Code from MIL Examples",
      "text": " Top /*******************************************************************************/ /* * File name: M3dmod.cs * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This example demonstrates how to use the 3D model finder module * to define surface models and search for them in 3D scenes. * A simple single model search is presented first followed by a more * complex example of multiple occurrences in a complex scene. * * Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved /*******************************************************************************/ using System; using Matrox.MatroxImagingLibrary; namespace M3dmod { class Program { /* -------------------------------------------------------------- */ /* Example description. */ /* -------------------------------------------------------------- */ private static void PrintHeader() { Console.WriteLine(\"[EXAMPLE NAME]\"); Console.WriteLine(\"M3dmod\"); Console.WriteLine(); Console.WriteLine(\"[SYNOPSIS]\"); Console.WriteLine(\"This example demonstrates how to use the 3D model finder module\"); Console.WriteLine(\"to define surface models and search for them in 3D scenes.\"); Console.WriteLine(); Console.WriteLine(\"[MODULES USED]\"); Console.WriteLine(\"Modules used: 3D Model Finder, 3D Display, 3D Graphics, and 3D\"+ \" Image\\nProcessing.\"); Console.WriteLine(); } /* Input scanned point cloud files. */ const string SINGLE_MODEL = MIL.M_IMAGE_PATH + \"SimpleModel.mbufc\"; const string SINGLE_SCENE = MIL.M_IMAGE_PATH + \"SimpleScene.mbufc\"; const string COMPLEX_MODEL1 = MIL.M_IMAGE_PATH + \"ComplexModel1.ply\"; const string COMPLEX_MODEL2 = MIL.M_IMAGE_PATH + \"ComplexModel2.ply\"; const string COMPLEX_SCENE = MIL.M_IMAGE_PATH + \"ComplexScene.ply\"; /* Constants. */ private static readonly MIL_INT DISP_SIZE_X = 480; private static readonly MIL_INT DISP_SIZE_Y = 420; // -------------------------------------------------------------- private static void Main(string[] args) { /* Print example information in console. */ PrintHeader(); MIL_ID MilApplication = MIL.M_NULL; /* MIL application identifier */ MIL_ID MilSystem = MIL.M_NULL; /* MIL system identifier */ /* Allocate MIL objects. */ MIL.MappAlloc(MIL.M_NULL, MIL.M_DEFAULT, ref MilApplication); MIL.MsysAlloc(MIL.M_DEFAULT, MIL.M_SYSTEM_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, ref MilSystem); /* Allocate the display. */ CDisplay DisplayModel = new CDisplay(MilSystem); DisplayModel.Alloc3dDisplayId(); DisplayModel.Size(DISP_SIZE_X / 2, DISP_SIZE_Y / 2); DisplayModel.Title(\"Model Cloud\"); CDisplay DisplayScene = new CDisplay(MilSystem); DisplayScene.Alloc3dDisplayId(); DisplayScene.Size(DISP_SIZE_X, DISP_SIZE_Y); DisplayScene.PositionX((MIL_INT)(1.04 * 0.5 * DISP_SIZE_X)); DisplayScene.Title(\"Scene Cloud\"); SimpleSceneSurfaceFinder(MilSystem, ref DisplayModel,ref DisplayScene); ComplexSceneSurfaceFinder(MilSystem, ref DisplayModel, ref DisplayScene); /* Free mil objects. */ DisplayModel.FreeDisplay(); DisplayScene.FreeDisplay(); MIL.MsysFree(MilSystem); MIL.MappFree(MilApplication); } /* -------------------------------------------------------------- */ /* Simple scene with a single occurrence */ /* -------------------------------------------------------------- */ static void SimpleSceneSurfaceFinder(MIL_ID MilSystem , ref CDisplay DisplayModel, ref CDisplay DisplayScene) { /* Allocate a surface Model Finder context. */ MIL_ID MilContext = MIL.M3dmodAlloc(MilSystem, MIL.M_FIND_SURFACE_CONTEXT, MIL.M_DEFAULT, MIL.M_NULL); /* Allocate a surface Model Finder result. */ MIL_ID MilResult = MIL.M3dmodAllocResult(MilSystem, MIL.M_FIND_SURFACE_RESULT, MIL.M_DEFAULT, MIL.M_NULL); /* Restore the model container and display it */ MIL_ID MilModelContainer = MIL.MbufRestore(SINGLE_MODEL, MilSystem, MIL.M_NULL); DisplayModel.SetView(MIL.M_AZIM_ELEV_ROLL, 45, -35, 180); DisplayModel.DisplayContainer(MilModelContainer, true); Console.WriteLine(\"The 3D point cloud of the model is restored from a file and \"+ \"displayed.\"); /* Load the single model scene point cloud. */ MIL_ID MilSceneContainer = MIL.MbufRestore(SINGLE_SCENE, MilSystem, MIL.M_NULL); DisplayScene.SetView(MIL.M_AZIM_ELEV_ROLL, 202, -20.0, 182.0); DisplayScene.DisplayContainer(MilSceneContainer, true); Console.WriteLine(\"The 3D point cloud of the scene is restored from a file and\"+ \" displayed.\\n\"); Console.WriteLine(\"Press any key to start.\\n\"); Console.ReadKey(); /* Define the surface model. */ MIL.M3dmodDefine(MilContext, MIL.M_ADD_FROM_POINT_CLOUD, MIL.M_SURFACE, MilModelContainer, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); Console.WriteLine(\"Define the model using the given model point cloud.\\n\"); /* Set the search perseverance. */ Console.WriteLine(\"Set the lowest perseverance to increase the search speed for\" + \" a simple scene.\\n\"); MIL.M3dmodControl(MilContext, MIL.M_DEFAULT, MIL.M_PERSEVERANCE, 0.0); Console.WriteLine(\"Set the scene complexity to low to increase the search speed \" + \"for a simple scene.\\n\"); MIL.M3dmodControl(MilContext, MIL.M_DEFAULT, MIL.M_SCENE_COMPLEXITY, MIL.M_LOW); /* Preprocess the search context. */ MIL.M3dmodPreprocess(MilContext, MIL.M_DEFAULT); Console.WriteLine(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if not \" + \"present.\\n\"); /* The surface finder requires the existence of M_COMPONENT_NORMALS_MIL in the */ /* point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); Console.WriteLine(\"3D surface finder is running..\\n\"); /* Reset the timer. */ double ComputationTime = 0.0; MIL.MappTimer(MIL.M_DEFAULT, MIL.M_TIMER_RESET + MIL.M_SYNCHRONOUS, MIL.M_NULL); /* Find the model. */ MIL.M3dmodFind(MilContext, MilSceneContainer, MilResult, MIL.M_DEFAULT); /* Read the find time. */ MIL.MappTimer(MIL.M_DEFAULT, MIL.M_TIMER_READ + MIL.M_SYNCHRONOUS, ref ComputationTime); ShowResults(MilResult, ComputationTime); DisplayScene.Draw(MilResult); Console.WriteLine(\"Press any key to continue.\\n\"); Console.ReadKey(); /* Free mil objects*/ MIL.M3dmodFree(MilContext); MIL.M3dmodFree(MilResult); MIL.MbufFree(MilModelContainer); MIL.MbufFree(MilSceneContainer); } /* -------------------------------------------------------------- */ /* Complex scene with multiple occurrences */ /* -------------------------------------------------------------- */ static void ComplexSceneSurfaceFinder(MIL_ID MilSystem , ref CDisplay DisplayModel, ref CDisplay DisplayScene) { /* Allocate a surface 3D Model Finder context. */ MIL_ID MilContext = MIL.M3dmodAlloc(MilSystem, MIL.M_FIND_SURFACE_CONTEXT, MIL.M_DEFAULT, MIL.M_NULL); /* Allocate a surface 3D Model Finder result. */ MIL_ID MilResult = MIL.M3dmodAllocResult(MilSystem, MIL.M_FIND_SURFACE_RESULT, MIL.M_DEFAULT, MIL.M_NULL); DisplayModel.Clear(MIL.M_ALL); DisplayScene.Clear(MIL.M_ALL); /* Restore the first model container and display it. */ MIL_ID MilModelContainer = MIL.MbufRestore(COMPLEX_MODEL1, MilSystem, MIL.M_NULL); DisplayModel.SetView(MIL.M_AZIM_ELEV_ROLL, 290, -67, 265); DisplayModel.DisplayContainer(MilModelContainer, false); DisplayModel.SetView(MIL.M_AUTO, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); Console.WriteLine(\"The 3D point cloud of the first model is restored from a file\" + \" and displayed.\"); /* Load the complex scene point cloud. */ MIL_ID MilSceneContainer = MIL.MbufRestore(COMPLEX_SCENE, MilSystem, MIL.M_NULL); DisplayScene.SetView(MIL.M_AZIM_ELEV_ROLL, 260, -72, 142); DisplayScene.DisplayContainer(MilSceneContainer, false); DisplayScene.SetView(MIL.M_AUTO, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); DisplayScene.SetView(MIL.M_ZOOM, 1.2, MIL.M_DEFAULT, MIL.M_DEFAULT); Console.WriteLine(\"The 3D point cloud of the scene is restored from a file and\" + \" displayed.\\n\"); Console.WriteLine(\"Press any key to start.\\n\"); Console.ReadKey(); Console.WriteLine(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if not \" + \"present.\\n\"); /* The surface finder requires the existence of M_COMPONENT_NORMALS_MIL in the */ /* point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); /* Define the surface model. */ MIL.M3dmodDefine(MilContext, MIL.M_ADD_FROM_POINT_CLOUD, MIL.M_SURFACE, MilModelContainer, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); /* Find all ocurrences. */ MIL.M3dmodControl(MilContext, 0, MIL.M_NUMBER, MIL.M_ALL); MIL.M3dmodControl(MilContext, 0, MIL.M_COVERAGE_MAX, 75); MIL.M3dmodPreprocess(MilContext, MIL.M_DEFAULT); Console.WriteLine(\"3D surface finder is running..\\n\"); /* Reset the timer. */ double ComputationTime = 0.0; MIL.MappTimer(MIL.M_DEFAULT, MIL.M_TIMER_RESET + MIL.M_SYNCHRONOUS, MIL.M_NULL); /* Find the model. */ MIL.M3dmodFind(MilContext, MilSceneContainer, MilResult, MIL.M_DEFAULT); /* Read the find time. */ MIL.MappTimer(MIL.M_DEFAULT, MIL.M_TIMER_READ + MIL.M_SYNCHRONOUS, ref ComputationTime); ShowResults(MilResult, ComputationTime); MIL_INT Label = DisplayScene.Draw(MilResult); Console.WriteLine(\"Press any key to continue.\\n\"); Console.ReadKey(); DisplayScene.Clear(Label); MIL.MbufFree(MilModelContainer); MilModelContainer = MIL.MbufRestore(COMPLEX_MODEL2, MilSystem, MIL.M_NULL); DisplayModel.DisplayContainer(MilModelContainer, false); DisplayModel.SetView(MIL.M_AUTO, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); Console.WriteLine(\"The 3D point cloud of the second model is restored from file\" + \" and displayed.\\n\"); /* Delete the previous model. */ MIL.M3dmodDefine(MilContext, MIL.M_DELETE, MIL.M_DEFAULT, 0, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); /* Define the surface model. */ MIL.M3dmodDefine(MilContext, MIL.M_ADD_FROM_POINT_CLOUD, MIL.M_SURFACE, MilModelContainer, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT); /* Find all ocurrences. */ MIL.M3dmodControl(MilContext, 0, MIL.M_NUMBER, MIL.M_ALL); MIL.M3dmodControl(MilContext, 0, MIL.M_COVERAGE_MAX, 95); MIL.M3dmodPreprocess(MilContext, MIL.M_DEFAULT); Console.WriteLine(\"3D surface finder is running..\\n\"); /* Reset the timer. */ MIL.MappTimer(MIL.M_DEFAULT, MIL.M_TIMER_RESET + MIL.M_SYNCHRONOUS, MIL.M_NULL); /* Find the model. */ MIL.M3dmodFind(MilContext, MilSceneContainer, MilResult, MIL.M_DEFAULT); /* Read the find time. */ MIL.MappTimer(MIL.M_DEFAULT, MIL.M_TIMER_READ + MIL.M_SYNCHRONOUS, ref ComputationTime); ShowResults(MilResult, ComputationTime); DisplayScene.Draw(MilResult); Console.WriteLine(\"Press any key to end.\\n\"); Console.ReadKey(); /* Free mil objects*/ MIL.M3dmodFree(MilContext); MIL.M3dmodFree(MilResult); MIL.MbufFree(MilModelContainer); MIL.MbufFree(MilSceneContainer); } /* -------------------------------------------------------------- */ /* Adds the component M_COMPONENT_NORMALS_MIL if it's not found. */ /* -------------------------------------------------------------- */ static void AddComponentNormalsIfMissing(MIL_ID MilContainer) { MIL_ID MilNormals = (MIL_ID)MIL.MbufInquireContainer(MilContainer, MIL.M_COMPONENT_NORMALS_MIL, MIL.M_COMPONENT_ID, MIL.M_NULL); if (MilNormals != MIL.M_NULL) return; MIL_INT SizeX = MIL.MbufInquireContainer(MilContainer, MIL.M_COMPONENT_RANGE, MIL.M_SIZE_X, MIL.M_NULL); MIL_INT SizeY = MIL.MbufInquireContainer(MilContainer, MIL.M_COMPONENT_RANGE, MIL.M_SIZE_Y, MIL.M_NULL); if (SizeX &lt; 50 || SizeY &lt; 50) MIL.M3dimNormals(MIL.M_NORMALS_CONTEXT_TREE, MilContainer, MilContainer, MIL.M_DEFAULT); else MIL.M3dimNormals(MIL.M_NORMALS_CONTEXT_ORGANIZED, MilContainer, MilContainer, MIL.M_DEFAULT); } /* --------------------------------------------------------- */ /* Shows the surface finder results. */ /* --------------------------------------------------------- */ static void ShowResults(MIL_ID MilResult, double ComputationTime) { MIL_INT Status = 0 ; MIL.M3dmodGetResult(MilResult, MIL.M_DEFAULT, MIL.M_STATUS, ref Status); if (Status != MIL.M_COMPLETE) { Console.WriteLine(\"The find process is not completed.\"); } MIL_INT NbOcc = 0; MIL.M3dmodGetResult(MilResult, MIL.M_DEFAULT, MIL.M_NUMBER, ref NbOcc); Console.WriteLine(\"Found {0} occurrence(s) in \"+String.Format(\"{0:F2}\", ComputationTime)+\" s.\\n\", NbOcc); if (NbOcc == 0) return; Console.WriteLine(\"Index Score Score_Target\"); Console.WriteLine(\"------------------------------------------------------\"); double ScoreTarget = 0.0; double Score = 0.0; for (MIL_INT i = 0; i &lt; NbOcc; ++i) { MIL.M3dmodGetResult(MilResult, i, MIL.M_SCORE_TARGET, ref ScoreTarget); MIL.M3dmodGetResult(MilResult, i, MIL.M_SCORE , ref Score); Console.WriteLine(\" {0} \"+ String.Format(\"{0:F4}\", Score) + \" \" + String.Format(\"{0:F2}\", ScoreTarget) +\" \", i); } Console.WriteLine(); } } } ",
      "wordCount": 1190
    }
  ]
}]