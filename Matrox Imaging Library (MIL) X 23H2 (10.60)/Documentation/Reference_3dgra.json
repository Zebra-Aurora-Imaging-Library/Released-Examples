[{
  "id": "Reference_3dgra",
  "version": "2024020714",
  "title": "3dgra",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\3dgra\\ModuleInformation.htm",
  "text": " M3dgra functions Synopsis The functions prefixed with M3dgra make up the MIL 3D Graphics module. Functions M3dgraAdd M3dgraAlloc M3dgraArc M3dgraAxis M3dgraBox M3dgraControl M3dgraCopy M3dgraCylinder M3dgraDots M3dgraFree M3dgraGetHookInfo M3dgraGrid M3dgraHookFunction M3dgraInquire M3dgraLine M3dgraLines M3dgraNode M3dgraPlane M3dgraPolygon M3dgraRect M3dgraRemove M3dgraSphere M3dgraText ",
  "wordCount": 41,
  "subEntries": [
    {
      "id": "Reference_3dgra_M3dgraAdd",
      "version": null,
      "title": "M3dgraAdd",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraAdd.htm",
      "text": " M3dgraAdd Synopsis Add a point cloud graphic, generated from a point cloud container or depth map image buffer, to a 3D graphics list. Syntax MIL_INT64 M3dgraAdd( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_ID&nbsp;ContainerOrImageBufId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function takes a point cloud container or fully corrected depth map image buffer and generates a point cloud graphic, adding it to the specified 3D graphics list. This allows you, for example, to view the point cloud or depth map on a 3D display. Note that the point cloud container or depth map image buffer must be allocated for display. Unlike M3ddispSelect(), this function allows you to position the point cloud graphic relative to a parent graphic. Note that if using a point cloud container with a mesh component, a meshed point cloud graphic is added. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the newly generated point cloud graphic. When you add a point cloud graphic to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the specified parent must be the root node. Unlike other 3D graphics functions that create static 3D graphics, the 3D graphic created by M3dgraAdd() is, by default, linked to the 3D-displayable point cloud container or fully corrected depth map image buffer and updates dynamically. If the linked container or depth map is freed, the corresponding node (and its children) in the graphics list is automatically removed. To create an unlinked point cloud graphic, set ControlFlag to M_NO_LINK; in this case, the 3D graphics list is not updated dynamically. The 3D graphic created by M3dgraAdd() has its own coordinate system that represents the position and orientation of the 3D graphic with respect to its parent's coordinate system. Initially, the position and orientation of 3D graphic's coordinate system is the identity matrix. This means that the 3D graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. To change the position and orientation of a 3D graphic, use M3dgraCopy() with M_TRANSFORMATION_MATRIX. M3dimFix() with M_RANGE_FINITE + M_NORMALS_FINITE + M_MESH_VALID_POINTS is internally performed for point cloud graphics. Just like automatic compensation, this does not modify the source point cloud. Unlike most other functions that modify a MIL object, you can call functions in this module concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Point cloud containers and depth map image buffers are not thread-safe and must only be accessed by one thread at a time. You must ensure the source point cloud container or depth map image buffer is not modified from another thread while the add is being performed. Note that this does not impact subsequent modifications to the point cloud container or depth map image buffer as long as they are modified from one thread at a time. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the point cloud graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the point cloud graphic. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the point cloud graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. ContainerOrImageBufId Specifies the identifier of the 3D-displayable point cloud container or fully corrected depth map image buffer from which to generate the point cloud graphic. For specifying the point cloud container or depth map image buffer Value Description MIL buffer ID Specifies the MIL identifier of a fully corrected depth map image buffer with the M_DISP attribute. The image buffer must be a 1-band, 8-bit, 16-bit, or 32-bit unsigned buffer and must be 3D-corrected (that is, if you call McalInquire() with M_DEPTH_MAP, the function returns M_TRUE). MIL container identifier Specifies the MIL identifier of a 3D-displayable point cloud container. You can inquire whether a point cloud container is 3D-displayable using MbufInquireContainer() with M_3D_DISPLAYABLE. ControlFlag Specifies how to add the point cloud graphic to the 3D graphics list. For specifying whether the point cloud graphic is linked to the point cloud container or depth map image buffer Value Description M_DEFAULT Specifies to generate a linked point cloud graphic from the specified point cloud container or depth map image buffer (ContainerOrImageBufId); any subsequent changes to the source point cloud or depth map are reflected in the point cloud graphic. M_NO_LINK Specifies to generate an unlinked point cloud graphic from the specified point cloud container or depth map image buffer (ContainerOrImageBufId); any subsequent changes to the source point cloud or depth map are not reflected in the point cloud graphic. Return value Returns the label of the point cloud graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - ContainerOrImageBufId For specifying the point cloud container or depth map image buffer - ControlFlag For specifying whether the point cloud graphic is linked to the point cloud container or depth map image buffer Return value Compilation information ",
      "wordCount": 942,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraAlloc",
      "version": null,
      "title": "M3dgraAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraAlloc.htm",
      "text": " M3dgraAlloc Synopsis Allocate a 3D graphics list. Syntax MIL_ID M3dgraAlloc( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*List3dgraIdPtr //out ) Description This function allocates a 3D graphics list on the specified system. The elements in a 3D graphics list are organized in a tree structure. Each element added to a 3D graphics list is assigned an identifying label, and is added as a node in the 3D graphics list's tree structure. When a 3D graphics list is allocated, it has a root node with label 0. When the 3D graphics list is no longer required, release it using M3dgraFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D graphics list's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the system on which to allocate the 3D graphics list. For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. List3dgraIdPtr Specifies the address of the variable in which to write the 3D graphics list identifier or specifies the data type that the function should use to return the 3D graphics list identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D graphics list ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D graphics list ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DGRA_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D graphics list (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the identifier Specifies the address of a MIL_ID in which to write the identifier of the restored 3D graphics list. If restoration fails, M_NULL is written as the identifier. Return value The returned value is the 3D graphics list identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DGRA_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - SysId For specifying the system identifier - ControlFlag - List3dgraIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 493,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraArc",
      "version": null,
      "title": "M3dgraArc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraArc.htm",
      "text": " M3dgraArc Synopsis Add a circular arc graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraArc( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_INT64&nbsp;Symbol, //in MIL_DOUBLE&nbsp;X1, //in MIL_DOUBLE&nbsp;Y1, //in MIL_DOUBLE&nbsp;Z1, //in MIL_DOUBLE&nbsp;X2, //in MIL_DOUBLE&nbsp;Y2, //in MIL_DOUBLE&nbsp;Z2, //in MIL_DOUBLE&nbsp;X3, //in MIL_DOUBLE&nbsp;Y3, //in MIL_DOUBLE&nbsp;Z3, //in MIL_DOUBLE&nbsp;Angle, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a circular arc graphic to the specified 3D graphics list, allowing you to, for example, view the circular arc graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the arc graphic. When the arc graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the arc graphic's parent must be the root node. The coordinates of the arc's vertices are expressed in the coordinate system of the arc graphic's parent. The arc graphic has its own coordinate system that represents the arc's position and orientation with respect to its parent's coordinate system. The arc's coordinate system's origin is the arc's center, its X-axis is the vector directed from the arc's center to the arc's start point, and its Z-axis is the arc's normal vector. You can inquire the arc's start point and normal vector using M3dgraInquire() with M_START_POINT_... and M_NORMAL..., respectively. You can change the position and orientation of the arc graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the arc graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the arc graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the arc graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the arc graphic is defined. See the Parameter associations section for possible values that can be specified. Symbol Reserved for future expansion and must be set to M_DEFAULT. X1 Specifies the X-coordinate of the first point used to define the arc. See the Parameter associations section for possible values that can be specified. Y1 Specifies the Y-coordinate of the first point used to define the arc. See the Parameter associations section for possible values that can be specified. Z1 Specifies the Z-coordinate of the first point used to define the arc. See the Parameter associations section for possible values that can be specified. X2 Specifies the X-coordinate of the second point used to define the arc. See the Parameter associations section for possible values that can be specified. Y2 Specifies the Y-coordinate of the second point used to define the arc. See the Parameter associations section for possible values that can be specified. Z2 Specifies the Z-coordinate of the second point used to define the arc. See the Parameter associations section for possible values that can be specified. X3 Specifies the X-coordinate of the third point used to define the arc. See the Parameter associations section for possible values that can be specified. Y3 Specifies the Y-coordinate of the third point used to define the arc. See the Parameter associations section for possible values that can be specified. Z3 Specifies the Z-coordinate of the third point used to define the arc. See the Parameter associations section for possible values that can be specified. Angle Specifies the angle used to define the arc. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, and Angle parameters. For specifying the arc graphic Set unused parameters to M_DEFAULT. For specifying the arc graphic CreationMode Description X1 Y1 Z1 X2 Y2 Z2 X3 Y3 Z3 Angle M_CENTER_AND_TWO_POINTS Defines a circular arc graphic using a center and two end points. The result will be a circular arc, with a radius defined by the center and the first end point. The arc extends from the first end point to the point on the line that passes through the center and the second end point. Therefore, the second end point does not have to be a point on the arc. X1 Specifies the X-coordinate of the arc's center. Y1 Specifies the Y-coordinate of the arc's center. Z1 Specifies the Z-coordinate of the arc's center. X2 Specifies the X-coordinate of the arc's first end point. Y2 Specifies the Y-coordinate of the arc's first end point. Z2 Specifies the Z-coordinate of the arc's first end point. X3 Specifies the X-coordinate of the arc's second end point. Y3 Specifies the Y-coordinate of the arc's second end point. Z3 Specifies the Z-coordinate of the arc's second end point. Angle Specifies which angle to use with the specified center and end points. M_DEFAULT Same as M_SMALLEST_ANGLE. M_BIGGEST_ANGLE Specifies to use the biggest angle formed by the specified center and end points. M_SMALLEST_ANGLE Specifies to use the smallest angle formed by the specified center and end points. M_CENTER_AND_TWO_VECTORS Defines a circular arc graphic using a center and two vectors. The first vector defines the distance between the center and the first end point, and its magnitude determines the arc radius. The second vector defines the distance between the center and the second end point. The result will be a circular arc that extends from the first end point, to the point on the line that passes through the center and the second end point. Therefore, the second end point does not have to be a point on the arc. X1 Specifies the X-coordinate of the arc's center. Y1 Specifies the Y-coordinate of the arc's center. Z1 Specifies the Z-coordinate of the arc's center. X2 Specifies the X-component of the first vector. Y2 Specifies the Y-component of the first vector. Z2 Specifies the Z-component of the first vector. X3 Specifies the X-component of the second vector. Y3 Specifies the Y-component of the second vector. Z3 Specifies the Z-component of the second vector. Angle Specifies which angle to use with the specified center and end points. M_DEFAULT Same as M_SMALLEST_ANGLE. M_BIGGEST_ANGLE Specifies to use the biggest angle formed by the specified center and end points. M_SMALLEST_ANGLE Specifies to use the smallest angle formed by the specified center and end points. M_NORMAL_AND_ANGLE Defines a circular arc graphic using a center, a starting vector, a normal vector, and an arc angle. The starting vector defines the direction between the center and the start point, as well as the arc radius. The direction in which the arc extends follows the right-hand rule. If the starting direction vector and the normal vector are not perpendicular, the normal vector is orthogonalized. X1 Specifies the X-coordinate of the arc's center. Y1 Specifies the Y-coordinate of the arc's center. Z1 Specifies the Z-coordinate of the arc's center. X2 Specifies the X-component of the arc's starting vector. Y2 Specifies the Y-component of the arc's starting vector. Z2 Specifies the Z-component of the arc's starting vector. X3 Specifies the X-component of the arc's normal vector. Y3 Specifies the Y-component of the arc's normal vector. Z3 Specifies the Z-component of the arc's normal vector. Angle Specifies the arc angle, in degrees. M_THREE_POINTS Defines a circular arc graphic using three points on the arc. The arc starts at the first point, passes through the second point, and ends at the third point. X1 Specifies the X-coordinate of the first point on the arc. Y1 Specifies the Y-coordinate of the first point on the arc. Z1 Specifies the Z-coordinate of the first point on the arc. X2 Specifies the X-component of the second point on the arc. Y2 Specifies the Y-component of the second point on the arc. Z2 Specifies the Z-component of the second point on the arc. X3 Specifies the X-component of the third point on the arc. Y3 Specifies the Y-component of the third point on the arc. Z3 Specifies the Z-component of the third point on the arc. Return value Returns the label of the arc graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - Symbol - X1 - Y1 - Z1 - X2 - Y2 - Z2 - X3 - Y3 - Z3 - Angle - ControlFlag Parameter Associations For specifying the arc graphic Return value Compilation information ",
      "wordCount": 1532,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraAxis",
      "version": null,
      "title": "M3dgraAxis",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraAxis.htm",
      "text": " M3dgraAxis Synopsis Add an axis graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraAxis( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_ID&nbsp;Matrix3dgeoId, //in MIL_DOUBLE&nbsp;AxisLength, //in MIL_CONST_TEXT_PTR&nbsp;Name, //in MIL_INT64&nbsp;Options, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds an axis graphic to the specified 3D graphics list, allowing you to, for example, view the axis graphic on a 3D display. Axis graphics consist of three orthogonal right-handed axes (X, Y, and Z) that intersect at a single point. This 3D graphic can be used to represent a coordinate system. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the axis graphic. When the axis graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the axis graphic's parent must be the root node. The axis graphic has its own coordinate system that represents the position and orientation of the axis graphic's axes with respect to its parent's coordinate system. The origin of the axis graphic's coordinate system is the origin of the axes, and its orientation is the orientation of the axes. Therefore, the axis graphic's coordinate system is the axis graphic itself. You can set the axis graphic's position and orientation using the Matrix3dgeoId parameter. You can change the position and orientation of the axis graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the axis graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the axis graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the axis graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. Matrix3dgeoId Specifies the identifier of the transformation matrix that defines the axis graphic's position and orientation with respect to its parent's coordinate system. For specifying the transformation matrix object identifier Value Description M_DEFAULT Same as M_IDENTITY_MATRIX. M_IDENTITY_MATRIX Specifies the identity matrix. This means that the axis graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. MIL transformation matrix object identifier Specifies the identifier of the transformation matrix that defines the axis graphic's position and orientation with respect to its parent's coordinate system. The transformation matrix must be of type M_RIGID. AxisLength Specifies the length of the axes. For specifying the length of the axes Value Description Value &gt; 0.0 Specifies the length of the axes, in world units. Name Specifies an optional name for the axis graphic (for example, \"Working coordinate system\"). If this parameter is not empty, this creates a text graphic with the axis graphic as its parent, and the axis name as its text. For specifying the string Value Description M_NULL Specifies not to give the axis graphic a name. MIL_TEXT(\"String\") 1 Specifies the address of the null-terminated (\\0) ASCII string that must be shown in the text graphic. There is no restriction on the length of the string. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Options Specifies extra options for the appearance of the Name text graphic. If Name is set to an empty string, or to M_NULL, this parameter is ignored. For specifying extra options Value Description M_DEFAULT Specifies that the text is written in the direction of the text graphic's coordinate system's X-axis, and that the text faces the direction of the Z-axis of the text graphic's coordinate system. M_FLIP Specifies that the text is mirrored across the X-axis. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the axis graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - Matrix3dgeoId For specifying the transformation matrix object identifier - AxisLength For specifying the length of the axes - Name For specifying the string - Options For specifying extra options - ControlFlag Return value Compilation information ",
      "wordCount": 799,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraBox",
      "version": null,
      "title": "M3dgraBox",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraBox.htm",
      "text": " M3dgraBox Synopsis Add a box graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraBox( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;XPos1, //in MIL_DOUBLE&nbsp;YPos1, //in MIL_DOUBLE&nbsp;ZPos1, //in MIL_DOUBLE&nbsp;XPos2OrLength, //in MIL_DOUBLE&nbsp;YPos2OrLength, //in MIL_DOUBLE&nbsp;ZPos2OrLength, //in MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a box graphic to the specified 3D graphics list, allowing you to, for example, view the box graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the box graphic. When the box graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the box graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the box graphic's parent. The box graphic has its own coordinate system that represents the box graphic's position and orientation with respect to its parent's coordinate system. The origin of the box graphic's coordinate system is the box graphic's center, and the box graphic's orientation (and its coordinate system) is set relative to its parent using the Matrix3dgeoId parameter. Note that you can change the box graphic's position and orientation using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the box graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the box graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the box graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the box graphic is defined. See the Parameter associations section for possible values that can be specified. XPos1 Specifies the X-coordinate of the first point used to define the box graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. YPos1 Specifies the Y-coordinate of the first point used to define the box graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ZPos1 Specifies the Z-coordinate of the first point used to define the box graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. XPos2OrLength Specifies the X-coordinate of the second point used to define the box graphic, or the length of the box graphic along its coordinate system's X-axis. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. YPos2OrLength Specifies the Y-coordinate of the second point used to define the box graphic, or the length of the box graphic along its coordinate system's Y-axis. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ZPos2OrLength Specifies the Z-coordinate of the second point used to define the box graphic, or the length of the box graphic along its coordinate system's Z-axis. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Matrix3dgeoId Specifies the identifier of the transformation matrix that defines the box graphic's orientation with respect to its parent's coordinate system. For specifying the transformation matrix object identifier Value Description M_DEFAULT Same as M_IDENTITY_MATRIX. M_IDENTITY_MATRIX Specifies the identity matrix. This means that the box graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. The resulting box graphic is axis-aligned with respect to its parent's coordinate system. MIL transformation matrix object identifier Specifies the identifier of the transformation matrix that defines the box graphic's orientation with respect to its parent's coordinate system. The transformation matrix must be of type M_ROTATION. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, XPos1, YPos1, ZPos1, XPos2OrLength, YPos2OrLength, and ZPos2OrLength parameters. For specifying the box graphic Set unused parameters to M_DEFAULT. For specifying the box graphic CreationMode Description XPos1 YPos1 ZPos1 XPos2OrLength YPos2OrLength ZPos2OrLength M_BOTH_CORNERS Defines the box graphic using any two opposite corners. XPos1 Specifies the X-coordinate of the first corner of the box. YPos1 Specifies the Y-coordinate of the first corner of the box. ZPos1 Specifies the Z-coordinate of the first corner of the box. XPos2OrLength Specifies the X-coordinate of the second corner of the box, opposite to the first corner. YPos2OrLength Specifies the Y-coordinate of the second corner of the box, opposite to the first corner. ZPos2OrLength Specifies the Z-coordinate of the second corner of the box, opposite to the first corner. M_CENTER_AND_DIMENSION Defines the box graphic by its center point and its length along each of its coordinate system's axes. XPos1 Specifies the X-coordinate of the center of the box graphic. YPos1 Specifies the Y-coordinate of the center of the box graphic. ZPos1 Specifies the Z-coordinate of the center of the box graphic. XPos2OrLength Specifies the length of the box graphic along its coordinate system's X-axis. Value &gt; 0.0 Specifies the length of the box graphic along its coordinate system's X-axis, in world units. YPos2OrLength Specifies the length of the box graphic along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the length of the box graphic along its coordinate system's Y-axis, in world units. ZPos2OrLength Specifies the length of the box graphic along its coordinate system's Z-axis. Value &gt; 0.0 Specifies the length of the box graphic along its coordinate system's Z-axis, in world units. M_CORNER_AND_DIMENSION Defines the box graphic by one of its corners and its length along each of its coordinate system's axes. XPos1 Specifies the X-coordinate of one corner of the box graphic. YPos1 Specifies the Y-coordinate of one corner of the box graphic. ZPos1 Specifies the Z-coordinate of one corner of the box graphic. XPos2OrLength Specifies the length of the box graphic along its coordinate system's X-axis. Value &gt; 0.0 Specifies the length of the box graphic along its coordinate system's X-axis, in world units. YPos2OrLength Specifies the length of the box graphic along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the length of the box graphic along its coordinate system's Y-axis, in world units. ZPos2OrLength Specifies the length of the box graphic along its coordinate system's Z-axis. Value &gt; 0.0 Specifies the length of the box graphic along its coordinate system's Z-axis, in world units. Return value Returns the label of the box graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - XPos1 - YPos1 - ZPos1 - XPos2OrLength - YPos2OrLength - ZPos2OrLength - Matrix3dgeoId For specifying the transformation matrix object identifier - ControlFlag Parameter Associations For specifying the box graphic Return value Compilation information ",
      "wordCount": 1263,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraControl",
      "version": null,
      "title": "M3dgraControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraControl.htm",
      "text": " M3dgraControl Synopsis Control the 3D graphics in a 3D graphics list, as well as their default settings. Syntax void M3dgraControl( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;Label, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function allows you to control the settings of a 3D graphic in a 3D graphics list, as well as default settings for 3D graphics subsequently added to the list. You can control the default settings of the 3D graphics list using M_DEFAULT_SETTINGS. These settings are applied to any 3D graphics that you subsequently add to the 3D graphics list. They are not applied retroactively to 3D graphics already in the 3D graphics list. You can control the settings for all existing descendants of the specified 3D graphic using M_RECURSIVE. This affects all descendants for which the setting is available (even if the setting is not available for the specified 3D graphic). It does not affect 3D graphics that you subsequently add as children of the specified 3D graphic. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dgraControl() internally calls the MIL_DOUBLE version of this function (M3dgraControlDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (M3dgraControlInt64()). Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list to control. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). See the Parameter associations section for possible values that can be specified. Label Specifies the label of the 3D graphic to control. You can also control the default settings of the 3D graphics list itself. For specifying the 3D graphic label Value Description M_DEFAULT_SETTINGS Specifies to control the default settings of the 3D graphics that are added to the 3D graphics list. These settings will not be applied to the 3D graphics that are already in the 3D graphics list. M_LIST Specifies to control the 3D graphics list itself. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. ControlType Specifies the type of setting to control. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the required value for the setting. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the List3dgraId, ControlType, and ControlValue parameters. For the 3D graphics list itself For the default settings of a 3D graphics list For the settings of a 3D graphic The following control types allow you to control the 3D graphics list when Label is M_LIST. These control types affect all graphics in the graphics list. For the 3D graphics list itself List3dgraId Description ControlType ControlValue Graphics list identifier with Label set to M_LIST Specifies a 3D graphics list, allocated using M3dgraAlloc(). M_EDITABLE_APPEARANCE Sets the appearance of the interactively editable graphic on display such that it appears as a solid surface, wireframe, or points. This is the appearance applied to a graphic when M_EDITABLE is M_ENABLE. M_DEFAULT Same as M_SOLID_WITH_WIREFRAME. M_POINTS Specifies a points appearance. The 3D graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The 3D graphic appears as a set of lines connecting its vertices. M_EDITABLE_COLOR Sets the default color of the points and lines of the interactively editable graphics added to the 3D graphics list. This is the color applied to a graphic when M_EDITABLE is M_ENABLE. M_DEFAULT Same as M_COLOR_CYAN. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_EDITABLE_OPACITY Sets the default opacity of the interactively editable graphics added to the 3D graphics list. This is the opacity applied to a graphic when M_EDITABLE is M_ENABLE. M_DEFAULT Specifies the default value; the default value is 30.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). The following ControlType and corresponding ControlValue parameter settings are used to change the default settings of a 3D graphics list. For the default settings of a 3D graphics list List3dgraId Description ControlType ControlValue Graphics list ID with Label set to M_DEFAULT_SETTINGS Specifies a 3D graphics list, allocated using M3dgraAlloc(), and M_DEFAULT_SETTINGS specified by the Label parameter. M_APPEARANCE Sets the default appearance of the 3D graphics added to the 3D graphics list, to either display them as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The 3D graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The 3D graphic appears as a set of lines connecting its vertices. M_BACKGROUND_COLOR Sets the default background color for text graphics added to the 3D graphics list. M_DEFAULT Same as M_COLOR_BLACK. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the text graphic's background color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_BACKGROUND_MODE Sets the default background mode for text graphics added to the 3D graphics list. You can specify the default background color for text graphics using M_BACKGROUND_COLOR. M_DEFAULT Same as M_TRANSPARENT. M_OPAQUE Specifies that the background of the text graphic is filled with the current background color. M_TRANSPARENT Specifies that the text graphic does not have a background. M_COLOR Sets the default color of the points and lines of the 3D graphics added to the 3D graphics list. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_AXIS_X Sets the default color of the X-axis of axis graphics added to the 3D graphics list. M_DEFAULT Specifies the default value. The default value is a red color defined by M_RGB888() with values 215, 0, and 0. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_AXIS_Y Sets the default color of the Y-axis of axis graphics added to the 3D graphics list. M_DEFAULT Specifies the default value. The default value is a green color defined by M_RGB888() with values 50, 255, and 50. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_AXIS_Z Sets the default color of the Z-axis of axis graphics added to the 3D graphics list. M_DEFAULT Specifies the default value. The default value is a blue color defined by M_RGB888() with values 0, 140, and 255. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_COMPONENT Sets the default color of the points in the point cloud graphics added to the 3D graphics list, using one of the source container's components. You can specify a component using its identifier or its type. If there is not exactly one component with the specified identifier or type, or if the specified component does not have the same size and dimensions as the container's range component, the color defaults to M_NULL. This control type is ignored if M3ddispLut() is used to color the point cloud graphic using a LUT; in this case, the range component is always used. M_NULL Specifies that the color of the points in the point cloud graphic is set to the single color specified by M_COLOR. M_AUTO_COLOR Specifies to color the point cloud graphic according to specific components in the source container. If the container is a point cloud, the point cloud graphic is colored based on the reflectance component. If the reflectance component does not exist, the intensity component is used. If there is no reflectance or intensity component, this control is set to M_NULL, and the point cloud graphic will be colored using the single color specified by M_COLOR. If the container is a depth map, the point cloud graphic is colored according to the range component's third band. Note that this setting ignores M_COLOR_COMPONENT_BAND. All three component bands are used for point clouds, while the 3rd component band is used tor depth maps. This is the default value. M_COMPONENT_CONFIDENCE Specifies to color the point cloud graphic according to the component that stores confidence information for the M_COMPONENT_RANGE or M_COMPONENT_DISPARITY component of the container. M_COMPONENT_COORDINATE_MAP_A_MIL Specifies to color the point cloud graphic according to the component that stores the A coordinate map provided by the camera. M_COMPONENT_COORDINATE_MAP_B_MIL Specifies to color the point cloud graphic according to the component that stores the B coordinate map provided by the camera. M_COMPONENT_CUSTOM + n Specifies to color the point cloud graphic according to a component that has a custom type, identified by n, where n can be a value between 0 and 255. M_COMPONENT_DISPARITY Specifies to color the point cloud graphic according to the component that stores a disparity map. M_COMPONENT_INFRARED Specifies to color the point cloud graphic according to the component that stores an intensity image of infrared light. M_COMPONENT_INTENSITY Specifies to color the point cloud graphic according to the component that stores an intensity image of visible light. M_COMPONENT_MESH_MIL Specifies to color the point cloud graphic according to the component that stores mesh information for the M_COMPONENT_RANGE component of the container. M_COMPONENT_METADATA Specifies to color the point cloud graphic according to the component that stores metadata information. M_COMPONENT_MULTISPECTRAL Specifies to color the point cloud graphic according to the component that stores an intensity image where each band represents the intensity of a specific wavelength of light. M_COMPONENT_NORMALS_MIL Specifies that the buffer stores normals information for each point in the M_COMPONENT_RANGE component of the container. M_COMPONENT_RANGE Specifies to color the point cloud graphic according to the component that stores 3D distance/position information. M_COMPONENT_REFLECTANCE Specifies to color the point cloud graphic according to the component that stores a reflectance map. M_COMPONENT_SCATTER Specifies to color the point cloud graphic according to the component that stores a scatter map. M_COMPONENT_ULTRAVIOLET Specifies to color the point cloud graphic according to the component that stores an intensity image of ultraviolet light. M_COLOR_COMPONENT_BAND Sets the component's band to use by default for point cloud graphics added to the 3D graphics list when M_COLOR_COMPONENT is set to a component type. If the band does not exist, or if M_ALL_BANDS is used on a component that does not have 3 bands, band 0 is used. M_DEFAULT Same as M_ALL_BANDS. M_ALL_BANDS Specifies all the bands of the component. Value &gt;= 0 Specifies the index of the band to use. The relationship between index value and band for RGB, HSL, and YUV buffers is the following: 0 Corresponds to the red band (for RGB parent buffers), the hue band (for HSL parent buffers), and the Y band (for YUV parent buffers). 1 Corresponds to the green band (for RGB parent buffers), the saturation band (for HSL parent buffers), and the U band (for YUV parent buffers). 2 Corresponds to the blue band (for RGB parent buffers), the luminance band (for HSL parent buffers), and the V band (for YUV parent buffers). M_COLOR_LIMITS Sets the default limits of the values in the component used to color the point cloud graphics added to the 3D graphics list. Values between the minimum and the maximum are remapped linearly to values between the minimum and maximum possible display values. The values beyond the minimum or maximum are saturated. When M_COLOR_USE_LUT is M_TRUE, the minimum and maximum get mapped to the LUT's extreme values. M_DEFAULT Same as M_BUFFER_LIMITS. M_BUFFER_LIMITS Specifies to use the buffer's minimum and maximum. Note that this is unavailable for floating-point buffers, and defaults to M_DATA_EXTREMES_PER_BAND. M_DATA_EXTREMES_GLOBAL Specifies to use the global minimum and maximum of the buffer's data. If the buffer has multiple bands, a single minimum and maximum is used for all of them. M_DATA_EXTREMES_PER_BAND Specifies to use the minimum and maximum of the buffer's data in each of its bands. If the buffer has multiple bands, each band has its own minimum and maximum. M_USER_DEFINED Specifies to use the minimum and maximum manually set with M_COLOR_LIMITS_MIN and M_COLOR_LIMITS_MAX. M_COLOR_LIMITS_MAX Sets the default maximum color value for point cloud graphics added to the 3D graphics list when M_COLOR_LIMITS is M_USER_DEFINED. Value Specifies the maximum color value to use. The default value is 65535. M_COLOR_LIMITS_MIN Sets the default minimum color value for point cloud graphics added to the 3D graphics list when M_COLOR_LIMITS is M_USER_DEFINED. Value Specifies the minimum color value to use. The default value is 0. M_COLOR_USE_LUT Sets whether to color the point cloud graphics added to the 3D graphics list by mapping each value of the component specified by M_COLOR_COMPONENT to a color in a LUT, and then using that color to display the corresponding point. The default LUT is M_COLORMAP_TURBO, but you can change it using M3dgraCopy(). If the LUT is set to M_NULL using M3dgraCopy() with M_COLOR_LUT, this setting will be ignored even if it is set to M_TRUE. Note that if M_COLOR_COMPONENT_BAND is set to M_ALL_BANDS and the specified component does not have 3 bands, band 0 is used. This control type is a more flexible alternative than using M3ddispLut(), which applies a LUT exclusively to the source point cloud's range component. M_DEFAULT Same as M_FALSE. M_FALSE Specifies not to use a LUT. M_TRUE Specifies to use a LUT. M_COLOR_USE_TEXTURE Specifies whether to fill the polygon graphics added to the 3D graphics list with a texture by default. If the polygon graphic has no texture buffer, M_FILL_COLOR is used regardless of this setting. M_DEFAULT Same as M_TRUE. M_FALSE Specifies to fill the polygon graphic with M_FILL_COLOR. M_TRUE Specifies to fill the polygon graphic with a texture buffer. M_DISPLAY_BASES Sets whether the cylinder graphic's bases are displayed or not by default when a cylinder graphic is added to the 3D graphics list. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies that the cylinder graphic's bases are not displayed. M_ENABLE Specifies that the cylinder graphic's bases are displayed. M_FILL_COLOR Sets the default color of the solid surfaces of the 3D graphics added to the 3D graphics list. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_FONT Sets the default font for text graphics added to the 3D graphics list. MIL will use TrueType and Unicode features to draw text. This allows you to draw text using different sizes and TrueType fonts installed on your computer. This also allows you to draw any Unicode text (depending on the font). M_FONT_DEFAULT_TTF Specifies the default TrueType font of your operating system. Note, if using a C compiler, you must pass the value as MIL_PTR_TO_DOUBLE(M_FONT_DEFAULT_TTF). MIL_TEXT(\"FontFamily:Weight:Slant\") 1 Specifies the font according to the following format, Family: Weight: Slant. Family must be set to the name of the font's family, such as Arial, Times New Roman, and Wingdings. Weight can be set to one of the following: Book, Thin, ExtraLight, UltraLight, Light, Normal, Regular, Medium, SemiBold, DemiBold, Bold, ExtraBold, UltraBold, Heavy, Black, ExtraBlack, or UltraBlack. Slant can be set to one of the following: Italic, Oblique, or Roman. You can omit Weight and Slant; also, you can provide the Weight and Slant in any order. Note, if using a C compiler, you must pass the value as MIL_PTR_TO_DOUBLE(MIL_TEXT(\"FontFamily:Weight:Slant\")). MIL_TEXT(\"FontFile\") 1 Specifies a full path to a TrueType file name. Note, if using a C compiler, you must pass the value as MIL_PTR_TO_DOUBLE(MIL_TEXT(\"FontFile\")). M_FONT_AUTO_SELECT Sets the default automatic font selection behavior for text graphics added to the 3D graphics list. If automatic font selection is enabled for a text graphic, MIL searches for a suitable font to draw the text if the currently selected font (set using M_FONT) does not support the character code. MIL will first attempt to make its selection from already used fonts, and then from system fonts. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies that MIL will not search for a suitable font. An error is returned if the character code cannot be drawn using the current TrueType font. M_ENABLE Specifies that MIL will search for a suitable font. M_FONT_SIZE Sets the default font size for text graphics added to the 3D graphics list. M_DEFAULT Specifies the default value; the default value is 1. Value &gt; 0.0 Specifies the font size. This is the height of one line of text, in world units. M_GRAPHIC_RESOLUTION Sets the default mesh resolution of 3D graphics added to the 3D graphics list. This applies to arc, axis, cylinder, and sphere graphics. Higher graphic resolutions settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Specifies the default value; the default value is 64. Value &gt;= 3 Specifies the resolution of the 3D graphic's mesh. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_KEYING_COLOR Sets the default pixel value to display as transparent for polygon graphics added to the 3D graphics list. This setting is only used if the polygon graphic is filled with a texture buffer. Any portion of the polygon graphic that would be displayed with this color is instead made transparent, regardless of the polygon graphic's M_OPACITY setting. This can be used to cut out parts of a polygon graphic. M_DEFAULT Same as M_NONE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the texture's keying value. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_NONE Specifies that the texture does not have a keying value. 0 &lt;= Value &lt;= 255 Specifies a grayscale keying value, used when the texture is a 1-band buffer. M_OPACITY Sets the default opacity of the 3D graphics added to the 3D graphics list. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets the default layer on which the 3D graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the 3D graphic will be rendered. M_SHADING Sets the default shading of the 3D graphics added to the 3D graphics list. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. This setting does not apply to text, node, line, arc, grid, or dots graphics. You can control the default shading mode for text graphics using M_TEXT_SHADING. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the 3D graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the 3D graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the 3D graphic is displayed without shading. M_PHONG Specifies that the 3D graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_TEXT_ALIGN_HORIZONTAL Sets the default horizontal justification of the text of the text graphic. This also affects the alignment of the text relative to the origin of the text graphic. M_DEFAULT Same as M_LEFT. M_CENTER Specifies that the text is horizontally centered. M_LEFT Specifies that the text is left-aligned. M_RIGHT Specifies that the text is right-aligned. M_TEXT_ALIGN_VERTICAL Sets the default vertical justification of the text of the text graphic. This also affects the alignment of the text relative to the origin of the text graphic. M_DEFAULT Same as M_TOP. M_BOTTOM Specifies that the text is bottom-aligned. M_CENTER Specifies that the text is vertically centered. M_TOP Specifies that the text is top-aligned. M_TEXT_BORDER Sets the default borders around text graphics added to the 3D graphics list. Note that the possible settings can be combined. For example, to draw a box around the text, specify M_TOP + M_BOTTOM + M_LEFT + M_RIGHT. M_DEFAULT Same as M_NONE. M_BOTTOM Specifies that a line is drawn underneath the text. M_LEFT Specifies that a line is drawn to the left of the text. M_NONE Specifies that no border is drawn around the text. This setting cannot be combined with any other setting. M_RIGHT Specifies that a line is drawn to the right of the text. M_TOP Specifies that a line is drawn above the text. M_TEXT_DIRECTION Sets the default direction to draw text when a text graphic is added to the 3D graphics list. M_DEFAULT Same as M_LEFT_TO_RIGHT. M_LEFT_TO_RIGHT Specifies that text will be drawn from left to right. M_RIGHT_TO_LEFT Specifies that text will be drawn from right to left. M_TEXT_SHADING Controls the default shading of the text graphics added to the 3D graphics list. Shaded text graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. Displaying a shaded 3D graphic requires more GPU processing power than displaying an unshaded 3D graphic. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the text graphic is displayed without shading. M_ENABLE Specifies that the text graphic is displayed with shading. M_THICKNESS Sets the default thickness of the points/lines of the 3D graphics added to the 3D graphics list in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the display can pause noticeably when generating new LoDs. When live grabbing from a 3D sensor, the grab thread might also be blocked during this process. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. For example, a value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to resample the point cloud when regenerating the LoDs. Setting this to 1.0 would be effectively the same as setting M_VIEW_BASED_LOD to M_DISABLE. For example, with 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs, thereby reducing the performance benefit of enabling LoD. (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. Grid sampling gives a good representation of the full detail point cloud, and is less likely to be visibly degraded when M_LOD_DEGRADATION_LEVEL level is set to a low value in the display. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. Random sampling requires significantly less time to regenerate the LoDs than grid sampling. M_VISIBLE Sets the default visibility of the 3D graphics added to the 3D graphics list. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). The following ControlType and corresponding ControlValue parameter settings are used to change the settings of a 3D graphic. For the settings of a 3D graphic List3dgraId Description ControlType ControlValue Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_ARC Specifies a 3D graphics list, allocated using M3dgraAlloc(), and an arc graphic specified by the Label parameter. M_ANGLE Sets the arc graphic's angle. -360.0 &lt;= Value &lt;= 360.0 Specifies the arc graphic's angle, in degrees. M_APPEARANCE Sets the appearance of the arc graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The arc graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The arc graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the arc graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_RESOLUTION Sets the resolution of the arc graphic's mesh. This is the number of edges on the arc graphic. For example, if this value is set to 3, the arc graphic is shown as 3 lines. Higher graphic resolutions settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Specifies the default value; the default value is 64. Value &gt;= 3 Specifies the number of edges on the arc graphic. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the arc graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the arc graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the arc graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RADIUS Sets the arc graphic's radius. Value &gt;= 0.0 Specifies the arc graphic's radius, in world units. M_RENDER_LAYER Sets on which layer the arc graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the arc graphic will be rendered. M_THICKNESS Sets the thickness of the points/lines of the arc graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the arc graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_AXIS Specifies a 3D graphics list, allocated using M3dgraAlloc(), and an axis graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the axis graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The axis graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The axis graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the axis graphic. This will set all three axes to the same color. To assign a color to a specific axis, use M_COLOR_AXIS_.... M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_AXIS_X Sets the color of the axis graphic's X-axis. M_DEFAULT Specifies the default value. The default value is a red color defined by M_RGB888() with values 215, 0, and 0. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_AXIS_Y Sets the color of the axis graphic's Y-axis. M_DEFAULT Specifies the default value. The default value is a green color defined by M_RGB888() with values 50, 255, and 50. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_AXIS_Z Sets the color of the axis graphic's Z-axis. M_DEFAULT Specifies the default value. The default value is a blue color defined by M_RGB888() with values 0, 140, and 255. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_RESOLUTION Sets the resolution of the mesh for the cone-shaped arrow caps of the axis graphic. This is the number of edges on the axis graphic's cone-shaped arrow caps. For example, if this value is set to 3, the axis arrow caps are shown as tetrahedrons. Higher graphic resolutions settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Specifies the default value; the default value is 64. Value &gt;= 3 Specifies the number of edges on the axis graphic's cone-shaped arrow caps. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the axis graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_LENGTH Sets the length of the axis graphic's axes. Value &gt; 0.0 Specifies the length of the axis graphic's axes, in world units. M_OPACITY Sets the opacity of the axis graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the axis graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the axis graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the axis graphic will be rendered. M_SHADING Sets the axis graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the axis graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the axis graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the axis graphic is displayed without shading. M_PHONG Specifies that the axis graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_THICKNESS Sets the thickness of the points/lines of the axis graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the axis graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_BOX Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a box graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the box graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. Same as M_SOLID. M_POINTS Specifies a points appearance. The box graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The box graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the box graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_EDITABLE Sets whether the box graphic is editable interactively. This adds handles to the box when it is displayed so that you can modify it interactively. To establish which handles are displayed, use M_ROTATABLE, M_SCALABLE, and M_TRANSLATABLE. When a box graphic is editable interactively, a selectable axis graphic is displayed representing the box graphic's coordinate system. Click and drag on an axis (or its arrowhead) to reposition the box. To interactively change the size of the box, click and drag on a scaling handle (shown as a brown cube on each face). To change its orientation, click and drag on one of the curved arcs that sit at the center of the displayed box graphic. To change the box graphic's appearance when editable, use M_EDITABLE_APPEARANCE, M_EDITABLE_COLOR, and M_EDITABLE_OPACITY. Only one box is editable at a time. For more information, see the Interactive 3D graphics section of Chapter 43: 3D Display and graphics. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be edited interactively. You can still modify it using M3dgraControl(). M_ENABLE Specifies that the graphic can be edited interactively. M_EDITABLE_HANDLE_SIZE_ROTATION Sets the size of the rotation handles, as a factor of the default size. M_DEFAULT Specifies the default value; the default value is 1. Value &gt; 0 Specifies the size of the handle graphic. M_EDITABLE_HANDLE_SIZE_SCALE Sets the size of the scaling handles, as a factor of the default size. M_DEFAULT Specifies the default value; the default value is 1. Value &gt; 0 Specifies the size of the handle graphic. M_EDITABLE_HANDLE_SIZE_TRANSLATION Sets the size of the translation handles, as a factor of the default size. M_DEFAULT Specifies the default value; the default value is 1. Value &gt; 0 Specifies the size of the handle graphic. M_FILL_COLOR Sets the color of the solid surfaces of the box graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the box graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the box graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the box graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the box graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the box graphic will be rendered. M_ROTATABLE Sets whether the box graphic is rotatable interactively. To show the rotation handles, you must set M_EDITABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be rotated. M_ROTATABLE_X Sets whether the box graphic is rotatable interactively in the X-direction. To show the rotation handles, you must set M_EDITABLE to M_ENABLE and M_ROTATABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated around the X-axis. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be rotated around the X-axis. M_ROTATABLE_Y Sets whether the box graphic is rotatable interactively around the Y-axis. To show the rotation handles, you must set M_EDITABLE to M_ENABLE and M_ROTATABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated around the Y-axis. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be rotated around the Y-axis. M_ROTATABLE_Z Sets whether the box graphic is rotatable interactively around the Z-axis. To show the rotation handles, you must set M_EDITABLE to M_ENABLE and M_ROTATABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated around the Z-axis. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be rotated around the Z-axis. M_SCALABLE Sets whether the box graphic is scalable interactively. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled. M_SCALABLE_X Sets whether the box graphic is scalable interactively in the X-direction. To show the scaling handles, you must set M_EDITABLE to M_ENABLE and M_SCALABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the X-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the X-direction. M_SCALABLE_X0 Sets whether the box graphic is scalable interactively in the X-direction by the individual handle, initially corresponding to the minimum X-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE, M_SCALABLE to M_ENABLE, and M_SCALABLE_X to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the X-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the X-direction. M_SCALABLE_X1 Sets whether the box graphic is scalable interactively in the X-direction by the individual handle, initially corresponding to the maximum X-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE, M_SCALABLE to M_ENABLE, and M_SCALABLE_X to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the X-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the X-direction. M_SCALABLE_Y Sets whether the box graphic is scalable interactively in the Y-direction. To show the scaling handles, you must set M_EDITABLE to M_ENABLE and M_SCALABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Y-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the Y-direction. M_SCALABLE_Y0 Sets whether the box graphic is scalable interactively in the Y-direction by the individual handle, initially corresponding to the minimum Y-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE, M_SCALABLE to M_ENABLE, and M_SCALABLE_Y to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Y-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the Y-direction. M_SCALABLE_Y1 Sets whether the box graphic is scalable interactively in the Y-direction by the individual handle, initially corresponding to the maximum Y-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE, M_SCALABLE to M_ENABLE, and M_SCALABLE_Y to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Y-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the Y-direction. M_SCALABLE_Z Sets whether the box graphic is scalable interactively in the Z-direction. To show the scaling handles, you must set M_EDITABLE to M_ENABLE and M_SCALABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Z-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the Z-direction. M_SCALABLE_Z0 Sets whether the box graphic is scalable interactively in the Z-direction by the individual handle, initially corresponding to the minimum Z-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE, M_SCALABLE to M_ENABLE, and M_SCALABLE_Z to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Z-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the Z-direction. M_SCALABLE_Z1 Sets whether the box graphic is scalable interactively in the Z-direction by the individual handle, initially corresponding to the maximum Z-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE, M_SCALABLE to M_ENABLE, and M_SCALABLE_Z to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Z-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be scaled in the Z-direction. M_SHADING Sets the box graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the box graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the box graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the box graphic is displayed without shading. M_PHONG Specifies that the box graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_SIZE_X Sets the box graphic's length along its coordinate system's X-axis. Value &gt; 0.0 Specifies the length of the box graphic, in world units, along the box's coordinate system's X-axis. M_SIZE_Y Sets the box graphic's length along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the length of the box graphic, in world units, along the box's coordinate system's Y-axis. M_SIZE_Z Sets the box graphic's length along its coordinate system's Z-axis. Value &gt; 0.0 Specifies the length of the box graphic, in world units, along the box's coordinate system's Z-axis. M_THICKNESS Sets the thickness of the points/lines of the box graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_TRANSLATABLE Sets whether the box graphic is translatable interactively. To show the translation handles, you must set M_EDITABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be translated. M_TRANSLATABLE_X Sets whether the box graphic is translatable interactively in the X-direction. To show the translation handles, you must set M_EDITABLE to M_ENABLE and M_TRANSLATABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated in the X-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be translated in the X-direction. M_TRANSLATABLE_Y Sets whether the box graphic is translatable interactively in the Y-direction. To show the translation handles, you must set M_EDITABLE to M_ENABLE and M_TRANSLATABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated in the Y-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be translated in the Y-direction. M_TRANSLATABLE_Z Sets whether the box graphic is translatable interactively in the Z-Direction. To show the translation handles, you must set M_EDITABLE to M_ENABLE and M_TRANSLATABLE to M_ENABLE. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated in the Z-direction. You can still modify it using M3dgraControl(). M_ENABLE Specifies the box can be translated in the Z-direction. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the box graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_CYLINDER Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a cylinder graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the cylinder graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The cylinder graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The cylinder graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the cylinder graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_DISPLAY_BASES Sets whether the cylinder graphic's bases are displayed or not. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies that the cylinder graphics's bases are not displayed. M_ENABLE Specifies that the cylinder graphic's bases are displayed. M_FILL_COLOR Sets the color of the solid surfaces of the cylinder graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_GRAPHIC_RESOLUTION Sets the resolution of the cylinder graphic's mesh. This is the number of edges on the cylinder graphic's bases and the number of faces that make up the sides of the cylinder. For example, if this value is set to 3, the cylinder graphic is shown as a triangular prism. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Specifies the default value; the default value is 64. Value &gt;= 3 Specifies the number of edges on the cylinder graphic's bases and the number of faces that make up the sides of the cylinder. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the cylinder graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_LENGTH Sets the cylinder graphic's length. Value &gt; 0.0 Specifies the cylinder graphic's length, in world units. M_OPACITY Sets the opacity of the cylinder graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the cylinder graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RADIUS Sets the cylinder graphic's radius. Value &gt; 0.0 Specifies the cylinder graphic's radius, in world units. M_RENDER_LAYER Sets on which layer the cylinder graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the cylinder graphic will be rendered. M_SHADING Sets the cylinder graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the cylinder graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the cylinder graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the cylinder graphic is displayed without shading. M_PHONG Specifies that the cylinder graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_THICKNESS Sets the thickness of the points/lines of the cylinder graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the cylinder graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_DOTS Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a dots graphic specified by the Label parameter. M_COLOR Sets the color of the points in the dots graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the dots graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the dots graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the dots graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the dots graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the dots graphic will be rendered. M_THICKNESS Sets the thickness of the dots graphic's points in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the dot thickness , in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the dots graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_GRID Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a grid graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the grid graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The grid graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The grid graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the grid graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_FILL_COLOR Sets the color of the solid surfaces of the grid graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the grid graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_NUMBER_OF_TILES_X Sets the number of cells along the grid graphic's X-axis. Value &gt; 0 Specifies the number of cells along the grid graphic's X-axis. M_NUMBER_OF_TILES_Y Sets the number of cells along the grid graphic's Y-axis. Value &gt; 0 Specifies the number of cells along the grid graphic's Y-axis. M_OPACITY Sets the opacity of the grid graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the grid graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the grid graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the grid graphic will be rendered. M_SPACING_X Sets the spacing between the lines along the grid graphic's X-axis. Value &gt; 0.0 Specifies the spacing between the lines along the grid graphic's X-axis, in world units. M_SPACING_Y Sets the spacing between the lines along the grid graphic's Y-axis. Value &gt; 0.0 Specifies the spacing between the lines along the grid graphic's Y-axis, in world units. M_THICKNESS Sets the thickness of the points/lines of the grid graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the grid graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a line graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the line graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The line graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The line graphic appears as a line connecting its vertices. M_COLOR Sets the color of the points and lines of the line graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the line graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_LENGTH Sets the line graphic's length. Value &gt; 0.0 Specifies the line graphic's length, in world units. M_OPACITY Sets the opacity of the line graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the line graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the line graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the line graphic will be rendered. M_THICKNESS Sets the thickness of the points/line of the line graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the line graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINES Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a lines graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the lines graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The lines graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The lines graphic appears as a lines connecting its vertices. M_COLOR Sets the color of the points and lines of the lines graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the lines graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the lines graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the lines graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the lines graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the lines graphic will be rendered. M_THICKNESS Sets the thickness of the points/lines of the lines graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the lines graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_PLANE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a plane graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the plane graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The plane graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The plane graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the plane graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_FILL_COLOR Sets the color of the solid surfaces of the plane graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the plane graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the plane graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the plane graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the plane graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the plane graphic will be rendered. M_SHADING Sets the plane graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the plane graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the plane graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the plane graphic is displayed without shading. M_PHONG Specifies that the plane graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_THICKNESS Sets the thickness of the points/lines of the plane graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the plane graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POINT_CLOUD Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a point cloud graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the point cloud graphic on display as a solid surface, wireframe, or points. This setting is only used when the point cloud graphic is associated with a meshed point cloud container. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The point cloud graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The point cloud graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the point cloud graphic. To color the point cloud graphic using this color, set M_COLOR_COMPONENT to M_NULL. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_COMPONENT Sets the color of the points in the point cloud graphic using one of the source container's components. You can specify a component using its identifier, or its type. If there is not exactly one component with the specified identifier or type, or if the specified component does not have the same size and dimensions as the container's range component, the color defaults to M_NULL. This control type is ignored if M3ddispLut() is used to color the point cloud graphic using a LUT; in this case, the range component is always used. M_NULL Specifies that the color of the points in the point cloud graphic is set to a single color using M_COLOR. M_AUTO_COLOR Specifies to color the point cloud graphic according to specific components in the source container. If the container is a point cloud, the point cloud graphic is colored based on the reflectance component. If the reflectance component does not exist, the intensity component is used. If there is no reflectance or intensity, M_NULL is used. If it is set to M_NULL, the points of the point cloud graphic are colored using M_COLOR. If the container is a depth map, the point cloud graphic is colored according to the range component's 3rd band. This is the default value. M_COMPONENT_CONFIDENCE Specifies to color the point cloud graphic according to the component that stores confidence information for the M_COMPONENT_RANGE or M_COMPONENT_DISPARITY component of the container. M_COMPONENT_COORDINATE_MAP_A_MIL Specifies to color the point cloud graphic according to the component that stores the A coordinate map provided by the camera. M_COMPONENT_COORDINATE_MAP_B_MIL Specifies to color the point cloud graphic according to the component that stores the B coordinate map provided by the camera. M_COMPONENT_CUSTOM + n Specifies to color the point cloud graphic according to a component that has a custom type, identified by n, where n can be a value between 0 and 255. M_COMPONENT_DISPARITY Specifies to color the point cloud graphic according to the component that stores a disparity map. M_COMPONENT_INFRARED Specifies to color the point cloud graphic according to the component that stores an intensity image of infrared light. M_COMPONENT_INTENSITY Specifies to color the point cloud graphic according to the component that stores an intensity image of visible light. M_COMPONENT_MESH_MIL Specifies to color the point cloud graphic according to the component that stores mesh information for the M_COMPONENT_RANGE component of the container. M_COMPONENT_METADATA Specifies to color the point cloud graphic according to the component that stores metadata information. M_COMPONENT_MULTISPECTRAL Specifies to color the point cloud graphic according to the component that stores an intensity image where each band represents the intensity of a specific wavelength of light. M_COMPONENT_NORMALS_MIL Specifies that the buffer stores normals information for each point in the M_COMPONENT_RANGE component of the container. M_COMPONENT_RANGE Specifies to color the point cloud graphic according to the component that stores 3D distance/position information. M_COMPONENT_REFLECTANCE Specifies to color the point cloud graphic according to the component that stores a reflectance map. M_COMPONENT_SCATTER Specifies to color the point cloud graphic according to the component that stores a scatter map. M_COMPONENT_ULTRAVIOLET Specifies to color the point cloud graphic according to the component that stores an intensity image of ultraviolet light. M_COLOR_COMPONENT_BAND Sets the component's band to use when M_COLOR_COMPONENT is set to a component type. If the specified band does not exist, band 0 is used. M_DEFAULT Same as M_ALL_BANDS. M_ALL_BANDS Specifies all the bands of the component. Value &gt;= 0 Specifies the index of the band to use. The relationship between index value and band for RGB, HSL, and YUV buffers is the following: 0 Corresponds to the red band (for RGB parent buffers), the hue band (for HSL parent buffers), and the Y band (for YUV parent buffers). 1 Corresponds to the green band (for RGB parent buffers), the saturation band (for HSL parent buffers), and the U band (for YUV parent buffers). 2 Corresponds to the blue band (for RGB parent buffers), the luminance band (for HSL parent buffers), and the V band (for YUV parent buffers). M_COLOR_LIMITS Sets the limits of the values in the component used to color the point cloud graphic. Values between the minimum and the maximum are remapped linearly to values between the minimum and maximum possible display values. The values beyond the minimum or maximum are saturated. When M_COLOR_USE_LUT is M_TRUE, the minimum and maximum get mapped to the LUT's extreme values. M_DEFAULT Same as M_BUFFER_LIMITS. M_BUFFER_LIMITS Specifies to use the buffer's minimum and maximum. Note that this is unavailable for floating-point buffers, and defaults to M_DATA_EXTREMES_PER_BAND. M_DATA_EXTREMES_GLOBAL Specifies to use the global minimum and maximum of the buffer's data. If the buffer has multiple bands, a single minimum and maximum is used for all of them. M_DATA_EXTREMES_PER_BAND Specifies to use the minimum and maximum of the buffer's data in each of its bands. If the buffer has multiple bands, each band has its own minimum and maximum. M_USER_DEFINED Specifies to use the minimum and maximum manually set with M_COLOR_LIMITS_MIN and M_COLOR_LIMITS_MAX. M_COLOR_LIMITS_MAX Sets the maximum color value when M_COLOR_LIMITS is M_USER_DEFINED. Value Specifies the maximum color value to use. M_COLOR_LIMITS_MIN Sets the minimum color value when M_COLOR_LIMITS is M_USER_DEFINED. Value Specifies the minimum color value to use. M_COLOR_USE_LUT Sets whether to color the point cloud graphic by mapping each value of the component specified by M_COLOR_COMPONENT to a color in a LUT, and then using that color to display the corresponding point. The default LUT is M_COLORMAP_TURBO, but you can change it using M3dgraCopy(). If the LUT is set to M_NULL using M3dgraCopy() with M_COLOR_LUT, this setting will be ignored even if it is set to M_TRUE. Note that if M_COLOR_COMPONENT_BAND is set to M_ALL_BANDS and the specified component does not have 3 bands, band 0 is used. This control type is a more flexible alternative than using M3ddispLut(), which applies a LUT exclusively to the source point cloud's range component. M_DEFAULT Same as M_FALSE. M_FALSE Specifies not to use a LUT. M_TRUE Specifies to use a LUT. M_FILL_COLOR Sets the color of the solid surfaces of the point cloud graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_FIX Sets whether to automatically internally call M3dimFix() to fix NaNs and invalid mesh points. If you know that your point cloud has no invalid points, disabling this will improve performance. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies to not automatically fix the point cloud. M_ENABLE Specifies to automatically fix the point cloud. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the point cloud graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the point cloud graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the point cloud graphic . A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the point cloud graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the point cloud graphic will be rendered. M_SHADING Sets the point cloud graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. This setting is only applicable for meshed point cloud containers. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the point cloud graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the point cloud graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the point cloud graphic is displayed without shading. M_PHONG Specifies that the point cloud graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_THICKNESS Sets the thickness of the point cloud graphic's points in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the point cloud graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POLYGON Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a polygon graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the polygon graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The polygon graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The polygon graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the polygon graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_COLOR_USE_TEXTURE Specifies whether to fill the polygon graphic with a texture. If the polygon graphic has no texture buffer, M_FILL_COLOR is used regardless of this setting. M_DEFAULT Same as M_TRUE. M_FALSE Specifies to fill the polygon graphic with M_FILL_COLOR. M_TRUE Specifies to fill the polygon graphic with a texture buffer. M_FILL_COLOR Sets the color of the solid surfaces of the polygon graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the polygon graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_KEYING_COLOR Sets the pixel value to display as transparent for the polygon graphic. This setting is only used if the polygon graphic is filled with a texture buffer. Any portion of the polygon graphic that would be displayed with this color is instead made transparent, regardless of the polygon graphic's M_OPACITY setting. This can be used to cut out parts of a polygon graphic. M_DEFAULT Same as M_NONE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the texture's keying value. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_NONE Specifies that the texture does not have a keying value. 0 &lt;= Value &lt;= 255 Specifies a grayscale keying value, used when the texture is a 1-band buffer. M_OPACITY Sets the opacity of the polygon graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the polygon graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the polygon graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the polygon graphic will be rendered. M_SHADING Sets the polygon graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the polygon graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the polygon graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the polygon graphic is displayed without shading. M_PHONG Specifies that the polygon graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_THICKNESS Sets the thickness of the points/lines of the polygon graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the polygon graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_RECT Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a rectangle graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the rectangle graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The rectangle graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The rectangle graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the rectangle graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_FILL_COLOR Sets the color of the solid surfaces of the rectangle graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the rectangle graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the rectangle graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the rectangle graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the rectangle graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the rectangle graphic will be rendered. M_SHADING Sets the rectangle graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the rectangle graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the rectangle graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the rectangle graphic is displayed without shading. M_PHONG Specifies that the rectangle graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_SIZE_X Sets the rectangle graphic's length along its coordinate system's X-axis. Value &gt; 0.0 Specifies the length of the rectangle graphic, in world units, along the rectangle's coordinate system's X-axis. M_SIZE_Y Sets the rectangle graphic's length along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the length of the rectangle graphic, in world units, along the rectangle's coordinate system's Y-axis. M_THICKNESS Sets the thickness of the points/lines of the rectangle graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VISIBLE Sets the visibility of the rectangle graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_SPHERE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a sphere graphic specified by the Label parameter. M_APPEARANCE Sets the appearance of the sphere graphic on display as a solid surface, wireframe, or points. The color of the points, wireframe, and the outline is determined by M_COLOR, while the color of the solid surface is determined by M_FILL_COLOR. M_DEFAULT Same as M_SOLID. M_POINTS Specifies a points appearance. The sphere graphic appears as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The sphere graphic appears as a set of lines connecting its vertices. M_COLOR Sets the color of the points and lines of the sphere graphic. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_FILL_COLOR Sets the color of the solid surfaces of the sphere graphic. M_DEFAULT Same as M_SAME_AS_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. M_GRAPHIC_RESOLUTION Sets the resolution of the sphere graphic's mesh. This is the number of latitudinal and longitudinal subdivisions on the sphere graphic. Higher graphic resolutions settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Specifies the default value; the default value is 64. Value &gt;= 3 Specifies the number of latitudinal and longitudinal subdivisions on the sphere graphic. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the sphere graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the sphere graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the sphere graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RADIUS Sets the sphere graphic's radius. Value &gt; 0.0 Specifies the sphere graphic's radius, in world units. M_RENDER_LAYER Sets on which layer the sphere graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. Render layers can be used, for example, to create 3D backgrounds or heads-up displays. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the sphere graphic will be rendered. M_SHADING Sets the sphere graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. More advanced shading settings might require a more powerful GPU to maintain acceptable performance, especially if a large number of 3D graphics are shown at once. M_DEFAULT Same as M_GOURAUD. M_FLAT Specifies that the sphere graphic is displayed with flat shading. Each face of the 3D graphic's mesh is shown with a single brightness level based on its normal relative to the view. The faces of the 3D graphic's mesh are clearly distinguishable with this setting, because flat shading does not perform any smoothing. M_GOURAUD Specifies that the sphere graphic is displayed with Gouraud shading. The triangles that make up the faces of the 3D graphic's mesh are shown with smooth shading, calculated by interpolating the brightness level between each vertex based on the triangle's normal relative to the view. The faces of the 3D graphic's mesh are typically distinguishable with this setting, but some smoothing is involved. M_NONE Specifies that the sphere graphic is displayed without shading. M_PHONG Specifies that the sphere graphic is displayed with Phong shading. The 3D graphic is shaded smoothly based on a complex reflection model. The faces of the 3D graphic's mesh are typically not distinguishable with this setting, because the surface of the mesh is shown with advanced smoothing. M_THICKNESS Sets the thickness of the points/lines of the sphere graphic in the 3D world, on screen. M_DEFAULT Specifies the default value; the default value is 1 pixel. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the sphere graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_TEXT Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a text graphic specified by the Label parameter. M_BACKGROUND_COLOR Sets the text graphic's background color. M_DEFAULT Same as M_COLOR_BLACK. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the text graphic's background color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_BACKGROUND_MODE Sets the text graphic's background mode. You can specify the background color using M_BACKGROUND_COLOR. M_DEFAULT Same as M_TRANSPARENT. M_OPAQUE Specifies that the background of the text graphic is filled with the current background color. M_TRANSPARENT Specifies that the text graphic does not have a background. M_COLOR Sets the text graphic's text color. M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the 3D graphic's color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_FONT Sets the font of the text graphic. MIL will use TrueType and Unicode features to draw text. This allows you to draw text using different sizes and TrueType fonts installed on your computer. This also allows you to draw any Unicode text (depending on the font). M_FONT_DEFAULT_TTF Specifies the default TrueType font of your operating system. \"FontFamily:Weight:Slant\" Specifies the font according to the following format, Family: Weight: Slant. Family must be set to the name of the font's family, such as Arial, Times New Roman, and Wingdings. Weight can be set to one of the following: Book, Thin, ExtraLight, UltraLight, Light, Normal, Regular, Medium, SemiBold, DemiBold, Bold, ExtraBold, UltraBold, Heavy, Black, ExtraBlack, or UltraBlack. Slant can be set to one of the following: Italic, Oblique, or Roman. You can omit Weight and Slant; also, you can provide the Weight and Slant in any order. \"FontFile\" Specifies a full path to a TrueType file name. M_FONT_AUTO_SELECT Sets the automatic font selection behavior of the text graphic. If automatic font selection is enabled, MIL searches for a suitable font to draw the text if the currently selected font (set using M_FONT) does not support the character code. MIL will first attempt to make its selection from already used fonts, and then from system fonts. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies that MIL will not search for a suitable font. An error is returned if the character code cannot be drawn using the current TrueType font. M_ENABLE Specifies that MIL will search for a suitable font. M_FONT_SIZE Sets the font size of the text graphic. M_DEFAULT Specifies the default value; the default value is 1. Value &gt; 0.0 Specifies the font size. This is the height of one line of text, in world units. M_GRAPHIC_TEXT Sets the text of the text graphic. \"String\" Specifies the address of the null-terminated (\\0) ASCII string to be displayed. M_HANDLE_TARGET_LABEL Sets which graphic to use as the target for handle movement or clicking events. M_DEFAULT Same as M_NO_LABEL. M_NO_LABEL Specifies that the handle graphic does not have a target graphic. The handle graphic will move or rotate when dragged and generated hook events. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. The target graphic will move or rotate when dragged and generate hook events. M_HANDLE_TYPE Sets whether the text graphic can be clicked and dragged. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. If this setting is enabled, an M_HANDLE_GRAPHIC_CLICKED event is generated but the graphic will not be moved. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Sets the opacity of the text graphic. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the text graphic. A 3D graphic with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_RENDER_LAYER Sets on which layer the text graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers even if those on higher layers are farther away. This is useful, for example, to create label text that is always visible to the user, regardless of the view. M_DEFAULT Specifies the default value; the default value is 1. 0 &lt;= Value &lt;= 9 Specifies the layer on which the text graphic will be rendered. M_TEXT_ALIGN_HORIZONTAL Sets the horizontal justification of the text of the text graphic. This also affects the alignment of the text relative to the origin of the text graphic. M_DEFAULT Same as M_LEFT. M_CENTER Specifies that the text is horizontally centered. M_LEFT Specifies that the text is left-aligned. M_RIGHT Specifies that the text is right-aligned. M_TEXT_ALIGN_VERTICAL Sets the vertical justification of the text of the text graphic. This also affects the alignment of the text relative to the origin of the text graphic. M_DEFAULT Same as M_TOP. M_BOTTOM Specifies that the text is bottom-aligned. M_CENTER Specifies that the text is vertically centered. M_TOP Specifies that the text is top-aligned. M_TEXT_BORDER Sets borders around the text. Note that the possible settings can be combined. For example, to draw a box around the text, specify M_TOP + M_BOTTOM + M_LEFT + M_RIGHT. M_DEFAULT Same as M_NONE. M_BOTTOM Specifies that a line is drawn underneath the text. M_LEFT Specifies that a line is drawn to the left of the text. M_NONE Specifies that no border is drawn around the text. This setting cannot be combined with any other setting. M_RIGHT Specifies that a line is drawn to the right of the text. M_TOP Specifies that a line is drawn above the text. M_TEXT_DIRECTION Sets the direction to draw the text graphic. M_DEFAULT Same as M_LEFT_TO_RIGHT. M_LEFT_TO_RIGHT Specifies that text will be drawn from left to right. M_RIGHT_TO_LEFT Specifies that text will be drawn from right to left. M_TEXT_SHADING Sets the shading of the text graphic. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. Displaying a shaded 3D graphic requires more GPU processing power than displaying an unshaded 3D graphic. M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies that the text graphic is displayed without shading. M_ENABLE Specifies that the text graphic is displayed with shading. M_VIEW_BASED_LOD Sets whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. When shown with a lower LoD, the point cloud might exclude points which the user would have been able to see at full LoD. However, new points will never be inferred or created in a lower LoD. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. When this is enabled, the 3D display will take significantly longer to rescan any change to the graphic that requires regenerating the LoDs. You should only use this setting if needed (for less powerful CPU/GPUs), and if so you should set any other LoD settings before enabling LoD to prevent needless regeneration. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Sets how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. A value of 1 indicates to only use the native LoD and a value of 3 indicates to generate two degraded LoDs. Generating more LoDs increases memory consumption and the time required to regenerate LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 3. Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Sets the maximum factor by which to rescale the point cloud when regenerating the LoDs. Setting this to 1.0 would produce effectively no change in the LoD. With 3 LoD levels and a sample factor max of 8, the display will generate 2 LoDs (in addition to the full LoD); one with approximately 1/8 the number of points as the source, and one with approximately 1/4 the number of points as the source. When using random sampling, the lowest LoD will have (NumValidPoints / FactorMax) points. When using grid sampling, this factor is used to determine the grid size for each LoD. Increasing this value without increasing the number of LoD levels will reduce the memory consumption and can reduce the time to regenerate the LoDs. However, it will also reduce the likelihood of the display using the generated LoDs (unless the display's degradation level is also decreased). A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Specifies the default value; the default value is 8.0. Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Sets what type of sub-sampling to perform when generating LoDs. A new set of LoDs can be generated every time this setting or the point cloud data is changed. LoD features are not available with a mil-lite license. M_DEFAULT Same as M_SUBSAMPLE_GRID. M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Sets the visibility of the text graphic. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. M_DEFAULT Same as M_TRUE. M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Combination value for the values of the ControlType parameter listed in For the settings of a 3D graphic. You can add the following value to the above-mentioned values to set the control type for the 3D graphic specified by Label and for all of its children recursively. For setting a control value recursively Combination value Description M_RECURSIVE Sets the specified control type of the 3D graphic specified by the Label parameter, and that of all of its children recursively, to the specified control value. Note that when M_RECURSIVE is used, the 3D graphic specified by the Label parameter does not need to support the control type itself. This only sets the control type of the 3D graphics that can support it. Note that this is only available if Label specifies the label of a 3D graphic, or the root node. Type-specific versions of the function when using a C compiler under 64-bit void M3dgraControlInt64 (MIL_ID List3dgraId, MIL_INT64 Label, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters List3dgraId See List3dgraId of the main function for a description. Label See Label of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void M3dgraControlDouble (MIL_ID List3dgraId, MIL_INT64 Label, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters List3dgraId See List3dgraId of the main function for a description. Label See Label of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - Label For specifying the 3D graphic label - ControlType - ControlValue Parameter Associations For the 3D graphics list itself [Graphics list identifier with Label set to M_LIST] For the default settings of a 3D graphics list [Graphics list ID with Label set to M_DEFAULT_SETTINGS] For the settings of a 3D graphic [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_ARC] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_AXIS] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_BOX] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_CYLINDER] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_DOTS] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_GRID] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINES] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_PLANE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POINT_CLOUD] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POLYGON] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_RECT] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_SPHERE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_TEXT] + For setting a control value recursively Type-specific versions of the function when using a C compiler under 64-bit Compilation information M_COMPONENT_CUSTOM + n ",
      "wordCount": 30929,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraCopy",
      "version": null,
      "title": "M3dgraCopy",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraCopy.htm",
      "text": " M3dgraCopy Synopsis Copy an object into or out of a 3D graphics list. Syntax MIL_INT64 M3dgraCopy( MIL_ID&nbsp;SrcMilObjectId, //in MIL_INT64&nbsp;SrcLabel, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;DstLabel, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies an object into or out of a 3D graphics list. You can copy a 3D graphic's geometry or transformation matrix, a point cloud graphic's LUT buffer, a 3D graphic or graphics list's bounding box, or a 3D graphics list's clipping box. Parameters Parameters SrcMilObjectId Specifies the identifier of the source object. Note that if the source object is not a 3D graphics list, the destination object must be. See the Parameter associations section for possible values that can be specified. SrcLabel Specifies the label of the 3D graphic in SrcMilObjectId, when the source object is a 3D graphics list. If a label is not required, set this parameter to M_DEFAULT. See the Parameter associations section for possible values that can be specified. DstMilObjectId Specifies identifier of the destination object. Note that if the destination object is not a 3D graphics list, the source object must be. See the Parameter associations section for possible values that can be specified. DstLabel Specifies the label of the 3D graphic in DstMilObjectId, when the destination object is a 3D graphics list. If a label is not required, set this parameter to M_DEFAULT. See the Parameter associations section for possible values that can be specified. CopyType Specifies the type of copy operation. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the SrcMilObjectId, SrcLabel, DstMilObjectId, DstLabel, and CopyType parameters. For specifying the copy type For specifying the copy type CopyType Description SrcMilObjectId SrcLabel DstMilObjectId DstLabel M_BOUNDING_BOX Specifies to copy the bounding box of a 3D graphic (and, optionally, its descendants) into a 3D box geometry object, using the coordinate system of the 3D graphic's parent as a frame of reference. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. SrcLabel Specifies which 3D graphic to use to calculate the bounding box to copy. M_LIST Specifies to use the entire contents of the 3D graphics list. This is equivalent to specifying the root node of the 3D graphics list using M_BOUNDING_BOX + M_RECURSIVE. Value &gt;= 0 Specifies the label of the 3D graphic in the source 3D graphics list to use as the source object. The minimum bounding box for this 3D graphic is copied. DstMilObjectId Specifies the identifier of the 3D geometry object. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. DstLabel This parameter must be set to M_DEFAULT. M_CLIPPING_BOX Specifies to set the clipping box of the 3D graphics list, or copy a clipping box out of a 3D graphics list. The clipping box is used to clip 3D graphics with infinite size, such as infinite planes and cylinders, upon their creation. M_WHOLE_SCENE Specifies to set the destination 3D graphics list's entire bounding box as its clipping box. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies that the clipping box is of the entire 3D graphics list. M_LIST Specifies that the 3D graphics list itself is the destination object. 3D geometry object ID to use to define Specifies the identifier of the 3D box geometry object to use to set the clipping box of the 3D graphics list. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and defined as a box. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies that the clipping box is of the entire 3D graphics list. M_LIST Specifies that the 3D graphics list itself is the destination object. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list from which to copy the clipping box. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. SrcLabel Specifies that the clipping box is of the entire 3D graphics list. M_LIST Specifies that the 3D graphics list itself is the source object. DstMilObjectId Specifies the identifier of the 3D geometry object in which to copy the clipping box. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. DstLabel This parameter must be set to M_DEFAULT. M_COLOR_LUT Specifies to copy the LUT or to set the LUT associated with a point cloud graphic in a 3D graphics list. Note that when setting a LUT, it is only used when the 3D graphics list is associated with a display and M_COLOR_USE_LUT is set to M_TRUE (using M3dgraControl()). In this case, the values of the point cloud's component used for color are mapped to a color in the associated LUT. You can set the component used to color the point cloud graphic using M3dgraControl() with M_COLOR_COMPONENT. The default LUT for a 3D graphics list is M_COLORMAP_TURBO; the LUT is only applied to point cloud graphics. To specify a color for other graphics, use M3dgraControl() with M_COLOR. M_NULL Specifies to remove the current LUT of a point cloud graphic in a 3D graphics list. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to remove, or specifies to remove the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to remove the default LUT of the 3D graphics list. This means that, if you subsequently add a point cloud graphic to the 3D graphics list and enable the default LUT, the graphic will be shown without a LUT. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_GRAYSCALE Specifies to use a predefined LUT buffer with a grayscale colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap transitions from black to white as the indices increase. Note that this colormap is effectively the same as no colormap (M_NULL), except that you can apply the M_FLIP combination value to invert the grayscale values. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the grayscale colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_HOT Specifies to use a predefined LUT buffer with a hot colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap transitions from black, to red, to yellow, and then, to white along the RGB cube as the indices increase. This colormap can be useful for displaying infrared images. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the hot colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_HUE Specifies to use a predefined LUT buffer with a hue colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap is cyclic and transitions from red, to yellow, to green, to cyan, to blue, to magenta, and then, to red along the edge of the hue circle as the indices increase. This colormap is useful for displaying the hue component of an HSL image. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the hue colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_JET Specifies to use a predefined LUT buffer with a jet colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap transitions from dark blue, to blue, to cyan, to yellow, to red, and then, to dark red along the RGB cube as the indices increase. This colormap can be useful for displaying 3D elevation maps and thermal imaging. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the jet colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_SPECTRUM Specifies to use a predefined LUT buffer with a spectrum colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap transitions from red, to yellow, to green, to blue, and then, to violet along the RGB cube as the indices increase. This colormap is a representation of the visual spectrum according to wavelengths. It can also be useful for displaying 3D elevation maps and thermal imaging. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the spectrum colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_TURBO Specifies to use a predefined LUT buffer with a turbo colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap transitions from dark blue, to blue, to cyan, to yellow, to red, and then, to dark red along the RGB cube as the indices increase. This colormap is similar to M_COLORMAP_JET, but with smoother transitions. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the turbo colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLORMAP_WHEEL Specifies to use a predefined LUT buffer with a colorwheel colormap as the LUT of a point cloud graphic in a 3D graphics list. The predefined LUT buffer has 3 bands and has a size of 65536. The colormap is cyclic and transitions from blue, to magenta, to yellow, to green, and then, to blue again as the indices increase. This colormap is designed to be perceptually uniform (a given change in data is designed to be visually perceived as an equal change in color). This colormap can be useful for displaying 3D elevation maps. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the colorwheel colormap. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list containing the point cloud graphic from which to copy the LUT. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. SrcLabel Specifies the label of the point cloud graphic in the source 3D graphics list whose LUT to use, or specifies to use the default LUT of the 3D graphics list itself. If the point cloud graphic is not associated with a LUT, an error is generated. M_DEFAULT_SETTINGS Specifies to use the 3D graphics list's default LUT. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. DstMilObjectId Specifies the identifier of the LUT buffer in which to copy the LUT. The LUT buffer must have been previously allocated using MbufAlloc1d() or MbufAllocColor() with M_LUT. This LUT buffer must have the same size and number of bands as the LUT to be copied. DstLabel This parameter must be set to M_DEFAULT. LUT buffer ID to use to define Specifies the identifier of the LUT buffer from which to copy the LUT. The LUT buffer must have been previously allocated using MbufAlloc1d() or MbufAllocColor() with M_LUT. Only 8-bit unsigned LUT buffers are supported. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the point cloud graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the point cloud graphic in the destination 3D graphics list whose LUT to set, or specifies to set the default LUT of the 3D graphics list itself. M_DEFAULT_SETTINGS Specifies to set the 3D graphics list's default LUT to the specified source LUT buffer. Value &gt;= 0 Specifies the label of the point cloud graphic. Label 0 is the 3D graphics list's root node. M_COLOR_TEXTURE Specifies to copy or set the texture of a polygon graphic in a 3D graphics list. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list containing the polygon graphic from which to copy the texture. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. Note that using this copy type with a polygon graphic that does not have a texture will cause an error. SrcLabel Specifies the label of the polygon graphic in the source 3D graphics list from which to copy the texture. DstMilObjectId Specifies the identifier of the image buffer in which to copy the polygon graphic's texture. The image buffer must be an 8-bit, unsigned buffer, and must have the same size and number of bands as the current texture in the polygon graphic. You can inquire the size and number of bands of a polygon graphic's texture using M3dgraInquire() M_COLOR_TEXTURE_SIZE.... DstLabel This parameter must be set to M_DEFAULT. Image buffer ID to use to define Specifies the identifier of the image buffer to use to set a polygon graphic's texture. The image buffer must be an 8-bit, unsigned, 1- or 3-band buffer. If the polygon graphic does not already have a texture, MIL sets the texture mapping automatically. If the polygon graphic already has a texture, the image buffer must have the same size and number of bands as the texture being replaced. Otherwise, an error is generated. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the polygon graphic whose texture to set. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the polygon graphic in the destination 3D graphics list whose texture to set. M_GEOMETRY Specifies to copy a 3D graphic's geometry into a 3D geometry object, using its parent's coordinate system as a frame of reference. The 3D graphic must be of type box, cylinder, line, plane, or sphere; point geometries are not supported. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list containing the 3D graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. SrcLabel Specifies the label of the 3D graphic in the source 3D graphics list. DstMilObjectId Specifies the identifier of the 3D geometry object in which to copy the 3D graphic's geometry. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. DstLabel This parameter must be set to M_DEFAULT. M_GRAPHIC Specifies to copy a 3D graphic from a source 3D graphics list into a destination 3D graphics list. If the combination value M_CHILDREN_ONLY is not specified, M3dgraCopy() returns the label of the 3D graphic copied into the destination 3D graphics list. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list containing the 3D graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. SrcLabel Specifies the label of the 3D graphic in the source 3D graphics list to copy. DstMilObjectId Specifies the identifier of the 3D graphics list in which to copy the 3D graphic. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the 3D graphic that will be the parent of the 3D graphic copied into the destination 3D graphics list. M_TRANSFORMATION_MATRIX Specifies to copy or set the transformation matrix of a 3D graphic. M_IDENTITY_MATRIX Specifies to reset the transformation matrix of the 3D graphic to the identity matrix. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the 3D graphic whose transformation matrix to set. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the 3D graphic in the destination 3D graphics list whose transformation matrix to set. You can specify any node except for the root node. 3D graphics list ID from which to copy Specifies the identifier of the 3D graphics list containing the 3D graphic from which to copy the transformation matrix. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. SrcLabel Specifies the label of the 3D graphic in the source 3D graphics list from which to copy the transformation matrix. DstMilObjectId Specifies the identifier of the transformation matrix object in which to copy the 3D graphic's transformation matrix. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. DstLabel This parameter must be set to M_DEFAULT. Transformation matrix object ID to use to define Specifies the identifier of the transformation matrix object to use as a 3D graphic's transformation matrix. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. The transformation matrix must be of type M_RIGID. SrcLabel This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D graphics list containing the 3D graphic whose transformation matrix to set. The 3D graphics list must either be associated with a 3D display, or must have been previously allocated using M3dgraAlloc(). You can inquire the identifier of the 3D graphics list associated with a display using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID. DstLabel Specifies the label of the 3D graphic in the destination 3D graphics list whose transformation matrix to set. You can specify any node except for the root node. Combination value for M_COLOR_LUT. You can add the following value to the above-mentioned value to set the LUT of a point cloud graphic in the destination 3D graphics list, and all of its point cloud graphic children in the 3D graphics list recursively. For setting a LUT recursively Combination value Description M_RECURSIVE Sets the LUT of the point cloud graphic specified by the DstLabel parameter, and all of its point cloud graphic children in the 3D graphics list recursively. Combination values for M_GRAPHIC. You can add one of the following values to the above-mentioned value to specify how to copy the 3D graphic. For specifying how to copy the 3D graphic Combination value Description M_CHILDREN_ONLY Specifies to copy the 3D graphic's descendants into the destination 3D graphics list, without copying the 3D graphic itself. The 3D graphic's children are directly copied into the destination 3D graphics list as children of the 3D graphic with label DstLabel, and the rest of the descendants are copied recursively. Note that in this case, M3dgraCopy() returns M_NO_LABEL. M_RECURSIVE Specifies to copy the 3D graphic and all of its descendants in the 3D graphics list recursively. Combination value for M_GEOMETRY. You can add the following value to the above-mentioned value to specify how to copy the geometry. For specifying how to copy the 3D graphic's geometry Combination value Description M_RELATIVE_TO_ROOT Specifies to copy the geometry using its relative position and orientation to the 3D graphics list's root node. Combination values for M_TRANSFORMATION_MATRIX. You can add one of the following values to the above-mentioned value to specify how to copy the transformation matrix. For specifying how to copy the transformation matrix Combination value Description M_COMPOSE_WITH_CURRENT Specifies to compose the 3D graphic object's transformation matrix with the source transformation matrix. The DstMilObjectId parameter must be a 3D graphics list identifier. M_RELATIVE_TO_ROOT Specifies to copy or set the position and orientation of a 3D graphic relative to the 3D graphics list's root node. Combination values for M_BOUNDING_BOX. You can add one or more of the following values to the above-mentioned value to specify how to copy the bounding box. For specifying how to copy the bounding box Combination value Description M_RECURSIVE Specifies to copy the bounding box of the 3D graphic and all of its descendants in the 3D graphics list. M_RELATIVE_TO_ROOT Specifies to copy the bounding box of the 3D graphic relative to the 3D graphics list's root node. Combination value for [when CopyType=M_COLOR_LUT: M_COLORMAP_GRAYSCALE , M_COLORMAP_HOT , M_COLORMAP_HUE , M_COLORMAP_JET , M_COLORMAP_SPECTRUM , M_COLORMAP_TURBO , M_COLORMAP_WHEEL]. You can add the following value to the above-mentioned values to specify that the LUT should be flipped. For specifying to flip the LUT Combination value Description M_FLIP Specifies to flip the LUT's values (inverse LUT). Return value Returns the label of the 3D graphic copied into the destination 3D graphics list. If the copy type does not return a new label in the destination 3D graphics list, this function returns M_NO_LABEL. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - SrcMilObjectId - SrcLabel - DstMilObjectId - DstLabel - CopyType - ControlFlag Parameter Associations For specifying the copy type [M_BOUNDING_BOX] [M_CLIPPING_BOX] [M_COLOR_LUT] [M_COLOR_TEXTURE] [M_GEOMETRY] [M_GRAPHIC] [M_TRANSFORMATION_MATRIX] + For setting a LUT recursively + For specifying how to copy the 3D graphic + For specifying how to copy the 3D graphic's geometry + For specifying how to copy the transformation matrix + For specifying how to copy the bounding box + For specifying to flip the LUT Return value Compilation information ",
      "wordCount": 4646,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraCylinder",
      "version": null,
      "title": "M3dgraCylinder",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraCylinder.htm",
      "text": " M3dgraCylinder Synopsis Add a cylinder graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraCylinder( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;XPos1, //in MIL_DOUBLE&nbsp;YPos1, //in MIL_DOUBLE&nbsp;ZPos1, //in MIL_DOUBLE&nbsp;XPos2OrVector, //in MIL_DOUBLE&nbsp;YPos2OrVector, //in MIL_DOUBLE&nbsp;ZPos2OrVector, //in MIL_DOUBLE&nbsp;Radius, //in MIL_DOUBLE&nbsp;Length, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a cylinder graphic to the specified 3D graphics list, allowing you to, for example, view the cylinder graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the cylinder graphic. When the cylinder graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the cylinder graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the cylinder graphic's parent. The cylinder graphic has its own coordinate system that represents the cylinder graphic's position and orientation with respect to its parent's coordinate system. The origin of the cylinder graphic's coordinate system is the cylinder graphic's start point, and its Z-axis is the cylinder graphic's central axis. You can inquire the cylinder graphic's start point using M3dgraInquire() with M_START_POINT_.... You can change the position and orientation of the cylinder graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the cylinder graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the cylinder graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the cylinder graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the cylinder graphic is defined. See the Parameter associations section for possible values that can be specified. XPos1 Specifies the first parameter used to define the cylinder graphic. See the Parameter associations section for possible values that can be specified. YPos1 Specifies the second parameter used to define the cylinder graphic. See the Parameter associations section for possible values that can be specified. ZPos1 Specifies the third parameter used to define the cylinder graphic. See the Parameter associations section for possible values that can be specified. XPos2OrVector Specifies the fourth parameter used to define the cylinder graphic. See the Parameter associations section for possible values that can be specified. YPos2OrVector Specifies the fifth parameter used to define the cylinder graphic. See the Parameter associations section for possible values that can be specified. ZPos2OrVector Specifies the sixth parameter used to define the cylinder graphic. See the Parameter associations section for possible values that can be specified. Radius Specifies the cylinder graphic's radius. For specifying the cylinder graphic's radius Value Description Value &gt; 0.0 Specifies the cylinder graphic's radius. Length Specifies to override the default cylinder graphic's length. For specifying to override the default cylinder graphic's length Value Description M_DEFAULT Specifies the default length defined by the creation mode. M_INFINITE Specifies an infinite cylinder graphic. The cylinder graphic's size is determined upon creation, using its 3D graphics list's clipping box. Value &gt; 0.0 Specifies to override the cylinder graphic's length with a specific value. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, XPos1, YPos1, ZPos1, XPos2OrVector, YPos2OrVector, and ZPos2OrVector parameters. For specifying the cylinder graphic For specifying the cylinder graphic CreationMode Description XPos1 YPos1 ZPos1 XPos2OrVector YPos2OrVector ZPos2OrVector M_POINT_AND_VECTOR Defines the cylinder graphic using a point on the cylinder graphic's central axis and a nonzero vector defining the central axis direction. By default, the length of the cylinder graphic is finite and is set to the vector's magnitude. The point is at the center of the cylinder graphic's first circular base. XPos1 Specifies the X-coordinate of the point on the cylinder graphic's central axis. YPos1 Specifies the Y-coordinate of the point on the cylinder graphic's central axis. ZPos1 Specifies the Z-coordinate of the point on the cylinder graphic's central axis. XPos2OrVector Specifies the X-component of the vector defining the central axis direction. YPos2OrVector Specifies the Y-component of the vector defining the central axis direction. ZPos2OrVector Specifies the Z-component of the vector defining the central axis direction. M_TWO_POINTS Defines the cylinder graphic using any two non-identical points on the cylinder graphic's central axis. By default, the length of the cylinder graphic is finite and is set to the distance between the two specified points. The first specified point is at the center of the cylinder graphic's first circular base and the second specified point is at the center of the cylinder graphic's second circular base. XPos1 Specifies the X-coordinate of the first point on the cylinder graphic's central axis. YPos1 Specifies the Y-coordinate of the first point on the cylinder graphic's central axis. ZPos1 Specifies the Z-coordinate of the first point on the cylinder graphic's central axis. XPos2OrVector Specifies the X-coordinate of the second point on the cylinder graphic's central axis. YPos2OrVector Specifies the Y-coordinate of the second point on the cylinder graphic's central axis. ZPos2OrVector Specifies the Z-coordinate of the second point on the cylinder graphic's central axis. Return value Returns the label of the cylinder graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - XPos1 - YPos1 - ZPos1 - XPos2OrVector - YPos2OrVector - ZPos2OrVector - Radius For specifying the cylinder graphic's radius - Length For specifying to override the default cylinder graphic's length - ControlFlag Parameter Associations For specifying the cylinder graphic Return value Compilation information ",
      "wordCount": 1049,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraDots",
      "version": null,
      "title": "M3dgraDots",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraDots.htm",
      "text": " M3dgraDots Synopsis Add a dots graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraDots( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT&nbsp;NumPoints, //in const MIL_DOUBLE&nbsp;*CoordXArrayPtr, //in const MIL_DOUBLE&nbsp;*CoordYArrayPtr, //in const MIL_DOUBLE&nbsp;*CoordZArrayPtr, //in const MIL_UINT8&nbsp;*PointsRArrayPtr, //in const MIL_UINT8&nbsp;*PointsGArrayPtr, //in const MIL_UINT8&nbsp;*PointsBArrayPtr, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a dots graphic to the specified 3D graphics list, allowing you to, for example, view the dots graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the dots graphic. When the dots graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the dots graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the dots graphic's parent. The dots graphic has its own coordinate system that represents the position and orientation of the dots with respect to its parent's coordinate system. The coordinates of the dots, specified by CoordXArrayPtr, CoordYArrayPtr, and CoordZArrayPtr, are expressed in the dots graphic's coordinate system. Initially, the dots graphic's position and orientation is the identity matrix. This means that the dots graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. You can change the position and orientation of the dots graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dgraDots() internally calls the MIL_DOUBLE version of this function (M3dgraDotsDouble()). If you need to pass type-specific values, call the MIL_FLOAT version of this function (M3dgraDotsFloat()). Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the dots graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the dots graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the dots graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. NumPoints Specifies the number of points in the dots graphic. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the CoordXArrayPtr, CoordYArrayPtr, CoordZArrayPtr, PointsRArrayPtr, PointsGArrayPtr, or PointsBArrayPtr parameter. CoordXArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_FLOAT [optionally, in C++: a reference to a constant std::vector&lt;MIL_FLOAT&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of X-coordinates of the points in the dots graphic. CoordYArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_FLOAT [optionally, in C++: a reference to a constant std::vector&lt;MIL_FLOAT&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of Y-coordinates of the points in the dots graphic. CoordZArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_FLOAT [optionally, in C++: a reference to a constant std::vector&lt;MIL_FLOAT&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of Z-coordinates of the points in the dots graphic. PointsRArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_FLOAT [optionally, in C++: a reference to a constant std::vector&lt;MIL_FLOAT&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of red values of the color of the points in the dots graphic. You can set this parameter to M_NULL, in which case PointsGArrayPtr and PointsBArrayPtr must also be set to M_NULL. All points will be colored using M_COLOR_WHITE. PointsGArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_FLOAT [optionally, in C++: a reference to a constant std::vector&lt;MIL_FLOAT&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of green values of the color of the points in the dots graphic. PointsBArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_FLOAT [optionally, in C++: a reference to a constant std::vector&lt;MIL_FLOAT&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of blue values of the color of the points in the dots graphic. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the dots graphic added to the 3D graphics list. Type-specific versions of the function when using a C compiler under 64-bit MIL_INT64 M3dgraDotsDouble (MIL_ID List3dgraId, MIL_INT64 ParentLabel, MIL_INT NumPoints, const MIL_DOUBLE *CoordXArrayPtr, const MIL_DOUBLE *CoordYArrayPtr, const MIL_DOUBLE *CoordZArrayPtr, const MIL_UINT8 *PointsRArrayPtr, const MIL_UINT8 *PointsGArrayPtr, const MIL_UINT8 *PointsBArrayPtr, MIL_INT64 ControlFlag) Details Parameters List3dgraId See List3dgraId of the main function for a description. ParentLabel See ParentLabel of the main function for a description. NumPoints See NumPoints of the main function for a description. CoordXArrayPtr See CoordXArrayPtr of the main function for a description. CoordYArrayPtr See CoordYArrayPtr of the main function for a description. CoordZArrayPtr See CoordZArrayPtr of the main function for a description. PointsRArrayPtr See PointsRArrayPtr of the main function for a description. PointsGArrayPtr See PointsGArrayPtr of the main function for a description. PointsBArrayPtr See PointsBArrayPtr of the main function for a description. ControlFlag See ControlFlag of the main function for a description. MIL_INT64 M3dgraDotsFloat (MIL_ID List3dgraId, MIL_INT64 ParentLabel, MIL_INT NumPoints, const MIL_FLOAT *CoordXArrayPtr, const MIL_FLOAT *CoordYArrayPtr, const MIL_FLOAT *CoordZArrayPtr, const MIL_UINT8 *PointsRArrayPtr, const MIL_UINT8 *PointsGArrayPtr, const MIL_UINT8 *PointsBArrayPtr, MIL_INT64 ControlFlag) Details Parameters List3dgraId See List3dgraId of the main function for a description. ParentLabel See ParentLabel of the main function for a description. NumPoints See NumPoints of the main function for a description. CoordXArrayPtr See CoordXArrayPtr of the main function for a description. CoordYArrayPtr See CoordYArrayPtr of the main function for a description. CoordZArrayPtr See CoordZArrayPtr of the main function for a description. PointsRArrayPtr See PointsRArrayPtr of the main function for a description. PointsGArrayPtr See PointsGArrayPtr of the main function for a description. PointsBArrayPtr See PointsBArrayPtr of the main function for a description. ControlFlag See ControlFlag of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - NumPoints - CoordXArrayPtr - CoordYArrayPtr - CoordZArrayPtr - PointsRArrayPtr - PointsGArrayPtr - PointsBArrayPtr - ControlFlag Return value Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 1492,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraFree",
      "version": null,
      "title": "M3dgraFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraFree.htm",
      "text": " M3dgraFree Synopsis Free a 3D graphics list. Syntax void M3dgraFree( MIL_ID&nbsp;List3dgraId //in ) Description This function deletes the specified 3D graphics list, and releases any memory associated with it. All 3D graphics lists allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter List3dgraId Specifies the identifier of the 3D graphics list to free. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId Compilation information ",
      "wordCount": 121,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraGetHookInfo",
      "version": null,
      "title": "M3dgraGetHookInfo",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraGetHookInfo.htm",
      "text": " M3dgraGetHookInfo Synopsis Get information about a 3D graphic hook event. Syntax MIL_INT M3dgraGetHookInfo( MIL_ID&nbsp;EventId, //in MIL_INT64&nbsp;InfoType, //in void&nbsp;*UserVarPtr //out ) Description This function allows you to get information about the event that caused the hook-handler function to be called. M3dgraGetHookInfo() should only be called within the scope of a 3D graphic hook-handler function (see M3dgraHookFunction()). Parameters Parameters EventId Specifies the 3D graphic event identifier received by the hook-handler function (see M3dgraHookFunction()). InfoType Specifies the type of information about the event to return. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_ID MIL_INT64 Specifies the address in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InfoType parameter and possible values returned to the UserVarPtr parameter. For retrieving information about a 3d graphics list hook event For retrieving information regarding 3D graphic events Regardless of the 3D graphics list event that caused the hook-handler function to be called, the InfoType parameter can be set to the value below. For retrieving information about a 3d graphics list hook event InfoType Description UserVarPtr - Possible values returned M_LIST Retrieves the MIL identifier of the 3D graphics list that generated the event. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID MIL 3D graphics list identifier Specifies the MIL identifier of the 3D graphics list that generated the event. Regardless of the 3D graphics event that caused the hook-handler function to be called, the InfoType parameter can be set to the value below. For retrieving information regarding 3D graphic events InfoType Description UserVarPtr - Possible values returned M_LABEL Retrieves the label of the 3D graphic that generated the event. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt;= 0 Specifies the label of the 3D graphic that generated the event. Return value The returned value is M_NULL if successful. If the operation fails, a non-null (!M_NULL) value is returned. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - EventId - InfoType - UserVarPtr Parameter Associations For retrieving information about a 3d graphics list hook event For retrieving information regarding 3D graphic events Return value Compilation information ",
      "wordCount": 415,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraGrid",
      "version": null,
      "title": "M3dgraGrid",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraGrid.htm",
      "text": " M3dgraGrid Synopsis Add a grid graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraGrid( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_ID&nbsp;Matrix3dgeoId, //in MIL_DOUBLE&nbsp;Param1, //in MIL_DOUBLE&nbsp;Param2, //in MIL_DOUBLE&nbsp;Param3, //in MIL_DOUBLE&nbsp;Param4, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a grid graphic to the specified 3D graphics list, allowing you to, for example, view the grid graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the grid graphic. When the grid graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the grid graphic's parent must be the root node. The grid graphic has its own coordinate system that represents the grid's position and orientation with respect to its parent's coordinate system. The origin of the grid's coordinate system is the grid's center, and its orientation is the grid's orientation. The grid lies on its coordinate system's XY (Z=0) plane. You can set the grid's position and orientation using the Matrix3dgeoId parameter. You can change the position and orientation of the grid graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the grid graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the grid graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the grid graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the grid graphic is defined. See the Parameter associations section for possible values that can be specified. Matrix3dgeoId Specifies the identifier of the transformation matrix that defines the grid graphic's position and orientation with respect to its parent's coordinate system. For specifying the transformation matrix object identifier Value Description M_DEFAULT Same as M_IDENTITY_MATRIX. M_IDENTITY_MATRIX Specifies the identity matrix. This means that the grid graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. The resulting grid is on its parent's coordinate system's XY (Z=0) plane, and is centered on its parent's coordinate system's origin. MIL transformation matrix object identifier Specifies the identifier of the transformation matrix that defines the grid graphic's position and orientation with respect to its parent's coordinate system. The transformation matrix must be of type M_RIGID. Param1 Specifies the first parameter used to define the grid. See the Parameter associations section for possible values that can be specified. Param2 Specifies the second parameter used to define the grid. See the Parameter associations section for possible values that can be specified. Param3 Specifies the third parameter used to define the grid. See the Parameter associations section for possible values that can be specified. Param4 Specifies the fourth parameter used to define the grid. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, Param1, Param2, Param3, and Param4 parameters. For specifying the grid graphic For specifying the grid graphic CreationMode Description Param1 Param2 Param3 Param4 M_SIZE_AND_SPACING Defines the grid graphic using its size and line spacing. If the specified size is not a multiple of the specified line spacing, the size is rounded down to the nearest multiple of the line spacing. The grid always has at least one cell. If the specified size is smaller than the specified line spacing, there will be a single cell with the dimensions of the line spacing. Param1 Specifies the grid's size along its coordinate system's X-axis. Value &gt; 0.0 Specifies the grid's size along its coordinate system's X-axis, in world units. Param2 Specifies the grid's size along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the grid's size along its coordinate system's Y-axis, in world units. Param3 Specifies the grid's line spacing along its coordinate system's X-axis. Value &gt; 0.0 Specifies the grid's line spacing along its coordinate system's X-axis, in world units. Param4 Specifies the grid's line spacing along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the grid's line spacing along its coordinate system's Y-axis, in world units. M_TILES_AND_SPACING Defines the grid graphic using its number of cells and line spacing. The grid's size along its coordinate system's X- or Y-axis is equal to the number of cells along the given axis multiplied by the line spacing along the same axis. Param1 Specifies the grid's number of cells along its coordinate system's X-axis. Value &gt;= 1 Specifies the grid's number of cells along its coordinate system's X-axis. Param2 Specifies the grid's number of cells along its coordinate system's Y-axis. Value &gt;= 1 Specifies the grid's number of cells along its coordinate system's Y-axis. Param3 Specifies the grid's line spacing along its coordinate system's X-axis. Value &gt; 0.0 Specifies the grid's line spacing along its coordinate system's X-axis, in world units. Param4 Specifies the grid's line spacing along its coordinate system's Y-axis. Value &gt; 0.0 Specifies the grid's line spacing along its coordinate system's Y-axis, in world units. Return value Returns the label of the grid graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - Matrix3dgeoId For specifying the transformation matrix object identifier - Param1 - Param2 - Param3 - Param4 - ControlFlag Parameter Associations For specifying the grid graphic Return value Compilation information ",
      "wordCount": 1040,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraHookFunction",
      "version": null,
      "title": "M3dgraHookFunction",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraHookFunction.htm",
      "text": " M3dgraHookFunction Synopsis Hook a function to a 3D graphics list event. Syntax void M3dgraHookFunction( MIL_ID&nbsp;List3dgraId, //in MIL_INT&nbsp;HookType, //in MIL_3DGRA_HOOK_FUNCTION_PTR&nbsp;HookHandlerPtr, //in void&nbsp;*UserDataPtr //in-out ) Description This function allows you to attach or detach a user-defined function to a specified 3D graphics list event (for example, a modification to a 3D graphic in a 3D graphics list). Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. You can hook more than one function to an event by making separate calls to M3dgraHookFunction() for each function that you want to hook. MIL automatically chains and keeps an internal list of all these hooked functions. When a function is hooked, this new function is added to the end of the list. When the event happens, all user-defined functions in the list will be executed in the same order that they were hooked to the event. You can also remove any function from the list; in this case, MIL preserves the order of the remaining functions in the list. You must not make any blocking calls to a 3D display showing the 3D graphics list, unless the hook-handler function is called as a result of interactive editing from the 3D display. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list to which to hook a function. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). HookType Specifies the 3D graphics list event to which to hook the function. This parameter can be set to one of the following values: For specifying the 3D graphics list event Value Description M_EDITABLE_GRAPHIC_MODIFIED Calls the hook-handler function each time a graphic is interactively modified in the specified 3D graphics list. M_HANDLE_GRAPHIC_CLICKED Calls the hook-handler function each time the graphic is clicked. The graphic can be a handle or a target of another graphic that is a handle. M_HANDLE_GRAPHIC_ROTATED Calls the hook-handler function each time the graphic is rotated. The graphic can be a handle or a target of another graphic that is a handle. M_HANDLE_GRAPHIC_TRANSLATED Calls the hook-handler function each time the graphic is translated in any direction. The graphic can be a handle or a target of another graphic that is a handle. M_MODEL_REMOVE Calls the hook-handler function each time a model is removed from the specified 3D graphics list. a model can be removed with M3dgraRemove() or M3ddispSelect() with M_SELECT or M_REMOVE. Combination value for any of the possible values of the HookType parameter. You can add the following value to the above-mentioned values to set whether to detach the hook-handler function. For detaching the hook-handler function Combination value Description M_UNHOOK Unhooks the specified function if hooked to the specified event. When you use M_UNHOOK, you must provide the same values for all the parameters as when you originally hooked the function. HookHandlerPtr Specifies the address of the function that should be called when the specified event occurs. The hook-handler function must be declared as follows: MIL_INT MFTYPE HookHandler( MIL_INT HookType, MIL_ID EventId, void *UserDataPtr ) Parameters HookType Type of 3D graphics list event that generated the call. EventId Reserved for future expansion, set to M_NULL. UserDataPtr User data pointer that was passed to the UserDataPtr parameter of M3dgraHookFunction(). Upon successful completion, the hook-handler function should return M_NULL. Note MFTYPE and MIL_3DGRA_HOOK_FUNCTION_PTR are reserved MIL predefined types for functions and data pointers. UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if not used. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - HookType For specifying the 3D graphics list event + For detaching the hook-handler function - HookHandlerPtr - UserDataPtr Compilation information ",
      "wordCount": 665,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraInquire",
      "version": null,
      "title": "M3dgraInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraInquire.htm",
      "text": " M3dgraInquire Synopsis Inquire information about a 3D graphic in a 3D graphics list. Syntax MIL_INT64 M3dgraInquire( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;Label, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires information about a setting of the specified 3D graphic in a 3D graphics list. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list containing the 3D graphic about which to inquire information. You can inquire the settings of a 3D graphic in the 3D graphics list, as well as the default settings of the 3D graphics list itself. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). See the Parameter associations section for possible values that can be specified. Label Specifies the label of the 3D graphic to inquire. You can also inquire the default settings of the 3D graphics list itself. For specifying the 3D graphic label Value Description M_DEFAULT_SETTINGS Specifies to inquire the default settings of the 3D graphics that are added to the 3D graphics list. M_LIST Specifies to inquire the 3D graphics list itself. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. InquireType Specifies the type of setting to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] MIL_DOUBLE MIL_FLOAT MIL_ID MIL_INT MIL_INT32 MIL_INT64 MIL_TEXT_PTR [optionally, in C++: a reference to a MIL_STRING] Specifies the address in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the List3dgraId and InquireType parameters and possible values returned to the UserVarPtr parameter. For inquiring about the 3D graphics list For inquiring about the default settings of 3D graphics added to the 3D graphics list For inquiring general information about a 3D graphic or 3D graphic label For inquiring the settings of a 3D graphic The following inquire types allow you to inquire about the 3D graphics list when Label is M_LIST. These inquire types inquire settings that affect all graphics in the graphics list. For inquiring about the 3D graphics list List3dgraId Description InquireType UserVarPtr - Possible values returned Graphics list identifier with Label set to M_LIST Specifies a 3D graphics list, allocated using M3dgraAlloc(). M_EDITABLE_APPEARANCE Inquires whether the interactively editable graphic is displayed such that it appears as a solid surface, wireframe, or points. This is the appearance applied to a graphic when M_EDITABLE is M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_EDITABLE_COLOR Inquires the default color of the points and lines of the interactively editable graphics added to the 3D graphics list. This is the color applied to a graphic when M_EDITABLE is M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_EDITABLE_OPACITY Inquires the default opacity of the interactively editable graphics added to the 3D graphics list. This is the opacity applied to a graphic when M_EDITABLE is M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_EMPTY Inquires whether the 3D graphics list contains no displayable 3D graphics. Invisible 3D graphics include nodes, 3D graphics with M_VISIBLE set to M_FALSE, and containers with no valid points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphics list contains displayable 3D graphics. M_TRUE Specifies that the 3D graphics list does not contain any displayable 3D graphics. The following inquire types allow you to inquire about the default settings of a 3D graphics list when Label is M_DEFAULT_SETTINGS. For inquiring about the default settings of 3D graphics added to the 3D graphics list List3dgraId Description InquireType UserVarPtr - Possible values returned Graphics list identifier with Label set to M_DEFAULT_SETTINGS Specifies a 3D graphics list, allocated using M3dgraAlloc(), and M_DEFAULT_SETTINGS specified by the Label parameter. M_APPEARANCE Inquires whether the 3D graphics added to the 3D graphics list are displayed, by default, as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_BACKGROUND_COLOR Inquires the default background color for text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_BACKGROUND_MODE Inquires the default background mode for text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_OPAQUE Specifies that the background of the text graphic is filled with the current background color. M_TRANSPARENT Specifies that the text graphic does not have a background. M_COLOR Inquires the default color of the points and lines of the 3D graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_AXIS_X Inquires the default color of the X-axis of axis graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_AXIS_Y Inquires the default color of the Y-axis of axis graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_AXIS_Z Inquires the default color of the Z-axis of axis graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_COMPONENT Inquires the default component used to color the points in the point cloud graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NULL Specifies that the color of the points in the point cloud graphic is set to a single color using M_COLOR. M_AUTO_COLOR Specifies to color the point cloud graphic according to specific components in the source container. M_COMPONENT_CONFIDENCE Specifies to color the point cloud graphic according to the component that stores confidence information for the M_COMPONENT_RANGE or M_COMPONENT_DISPARITY component of the container. M_COMPONENT_COORDINATE_MAP_A_MIL Specifies to color the point cloud graphic according to the component that stores the A coordinate map provided by the camera. M_COMPONENT_COORDINATE_MAP_B_MIL Specifies to color the point cloud graphic according to the component that stores the B coordinate map provided by the camera. M_COMPONENT_CUSTOM + n Specifies to color the point cloud graphic according to a component that has a custom type, identified by n, where n can be a value between 0 and 255. M_COMPONENT_DISPARITY Specifies to color the point cloud graphic according to the component that stores a disparity map. M_COMPONENT_INFRARED Specifies to color the point cloud graphic according to the component that stores an intensity image of infrared light. M_COMPONENT_INTENSITY Specifies to color the point cloud graphic according to the component that stores an intensity image of visible light. M_COMPONENT_MESH_MIL Specifies to color the point cloud graphic according to the component that stores mesh information for the M_COMPONENT_RANGE component of the container. M_COMPONENT_METADATA Specifies to color the point cloud graphic according to the component that stores metadata information. M_COMPONENT_MULTISPECTRAL Specifies to color the point cloud graphic according to the component that stores an intensity image where each band represents the intensity of a specific wavelength of light. M_COMPONENT_NORMALS_MIL Specifies that the buffer stores normals information for each point in the M_COMPONENT_RANGE component of the container. M_COMPONENT_RANGE Specifies to color the point cloud graphic according to the component that stores 3D distance/position information. M_COMPONENT_REFLECTANCE Specifies to color the point cloud graphic according to the component that stores a reflectance map. M_COMPONENT_SCATTER Specifies to color the point cloud graphic according to the component that stores a scatter map. M_COMPONENT_ULTRAVIOLET Specifies to color the point cloud graphic according to the component that stores an intensity image of ultraviolet light. M_COLOR_COMPONENT_BAND Inquires the default band used to color the point cloud graphic when the point cloud graphic's color is set using M_COLOR_COMPONENT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL_BANDS Specifies all the bands of the component. Value &gt;= 0 Specifies the index of the band to use. M_COLOR_LIMITS Inquires the default limits of the values in the component used to color the point cloud graphics added to the 3D graphics list when the point cloud graphics are colored using M_COLOR_COMPONENT by default. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BUFFER_LIMITS Specifies to use the buffer's minimum and maximum. M_DATA_EXTREMES_GLOBAL Specifies to use the global minimum and maximum of the buffer's data. M_DATA_EXTREMES_PER_BAND Specifies to use the minimum and maximum of the buffer's data in each of its bands. M_USER_DEFINED Specifies to use the minimum and maximum manually set with M_COLOR_LIMITS_MIN and M_COLOR_LIMITS_MAX. M_COLOR_LIMITS_MAX Inquires the default maximum color value for point cloud graphics added to the 3D graphics list when M_COLOR_LIMITS is M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the maximum color value to use. M_COLOR_LIMITS_MIN Inquires the default minimum color value for point cloud graphics added to the 3D graphics list when M_COLOR_LIMITS is M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the minimum color value to use. M_COLOR_LUT_ID Inquires the identifier of the default LUT buffer associated with the 3D graphics list. This is the LUT that is applied by default to point cloud graphics added to the list. If the default LUT is predefined (default M_COLORMAP_TURBO), MIL returns the type of predefined colormap to which the LUT is set (M_COLORMAP_...). If the default LUT is user-defined, the identifier of an internal copy of the user-defined LUT is returned. For a user-defined LUT for which an internal copy exists, you must not free the associated buffer. You can, however, modify the buffer so that newly added point cloud graphics receive the modified LUT. Note that modifying the 3D graphics list's default LUT buffer will not change the LUT for point cloud graphics that are already in the 3D graphics list; each point cloud graphic gets its own copy of the LUT associated with the 3D graphics list when it is created. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID M_NULL Specifies that the LUT buffer is set to M_NULL. MIL LUT buffer identifier Specifies the MIL identifier of the current LUT buffer. M_COLOR_LUT_SIZE Inquires the size of the point cloud graphic's default LUT buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the size of the point cloud graphic's LUT. M_COLOR_LUT_SIZE_BAND Inquires the number of bands of the point cloud graphic's default LUT buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 1 Specifies that the point cloud graphic's LUT has one band. 3 Specifies that the point cloud graphic's LUT has three bands. M_COLOR_USE_LUT Inquires whether the point cloud graphics added to the 3D graphics list are colored, by default, using a LUT to map values from the component specified by M_COLOR_COMPONENT to a color. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies not to use a LUT. M_TRUE Specifies to use a LUT. M_COLOR_USE_TEXTURE Inquires whether the polygon graphics added to the 3D graphics list are filled with a texture by default. If the polygon graphic has no texture buffer, M_FILL_COLOR is used regardless of this setting. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies to fill the polygon with M_FILL_COLOR. M_TRUE Specifies that the polygon graphic is set to be filled graphic with a texture buffer. M_DISPLAY_BASES Inquires whether the cylinder graphic's circular bases are displayed or not by default when a cylinder graphic is added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies that the cylinder graphic's bases are not displayed. M_ENABLE Specifies that the cylinder graphic's bases are displayed. M_FILL_COLOR Inquires the default color of the solid surfaces of the 3D graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FONT Inquires the default font for text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_TEXT_PTR [optionally, in C++: MIL_STRING ] Data type: address of a MIL_TEXT_PTR [optionally, in C++: MIL_STRING ] Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. \"FontFamily:Weight:Slant\" Specifies the font according to the following format, Family: Weight: Slant. \"FontFile\" Specifies a full path to a TrueType file name. M_FONT_AUTO_SELECT Inquires the default automatic font selection behavior for text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_TEXT_PTR [optionally, in C++: MIL_STRING ] Data type: address of a MIL_TEXT_PTR [optionally, in C++: MIL_STRING ] Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_DISABLE Specifies that MIL will not search for a suitable font. M_ENABLE Specifies that MIL will search for a suitable font. M_FONT_SIZE Inquires the default font size for text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the font size. M_GRAPHIC_RESOLUTION Inquires the default mesh resolution of 3D graphics added to the 3D graphics list. This applies to arc, axis, cylinder, and sphere graphics. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 3 Specifies the resolution of the 3D graphic's mesh. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_KEYING_COLOR Inquires the default pixel value to display as transparent for polygon graphics added to the 3D graphics list. This setting is only used if the polygon is filled with a texture buffer. Any portion of the polygon graphic that would be displayed with this color is instead made transparent, regardless of the polygon graphic's M_OPACITY setting. This can be used to cut out parts of a polygon graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_NONE Specifies that the texture does not have a keying value. 0 &lt;= Value &lt;= 255 Specifies a grayscale keying value, used when the texture is a 1-band buffer. M_OPACITY Inquires the default opacity of the 3D graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_RENDER_LAYER Inquires which layer the 3D graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the 3D graphic will be rendered. M_SHADING Inquires the default shading of the 3D graphics added to the 3D graphics list. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. This setting does not apply to text, node, line, arc, grid, or dots graphics. You can inquire the default shading mode for text graphics using M_TEXT_SHADING. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the 3D graphic is displayed with flat shading. M_GOURAUD Specifies that the 3D graphic is displayed with Gouraud shading. M_NONE Specifies that the 3D graphic is displayed without shading. M_PHONG Specifies that the 3D graphic is displayed with Phong shading. M_TEXT_ALIGN_HORIZONTAL Inquires the default horizontal alignment of the text in the text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTER Specifies that the text is horizontally centered. M_LEFT Specifies that the text is left-aligned. M_RIGHT Specifies that the text is right-aligned. M_TEXT_ALIGN_VERTICAL Inquires the default vertical alignment of the text in the text graphics added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BOTTOM Specifies that the text is bottom-aligned. M_CENTER Specifies that the text is vertically centered. M_TOP Specifies that the text is top-aligned. M_TEXT_BORDER Inquires the default borders around text graphics added to the 3D graphics list. Note that a combination of the values below can be returned. Bitwise operators must be used to verify the presence of a specific border. UserVarPtr extra info Data type info: Data type: address of a MIL_INT MORE Data type: address of a MIL_INT Bitwise return value; values listed below can be established using bitwise operators. Data type: address of a MIL_INT M_BOTTOM Specifies that a line is drawn underneath the text. M_LEFT Specifies that a line is drawn to the left of the text. M_NONE Specifies that no border is drawn around the text. M_RIGHT Specifies that a line is drawn to the right of the text. M_TOP Specifies that a line is drawn above the text. M_TEXT_DIRECTION Inquires the default direction to draw text the text that is displayed in a text graphic that is added to the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_LEFT_TO_RIGHT Specifies that text will be drawn from left to right. M_RIGHT_TO_LEFT Specifies that text will be drawn from right to left. M_TEXT_SHADING Inquires the default shading of the text graphics added to the 3D graphics list. Shaded text graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies that the text graphic is displayed without shading. M_ENABLE Specifies that the text graphic is displayed with shading. M_THICKNESS Inquires the default thickness of the points/lines of the 3D graphics added to the 3D graphics list in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the default visibility of the 3D graphics added to the 3D graphics list. Invisible 3D graphics do not count towards the 3D graphics list's bounding box. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. The following inquire types allow you to inquire general information about a 3D graphic or 3D graphic label. For inquiring general information about a 3D graphic or 3D graphic label List3dgraId Description InquireType UserVarPtr - Possible values returned Graphics list identifier with Label set to any 3D graphic label Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a 3D graphic label specified by the Label parameter. M_CHILDREN Inquires the labels of the 3D graphic's immediate children. UserVarPtr extra info Data type info: Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MORE Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size: M3dgraInquire ( M_NUMBER_OF_CHILDREN ) Value &gt; 0 Specifies the label of the 3D graphic's child. M_GRAPHIC_TYPE Inquires the type of 3D graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_GRAPHIC_TYPE_ARC Specifies an arc graphic. M_GRAPHIC_TYPE_AXIS Specifies an axis graphic. M_GRAPHIC_TYPE_BOX Specifies a box graphic. M_GRAPHIC_TYPE_CYLINDER Specifies a cylinder graphic. M_GRAPHIC_TYPE_DOTS Specifies dots graphic. M_GRAPHIC_TYPE_GRID Specifies a grid graphic. M_GRAPHIC_TYPE_LINE Specifies a line graphic. M_GRAPHIC_TYPE_LINES Specifies a lines graphic. M_GRAPHIC_TYPE_NODE Specifies a node graphic. M_GRAPHIC_TYPE_PLANE Specifies a plane graphic. M_GRAPHIC_TYPE_POINT_CLOUD Specifies a point cloud graphic. M_GRAPHIC_TYPE_POLYGON Specifies a polygon graphic. M_GRAPHIC_TYPE_RECT Specifies a rectangle graphic. M_GRAPHIC_TYPE_SPHERE Specifies a sphere graphic. M_GRAPHIC_TYPE_TEXT Specifies text graphic. M_LABEL_EXISTS Inquires whether the specified label exists in the 3D graphics list. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the label does not exist in the 3D graphics list. M_TRUE Specifies that the label exists in the 3D graphics list. M_NUMBER_OF_CHILDREN Inquires the 3D graphic's number of immediate children. Use with M_RECURSIVE to get the 3D graphic's total number of descendants. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the number of immediate children. M_PARENT Inquires the label of the 3D graphic's parent. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_INVALID Specifies that the 3D graphic does not have a parent. This is only returned when Label is the root node. Value &gt;= 0 Specifies the label of the 3D graphic's parent. Combination value for [when List3dgraId=Graphics list identifier with Label set to any 3D graphic label: M_CHILDREN , M_NUMBER_OF_CHILDREN]. You can add the following value to the above-mentioned values to get the labels or the number of all descendants of a 3D graphic in a 3D graphics list. For inquiring about all descendants of a 3D graphic Combination value Description M_RECURSIVE Specifies to get the labels or the number of all descendants of a 3D graphic in a 3D graphics list. The following inquire types allow you to inquire about 3D graphics settings. Note that all inquires on the position or rotation of a 3D graphic are returned relative to the 3D graphic's parent's coordinate system. To inquire positions and rotations relative to the root note, use M_RELATIVE_TO_ROOT. For inquiring the settings of a 3D graphic List3dgraId Description InquireType UserVarPtr - Possible values returned Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_ARC Specifies a 3D graphics list, allocated using M3dgraAlloc(), and an arc graphic specified by the Label parameter. M_ANGLE Inquires the arc graphic's angle. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -360.0 &lt;= Value &lt;= 360.0 Specifies the arc graphic's angle, in degrees. M_APPEARANCE Inquires whether the arc graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_CENTER_X Inquires the X-coordinate of the arc graphic's center. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the arc graphic's center , relative to its parent's coordinate system. M_CENTER_Y Inquires the Y-coordinate of the arc graphic's center. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the arc graphic's center , relative to its parent's coordinate system. M_CENTER_Z Inquires the Z-coordinate of the arc graphic's center. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the arc graphic's center , relative to its parent's coordinate system. M_COLOR Inquires the color of the points and lines of the arc graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_END_POINT_X Inquires the X-coordinate of the arc graphic's end point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the arc graphic's end point, relative to its parent's coordinate system. M_END_POINT_Y Inquires the Y-coordinate of the arc graphic's end point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the arc graphic's end point, relative to its parent's coordinate system. M_END_POINT_Z Inquires the Z-coordinate of the arc graphic's end point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the arc graphic's end point, relative to its parent's coordinate system. M_GRAPHIC_RESOLUTION Inquires the resolution of the arc graphic's mesh. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 3 Specifies the number of edges on the arc graphic. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the arc graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_NORMAL_X Inquires the X-component of the arc graphic's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the arc graphic's normal unit vector, relative to its parent's coordinate system. M_NORMAL_Y Inquires the Y-component of the arc graphic's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the arc graphic's normal unit vector, relative to its parent's coordinate system. M_NORMAL_Z Inquires the Z-component of the arc graphic's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the arc graphic's normal unit vector, relative to its parent's coordinate system. M_OPACITY Inquires the opacity of the arc graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the arc graphic. M_POSITION_X Inquires the X-coordinate of the arc graphic's position. The position is the arc graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the arc's center, its X-axis is the vector directed from the arc's center to the arc's start point, and its Z-axis is the arc's normal vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the arc graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the arc graphic's position. The position is the arc graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the arc's center, its X-axis is the vector directed from the arc's center to the arc's start point, and its Z-axis is the arc's normal vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the arc graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the arc graphic's position. The position is the arc graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the arc's center, its X-axis is the vector directed from the arc's center to the arc's start point, and its Z-axis is the arc's normal vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the arc graphic's position relative to its parent's coordinate system. M_RADIUS Inquires the arc graphic's radius. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the arc graphic's radius, in world units. M_RENDER_LAYER Inquires which layer the arc graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the arc graphic will be rendered. M_START_POINT_X Inquires the X-coordinate of the arc graphic's start point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the arc graphic's start point, relative to its parent's coordinate system. M_START_POINT_Y Inquires the Y-coordinate of the arc graphic's start point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the arc graphic's start point, relative to its parent's coordinate system. M_START_POINT_Z Inquires the Z-coordinate of the arc graphic's start point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the arc graphic's start point, relative to its parent's coordinate system. M_THICKNESS Inquires the thickness of the points/lines of the arc graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the arc graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_AXIS Specifies a 3D graphics list, allocated using M3dgraAlloc(), and an axis graphic specified by the Label parameter. M_APPEARANCE Inquires whether the axis graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color of the points and lines of the axis graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_PER_AXIS Specifies that the 3 axes are not set to the same color. To inquire the color of each axis, use M_COLOR_AXIS.... Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_AXIS_X Inquires the color of the axis graphic's X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_AXIS_Y Inquires the color of the axis graphic's Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_AXIS_Z Inquires the color of the axis graphic's Z-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_GRAPHIC_RESOLUTION Inquires the resolution of the axis graphic's mesh. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 3 Specifies the number of edges on the axis graphic's cone-shaped arrow caps. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the axis graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_LENGTH Inquires the length of the axis graphic's axes. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the axis graphic's axes, in world units. M_OPACITY Inquires the opacity of the axis graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the axis graphic. M_POSITION_X Inquires the X-coordinate of the axis graphic's position. The position is the axis graphic's coordinate system relative to the parent's coordinate system. The origin is the origin of the axes, and its orientation is the orientation of the axes. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the axis graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the axis graphic's position. The position is the axis graphic's coordinate system relative to the parent's coordinate system. The origin is the origin of the axes, and its orientation is the orientation of the axes. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the axis graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the axis graphic's position. The position is the axis graphic's coordinate system relative to the parent's coordinate system. The origin is the origin of the axes, and its orientation is the orientation of the axes. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the axis graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the axis graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the axis graphic will be rendered. M_SHADING Inquires the axis graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the axis graphic is displayed with flat shading. M_GOURAUD Specifies that the axis graphic is displayed with Gouraud shading. M_NONE Specifies that the axis graphic is displayed without shading. M_PHONG Specifies that the axis graphic is displayed with Phong shading. M_THICKNESS Inquires the thickness of the points/lines of the axis graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. Setting this to 1.0 would be effectively the same as setting M_VIEW_BASED_LOD to M_DISABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the axis graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_BOX Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a box graphic specified by the Label parameter. M_CORNER_X( MIL_INT CornerIndex ) Inquires the X-coordinate of the specified box graphic's corner. Filters: fc_A: [{I: f_2}] fc_C: [{I: f_8}] Parameters CornerIndex Specifies the index of the box corner. 0 &lt;= Value &lt;= 7 Specifies the box corner. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the specified box graphic's corner relative to its parent's coordinate system. M_CORNER_Y( MIL_INT CornerIndex ) Inquires the Y-coordinate of the specified box graphic's corner. Filters: fc_A: [{I: f_2}] fc_C: [{I: f_8}] Parameters CornerIndex Specifies the index of the box corner. 0 &lt;= Value &lt;= 7 Specifies the box corner. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the specified box graphic's corner relative to its parent's coordinate system. M_CORNER_Z( MIL_INT CornerIndex ) Inquires the Z-coordinate of the specified box graphic's corner. Filters: fc_A: [{I: f_2}] fc_C: [{I: f_8}] Parameters CornerIndex Specifies the index of the box corner. 0 &lt;= Value &lt;= 7 Specifies the box corner. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the specified box graphic's corner relative to its parent's coordinate system. M_APPEARANCE Inquires whether the box graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_AXIS_ALIGNED Inquires whether the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the box graphic is not axis-aligned; a rotation (other than a 180 degree rotation) has been applied. M_TRUE Specifies that the box graphic is axis-aligned; no rotation (or a 180 degree rotation) has been applied. M_CENTER_X Inquires the X-coordinate of the box graphic's center. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the box's center point, relative to its parent's coordinate system . M_CENTER_Y Inquires the Y-coordinate of the box graphic's center. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the box's center point, relative to its parent's coordinate system . M_CENTER_Z Inquires the Z-coordinate of the box graphic's center. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the box's center point, relative to its parent's coordinate system . M_COLOR Inquires the color of the points and lines of the box graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_CORNER_X_ALL Inquires the X-coordinate of each of the box graphic's 8 corners, in their index order. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(8) Value Specifies the X-component the box graphic's corner relative to the box graphic's parent. M_CORNER_Y_ALL Inquires the Y-coordinate of each of the box graphic's 8 corners, in their index order. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(8) Value Specifies the Y-component the box graphic's corner relative to the box graphic's parent. M_CORNER_Z_ALL Inquires the Z-coordinate of each of the box graphic's 8 corners, in their index order. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(8) Value Specifies the Z-component the box graphic's corner relative to the box graphic's parent. M_EDITABLE Inquires if the box is editable interactively. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies that the graphic cannot be edited interactively. M_ENABLE Specifies that the graphic can be edited interactively. M_EDITABLE_HANDLE_SIZE_ROTATION Inquires the size of the rotation handles, as a factor of the default size. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the size of the handle graphic. M_EDITABLE_HANDLE_SIZE_SCALE Inquires the size of the scaling handles, as a factor of the default size. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the size of the handle graphic. M_EDITABLE_HANDLE_SIZE_TRANSLATION Inquires the size of the translation handles, as a factor of the default size. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the size of the handle graphic. M_FILL_COLOR Inquires the color of the solid surfaces of the box graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the box graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the box graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the box graphic. M_POSITION_X Inquires the X-coordinate of the box graphic's position. The position is the box graphic's coordinate system relative to the parent's coordinate system. The origin is the box graphic's center, and its coordinate system's orientation is the box graphic's orientation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the box graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the box graphic's position. The position is the box graphic's coordinate system relative to the parent's coordinate system. The origin is the box graphic's center, and its coordinate system's orientation is the box graphic's orientation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the box graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the box graphic's position. The position is the box graphic's coordinate system relative to the parent's coordinate system. The origin is the box graphic's center, and its coordinate system's orientation is the box graphic's orientation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the box graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the box graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the box graphic will be rendered. M_ROTATABLE Inquires whether the box graphic is rotatable interactively. To show the rotation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated. M_ENABLE Specifies the box can be rotated. M_ROTATABLE_X Inquires whether the box graphic is rotatable interactively around the X-axis. To show the rotation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated around the X-axis. M_ENABLE Specifies the box can be rotated around the X-axis. M_ROTATABLE_Y Inquires whether the box graphic is rotatable interactively around the Y-axis. To show the rotation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated around the Y-axis. M_ENABLE Specifies the box can be rotated around the Y-axis. M_ROTATABLE_Z Inquires whether the box graphic is rotatable interactively around the Z-axis. To show the rotation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be rotated around the Z-axis. M_ENABLE Specifies the box can be rotated around the Z-axis. M_SCALABLE Inquires whether the box graphic is scalable interactively. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled. M_ENABLE Specifies the box can be scaled. M_SCALABLE_X Inquires whether the box graphic is scalable interactively in the X-direction. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the X-direction. M_ENABLE Specifies the box can be scaled in the X-direction. M_SCALABLE_X0 Inquires whether the box graphic is scalable interactively in the X-direction by the individual handle, initially corresponding to the minimum X-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the X-direction. M_ENABLE Specifies the box can be scaled in the X-direction. M_SCALABLE_X1 Inquires whether the box graphic is scalable interactively in the X-direction by the individual handle, initially corresponding to the maximum X-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the X-direction. M_ENABLE Specifies the box can be scaled in the X-direction. M_SCALABLE_Y Inquires whether the box graphic is scalable interactively in the Y-direction. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Y-direction. M_ENABLE Specifies the box can be scaled in the Y-direction. M_SCALABLE_Y0 Inquires whether the box graphic is scalable interactively in the Y-direction by the individual handle, initially corresponding to the minimum Y-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Y-direction. M_ENABLE Specifies the box can be scaled in the Y-direction. M_SCALABLE_Y1 Inquires whether the box graphic is scalable interactively in the Y-direction by the individual handle, initially corresponding to the maximum Y-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Y-direction. M_ENABLE Specifies the box can be scaled in the Y-direction. M_SCALABLE_Z Inquires whether the box graphic is scalable interactively in the Z-direction. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Z-direction. M_ENABLE Specifies the box can be scaled in the Z-direction. M_SCALABLE_Z0 Inquires whether the box graphic is scalable interactively in the Z-direction by the individual handle, initially corresponding to the minimum Z-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Z-direction. M_ENABLE Specifies the box can be scaled in the Z-direction. M_SCALABLE_Z1 Inquires whether the box graphic is scalable interactively in the Z-direction by the individual handle, initially corresponding to the maximum Z-position of the box. To show the scaling handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be scaled in the Z-direction. M_ENABLE Specifies the box can be scaled in the Z-direction. M_SHADING Inquires the box graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the box graphic is displayed with flat shading. M_GOURAUD Specifies that the box graphic is displayed with Gouraud shading. M_NONE Specifies that the box graphic is displayed without shading. M_PHONG Specifies that the box graphic is displayed with Phong shading. M_SIZE_X Inquires the box graphic's length along its coordinate system's X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the box graphic, in world units, along the box's coordinate system's X-axis. M_SIZE_Y Inquires the box graphic's length along its coordinate system's Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the box graphic, in world units, along the box's coordinate system's Y-axis. M_SIZE_Z Inquires the box graphic's length along its coordinate system's Z-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the box graphic, in world units, along the box's coordinate system's Z-axis. M_THICKNESS Inquires the thickness of the points/lines of the box graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_TRANSLATABLE Inquires whether the box graphic is translatable interactively. To show the translation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated. M_ENABLE Specifies the box can be translated. M_TRANSLATABLE_X Inquires whether the box graphic is translatable interactively in the X-direction. To show the translation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated in the X-direction. M_ENABLE Specifies the box can be translated in the X-direction. M_TRANSLATABLE_Y Inquires whether the box graphic is translatable interactively in the Y-direction. To show the translation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated in the Y-direction. M_ENABLE Specifies the box can be translated in the Y-direction. M_TRANSLATABLE_Z Inquires whether the box graphic is translatable interactively in the Z-direction. To show the translation handles, you must set M_EDITABLE to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies the box cannot be translated in the Z-direction. M_ENABLE Specifies the box can be translated in the Z-direction. M_UNROTATED_MAX_X Inquires the box graphic's maximum X-coordinate, ignoring the box's rotation. The coordinate is returned as if the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's maximum X-coordinate, ignoring the box's rotation, relative to its parent's coordinate system . M_UNROTATED_MAX_Y Inquires the box graphic's maximum Y-coordinate, ignoring the box's rotation. The coordinate is returned as if the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's maximum Y-coordinate, ignoring the box's rotation, relative to its parent's coordinate system . M_UNROTATED_MAX_Z Inquires the box graphic's maximum Z-coordinate, ignoring the box's rotation. The coordinate is returned as if the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's maximum Z-coordinate, ignoring the box's rotation, relative to its parent's coordinate system . M_UNROTATED_MIN_X Inquires the box graphic's minimum X-coordinate, ignoring the box's rotation. The coordinate is returned as if the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's minimum X-coordinate, ignoring the box's rotation, relative to its parent's coordinate system . M_UNROTATED_MIN_Y Inquires the box graphic's minimum Y-coordinate, ignoring the box's rotation. The coordinate is returned as if the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's minimum Y-coordinate, ignoring the box's rotation, relative to its parent's coordinate system . M_UNROTATED_MIN_Z Inquires the box graphic's minimum Z-coordinate, ignoring the box's rotation. The coordinate is returned as if the box graphic is axis-aligned relative to its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's minimum Z-coordinate, ignoring the box's rotation, relative to its parent's coordinate system . M_VISIBLE Inquires the visibility of the box graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_CYLINDER Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a cylinder graphic specified by the Label parameter. M_APPEARANCE Inquires whether the cylinder graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_AXIS_X Inquires the X-component of the cylinder graphic's central axis unit vector. This vector does not reflect the cylinder graphic's length, regardless of whether a vector was used to define the cylinder graphic's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the cylinder's central axis unit vector, relative to its parent's coordinate system . M_AXIS_Y Inquires the Y-component of the cylinder graphic's central axis unit vector. This vector does not reflect the cylinder graphic's length, regardless of whether a vector was used to define the cylinder graphic's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the cylinder's central axis unit vector, relative to its parent's coordinate system . M_AXIS_Z Inquires the Z-component of the cylinder graphic's central axis unit vector. This vector does not reflect the cylinder graphic's length, regardless of whether a vector was used to define the cylinder graphic's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the cylinder's central axis unit vector, relative to its parent's coordinate system . M_CENTER_X Inquires the X-coordinate of the center point on the cylinder graphic's central axis. This inquire type is only available if the cylinder graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the center point on the cylinder's central axis, relative to its parent's coordinate system . M_CENTER_Y Inquires the Y-coordinate of the center point on the cylinder graphic's central axis. This inquire type is only available if the cylinder graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the center point on the cylinder's central axis, relative to its parent's coordinate system . M_CENTER_Z Inquires the Z-coordinate of the center point on the cylinder graphic's central axis. This inquire type is only available if the cylinder graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the center point on the cylinder's central axis, relative to its parent's coordinate system . M_COLOR Inquires the color of the points and lines of the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_DISPLAY_BASES Inquires whether the cylinder graphic's circular bases are displayed or not. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies that the cylinder graphics's bases are not displayed. M_ENABLE Specifies that the cylinder graphic's bases are displayed. M_END_POINT_X Inquires the X-coordinate of the cylinder graphic's end point, positioned at the center of the cylinder graphic's second circular base. This inquire type is only available if the cylinder graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the cylinder's end point, relative to its parent's coordinate system . M_END_POINT_Y Inquires the Y-coordinate of the cylinder graphic's end point, positioned at the center of the cylinder graphic's second circular base. This inquire type is only available if the cylinder graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the cylinder's end point, relative to its parent's coordinate system . M_END_POINT_Z Inquires the Z-coordinate of the cylinder graphic's end point, positioned at the center of the cylinder graphic's second circular base. This inquire type is only available if the cylinder graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the cylinder's end point, relative to its parent's coordinate system . M_FILL_COLOR Inquires the color of the solid surfaces of the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_GRAPHIC_RESOLUTION Inquires the resolution of the cylinder graphic's mesh. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 3 Specifies the number of edges on the cylinder graphic's bases and the number of faces that make up the sides of the cylinder. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the cylinder graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_LENGTH Inquires the cylinder graphic's length. Note that for infinite cylinders, the value returned is truncated to the limits of the clipping box of the 3D graphics list (as it existed when the cylinder graphic was added). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the cylinder graphic's length, in world units. M_OPACITY Inquires the opacity of the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the cylinder graphic. M_POSITION_X Inquires the X-coordinate of the cylinder graphic's position. The position is the cylinder graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the cylinder graphic's start point, and its Z-axis is the cylinder graphic's central axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the cylinder graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the cylinder graphic's position. The position is the cylinder graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the cylinder graphic's start point, and its Z-axis is the cylinder graphic's central axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the cylinder graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the cylinder graphic's position. The position is the cylinder graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the cylinder graphic's start point, and its Z-axis is the cylinder graphic's central axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the cylinder graphic's position relative to its parent's coordinate system. M_RADIUS Inquires the cylinder graphic's radius. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the cylinder graphic's radius, in world units. M_RENDER_LAYER Inquires which layer the cylinder graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the cylinder graphic will be rendered. M_SHADING Inquires the cylinder graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the cylinder graphic is displayed with flat shading. M_GOURAUD Specifies that the cylinder graphic is displayed with Gouraud shading. M_NONE Specifies that the cylinder graphic is displayed without shading. M_PHONG Specifies that the cylinder graphic is displayed with Phong shading. M_START_POINT_X Inquires the X-coordinate of the cylinder graphic's start point on the cylinder's central axis. When the cylinder graphic's length is infinite, this returns the X-coordinate of the first point used to define the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the first point on the central axis used to define the cylinder graphic , relative to its parent's coordinate system . M_START_POINT_Y Inquires the Y-coordinate of the cylinder graphic's start point on the cylinder's central axis. When the cylinder graphic's length is infinite, this returns the X-coordinate of the first point used to define the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the first point on the central axis used to define the cylinder graphic , relative to its parent's coordinate system . M_START_POINT_Z Inquires the Z-coordinate of the cylinder graphic's start point on the cylinder's central axis. When the cylinder graphic's length is infinite, this returns the Z-coordinate of the first point used to define the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the first point on the central axis used to define the cylinder graphic , relative to its parent's coordinate system . M_THICKNESS Inquires the thickness of the points/lines of the cylinder graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the cylinder graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_DOTS Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a dots graphic specified by the Label parameter. M_COLOR Inquires the color of the points in the dots graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_PER_POINT Specifies that the color of the dots are individually set using M3dgraDots() with a color array. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the dots graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the dots graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the dots graphic. M_POINTS_X Inquires the X-coordinate of each point in the dots graphic. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dgraInquire ( M_NB_ELEMENTS ) Value Specifies the X-coordinate of a point in the dots graphic, relative to its parent's coordinate system. M_POINTS_Y Inquires the Y-coordinate of each point in the dots graphic. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dgraInquire ( M_NB_ELEMENTS ) Value Specifies the Y-coordinate of a point in the dots graphic, relative to its parent's coordinate system. M_POINTS_Z Inquires the Z-coordinate of each point in the dots graphic. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dgraInquire ( M_NB_ELEMENTS ) Value Specifies the Y-coordinate of a point in the dots graphic, relative to its parent's coordinate system. M_POSITION_X Inquires the X-coordinate of the dots graphic's position. The position is the dots graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the position and orientation of its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the dots graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the dots graphic's position. The position is the dots graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the position and orientation of its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the dots graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the dots graphic's position. The position is the dots graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the position and orientation of its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the dots graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the dots graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the dots graphic will be rendered. M_THICKNESS Inquires the thickness of the dots graphic's points in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the dot thickness , in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the dots graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_GRID Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a grid graphic specified by the Label parameter. M_APPEARANCE Inquires whether the grid graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color of the points and lines of the grid graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FILL_COLOR Inquires the color of the solid surfaces of the grid graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the grid graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_NUMBER_OF_TILES_X Inquires the number of cells along the grid graphic's X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the number of cells along the grid graphic's X-axis. M_NUMBER_OF_TILES_Y Inquires the number of cells along the grid graphic's Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the number of cells along the grid graphic's Y-axis. M_OPACITY Inquires the opacity of the grid graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the grid graphic. M_POSITION_X Inquires the X-coordinate of the grid graphic's position. The position is the grid graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the grid's center, and its orientation is the grid's orientation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the grid graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the grid graphic's position. The position is the grid graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the grid's center, and its orientation is the grid's orientation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the grid graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the grid graphic's position. The position is the grid graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the grid's center, and its orientation is the grid's orientation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the grid graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the grid graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the grid graphic will be rendered. M_SIZE_X Inquires the grid graphic's length along its coordinate system's X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the grid graphic, in world units, along the grid's coordinate system's X-axis. M_SIZE_Y Inquires the grid graphic's length along its coordinate system's Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the grid graphic, in world units, along the grid's coordinate system's Y-axis. M_SPACING_X Inquires the spacing between the lines along the grid graphic's X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the spacing between the lines along the grid graphic's X-axis, in world units. M_SPACING_Y Inquires the spacing between the lines along the grid graphic's Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the spacing between the lines along the grid graphic's Y-axis, in world units. M_THICKNESS Inquires the thickness of the points/lines of the grid graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the grid graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a line graphic specified by the Label parameter. M_APPEARANCE Inquires whether the line graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_AXIS_X Inquires the X-component of the line graphic's direction unit vector. This vector does not reflect the line graphic's length, regardless of whether a vector was used to define the line graphic's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the line's direction unit vector, relative to its parent's coordinate system . M_AXIS_Y Inquires the Y-component of the line graphic's direction unit vector. This vector does not reflect the line graphic's length, regardless of whether a vector was used to define the line graphic's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the line's direction unit vector, relative to its parent's coordinate system . M_AXIS_Z Inquires the Z-component of the line graphic's direction unit vector. This vector does not reflect the line graphic's length, regardless of whether a vector was used to define the line graphic's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the line's direction unit vector, relative to its parent's coordinate system . M_CENTER_X Inquires the X-coordinate of the line graphic's center point. This inquire type is only available if the line graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the center point on the line graphic , relative to its parent's coordinate system . M_CENTER_Y Inquires the Y-coordinate of the line graphic's center point. This inquire type is only available if the line graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the center point on the line graphic , relative to its parent's coordinate system . M_CENTER_Z Inquires the Z-coordinate of the line graphic's center point. This inquire type is only available if the line graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the center point on the line graphic , relative to its parent's coordinate system . M_COLOR Inquires the color of the points and lines of the line graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_END_POINT_X Inquires the X-coordinate of the line graphic's end point. This inquire type is only available if the line graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the line's end point, relative to its parent's coordinate system . M_END_POINT_Y Inquires the Y-coordinate of the line graphic's end point. This inquire type is only available if the line graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the line's end point, relative to its parent's coordinate system . M_END_POINT_Z Inquires the Z-coordinate of the line graphic's end point. This inquire type is only available if the line graphic's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the line's end point, relative to its parent's coordinate system . M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the line graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_LENGTH Inquires the line graphic's length. Note that for infinite lines, the value returned is truncated to the limits of the clipping box of the 3D graphics list (as it existed when the line graphic was added). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the line graphic's length, in world units. M_OPACITY Inquires the opacity of the line graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the line graphic. M_POSITION_X Inquires the X-coordinate of the line graphic's position. The position is the line graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the line graphic's start point, and its Z-axis shares the same direction as the line graphic's direction. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the line graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the line graphic's position. The position is the line graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the line graphic's start point, and its Z-axis shares the same direction as the line graphic's direction. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the line graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the line graphic's position. The position is the line graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the line graphic's start point, and its Z-axis shares the same direction as the line graphic's direction. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the line graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the line graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the line graphic will be rendered. M_START_POINT_X Inquires the X-coordinate of the line graphic's start point. When the line graphic's length is infinite, this returns the X-coordinate of the first point used to define the line graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the first point used to define the line graphic , relative to its parent's coordinate system . M_START_POINT_Y Inquires the Y-coordinate of the line graphic's start point. When the line graphic's length is infinite, this returns the X-coordinate of the first point used to define the line graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the first point used to define the line graphic , relative to its parent's coordinate system . M_START_POINT_Z Inquires the Z-coordinate of the line graphic's start point. When the line graphic's length is infinite, this returns the X-coordinate of the first point used to define the line graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the first point used to define the line graphic , relative to its parent's coordinate system . M_THICKNESS Inquires the thickness of the points/line of the line graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the line graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINES Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a lines graphic specified by the Label parameter. M_APPEARANCE Inquires whether the lines graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color of the points and lines of the lines graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_PER_LINE Specifies that the color of the lines are individually set using M3dgraLines() with a color array. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_END_POINTS_X Inquires the X-coordinates of the lines graphic's end points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinates of the lines graphic's end points, relative to its parent's coordinate system. M_END_POINTS_Y Inquires the Y-coordinates of the lines graphic's end points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinates of the lines graphic's end points, relative to its parent's coordinate system. M_END_POINTS_Z Inquires the Z-coordinates of the lines graphic's end points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinates of the lines graphic's end points, relative to its parent's coordinate system. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the lines graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the lines graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the lines graphic. M_POSITION_X Inquires the X-coordinates of the lines graphic's position. The position is the lines graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the lines graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinates of the lines graphic's position. The position is the lines graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the lines graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinates of the lines graphic's position. The position is the lines graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the lines graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the lines graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the lines graphic will be rendered. M_START_POINTS_X Inquires the X-coordinates of the lines graphic's start points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinates of the start points used to define the lines graphic, relative to its parent's coordinate system. M_START_POINTS_Y Inquires the Y-coordinates of the lines graphic's start points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinates of the start points used to define the lines graphic, relative to its parent's coordinate system. M_START_POINTS_Z Inquires the Z-coordinates of the lines graphic's start points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinates of the start points used to define the lines graphic, relative to its parent's coordinate system. M_THICKNESS Inquires the thickness of the points/lines of the lines graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the lines graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_NODE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a node graphic specified by the Label parameter. M_POSITION_X Inquires the X-coordinate of the node graphic's position. The position is the node graphic's coordinate system's origin relative to the parent's coordinate system. By default, the origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the node graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the node graphic's position. The position is the node graphic's coordinate system's origin relative to the parent's coordinate system. By default, the origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the node graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the node graphic's position. The position is the node graphic's coordinate system's origin relative to the parent's coordinate system. By default, the origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the node graphic's position relative to its parent's coordinate system. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_PLANE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a plane graphic specified by the Label parameter. M_APPEARANCE Inquires whether the plane graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_CLOSEST_TO_ORIGIN_X Inquires the X-coordinate of the point on the plane graphic closest to the origin of its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the point on the plane graphic closest to the origin of its parent's coordinate system . M_CLOSEST_TO_ORIGIN_Y Inquires the Y-coordinate of the point on the plane graphic closest to the origin of its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the point on the plane graphic closest to the origin of its parent's coordinate system . M_CLOSEST_TO_ORIGIN_Z Inquires the Z-coordinate of the point on the plane graphic closest to the origin of its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the point on the plane graphic closest to the origin of its parent's coordinate system . M_COEFFICIENT_A Inquires the coefficient A of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient A of the plane equation. M_COEFFICIENT_B Inquires the coefficient B of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient B of the plane equation. M_COEFFICIENT_C Inquires the coefficient C of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient C of the plane equation. M_COEFFICIENT_D Inquires the coefficient D of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the coefficient D of the plane equation. M_COLOR Inquires the color of the points and lines of the plane graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FILL_COLOR Inquires the color of the solid surfaces of the plane graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the plane graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_NORMAL_X Inquires the X-component of the plane graphic's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the plane's normal unit vector, relative to its parent's coordinate system . M_NORMAL_Y Inquires the Y-component of the plane graphic's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the plane's normal unit vector, relative to its parent's coordinate system . M_NORMAL_Z Inquires the Z-component of the plane graphic's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the plane's normal unit vector, relative to its parent's coordinate system . M_OPACITY Inquires the opacity of the plane graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the plane graphic. M_POSITION_X Inquires the X-coordinate of the plane graphic's position. The position is the plane graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the point on the plane graphic closest to the origin of its parent's coordinate system, and its Z-axis is the plane graphic's normal vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the plane graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the plane graphic's position. The position is the plane graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the point on the plane graphic closest to the origin of its parent's coordinate system, and its Z-axis is the plane graphic's normal vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the plane graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the plane graphic's position. The position is the plane graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the point on the plane graphic closest to the origin of its parent's coordinate system, and its Z-axis is the plane graphic's normal vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the plane graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the plane graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the plane graphic will be rendered. M_SHADING Inquires the plane graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the plane graphic is displayed with flat shading. M_GOURAUD Specifies that the plane graphic is displayed with Gouraud shading. M_NONE Specifies that the plane graphic is displayed without shading. M_PHONG Specifies that the plane graphic is displayed with Phong shading. M_THICKNESS Inquires the thickness of the points/lines of the plane graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the plane graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POINT_CLOUD Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a point cloud graphic specified by the Label parameter. M_APPEARANCE Inquires whether the point cloud graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color of the points and lines in the point cloud graphic when they are set to a color using M_COLOR. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_COMPONENT Inquires the component used to color the points in the point cloud graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NULL Specifies that the color of the points in the point cloud graphic is set to a single color using M_COLOR. M_AUTO_COLOR Specifies to color the point cloud graphic according to specific components in the source container. M_COMPONENT_CONFIDENCE Specifies to color the point cloud graphic according to the component that stores confidence information for the M_COMPONENT_RANGE or M_COMPONENT_DISPARITY component of the container. M_COMPONENT_COORDINATE_MAP_A_MIL Specifies to color the point cloud graphic according to the component that stores the A coordinate map provided by the camera. M_COMPONENT_COORDINATE_MAP_B_MIL Specifies to color the point cloud graphic according to the component that stores the B coordinate map provided by the camera. M_COMPONENT_CUSTOM + n Specifies to color the point cloud graphic according to a component that has a custom type, identified by n, where n can be a value between 0 and 255. M_COMPONENT_DISPARITY Specifies to color the point cloud graphic according to the component that stores a disparity map. M_COMPONENT_INFRARED Specifies to color the point cloud graphic according to the component that stores an intensity image of infrared light. M_COMPONENT_INTENSITY Specifies to color the point cloud graphic according to the component that stores an intensity image of visible light. M_COMPONENT_MESH_MIL Specifies to color the point cloud graphic according to the component that stores mesh information for the M_COMPONENT_RANGE component of the container. M_COMPONENT_METADATA Specifies to color the point cloud graphic according to the component that stores metadata information. M_COMPONENT_MULTISPECTRAL Specifies to color the point cloud graphic according to the component that stores an intensity image where each band represents the intensity of a specific wavelength of light. M_COMPONENT_NORMALS_MIL Specifies that the buffer stores normals information for each point in the M_COMPONENT_RANGE component of the container. M_COMPONENT_RANGE Specifies to color the point cloud graphic according to the component that stores 3D distance/position information. M_COMPONENT_REFLECTANCE Specifies to color the point cloud graphic according to the component that stores a reflectance map. M_COMPONENT_SCATTER Specifies to color the point cloud graphic according to the component that stores a scatter map. M_COMPONENT_ULTRAVIOLET Specifies to color the point cloud graphic according to the component that stores an intensity image of ultraviolet light. M_COLOR_COMPONENT_BAND Inquires the band used to color the point cloud graphic when the point cloud graphic's color is set using M_COLOR_COMPONENT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL_BANDS Specifies all the bands of the component. Value &gt;= 0 Specifies the index of the band to use. M_COLOR_LIMITS Inquires the limits of the values in the component used to color the point cloud graphic when the point cloud graphic is colored using M_COLOR_COMPONENT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BUFFER_LIMITS Specifies to use the buffer's minimum and maximum. M_DATA_EXTREMES_GLOBAL Specifies to use the global minimum and maximum of the buffer's data. M_DATA_EXTREMES_PER_BAND Specifies to use the minimum and maximum of the buffer's data in each of its bands. M_USER_DEFINED Specifies to use the minimum and maximum manually set with M_COLOR_LIMITS_MIN and M_COLOR_LIMITS_MAX. M_COLOR_LIMITS_MAX Inquires the maximum color value when M_COLOR_LIMITS is M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the maximum color value to use. M_COLOR_LIMITS_MIN Inquires the minimum color value when M_COLOR_LIMITS is M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the minimum color value to use. M_COLOR_LUT_ID Inquires the identifier of the current LUT buffer associated with the point cloud graphic. If the current LUT is predefined (default M_COLORMAP_TURBO), MIL returns the type of predefined colormap to which the LUT is set (M_COLORMAP_...). If the current LUT is user-defined, the identifier of an internal copy of the user-defined LUT is returned. For a user-defined LUT for which an internal copy exists, you must not free the associated buffer. You can, however, modify the buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID M_NULL Specifies that the LUT buffer is set to M_NULL. MIL LUT buffer identifier Specifies the MIL identifier of the current LUT buffer. M_COLOR_LUT_SIZE Inquires the size of the point cloud graphic's LUT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the size of the point cloud graphic's LUT. M_COLOR_LUT_SIZE_BAND Inquires the number of bands of the point cloud graphic's LUT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 1 Specifies that the point cloud graphic's LUT has one band. 3 Specifies that the point cloud graphic's LUT has three bands. M_COLOR_USE_LUT Inquires whether the point cloud graphic is colored using a LUT to map values from the component specified by M_COLOR_COMPONENT to a color. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies not to use a LUT. M_TRUE Specifies to use a LUT. M_CONTAINER_ID Inquires the identifier of the container or fully-corrected depth map image buffer linked to the 3D graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID M_NULL Specifies an unlinked 3D graphic; M_NULL is returned when the 3D graphic was added using M3dgraAdd() with M_NO_LINK. MIL container identifier Specifies the MIL identifier of the container linked to the 3D graphic. MIL image buffer identifier Specifies the MIL identifier of the depth map image buffer linked to the 3D graphic. M_FILL_COLOR Inquires the color of the solid surfaces of the point cloud graphic (if the 3D graphic is linked to a meshed point cloud container). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FIX Inquires whether to automatically internally call M3dimFix() to fix NaNs and invalid mesh points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the point cloud graphic . M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the point cloud graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the point cloud. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the point cloud graphic . M_POSITION_X Inquires the X-coordinate of the point cloud graphic's position. The position is the point cloud graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the point cloud graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the point cloud graphic's position. The position is the point cloud graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the point cloud graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the point cloud graphic's position. The position is the point cloud graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the point cloud graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the point cloud graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the point cloud graphic will be rendered. M_THICKNESS Inquires the thickness of the point cloud graphic's points in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the point cloud graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POLYGON Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a polygon graphic specified by the Label parameter. M_APPEARANCE Inquires whether the polygon graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color of the points and lines of the polygon graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_TEXTURE_SIZE_BAND Inquires the number of bands of the polygon graphic's texture buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 1 Specifies that the polygon graphic's texture buffer has one band. 3 Specifies that the polygon graphic's texture buffer has three bands. M_COLOR_TEXTURE_SIZE_X Inquires the width of the polygon graphic's texture buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the width of the polygon graphic's texture buffer, in pixels. M_COLOR_TEXTURE_SIZE_Y Inquires height of the polygon graphic's texture buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the height of the polygon graphic's texture buffer, in pixels. M_COLOR_USE_TEXTURE Inquires whether the polygon is set to be filled with a texture. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies to fill the polygon with M_FILL_COLOR. M_TRUE Specifies that the polygon graphic is set to be filled graphic with a texture buffer. M_FILL_COLOR Inquires the color of the solid surfaces of the polygon graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the polygon graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_KEYING_COLOR Inquires the pixel value to display as transparent for the polygon graphic. This setting is only used if the polygon is filled with a texture buffer. Any portion of the polygon graphic that would be displayed with this color is instead made transparent, regardless of the polygon graphic's M_OPACITY setting. This can be used to cut out parts of a polygon graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_NONE Specifies that the texture does not have a keying value. 0 &lt;= Value &lt;= 255 Specifies a grayscale keying value, used when the texture is a 1-band buffer. M_OPACITY Inquires the opacity of the polygon graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the polygon graphic. M_POINTS_X Inquires the X-coordinate of each of the polygon graphic's vertices. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dgraInquire ( M_NB_ELEMENTS ) Value Specifies the X-component of each of the polygon graphic's vertices. M_POINTS_Y Inquires the Y-coordinate of each of the polygon graphic's vertices. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dgraInquire ( M_NB_ELEMENTS ) Value Specifies the Y-component of each of the polygon graphic's vertices. M_POINTS_Z Inquires the Z-coordinate of each of the polygon graphic's vertices. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dgraInquire ( M_NB_ELEMENTS ) Value Specifies the Z-component of each of the polygon graphic's vertices. M_POSITION_X Inquires the X-coordinate of the polygon graphic's position. The position is the polygon graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the polygon graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the polygon graphic's position. The position is the polygon graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the polygon graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the polygon graphic's position. The position is the polygon graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the polygon graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the polygon graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the polygon graphic will be rendered. M_SHADING Inquires the polygon graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the polygon graphic is displayed with flat shading. M_GOURAUD Specifies that the polygon graphic is displayed with Gouraud shading. M_NONE Specifies that the polygon graphic is displayed without shading. M_PHONG Specifies that the polygon graphic is displayed with Phong shading. M_THICKNESS Inquires the thickness of the points/lines of the polygon graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the polygon graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_RECT Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a rectangle graphic specified by the Label parameter. M_APPEARANCE Inquires whether the rectangle graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color of the points and lines of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FILL_COLOR Inquires the color of the solid surface of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the rectangle graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the rectangle graphic. M_POSITION_X Inquires the X-coordinate of the rectangle graphic's position. The position is the center of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the rectangle graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the rectangle graphic's position. The position is the center of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the rectangle graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the rectangle graphic's position. The position is the center of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the rectangle graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires on which layer the rectangle graphic is rendered when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the rectangle graphic will be rendered. M_SHADING Inquires the rectangle graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the rectangle graphic is displayed with flat shading. M_GOURAUD Specifies that the rectangle graphic is displayed with Gouraud shading. M_NONE Specifies that the rectangle graphic is displayed without shading. M_PHONG Specifies that the rectangle graphic is displayed with Phong shading. M_SIZE_X Inquires the rectangle graphic's length along its coordinate system's X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the rectangle graphic, in world units, along the rectangle's coordinate system's X-axis. M_SIZE_Y Inquires the rectangle graphic's length along its coordinate system's Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length of the rectangle graphic, in world units, along the rectangle's coordinate system's Y-axis. M_THICKNESS Inquires the thickness of the points/lines of the rectangle graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VISIBLE Inquires the visibility of the rectangle graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_SPHERE Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a sphere graphic specified by the Label parameter. M_APPEARANCE Inquires whether the sphere graphic is displayed as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_CENTER_X Inquires the X-coordinate of the sphere graphic's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the sphere's center point, expressed in its parent's coordinate system . M_CENTER_Y Inquires the Y-coordinate of the sphere graphic's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the sphere's center point, expressed in its parent's coordinate system . M_CENTER_Z Inquires the Z-coordinate of the sphere graphic's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the sphere's center point, expressed in its parent's coordinate system . M_COLOR Inquires the color of the points and lines of the sphere graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FILL_COLOR Inquires the color of the solid surfaces of the sphere graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_YELLOW Specifies the color yellow. M_SAME_AS_COLOR Specifies to use the same color specified by M_COLOR. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_GRAPHIC_RESOLUTION Inquires the resolution of the sphere graphic's mesh. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 3 Specifies the number of latitudinal and longitudinal subdivisions on the sphere graphic. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the sphere graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the sphere graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the sphere graphic. M_POSITION_X Inquires the X-coordinate of the sphere graphic's position. The position is the sphere graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the sphere graphic's center, and its orientation is inherited, upon creation, from its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the sphere graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the sphere graphic's position. The position is the sphere graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the sphere graphic's center, and its orientation is inherited, upon creation, from its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the sphere graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the sphere graphic's position. The position is the sphere graphic's coordinate system's origin relative to the parent's coordinate system. The origin is the sphere graphic's center, and its orientation is inherited, upon creation, from its parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the sphere graphic's position relative to its parent's coordinate system. M_RADIUS Inquires the sphere graphic's radius. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the sphere graphic's radius, in world units. M_RENDER_LAYER Inquires which layer the sphere graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the sphere graphic will be rendered. M_SHADING Inquires the sphere graphic's shading. Shaded 3D graphics are shown brighter or darker depending on the viewing angle, giving a visual indication of depth relative to the view in the 3D display. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FLAT Specifies that the sphere graphic is displayed with flat shading. M_GOURAUD Specifies that the sphere graphic is displayed with Gouraud shading. M_NONE Specifies that the sphere graphic is displayed without shading. M_PHONG Specifies that the sphere graphic is displayed with Phong shading. M_THICKNESS Inquires the thickness of the points/lines of the sphere graphic in the 3D world, on screen. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the sphere graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_TEXT Specifies a 3D graphics list, allocated using M3dgraAlloc(), and a text graphic specified by the Label parameter. M_BACKGROUND_COLOR Inquires the text graphic's background color. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_BACKGROUND_MODE Inquires the text graphic's background mode. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_OPAQUE Specifies that the background of the text graphic is filled with the current background color. M_TRANSPARENT Specifies that the text graphic does not have a background. M_COLOR Inquires the text graphic's text color. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_FONT Inquires the text graphic's font. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: M3dgraInquire ( M_GRAPHIC_TEXT + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. MIL_TEXT(\"FontFamily:Weight:Slant\") 1 Specifies the font according to the following format, Family: Weight: Slant. MIL_TEXT(\"FontFile\") 1 Specifies a full path to a TrueType file name. M_FONT_AUTO_SELECT Inquires the automatic font selection behavior of the text graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies that MIL will not search for a suitable font. M_ENABLE Specifies that MIL will search for a suitable font. M_FONT_SIZE Inquires the font size. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the font size. M_GRAPHIC_TEXT Inquires the text that is displayed in the text graphic. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: M3dgraInquire ( M_GRAPHIC_TEXT + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. MIL_TEXT(\"String\") 1 Specifies the address of the null-terminated (\\0) ASCII string to be displayed. M_HANDLE_TARGET_LABEL Inquires which graphic to use as the target for handle movement or clicking events. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_NO_LABEL Specifies that the handle graphic does not have a target graphic. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. M_HANDLE_TYPE Inquires whether the text graphic can be clicked and dragged. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies that the graphic cannot be clicked and dragged. M_HANDLE_CLICKABLE Specifies that the handle graphic is clickable. M_HANDLE_ROTATION_Z Specifies that the handle graphic can be rotated around the Z-axis. M_HANDLE_TRANSLATION_X Specifies that the handle graphic can be translated in the X-direction. M_HANDLE_TRANSLATION_Y Specifies that the handle graphic can be translated in the Y-direction. M_HANDLE_TRANSLATION_Z Specifies that the handle graphic can be translated in the Z-direction. M_OPACITY Inquires the opacity of the text graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the text graphic. M_POSITION_X Inquires the X-coordinate of the text graphic's position. The position is the text graphic's coordinate system's origin relative to the parent's coordinate system. By default, the origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the text graphic's position relative to its parent's coordinate system. M_POSITION_Y Inquires the Y-coordinate of the text graphic's position. The position is the text graphic's coordinate system's origin relative to the parent's coordinate system. By default, the origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the text graphic's position relative to its parent's coordinate system. M_POSITION_Z Inquires the Z-coordinate of the text graphic's position. The position is the text graphic's coordinate system's origin relative to the parent's coordinate system. By default, the origin is the same as the parent's coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the text graphic's position relative to its parent's coordinate system. M_RENDER_LAYER Inquires which layer the text graphic is rendered on when shown in a display. The graphics on higher layers are always drawn completely in front of graphics on lower layers. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 9 Specifies the layer on which the text graphic will be rendered. M_TEXT_ALIGN_HORIZONTAL Inquires the horizontal alignment of the text in the text graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTER Specifies that the text is horizontally centered. M_LEFT Specifies that the text is left-aligned. M_RIGHT Specifies that the text is right-aligned. M_TEXT_ALIGN_VERTICAL Inquires the vertical alignment of the text in the text graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BOTTOM Specifies that the text is bottom-aligned. M_CENTER Specifies that the text is vertically centered. M_TOP Specifies that the text is top-aligned. M_TEXT_BORDER Inquires the borders around the text. Note that a combination of the values below can be returned. Bitwise operators must be used to verify the presence of a specific border. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BOTTOM Specifies that a line is drawn underneath the text. M_LEFT Specifies that a line is drawn to the left of the text. M_NONE Specifies that no border is drawn around the text. M_RIGHT Specifies that a line is drawn to the right of the text. M_TOP Specifies that a line is drawn above the text. M_TEXT_DIRECTION Inquires the direction to draw the text that is displayed in the text graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_LEFT_TO_RIGHT Specifies that text will be drawn from left to right. M_RIGHT_TO_LEFT Specifies that text will be drawn from right to left. M_VIEW_BASED_LOD Inquires whether to use different LoDs (levels of detail) based on the display view. This improves performance when the display selects a lower LoD. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISABLE Specifies to not use LoDs. M_ENABLE Specifies to use LoDs. M_VIEW_BASED_LOD_LEVELS Inquires how many LoDs to generate if M_VIEW_BASED_LOD is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Value &gt; 0 Specifies the number of LoDs. M_VIEW_BASED_LOD_SAMPLE_FACTOR_MAX Inquires the maximum factor by which to resample the point cloud when regenerating the LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 1.0 Specifies the maximum level of detail. M_VIEW_BASED_LOD_SAMPLE_MODE Inquires what type of sub-sampling to perform when generating LoDs. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_SUBSAMPLE_GRID Specifies to use grid sampling to generate LoDs. M_SUBSAMPLE_RANDOM Specifies to use random sampling to generate LoDs. M_VISIBLE Inquires the visibility of the text graphic. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the 3D graphic is not visible. M_TRUE Specifies that the 3D graphic is visible. 1 If the value was passed in a variable, it won't be returned enclosed in MIL_TEXT(). Combination values for Tables: For inquiring about the 3D graphics list For inquiring about the default settings of 3D graphics added to the 3D graphics list For inquiring general information about a 3D graphic or 3D graphic label For inquiring the settings of a 3D graphic the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to determine whether an inquire type is supported. For inquiring whether an inquire type is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for the values of the InquireType parameter listed in For inquiring about the default settings of 3D graphics added to the 3D graphics list, For inquiring the settings of a 3D graphic. (exceptions might exist) You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination value for the values of the InquireType parameter listed in For inquiring the settings of a 3D graphic. (exceptions might exist) You can add the following value to the above-mentioned values to get the position or rotation a 3D graphic relative to the 3D graphics list's root node. For inquiring a position or rotation relative to the 3D graphics list's root node Combination value Description M_RELATIVE_TO_ROOT Specifies to get the position or rotation of a 3D graphic relative to the 3D graphics list's root node. Combination value for [when List3dgraId=Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POLYGON: M_POINTS_X , M_POINTS_Y , M_POINTS_Z]. You can add the following value to the above-mentioned values to get the number of points in a dots graphic or vertices in a polygon graphic. For inquiring the number of points in a dots graphic or vertices in a polygon graphic Combination value Description M_NB_ELEMENTS Specifies to get the number of points in a dots graphic or vertices in a polygon graphic. Combination value for [when List3dgraId=Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_TEXT: M_FONT , M_GRAPHIC_TEXT]. You can add the following value to the above-mentioned values to get the string's length. For getting the string size InquireType Description UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Combination values for Tables: For inquiring about the 3D graphics list For inquiring about the default settings of 3D graphics added to the 3D graphics list For inquiring general information about a 3D graphic or 3D graphic label For inquiring the settings of a 3D graphic For getting the string size the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to cast the requested information to the required data type. Note: In C++, when using a standard vector (std::vector) instead of an array, the values listed in this combination table must not be used. If you need to use a specific data type, instantiate the vector with the necessary data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] &nbsp;|&nbsp; address of a MIL_DOUBLE MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_DOUBLE Note: When a single result. M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] &nbsp;|&nbsp; address of a MIL_FLOAT MORE Data type: array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_FLOAT Note: When a single result. M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] &nbsp;|&nbsp; address of a MIL_INT MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT Note: When a single result. M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] &nbsp;|&nbsp; address of a MIL_INT32 MORE Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT32 Note: When a single result. M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT64 Note: When a single result. Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - Label For specifying the 3D graphic label - InquireType - UserVarPtr Parameter Associations For inquiring about the 3D graphics list [Graphics list identifier with Label set to M_LIST] For inquiring about the default settings of 3D graphics added to the 3D graphics list [Graphics list identifier with Label set to M_DEFAULT_SETTINGS] For inquiring general information about a 3D graphic or 3D graphic label [Graphics list identifier with Label set to any 3D graphic label] + For inquiring about all descendants of a 3D graphic For inquiring the settings of a 3D graphic [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_ARC] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_AXIS] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_BOX] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_CYLINDER] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_DOTS] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_GRID] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_LINES] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_NODE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_PLANE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POINT_CLOUD] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_POLYGON] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_RECT] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_SPHERE] [Graphics list ID with Label specifying a graphic of type M_GRAPHIC_TYPE_TEXT] + For inquiring whether an inquire type is supported + For inquiring about the default value + For inquiring a position or rotation relative to the 3D graphics list's root node + For inquiring the number of points in a dots graphic or vertices in a polygon graphic + For getting the string size + For specifying the data type Return value Compilation information M_COMPONENT_CUSTOM + n ",
      "wordCount": 32709,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraLine",
      "version": null,
      "title": "M3dgraLine",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraLine.htm",
      "text": " M3dgraLine Synopsis Add a line graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraLine( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_INT64&nbsp;Symbol, //in MIL_DOUBLE&nbsp;PointX, //in MIL_DOUBLE&nbsp;PointY, //in MIL_DOUBLE&nbsp;PointZ, //in MIL_DOUBLE&nbsp;PointOrVectorX, //in MIL_DOUBLE&nbsp;PointOrVectorY, //in MIL_DOUBLE&nbsp;PointOrVectorZ, //in MIL_DOUBLE&nbsp;Length, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a line graphic to the specified 3D graphics list, allowing you to, for example, view the line graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the line graphic. When the line graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the line graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the line graphic's parent. The line graphic has its own coordinate system that represents the line graphic's position and orientation with respect to its parent's coordinate system. The origin of the line graphic's coordinate system is the line graphic's start point, and its Z-axis shares the same direction as the line graphic's direction. You can inquire the line graphic's start point using M3dgraInquire() with M_START_POINT_.... You can change the position and orientation of the line graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. To create one or more lines, use M3dgraLines(). Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the line graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the line graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the line graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the line graphic is defined. See the Parameter associations section for possible values that can be specified. Symbol Reserved for future expansion and must be set to M_DEFAULT. PointX Specifies the first parameter used to define the line graphic. See the Parameter associations section for possible values that can be specified. PointY Specifies the second parameter used to define the line graphic. See the Parameter associations section for possible values that can be specified. PointZ Specifies the third parameter used to define the line graphic. See the Parameter associations section for possible values that can be specified. PointOrVectorX Specifies the fourth parameter used to define the line graphic. See the Parameter associations section for possible values that can be specified. PointOrVectorY Specifies the fifth parameter used to define the line graphic. See the Parameter associations section for possible values that can be specified. PointOrVectorZ Specifies the sixth parameter used to define the line graphic. See the Parameter associations section for possible values that can be specified. Length Specifies to override the default line graphic's length. For specifying to override the default line graphic's length Value Description M_DEFAULT Specifies the default length defined by the creation mode. M_INFINITE Specifies an infinite line graphic. The line graphic's size is determined upon creation, using its 3D graphics list's clipping box. Value &gt; 0.0 Specifies to override the line graphic's length with a specific value. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, PointX, PointY, PointZ, PointOrVectorX, PointOrVectorY, and PointOrVectorZ parameters. For specifying the line graphic For specifying the line graphic CreationMode Description PointX PointY PointZ PointOrVectorX PointOrVectorY PointOrVectorZ M_POINT_AND_VECTOR Defines the line graphic using a point on the line and a nonzero vector defining the line's direction. By default, the length of the line graphic is finite and is set to the vector's magnitude. The point is at the start of the line graphic. PointX Specifies the X-coordinate of the point on the line graphic. PointY Specifies the Y-coordinate of the point on the line graphic. PointZ Specifies the Z-coordinate of the point on the line graphic. PointOrVectorX Specifies the X-component of the vector defining the line graphic's direction. PointOrVectorY Specifies the Y-component of the vector defining the line graphic's direction. PointOrVectorZ Specifies the Z-component of the vector defining the line graphic's direction. M_TWO_POINTS Defines the line graphic using any two non-identical points. By default, the length of the line graphic is finite and is set to the distance between the two specified points. The line graphic starts at the first point, and ends at the second point. PointX Specifies the X-coordinate of the first point on the line graphic. PointY Specifies the Y-coordinate of the first point on the line graphic. PointZ Specifies the Z-coordinate of the first point on the line graphic. PointOrVectorX Specifies the X-coordinate of the second point on the line graphic. PointOrVectorY Specifies the Y-coordinate of the second point on the line graphic. PointOrVectorZ Specifies the Z-coordinate of the second point on the line graphic. Return value Returns the label of the line graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - Symbol - PointX - PointY - PointZ - PointOrVectorX - PointOrVectorY - PointOrVectorZ - Length For specifying to override the default line graphic's length - ControlFlag Parameter Associations For specifying the line graphic Return value Compilation information ",
      "wordCount": 995,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraLines",
      "version": null,
      "title": "M3dgraLines",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraLines.htm",
      "text": " M3dgraLines Synopsis Add a lines graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraLines( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_INT&nbsp;NumLines, //in const MIL_DOUBLE&nbsp;*PointsXArrayPtr, //in const MIL_DOUBLE&nbsp;*PointsYArrayPtr, //in const MIL_DOUBLE&nbsp;*PointsZArrayPtr, //in const MIL_DOUBLE&nbsp;*PointsOrVectorsXArrayPtr, //in const MIL_DOUBLE&nbsp;*PointsOrVectorsYArrayPtr, //in const MIL_DOUBLE&nbsp;*PointsOrVectorsZArrayPtr, //in const MIL_UINT8&nbsp;*LinesRArrayPtr, //in const MIL_UINT8&nbsp;*LinesGArrayPtr, //in const MIL_UINT8&nbsp;*LinesBArrayPtr, //in MIL_DOUBLE&nbsp;Length, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a lines graphic to the specified 3D graphics list, allowing you to, for example, view the lines graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the lines graphic. When the lines graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the lines graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the lines graphic's parent. The lines graphic has its own coordinates system that represents the lines graphic's position and orientation with respect to its parent's coordinate system. The origin of the lines graphic's coordinate system and axes directions are the same as the lines graphic's parent. You can change the position and orientation of the lines graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. To create a single line without the option of creating multiple lines, use M3dgraLine(). Unlike M3dgraLine(), the length of the lines in a lines graphic cannot be infinite. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the lines graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the lines graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the lines graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the lines graphic is defined. See the Parameter associations section for possible values that can be specified. NumLines Specifies the number of lines in the lines graphic. PointsXArrayPtr Specifies the address of the array containing the X-coordinate(s) of the start points used to define the lines. See the Parameter associations section for possible values that can be specified. PointsYArrayPtr Specifies the address of the array containing the Y-coordinate(s) of the start points used to define the lines. See the Parameter associations section for possible values that can be specified. PointsZArrayPtr Specifies the address of the array containing the Z-coordinate(s) of the start points used to define the lines. See the Parameter associations section for possible values that can be specified. PointsOrVectorsXArrayPtr Specifies the address of the array containing either the X-coordinates of the end points or X-components of the direction vectors used to define the lines. See the Parameter associations section for possible values that can be specified. PointsOrVectorsYArrayPtr Specifies the address of the array containing either the Y-coordinates of the end points or Y-components of the direction vectors used to define the lines. See the Parameter associations section for possible values that can be specified. PointsOrVectorsZArrayPtr Specifies the address of the array containing either the Z-coordinates of the end points or Z-components of the direction vectors used to define the lines. See the Parameter associations section for possible values that can be specified. LinesRArrayPtr Specifies the list of red values for the colors of the lines. LinesGArrayPtr Specifies the list of green values for the colors of the lines. LinesBArrayPtr Specifies the list of blue values for the colors of the lines. Length Specifies to override the default line length. For specifying to override the default line length Value Description M_DEFAULT Specifies the default length defined by the creation mode. Value &gt; 0.0 Specifies to override the line's length with a specific value. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, PointsXArrayPtr, PointsYArrayPtr, PointsZArrayPtr, PointsOrVectorsXArrayPtr, PointsOrVectorsYArrayPtr, and PointsOrVectorsZArrayPtr parameters. For specifying the lines graphic For specifying the lines graphic CreationMode Description PointsXArrayPtr PointsYArrayPtr PointsZArrayPtr PointsOrVectorsXArrayPtr PointsOrVectorsYArrayPtr PointsOrVectorsZArrayPtr M_POINT_AND_VECTOR Defines the lines graphic using a start point and nonzero direction vector for each required line. By default, each line's length is set to its respective vector's magnitude. PointsXArrayPtr Specifies the address of the array containing the X-coordinates of the start points of the lines. PointsYArrayPtr Specifies the address of the array containing the Y-coordinates of the start points of the lines. PointsZArrayPtr Specifies the address of the array containing the Z-coordinates of the start points of the lines. PointsOrVectorsXArrayPtr Specifies the address of the array containing the X-components of the direction vectors of the lines. PointsOrVectorsYArrayPtr Specifies the address of the array containing the Y-components of the direction vectors of the lines. PointsOrVectorsZArrayPtr Specifies the address of the array containing the Z-components of the direction vectors of the lines. M_TWO_POINTS Defines the lines graphic using two arrays of points that define start and end points of the lines; the start and end points must be non-identical. By default, the lengths of the lines defined as the distance between the two specified points. PointsXArrayPtr Specifies the address of the array containing the X-coordinates of the start points of the lines. PointsYArrayPtr Specifies the address of the array containing the Y-coordinates of the start points of the lines. PointsZArrayPtr Specifies the address of the array containing the Z-coordinates of the start points of the lines. PointsOrVectorsXArrayPtr Specifies the address of the array containing the X-coordinates of the end points of the lines. PointsOrVectorsYArrayPtr Specifies the address of the array containing the Y-coordinates of the end points of the lines. PointsOrVectorsZArrayPtr Specifies the address of the array containing the Z-coordinates of the end points of the lines. Return value Returns the label of the lines graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - NumLines - PointsXArrayPtr - PointsYArrayPtr - PointsZArrayPtr - PointsOrVectorsXArrayPtr - PointsOrVectorsYArrayPtr - PointsOrVectorsZArrayPtr - LinesRArrayPtr - LinesGArrayPtr - LinesBArrayPtr - Length For specifying to override the default line length - ControlFlag Parameter Associations For specifying the lines graphic Return value Compilation information ",
      "wordCount": 1143,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraNode",
      "version": null,
      "title": "M3dgraNode",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraNode.htm",
      "text": " M3dgraNode Synopsis Add a node to a 3D graphics list. Syntax MIL_INT64 M3dgraNode( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a node to the specified 3D graphics list. Unlike other elements of a 3D graphics list, nodes have no graphical representation. You can use a node to group 3D graphics by specifying the node's label as their parent label. This allows you to apply settings to all of the node's children graphics using the node's label in a call to M3dgraControl() with M_RECURSIVE. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the node. When the node is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the node's parent must be the root node. The node has its own coordinate system that represents the node's position and orientation with respect to its parent's coordinate system. You can set the node's position and orientation using the Matrix3dgeoId parameter. To change the position and orientation of a node, use M3dgraCopy() with M_TRANSFORMATION_MATRIX. This is particularly useful if you want to move a group of 3D graphics that are all descendents of the same node, since the operation will maintain the descendents' relative positions and orientations. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the node. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the node in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the node in the 3D graphics list. Label 0 is the 3D graphics list's root node. Matrix3dgeoId Specifies the identifier of the transformation matrix that defines the node graphic's position and orientation with respect to its parent's coordinate system. For specifying the transformation matrix object identifier Value Description M_DEFAULT Same as M_IDENTITY_MATRIX. M_IDENTITY_MATRIX Specifies the identity matrix. This means that the node graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. MIL transformation matrix object identifier Specifies the identifier of the transformation matrix that defines the node graphic's position and orientation with respect to its parent's coordinate system. The transformation matrix must be of type M_RIGID. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the node added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - Matrix3dgeoId For specifying the transformation matrix object identifier - ControlFlag Return value Compilation information ",
      "wordCount": 564,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraPlane",
      "version": null,
      "title": "M3dgraPlane",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraPlane.htm",
      "text": " M3dgraPlane Synopsis Add a plane graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraPlane( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;X1, //in MIL_DOUBLE&nbsp;Y1, //in MIL_DOUBLE&nbsp;Z1, //in MIL_DOUBLE&nbsp;X2OrD, //in MIL_DOUBLE&nbsp;Y2, //in MIL_DOUBLE&nbsp;Z2, //in MIL_DOUBLE&nbsp;X3, //in MIL_DOUBLE&nbsp;Y3, //in MIL_DOUBLE&nbsp;Z3, //in MIL_DOUBLE&nbsp;Size, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a plane graphic to the specified 3D graphics list, allowing you to, for example, view the plane graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the plane graphic. When the plane graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the plane graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the plane graphic's parent. The plane graphic has its own coordinate system that represents the plane graphic's position and orientation with respect to its parent's coordinate system. The plane graphic's coordinate system's origin is the point on the plane graphic closest to the origin of its parent's coordinate system, and its Z-axis is the plane graphic's normal vector. The plane graphic's coordinate system's XY (Z=0) plane lies on the plane graphic. You can change the position and orientation of the plane graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the plane graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the plane graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the plane graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the plane graphic is defined. See the Parameter associations section for possible values that can be specified. X1 Specifies the first parameter used to define the plane graphic. See the Parameter associations section for possible values that can be specified. Y1 Specifies the second parameter used to define the plane graphic. See the Parameter associations section for possible values that can be specified. Z1 Specifies the third parameter used to define the plane graphic. See the Parameter associations section for possible values that can be specified. X2OrD Specifies the fourth parameter used to define the plane graphic. See the Parameter associations section for possible values that can be specified. Y2 Specifies the fifth parameter used to define the plane graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Z2 Specifies the sixth parameter used to define the plane graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. X3 Specifies the seventh parameter used to define the plane graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Y3 Specifies the eighth parameter used to define the plane graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Z3 Specifies the ninth parameter used to define the plane graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Size Specifies the size of the plane graphic. Finite plane graphics are square-shaped. If the plane graphic is infinite, it is clipped using the 3D graphics list's clipping box, which results in a polygon with 3 to 6 edges. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, X1, Y1, Z1, X2OrD, Y2, Z2, X3, Y3, Z3, and Size parameters. For specifying the plane graphic Set unused parameters to M_DEFAULT. For specifying the plane graphic CreationMode Description X1 Y1 Z1 X2OrD Y2 Z2 X3 Y3 Z3 Size M_COEFFICIENTS Defines the plane graphic using coefficients from the plane equation (Ax + By + Cz + D = 0). Coefficients A, B, and C cannot all be zero. X1 Specifies coefficient A of the plane equation. Y1 Specifies coefficient B of the plane equation. Z1 Specifies coefficient C of the plane equation. X2OrD Specifies coefficient D of the plane equation. Size Specifies the size of the plane graphic. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies an infinite plane graphic. The plane graphic's size is determined upon creation, using its 3D graphics list's clipping box. M_POINT_AND_NORMAL Defines the plane graphic using a point on the plane graphic and the plane graphic's normal. The plane graphic's normal must have a non-zero magnitude. X1 Specifies the X-coordinate of the point on the plane graphic. Y1 Specifies the Y-coordinate of the point on the plane graphic. Z1 Specifies the Z-coordinate of the point on the plane graphic. X2OrD Specifies the X-component of the normal. Y2 Specifies the Y-component of the normal. Z2 Specifies the Z-component of the normal. Size Specifies the size of the plane graphic. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies an infinite plane graphic. The plane graphic's size is determined upon creation, using its 3D graphics list's clipping box. Value &gt; 0.0 Specifies the length of the plane graphic's sides. The plane graphic is a square centered on (X1, Y1, Z1). M_POINT_AND_TWO_VECTORS Defines the plane graphic using a point on the plane graphic and two vectors parallel to the plane graphic. The two vectors must have non-zero magnitudes and cannot be co-linear. X1 Specifies the X-coordinate of the point on the plane graphic. Y1 Specifies the Y-coordinate of the point on the plane graphic. Z1 Specifies the Z-coordinate of the point on the plane graphic. X2OrD Specifies the X-component of the first vector. Y2 Specifies the Y-component of the first vector. Z2 Specifies the Z-component of the first vector. X3 Specifies the X-component of the second vector. Y3 Specifies the Y-component of the second vector. Z3 Specifies the Z-component of the second vector. Size Specifies the size of the plane graphic. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies an infinite plane graphic. The plane graphic's size is determined upon creation, using its 3D graphics list's clipping box. Value &gt; 0.0 Specifies the length of the plane graphic's sides. The plane graphic is a square centered on (X1, Y1, Z1). M_THREE_POINTS Defines the plane graphic using three points on the plane graphic. X1 Specifies the X-coordinate of the first point on the plane graphic. Y1 Specifies the Y-coordinate of the first point on the plane graphic. Z1 Specifies the Z-coordinate of the first point on the plane graphic. X2OrD Specifies the X-coordinate of the second point on the plane graphic. Y2 Specifies the Y-coordinate of the second point on the plane graphic. Z2 Specifies the Z-coordinate of the second point on the plane graphic. X3 Specifies the X-coordinate of the third point on the plane graphic. Y3 Specifies the Y-coordinate of the third point on the plane graphic. Z3 Specifies the Z-coordinate of the third point on the plane graphic. Size Specifies the size of the plane graphic. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies an infinite plane graphic. The plane graphic's size is determined upon creation, using its 3D graphics list's clipping box. Value &gt; 0.0 Specifies the length of the plane graphic's sides. The plane graphic is a square centered on (X1, Y1, Z1). Return value Returns the label of the plane graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - X1 - Y1 - Z1 - X2OrD - Y2 - Z2 - X3 - Y3 - Z3 - Size - ControlFlag Parameter Associations For specifying the plane graphic Return value Compilation information ",
      "wordCount": 1429,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraPolygon",
      "version": null,
      "title": "M3dgraPolygon",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraPolygon.htm",
      "text": " M3dgraPolygon Synopsis Add a polygon graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraPolygon( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_INT&nbsp;NumPoints, //in const MIL_DOUBLE&nbsp;*CoordXArrayPtr, //in const MIL_DOUBLE&nbsp;*CoordYArrayPtr, //in const MIL_DOUBLE&nbsp;*CoordZArrayPtr, //in const MIL_DOUBLE&nbsp;*TextureXArrayPtr, //in const MIL_DOUBLE&nbsp;*TextureYArrayPtr, //in MIL_ID&nbsp;TextureBufId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a polygon graphic to the specified 3D graphics list, allowing you to, for example, view the polygon graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the polygon graphic. When the polygon graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the polygon graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the polygon graphic's parent. You must specify the coordinates of the polygon's vertices using CoordXArrayPtr, CoordYArrayPtr, and CoordZArrayPtr. The coordinates of the polygon's vertices are expressed in the coordinate system of the polygon graphic's parent. The polygon graphic has its own coordinate system that represents the polygon's position and orientation with respect to its parent's coordinate system. Initially, the polygon graphic's position and orientation is the identity matrix. This means that the polygon graphic's position and orientation is the same as the position of its parent's coordinate system. You can change the position and orientation of the polygon graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. You can optionally specify an image buffer to use as a texture on the 3D polygon graphic using the TextureBufId parameter. In this case, you can specify the texture mapping using the TextureXArrayPtr and TextureYArrayPtr parameters. These parameters define the points in the texture image buffer to map to corresponding vertices in the polygon. Note that the position (0,0) is the center of the top-left pixel of the texture image buffer. To specify the top-left corner of the first pixel, specify (-0.5,-0.5). For more information, see the Pixel units and the pixel coordinate system subsection of the Pixel and real-world units section of Chapter 2: Building an application. Once the polygon is added, you can specify that a particular value in the texture indicates transparency (using M3dgraControl() with M_KEYING_COLOR. This can be used to cut out parts of the polygon graphic. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dgraPolygon() internally calls the MIL_DOUBLE version of this function (M3dgraPolygonDouble()). If you need to pass type-specific values, call the MIL_FLOAT version of this function (M3dgraPolygonFloat()). Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the polygon graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the polygon graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the polygon graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Reserved for future expansion. This parameter must be set to M_DEFAULT. NumPoints Specifies the number of vertices in the polygon. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the CoordXArrayPtr, CoordYArrayPtr, CoordZArrayPtr, TextureXArrayPtr, or TextureYArrayPtr parameter. For specifying the number of vertices in the polygon Value Description Value &gt;= 3 Specifies the number of vertices in the polygon. CoordXArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of X-coordinates of the vertices. CoordYArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of Y-coordinates of the vertices. CoordZArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of Z-coordinates of the vertices. TextureXArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of X-coordinates of the points in the texture image that map to the specified vertices for the texture mapping. TextureXArrayPtr and TextureYArrayPtr must either be pointers to arrays with the same number of values as NumPoints, or M_NULL. If TextureXArrayPtr and TextureYArrayPtr are set to M_NULL, and TextureBufId is not set to M_NULL, MIL sets the texture mapping automatically. Each vertex is mapped to a corner of the image buffer, starting from the top left and moving counter-clockwise. If there are more than 4 vertices, this will result in multiple vertices mapped to the same position in the image buffer. Typically, you should only rely on automatic texture mapping when creating a polygon 3D graphic that is a rectangle or triangle with the same aspect ratio as the texture image buffer. Otherwise, automatic texture mapping will result in the texture being displayed with distortion. TextureYArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the list of Y-coordinates of the points in the texture image that map to the specified vertices for the texture mapping. TextureXArrayPtr and TextureYArrayPtr must either be pointers to arrays with the same number of values as NumPoints, or M_NULL. If TextureXArrayPtr and TextureYArrayPtr are set to M_NULL, and TextureBufId is not set to M_NULL, MIL sets the texture mapping automatically. Each vertex is mapped to a corner of the texture image buffer, starting from the top left and moving counter-clockwise. If there are more than 4 vertices, this will result in multiple vertices mapped to the same position in the image buffer. Typically, you should only rely on automatic texture mapping when creating a polygon 3D graphic that is a rectangle or triangle with the same aspect ratio as the texture image buffer. Otherwise, automatic texture mapping will result in the texture being displayed with distortion. TextureBufId Specifies the identifier of the image buffer to be used as a texture. The image buffer must be an 8-bit, unsigned, 1- or 3-band buffer. To create a polygon graphic with no texture, set this parameter, as well as TextureXArrayPtr and TextureYArrayPtr, to M_NULL. Note that if you set TextureBufId to M_NULL, you must also set TextureXArrayPtr and TextureYArrayPtr to M_NULL; otherwise, you will receive an error. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Return value Returns the label of the polygon graphic added to the 3D graphics list. Type-specific versions of the function when using a C compiler under 64-bit MIL_INT64 M3dgraPolygonDouble (MIL_ID List3dgraId, MIL_INT64 ParentLabel, MIL_INT64 CreationMode, MIL_INT NumPoints, const MIL_DOUBLE *CoordXArrayPtr, const MIL_DOUBLE *CoordYArrayPtr, const MIL_DOUBLE *CoordZArrayPtr, const MIL_DOUBLE *TextureXArrayPtr, const MIL_DOUBLE *TextureYArrayPtr, MIL_ID TextureBufId, MIL_INT64 ControlFlag) Details Parameters List3dgraId See List3dgraId of the main function for a description. ParentLabel See ParentLabel of the main function for a description. CreationMode See CreationMode of the main function for a description. NumPoints See NumPoints of the main function for a description. CoordXArrayPtr See CoordXArrayPtr of the main function for a description. CoordYArrayPtr See CoordYArrayPtr of the main function for a description. CoordZArrayPtr See CoordZArrayPtr of the main function for a description. TextureXArrayPtr See TextureXArrayPtr of the main function for a description. TextureYArrayPtr See TextureYArrayPtr of the main function for a description. TextureBufId See TextureBufId of the main function for a description. ControlFlag See ControlFlag of the main function for a description. MIL_INT64 M3dgraPolygonFloat (MIL_ID List3dgraId, MIL_INT64 ParentLabel, MIL_INT64 CreationMode, MIL_INT NumPoints, const MIL_FLOAT *CoordXArrayPtr, const MIL_FLOAT *CoordYArrayPtr, const MIL_FLOAT *CoordZArrayPtr, const MIL_FLOAT *TextureXArrayPtr, const MIL_FLOAT *TextureYArrayPtr, MIL_ID TextureBufId, MIL_INT64 ControlFlag) Details Parameters List3dgraId See List3dgraId of the main function for a description. ParentLabel See ParentLabel of the main function for a description. CreationMode See CreationMode of the main function for a description. NumPoints See NumPoints of the main function for a description. CoordXArrayPtr See CoordXArrayPtr of the main function for a description. CoordYArrayPtr See CoordYArrayPtr of the main function for a description. CoordZArrayPtr See CoordZArrayPtr of the main function for a description. TextureXArrayPtr See TextureXArrayPtr of the main function for a description. TextureYArrayPtr See TextureYArrayPtr of the main function for a description. TextureBufId See TextureBufId of the main function for a description. ControlFlag See ControlFlag of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - NumPoints For specifying the number of vertices in the polygon - CoordXArrayPtr - CoordYArrayPtr - CoordZArrayPtr - TextureXArrayPtr - TextureYArrayPtr - TextureBufId - ControlFlag Return value Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 1591,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraRect",
      "version": null,
      "title": "M3dgraRect",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraRect.htm",
      "text": " M3dgraRect Synopsis Add a rectangle graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraRect( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;X1OrMatrix3dGeoId, //in MIL_DOUBLE&nbsp;Y1, //in MIL_DOUBLE&nbsp;Z1, //in MIL_DOUBLE&nbsp;X2, //in MIL_DOUBLE&nbsp;Y2, //in MIL_DOUBLE&nbsp;Z2, //in MIL_DOUBLE&nbsp;SizeX, //in MIL_DOUBLE&nbsp;SizeY, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a rectangle graphic to the specified 3D graphics list, allowing you to, for example, view the rectangle graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the rectangle graphic. When the rectangle graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the rectangle graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the rectangle graphic's parent. The rectangle graphic has its own coordinate system that represents the rectangle graphic's position and orientation with respect to its parent's coordinate system. The origin of the rectangle graphic's coordinate system is the rectangle graphic's center, and its Z-axis is the rectangle graphic's normal vector. The rectangle graphic's coordinate system's XY (Z=0) plane lies on the rectangle graphic. You can change the position and orientation of the rectangle graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the rectangle graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the rectangle graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the rectangle graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CreationMode Specifies how the rectangle graphic is defined. See the Parameter associations section for possible values that can be specified. X1OrMatrix3dGeoId Specifies the X-coordinate of the first point used to define the rectangle graphic or the identifier of a transformation matrix. See the Parameter associations section for possible values that can be specified. Y1 Specifies the Y-coordinate of the first point used to define the rectangle graphic. See the Parameter associations section for possible values that can be specified. Z1 Specifies the Z-coordinate of the first point used to define the rectangle graphic. See the Parameter associations section for possible values that can be specified. X2 Specifies the X-coordinate of the second point used to define the rectangle graphic. See the Parameter associations section for possible values that can be specified. Y2 Specifies the Y-coordinate of the second point used to define the rectangle graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Z2 Specifies the Z-coordinate of the second point used to define the rectangle graphic. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. SizeX Specifies the X-size of the rectangle graphic. For setting the X-size of the rectangle graphics Value Description Value &gt; 0.0 Specifies the X-size of the rectangle graphic. SizeY Specifies the Y-size of the rectangle graphic. For setting the Y-size of the rectangle graphics Value Description Value &gt; 0.0 Specifies the Y-size of the rectangle graphic. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, X1OrMatrix3dGeoId, Y1, Z1, X2, Y2, and Z2 parameters. For specifying the rectangle graphic Set unused parameters to M_DEFAULT. For specifying the rectangle graphic CreationMode Description X1OrMatrix3dGeoId Y1 Z1 X2 Y2 Z2 M_CENTER_AND_NORMAL Defines the rectangle graphic using its center point and normal vector. The center of the rectangle is defined using X1OrMatrix3dGeoId, Y1, and Z1 and the normal is defined using X2, Y2, and Z2. X1OrMatrix3dGeoId Specifies the X-coordinate of the center of the rectangle. Y1 Specifies the Y-coordinate of the center of the rectangle. Z1 Specifies the Z-coordinate of the center of the rectangle. X2 Specifies the X-coordinate of the normal. Y2 Specifies the Y-coordinate of the normal. Z2 Specifies the Z-coordinate of the normal. M_TRANSFORMATION_MATRIX Defines the rectangle using a transformation matrix. The transformation matrix should define a coordinate system whose origin defines the center of the rectangle and whose XY-plane (Z=0) defines plane on which the rectangle lies. To set up the matrix, use M3dgeoMatrixSetWithAxes() with M_COORDINATE_SYSTEM_TRANSFORMATION; specify the coordinates of the new coordinate system's origin and the components of two of its axes. The third axis will automatically be calculated such that it is perpendicular to the first two and respects the right hand rule. M3dgeoMatrixSetWithAxes() with M_COORDINATE_SYSTEM_TRANSFORMATION returns a transformation matrix that moves your new coordinate system to your current working coordinate system. X1OrMatrix3dGeoId Specifies the identifier of a transformation matrix object that defines the coordinate system whose origin is at the center of the rectangle and whose XY-plane (Z=0) lies on rectangle. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Combination value for M_TRANSFORMATION_MATRIX. You can add the following value to the above-mentioned value to set the position and rotation of the 3D graphic relative to the 3D graphics list's root node. For setting the position and rotation relative to the 3D graphics list's root node Combination value Description M_RELATIVE_TO_ROOT Specifies to set the position and rotation of a 3D graphic relative to the 3D graphics list's root node. Return value Returns the label of the rectangle graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CreationMode - X1OrMatrix3dGeoId - Y1 - Z1 - X2 - Y2 - Z2 - SizeX For setting the X-size of the rectangle graphics - SizeY For setting the Y-size of the rectangle graphics - ControlFlag Parameter Associations For specifying the rectangle graphic + For setting the position and rotation relative to the 3D graphics list's root node Return value Compilation information ",
      "wordCount": 1100,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraRemove",
      "version": null,
      "title": "M3dgraRemove",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraRemove.htm",
      "text": " M3dgraRemove Synopsis Remove a 3D graphic from a 3D graphics list. Syntax void M3dgraRemove( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;Label, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function removes a 3D graphic from a 3D graphics list. Removing a 3D graphic from a 3D graphics list will also remove all of its children from the 3D graphics list. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to remove the 3D graphic or node. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). Label Specifies the label of the 3D graphic to remove. For specifying the label of the 3D graphic or node Value Description M_ALL Specifies to clear the 3D graphics list, leaving the root node as the only element in the 3D graphics list. Value &gt; 0 Specifies the label of the 3D graphic to remove. The root node cannot be removed. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - Label For specifying the label of the 3D graphic or node - ControlFlag Compilation information ",
      "wordCount": 215,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraSphere",
      "version": null,
      "title": "M3dgraSphere",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraSphere.htm",
      "text": " M3dgraSphere Synopsis Add a sphere graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraSphere( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_DOUBLE&nbsp;CenterX, //in MIL_DOUBLE&nbsp;CenterY, //in MIL_DOUBLE&nbsp;CenterZ, //in MIL_DOUBLE&nbsp;Radius, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a sphere graphic to the specified 3D graphics list, allowing you to, for example, view the sphere graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the sphere graphic. When the sphere graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the sphere graphic's parent must be the root node. All coordinates are expressed in the coordinate system of the sphere graphic's parent. The sphere graphic has its own coordinate system that represents the sphere graphic's position and orientation with respect to its parent's coordinate system. The origin of the sphere graphic's coordinate system is the sphere graphic's center, and its orientation is inherited, upon creation, from its parent's coordinate system. This means that the sphere graphic's orientation is the same as the orientation of its parent's coordinate system. You can change the position and orientation of the sphere graphic using M3dgraCopy() with M_TRANSFORMATION_MATRIX. Note that although a sphere graphic's coordinate system has an orientation, the orientation has no effect on the appearance of the sphere graphic. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the sphere graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the sphere graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the sphere graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. CenterX Specifies the X-coordinate of the center of the sphere graphic. CenterY Specifies the Y-coordinate of the center of the sphere graphic. CenterZ Specifies the Z-coordinate of the center of the sphere graphic. Radius Specifies the sphere graphic's radius. For specifying the sphere graphic's radius Value Description Value &gt; 0.0 Specifies the sphere graphic's radius. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the sphere graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - CenterX - CenterY - CenterZ - Radius For specifying the sphere graphic's radius - ControlFlag Return value Compilation information ",
      "wordCount": 537,
      "subEntries": []
    },
    {
      "id": "Reference_3dgra_M3dgraText",
      "version": null,
      "title": "M3dgraText",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgra\\M3dgraText.htm",
      "text": " M3dgraText Synopsis Add a text graphic to a 3D graphics list. Syntax MIL_INT64 M3dgraText( MIL_ID&nbsp;List3dgraId, //in MIL_INT64&nbsp;ParentLabel, //in MIL_CONST_TEXT_PTR&nbsp;Text, //in MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;Options, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function adds a text graphic to the specified 3D graphics list, allowing you to, for example, view the text graphic on a 3D display. You must specify the label of the 3D graphic, in the 3D graphics list, to use as the parent of the text graphic. When the text graphic is added to the 3D graphics list's tree structure, it is added as a child under the specified parent. If the 3D graphics list is empty, the text graphic's parent must be the root node. The text graphic has its own coordinate system that represents the text's position and orientation with respect to its parent's coordinate system. The text is justified at its coordinate system's origin, and is written in the direction of its coordinate system's X-axis, by default, facing the direction of the Z-axis. By default, the text is top- and left-aligned, so the top-left corner of the text is positioned at its coordinate system's origin. You can set the text's position and orientation using the Matrix3dgeoId parameter. You can set the text's font and size using M3dgraControl with M_FONT and M_FONT_SIZE. To modify or inquire 3D graphics list settings, use M3dgraControl() or M3dgraInquire(), respectively. Unlike most other functions that modify a MIL object, you can call this function concurrently from multiple threads on the same MIL 3D graphics list (List3dgraId) without using an M_MUTEX object, as long as all the other parameters of the concurrent calls do not also share data. Parameters Parameters List3dgraId Specifies the identifier of the 3D graphics list in which to add the text graphic. The 3D graphics list must have been previously allocated on the required system using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). ParentLabel Specifies the label of the parent of the text graphic in the 3D graphics list. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the parent of the text graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. Text Specifies the address of the string containing the text that must be shown in the text graphic. For specifying the string Value Description MIL_TEXT(\"String\") 1 Specifies the address of the null-terminated (\\0) ASCII string that must be shown in the text graphic. There is no restriction on the length of the string. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Matrix3dgeoId Specifies the identifier of the transformation matrix that defines the text graphic's position and orientation with respect to its parent's coordinate system. For specifying the transformation matrix object identifier Value Description M_DEFAULT Same as M_IDENTITY_MATRIX. M_IDENTITY_MATRIX Specifies the identity matrix. This means that the text graphic's position and orientation is the same as the position and orientation of its parent's coordinate system. MIL transformation matrix object identifier Specifies the identifier of the transformation matrix that defines the text graphic's position and rotation with respect to its parent's coordinate system. The transformation matrix must be of type M_RIGID. Options Specifies extra options for the appearance of the text graphic. For specifying extra options Value Description M_DEFAULT Specifies that the text is written in the direction of the text graphic's coordinate system's X-axis, and that the text faces the direction of the Z-axis of the text graphic's coordinate system. M_FLIP Specifies that the text is mirrored across the X-axis. The text faces the direction of the negative Z-axis of the text graphic's coordinate system. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the text graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - List3dgraId - ParentLabel For specifying the parent label - Text For specifying the string - Matrix3dgeoId For specifying the transformation matrix object identifier - Options For specifying extra options - ControlFlag Return value Compilation information ",
      "wordCount": 709,
      "subEntries": []
    }
  ]
}]