[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_colormatchtask_cpp",
      "version": "2024020714",
      "title": "colormatchtask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ColorMatchTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CColorMatchTask class // which is the base task for any color match task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ColorMatchTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CColorMatchTask::CColorMatchTask(MIL_CONST_TEXT_PTR ColContextPath, const MIL_INT* ExpectedMatches, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CHighLevelInspectionTask(ColContextPath, McolFree, M_NONE, FixtureProvider, ImageProvider, RegionProvider), CRegionMngr(), m_ExpectedMatches(ExpectedMatches), m_BestMatchProductIndexTable(NULL) { } //***************************************************************************** // Destructor. //***************************************************************************** CColorMatchTask::~CColorMatchTask() { } //***************************************************************************** // Free function //***************************************************************************** void CColorMatchTask::Free() { CRegionMngr::Free(); CHighLevelInspectionTask::Free(); if(m_BestMatchProductIndexTable) { delete [] m_BestMatchProductIndexTable; m_BestMatchProductIndexTable = NULL; } } //***************************************************************************** // Init. //***************************************************************************** void CColorMatchTask::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { // Initialize the base classes. CRegionMngr::Init(MilSystem, ImageSizeX, ImageSizeY); CHighLevelInspectionTask::Init(MilSystem, ImageSizeX, ImageSizeY); } //***************************************************************************** // Inspect. //***************************************************************************** bool CColorMatchTask::Calculate(MIL_ID MilImage) { MIL_ID MilAreaImage = HasRegionProvider() ? RasterizeRegion(MilImage, GetInputRegionList()) : M_NULL; // Match the color. McolMatch(MilContext(), MilImage, M_DEFAULT, MilAreaImage, MilResult(), M_DEFAULT); // Get the number of areas. McolGetResult(MilResult(), M_ALL, M_GENERAL, M_BEST_MATCH_INDEX + M_NB_ELEMENTS + M_TYPE_MIL_INT, &amp;m_NbAreas); // Allocate the best match product index table. if(m_BestMatchProductIndexTable) delete [] m_BestMatchProductIndexTable; m_BestMatchProductIndexTable = new MIL_INT[m_NbAreas]; // Get the best match index. McolGetResult(MilResult(), M_ALL, M_GENERAL, M_BEST_MATCH_INDEX + M_TYPE_MIL_INT, m_BestMatchProductIndexTable); return true; } //***************************************************************************** // Draw the Graphical Result. //***************************************************************************** void CColorMatchTask::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the region . MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); CInspectionTask::DrawInputRegion(MilGraContext, MilDest); // Draw the result of the matching. MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); for(MIL_INT AreaIdx = 0; AreaIdx &lt; m_NbAreas; AreaIdx++) CRegionMngr::DrawTextInRegion(MilGraContext, GetInputRegionList(), MilDest, AreaIdx, GetBestMatchLabel(m_BestMatchProductIndexTable[AreaIdx])); } //***************************************************************************** // Draw the text result. //***************************************************************************** void CColorMatchTask::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { MIL_TEXT_CHAR OutputString[256]; MIL_CONST_TEXT_PTR MatchText = m_NbAreas &gt; 1 ? MIL_TEXT(\"matches\") : MIL_TEXT(\"match\"); if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MosSprintf(OutputString, 256, MIL_TEXT(\"%s color %s: UNKNOWN\"), GetProductLabel(), MatchText); } else { // Check if all the matches are as expected. bool AllAreasValid = true; if(m_ExpectedMatches != NULL) { for(MIL_INT AreaIdx = 0; AreaIdx &lt; m_NbAreas &amp;&amp; AllAreasValid; AreaIdx++) AllAreasValid = m_BestMatchProductIndexTable[AreaIdx] == m_ExpectedMatches[AreaIdx]; } if(IsResultValid() &amp;&amp; AllAreasValid) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MosSprintf(OutputString, 256, MIL_TEXT(\"%s color %s: PASS\"), GetProductLabel(), MatchText); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MosSprintf(OutputString, 256, MIL_TEXT(\"%s color %s: FAIL\"), GetProductLabel(), MatchText); } } MgraText(MilGraContext, MilDest, 0, 0, OutputString); MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 405
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_highlevelinspectiontask_cpp",
      "version": "2024020714",
      "title": "highlevelinspectiontask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: HighLevelInspectionTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CHighLevelInspectionTask class // the base class of all high level module, except blob. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"HighLevelInspectionTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CHighLevelInspectionTask::CHighLevelInspectionTask(MIL_CONST_TEXT_PTR ContextPath, FreeFuncPtr FreeFct, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CInspectionTask(ColorConversion, FixtureProvider, ImageProvider, RegionProvider), m_FreeFct(FreeFct), m_MilContext(M_NULL), m_MilResult(M_NULL) { // Copy the path. CloneString(m_ContextPath, ContextPath); } //***************************************************************************** // Destructor. //***************************************************************************** CHighLevelInspectionTask::~CHighLevelInspectionTask() { if(m_ContextPath) { delete [] m_ContextPath; } if(m_MilContext) { (*m_FreeFct)(m_MilContext); m_MilContext = M_NULL; } if(m_MilResult) { (*m_FreeFct)(m_MilResult); m_MilResult = M_NULL; } } //***************************************************************************** // Free function. //***************************************************************************** void CHighLevelInspectionTask::Free() { CInspectionTask::Free(); if(m_MilContext) { (*m_FreeFct)(m_MilContext); m_MilContext = M_NULL; } if(m_MilResult) { (*m_FreeFct)(m_MilResult); m_MilResult = M_NULL; } } //***************************************************************************** // Init. //***************************************************************************** void CHighLevelInspectionTask::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { // Initialize the base classes CInspectionTask::Init(MilSystem, ImageSizeX, ImageSizeY); // Restore the context. Restore(MilSystem, m_ContextPath, &amp;m_MilContext, &amp;m_MilResult); // Preprocess it. Preprocess(); } //***************************************************************************** // Inspect. //***************************************************************************** ResultStatusEnum CHighLevelInspectionTask::Inspect(MIL_ID MilImage) { // Set the region in the image. DefineRegion(MilImage); // Do the inspection. if(Calculate(MilImage)) { // Set the fixture. SetFixture(); // Set the output image. SetOutputImage(MilImage); return eValid; } return eInvalid; } ",
      "wordCount": 244
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_inspectiontask_cpp",
      "version": "2024020714",
      "title": "inspectiontask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: InspectionTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CInspectionTask class // which is the base class of all the inspection tasks. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"InspectionTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CInspectionTask::CInspectionTask(MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : m_MilWorkImage (M_NULL), m_MilOutputImage (M_NULL), m_MilOutputRegionGraList (M_NULL), m_ColorConversion (ColorConversion), m_FixtureProvider (FixtureProvider), m_ImageProvider (ImageProvider), m_RegionProvider (RegionProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CInspectionTask::~CInspectionTask() { CInspectionTask::Free(); } //***************************************************************************** // Initialization function. //***************************************************************************** void CInspectionTask::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { } //***************************************************************************** // Free function. //***************************************************************************** void CInspectionTask::Free() { if(m_MilWorkImage) { MbufFree(m_MilWorkImage); m_MilWorkImage = M_NULL; } if(m_MilOutputImage) { MbufFree(m_MilOutputImage); m_MilOutputImage = M_NULL; } if(m_MilOutputRegionGraList) { MgraFree(m_MilOutputRegionGraList); m_MilOutputRegionGraList = M_NULL; } } //***************************************************************************** // Function to inspect an image. //***************************************************************************** void CInspectionTask::InspectImage(MIL_ID MilImage) { // Reset the work image if necessary. if(m_MilWorkImage) { MbufFree(m_MilWorkImage); m_MilWorkImage = M_NULL; } // If one of the providers has failed. if((m_FixtureProvider &amp;&amp; !m_FixtureProvider-&gt;IsResultValid()) || (m_ImageProvider &amp;&amp; !m_ImageProvider-&gt;IsResultValid()) || (m_RegionProvider &amp;&amp; !m_RegionProvider-&gt;IsResultValid())) m_ResultStatus = eUnknown; else { // Create the converted image. m_MilWorkImage = CreateConvertedImage(m_ImageProvider ? m_ImageProvider-&gt;GetOutputImage() : MilImage, m_ColorConversion); // Set the fixture in the image. SetImageFixture(m_MilWorkImage); // Inspect the image. m_ResultStatus = Inspect(m_MilWorkImage); } } //***************************************************************************** // Function to set the fixture. //***************************************************************************** void CInspectionTask::SetOutputFixture(MIL_INT LocationType, MIL_ID FixturingOffset, MIL_INT CalOrLocSourceId, MIL_DOUBLE Param1, MIL_DOUBLE Param2, MIL_DOUBLE Param3, MIL_DOUBLE Param4) { McalFixture(m_MilWorkImage, FixturingOffset, M_MOVE_RELATIVE, LocationType, CalOrLocSourceId, Param1, Param2, Param3, Param4); } void CInspectionTask::SetImageFixture(MIL_ID MilImage) { if(m_FixtureProvider) { McalAssociate(m_FixtureProvider-&gt;GetFixture(), MilImage, M_DEFAULT); } else { McalAssociate(M_NULL, MilImage, M_DEFAULT); McalUniform(MilImage, 0.0, 0.0, 1.0, 1.0, 0.0, M_DEFAULT); McalRelativeOrigin(MilImage, 0, 0, 0, 0, M_DEFAULT); } } //***************************************************************************** // Functions allocates the output image and region graphics list. //***************************************************************************** void CInspectionTask::AllocateOutputImage(MIL_ID MilSystem, MIL_INT NbBands, MIL_INT SizeX, MIL_INT SizeY, MIL_INT Type, MIL_INT64 BufAttribute) { if(m_MilOutputImage) MbufFree(m_MilOutputImage); MbufAllocColor(MilSystem, NbBands, SizeX, SizeY, Type, BufAttribute, &amp;m_MilOutputImage); } void CInspectionTask::AllocateRegionGraList(MIL_ID MilSystem) { if(m_MilOutputRegionGraList) MgraFree(m_MilOutputRegionGraList); MgraAllocList(MilSystem, M_DEFAULT, &amp;m_MilOutputRegionGraList); } //***************************************************************************** // Function that draw the graphical result. //***************************************************************************** void CInspectionTask::DrawInspectionGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(IsResultValid()) { if(m_FixtureProvider) { // Set the calibration of the graphic context. MgraControl(MilGraContext, M_GRAPHIC_SOURCE_CALIBRATION, (MIL_DOUBLE)m_FixtureProvider-&gt;GetFixture()); // Put the drawing in world units. MgraControl(MilGraContext, M_INPUT_UNITS, M_WORLD); } else { // Set the calibration of the graphic context. MgraControl(MilGraContext, M_GRAPHIC_SOURCE_CALIBRATION, M_NULL); // Put the drawing in pixel units. MgraControl(MilGraContext, M_INPUT_UNITS, M_PIXEL); } DrawGraphicalResult(MilGraContext, MilDest); } } //***************************************************************************** // Function to draw the output fixture. //***************************************************************************** void CInspectionTask::DrawOutputFixture(MIL_ID MilGraContext, MIL_ID MilDest) { McalDraw(MilGraContext, m_MilWorkImage, MilDest, M_DRAW_RELATIVE_COORDINATE_SYSTEM + M_DRAW_FRAME, M_DEFAULT, M_DEFAULT); } //***************************************************************************** // Function to draw the input region. //***************************************************************************** void CInspectionTask::DrawInputRegion(MIL_ID MilGraContext, MIL_ID MilDest) { if(HasRegionProvider()) m_RegionProvider-&gt;DrawOutputRegion(MilGraContext, MilDest); } //***************************************************************************** // Function to convert the image. //***************************************************************************** MIL_ID CInspectionTask::CreateConvertedImage(MIL_ID MilColorImage, MIL_INT ConversionType) { MIL_ID MilConvertedImage; switch(ConversionType) { case M_RGB_TO_L: case M_RGB_TO_Y: MbufAlloc2d(MbufInquire(MilColorImage, M_OWNER_SYSTEM, M_NULL), MbufInquire(MilColorImage, M_SIZE_X, M_NULL), MbufInquire(MilColorImage, M_SIZE_Y, M_NULL), 8+M_UNSIGNED, M_IMAGE+M_PROC, &amp;MilConvertedImage); MimConvert(MilColorImage, MilConvertedImage, ConversionType); break; case M_RED: case M_GREEN: case M_BLUE: MbufChildColor(MilColorImage, ConversionType, &amp;MilConvertedImage); break; case M_NONE: default: MbufCreateColor(MbufInquire(MilColorImage, M_OWNER_SYSTEM, M_NULL), M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_IMAGE+M_PROC, M_MIL_ID, M_DEFAULT, (void**)&amp;MilColorImage, &amp;MilConvertedImage); break; } return MilConvertedImage; } ",
      "wordCount": 540
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_measurementalignment_cpp",
      "version": "2024020714",
      "title": "measurementalignment.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: MeasurementAlignment.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the declaration of the CMeasAlignment class // which is the inspection task used to align an image based on a single measurement. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"MeasurementAlignment.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CMeasAlignment::CMeasAlignment(MIL_CONST_TEXT_PTR MeasMarkerPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasMarkerPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CMeasAlignment::~CMeasAlignment() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CMeasAlignment::Calculate(MIL_ID MilImage) { // Do the measurement task. if(CMeasInspectionTask::Calculate(MilImage)) { // Get the measurement result. MmeasGetResult(MilResult(), M_POSITION, &amp;m_PosX, &amp;m_PosY); MmeasGetResult(MilResult(), M_ANGLE, &amp;m_Angle, M_NULL); return true; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CMeasAlignment::SetFixture() { SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, m_PosX, m_PosY, m_Angle - 90, M_DEFAULT); } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CMeasAlignment::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_EDGE, M_DEFAULT, M_RESULT); } //***************************************************************************** // Draw text result. //***************************************************************************** void CMeasAlignment::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Measurement alignment: UNKNOWN\")); } else { if(IsResultValid()) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Measurement alignment: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Measurement alignment: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 252
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_measurementinspectiontask_cpp",
      "version": "2024020714",
      "title": "measurementinspectiontask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: MeasurementInspectionTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CMeasInspectionTask class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"MeasurementInspectionTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CMeasInspectionTask::CMeasInspectionTask(MIL_CONST_TEXT_PTR MeasContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CHighLevelInspectionTask(MeasContextPath, MmeasFree, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CMeasInspectionTask::~CMeasInspectionTask() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CMeasInspectionTask::Calculate(MIL_ID MilImage) { // Measure the image. MmeasFindMarker(M_DEFAULT, MilImage, MilResult(), M_DEFAULT); // Get the number found. MmeasGetResult(MilResult(), M_NUMBER + M_TYPE_MIL_INT, &amp;m_NumberFound, M_NULL); return (m_NumberFound &gt; 0); } ",
      "wordCount": 125
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_metrologyinspectiontask_cpp",
      "version": "2024020714",
      "title": "metrologyinspectiontask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: MetrologyInspectionTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis:This file contains the implementation of the CMetInspectionTask class // which is the base inspection task that uses metrology. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"MetrologyInspectionTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CMetInspectionTask::CMetInspectionTask(MIL_CONST_TEXT_PTR MetContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CHighLevelInspectionTask(MetContextPath, MmetFree, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CMetInspectionTask::~CMetInspectionTask() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CMetInspectionTask::Calculate(MIL_ID MilImage) { // Calculate the metrology template. MmetCalculate(MilContext(), MilImage, MilResult(), M_DEFAULT); return true; } //***************************************************************************** // Draw the graphical result //***************************************************************************** void CMetInspectionTask::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the features. MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmetDraw(MilGraContext, MilResult(), MilDest, M_DRAW_FEATURE, M_ALL_FEATURES, M_DEFAULT); // Draw the passed tolerances in green. MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmetDraw(MilGraContext, MilResult(), MilDest, M_DRAW_TOLERANCE, M_ALL_PASS_TOLERANCES, M_DEFAULT); // Draw the failed tolerances in red. MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MmetDraw(MilGraContext, MilResult(), MilDest, M_DRAW_TOLERANCE, M_ALL_FAIL_TOLERANCES, M_DEFAULT); } //***************************************************************************** // Draw function by name of the feature. //***************************************************************************** void CMetInspectionTask::DrawFeatureByName(MIL_ID MilGraContext, MIL_CONST_TEXT_PTR FeatureName, MIL_ID MilDest, MIL_DOUBLE Color) { MIL_INT Label; // Get the label. MmetName(MilContext(), M_GET_FEATURE_LABEL, M_DEFAULT, const_cast&lt;MIL_TEXT_PTR&gt;(FeatureName), &amp;Label, M_DEFAULT); // If the label exists. if(Label) { // Draw the feature. MgraControl(MilGraContext, M_COLOR, Color); MmetDraw(MilGraContext, MilResult(), MilDest, M_DRAW_FEATURE, M_FEATURE_LABEL(Label), M_DEFAULT); } } //***************************************************************************** // Draw function by name of the tolerance. //***************************************************************************** void CMetInspectionTask::DrawToleranceByName(MIL_ID MilGraContext, MIL_CONST_TEXT_PTR ToleranceName, MIL_ID MilDest, MIL_DOUBLE PassColor, MIL_DOUBLE FailColor, MIL_DOUBLE WarningColor) { MIL_INT Label, Status; // Get the label. MmetName(MilContext(), M_GET_TOLERANCE_LABEL, M_DEFAULT, const_cast&lt;MIL_TEXT_PTR&gt;(ToleranceName), &amp;Label, M_DEFAULT); // If the label exists. if(Label) { // Get the status of the feature. MmetGetResult(MilResult(), M_TOLERANCE_LABEL(Label), M_STATUS + M_TYPE_MIL_INT, &amp;Status); // Get the color to use MIL_DOUBLE Color; switch(Status) { case M_PASS : Color = PassColor; break; case M_WARNING: Color = WarningColor; break; default: case M_FAIL : Color = FailColor; break; } // Draw the feature. MgraControl(MilGraContext, M_COLOR, Color); MmetDraw(MilGraContext, MilResult(), MilDest, M_DRAW_TOLERANCE, M_TOLERANCE_LABEL(Label), M_DEFAULT); } } //***************************************************************************** // Function to get the overall status. //***************************************************************************** MIL_INT CMetInspectionTask::GetOverallStatus() const { MIL_INT FeaturesStatus = M_PASS; MIL_INT ToleranceStatus = M_PASS; MIL_INT NbFeatureOrTolerance; // Check the features. MmetGetResult(MilResult(), M_GENERAL, M_NUMBER_OF_FEATURES + M_TYPE_MIL_INT, &amp;NbFeatureOrTolerance); if(NbFeatureOrTolerance) MmetGetResult(MilResult(), M_ALL_FEATURES, M_STATUS + M_TYPE_MIL_INT, &amp;FeaturesStatus); // Check the tolerances. MmetGetResult(MilResult(), M_GENERAL, M_NUMBER_OF_TOLERANCES + M_TYPE_MIL_INT, &amp;NbFeatureOrTolerance); if(NbFeatureOrTolerance) MmetGetResult(MilResult(), M_ALL_TOLERANCES, M_STATUS + M_TYPE_MIL_INT, &amp;ToleranceStatus); return (FeaturesStatus == M_FAIL || ToleranceStatus == M_FAIL) ? M_FAIL : ((FeaturesStatus == M_WARNING || ToleranceStatus == M_WARNING ? M_WARNING : M_PASS)); } ",
      "wordCount": 419
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_modelfinderalignmenttask_cpp",
      "version": "2024020714",
      "title": "modelfinderalignmenttask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ModelFinderAlignmentTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CModAlignmentTask class // which is the base class for any alignment task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ModelFinderAlignmentTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CModAlignmentTask::CModAlignmentTask(MIL_CONST_TEXT_PTR ModContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CHighLevelInspectionTask(ModContextPath, MmodFree, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CModAlignmentTask::~CModAlignmentTask() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CModAlignmentTask::Calculate(MIL_ID MilImage) { // Match the model MmodFind(MilContext(), MilImage, MilResult()); // Get the number of models found MmodGetResult(MilResult(), M_GENERAL, M_NUMBER + M_TYPE_MIL_INT, &amp;m_NumberFound); return m_NumberFound &gt; 0; } //***************************************************************************** // Set fixture. //***************************************************************************** void CModAlignmentTask::SetFixture() { SetOutputFixture(M_RESULT_MOD, M_NULL, MilResult(), 0, M_DEFAULT, M_DEFAULT, M_DEFAULT); } //***************************************************************************** // Draw the graphical result. //***************************************************************************** void CModAlignmentTask::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the output fixture. MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); DrawOutputFixture(MilGraContext, MilDest); } ",
      "wordCount": 176
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_patternmatchingtask_cpp",
      "version": "2024020714",
      "title": "patternmatchingtask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: PatternMatchingTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CPatMatchingTask class // which is the base class for any pattern matching task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"PatternMatchingTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CPatMatchingTask::CPatMatchingTask(MIL_CONST_TEXT_PTR PatContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CHighLevelInspectionTask(PatContextPath, MpatFree, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CPatMatchingTask::~CPatMatchingTask() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CPatMatchingTask::Calculate(MIL_ID MilImage) { // Match the model. MpatFind(MilContext(), MilImage, MilResult()); // Get the number of models found. MpatGetResult(MilResult(), M_GENERAL, M_NUMBER+M_TYPE_MIL_INT, &amp;m_NumberFound); return m_NumberFound &gt; 0; } //***************************************************************************** // Set fixture. //***************************************************************************** void CPatMatchingTask::SetFixture() { SetOutputFixture(M_RESULT_PAT, M_NULL, MilResult(), 0, M_DEFAULT, M_DEFAULT, M_DEFAULT); } //***************************************************************************** // Draw the graphical result. //***************************************************************************** void CPatMatchingTask::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the output fixture. MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); DrawOutputFixture(MilGraContext, MilDest); } ",
      "wordCount": 175
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_positioninspection_cpp",
      "version": "2024020714",
      "title": "positioninspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: PositionInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CPositionInspection class // which is a measurement derived class that verifies if the position // of the measurement is good. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include &lt;math.h&gt; #include \"PositionInspection.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CPositionInspection::CPositionInspection(MIL_CONST_TEXT_PTR MeasMarkerPath, MIL_CONST_TEXT_PTR PositionLabel, MIL_DOUBLE ExpectedPosition, MIL_DOUBLE PosTolerance, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasMarkerPath, ColorConversion, FixtureProvider, ImageProvider), m_ExpectedPosition(ExpectedPosition), m_PosTolerance(PosTolerance) { CloneString(m_PositionLabel, PositionLabel); } //***************************************************************************** // Destructor. //***************************************************************************** CPositionInspection::~CPositionInspection() { if(m_PositionLabel) delete [] m_PositionLabel; } //***************************************************************************** // Inspect. //***************************************************************************** bool CPositionInspection::Calculate(MIL_ID MilImage) { // Calculate the measurement marker if(CMeasInspectionTask::Calculate(MilImage)) { // Get the results MmeasGetResult(MilResult(), M_POSITION, &amp;m_Pos, M_NULL); return true; } return false; } //***************************************************************************** // Draw text result. //***************************************************************************** void CPositionInspection::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { MIL_TEXT_CHAR OutputString[1024]; if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MosSprintf(OutputString, 1024, MIL_TEXT(\"Position of %s: UNKNOWN\"), m_PositionLabel); } else { if(IsResultValid() &amp;&amp; fabs(m_Pos - m_ExpectedPosition) &lt;= m_PosTolerance) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MosSprintf(OutputString, 1024, MIL_TEXT(\"Position of %s: PASS\"), m_PositionLabel); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MosSprintf(OutputString, 1024, MIL_TEXT(\"Position of %s: FAIL\"), m_PositionLabel); } } MgraText(MilGraContext, MilDest, 0, 0, OutputString); MoveGraphicContextYOffset(MilGraContext, 1); } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CPositionInspection::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_EDGES, M_DEFAULT, M_RESULT); } ",
      "wordCount": 260
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_readingtask_cpp",
      "version": "2024020714",
      "title": "readingtask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ReadingTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CReadTask class // which is the inspection task used to read something. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ReadingTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CReadTask::CReadTask(MIL_CONST_TEXT_PTR ContextPath, FreeFuncPtr FreeFct, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CHighLevelInspectionTask(ContextPath, FreeFct, ColorConversion, FixtureProvider, ImageProvider, RegionProvider), CRegionMngr() { } //***************************************************************************** // Destructor. //***************************************************************************** CReadTask::~CReadTask() { } //***************************************************************************** // Free function //***************************************************************************** void CReadTask::Free() { CHighLevelInspectionTask::Free(); CRegionMngr::Free(); } //***************************************************************************** // Init. //***************************************************************************** void CReadTask::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { // Initialize the base classes. CHighLevelInspectionTask::Init(MilSystem, ImageSizeX, ImageSizeY); CRegionMngr::Init(MilSystem, ImageSizeX, ImageSizeY); } //***************************************************************************** // Inspect. //***************************************************************************** bool CReadTask::Calculate(MIL_ID MilImage) { // Read. Read(MilImage); // Get the read string. if(GetReadStringResult(m_ReadString)) return true; else return false; } //***************************************************************************** // Function that sets the region. //***************************************************************************** void CReadTask::DefineRegion(MIL_ID MilImage) { CRegionMngr::SetRegion(MilImage, GetInputRegionList()); } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CReadTask::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the region. MgraControl(MilGraContext, M_COLOR, M_COLOR_BLUE); CInspectionTask::DrawInputRegion(MilGraContext, MilDest); } ",
      "wordCount": 216
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_regionmanager_cpp",
      "version": "2024020714",
      "title": "regionmanager.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: RegionManager.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CRegionMngr class // which is the class that manages the use of a region in an inspection task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"RegionManager.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CRegionMngr::CRegionMngr() : m_MilRasterRegion(M_NULL) { } //***************************************************************************** // Destructor. //***************************************************************************** CRegionMngr::~CRegionMngr() { CRegionMngr::Free(); } //***************************************************************************** // Initialization function. //***************************************************************************** void CRegionMngr::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { // Allocate the raster region and clear it. if(ImageSizeX &amp;&amp; ImageSizeY) { MbufAlloc2d(MilSystem, ImageSizeX, ImageSizeY, 8+M_UNSIGNED, M_IMAGE+M_PROC, &amp;m_MilRasterRegion); MbufClear(m_MilRasterRegion, 0); } } //***************************************************************************** // Function to set the region in an image. //***************************************************************************** void CRegionMngr::SetRegion(MIL_ID MilImage, MIL_ID MilRegionGraList) { MbufSetRegion(MilImage, MilRegionGraList, M_DEFAULT, M_NO_RASTERIZE, M_DEFAULT); } //***************************************************************************** // Function that rasterizes the region in the raster image. // Returns the rasterized image id. //***************************************************************************** MIL_ID CRegionMngr::RasterizeRegion(MIL_ID MilCalibration, MIL_ID MilRegionGraList) { // Associate the calibration to the rasterize image. McalAssociate(MilCalibration, m_MilRasterRegion, M_DEFAULT); // Draw the region in the buffer. MgraDraw(MilRegionGraList, m_MilRasterRegion, M_DEFAULT); return m_MilRasterRegion; } //***************************************************************************** // Function that frees the region manager. //***************************************************************************** void CRegionMngr::Free() { if(m_MilRasterRegion) { MbufFree(m_MilRasterRegion); m_MilRasterRegion = M_NULL; } } //***************************************************************************** // Function that draws the text in the region. //***************************************************************************** void CRegionMngr::DrawTextInRegion(MIL_ID MilGraContext, MIL_ID MilRegionGraList, MIL_ID MilDest, MIL_INT RegionIndex, MIL_CONST_TEXT_PTR String) { if(MilRegionGraList) { // Get the original text alignment. MIL_INT CurTextAlignHorizontal = MgraInquire(MilGraContext, M_TEXT_ALIGN_HORIZONTAL, M_NULL); MIL_INT CurTextAlignVertical = MgraInquire(MilGraContext, M_TEXT_ALIGN_VERTICAL, M_NULL); // Draw the text centered on the position. MIL_DOUBLE PosX, PosY; MgraInquireList(MilRegionGraList, M_GRAPHIC_INDEX(RegionIndex), M_DEFAULT, M_POSITION_X, &amp;PosX); MgraInquireList(MilRegionGraList, M_GRAPHIC_INDEX(RegionIndex), M_DEFAULT, M_POSITION_Y, &amp;PosY); MgraControl(MilGraContext, M_TEXT_ALIGN_HORIZONTAL, M_CENTER); MgraControl(MilGraContext, M_TEXT_ALIGN_VERTICAL, M_CENTER); // Draw the text. MgraText(MilGraContext, MilDest, PosX, PosY, String); // Put the text alignment back. MgraControl(MilGraContext, M_TEXT_ALIGN_HORIZONTAL, (MIL_DOUBLE)CurTextAlignHorizontal); MgraControl(MilGraContext, M_TEXT_ALIGN_VERTICAL, (MIL_DOUBLE)CurTextAlignVertical); } else // Draw the text. MgraText(MilGraContext, MilDest, 0, 0, String); } ",
      "wordCount": 324
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_simplefixture_cpp",
      "version": "2024020714",
      "title": "simplefixture.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: SimpleFixture.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CSimpleFixture class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"SimpleFixture.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CSimpleFixture::CSimpleFixture(MIL_DOUBLE PosX, MIL_DOUBLE PosY, MIL_DOUBLE Angle, CInspectionTask* FixtureProvider /* = M_NULL */) : CInspectionTask(M_NONE, FixtureProvider), m_PosX(PosX), m_PosY(PosY), m_Angle(Angle) { } //***************************************************************************** // Destructor. //***************************************************************************** CSimpleFixture::~CSimpleFixture() { } //***************************************************************************** // Inspect. //***************************************************************************** ResultStatusEnum CSimpleFixture::Inspect(MIL_ID MilImage) { // Set the output fixture. SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, m_PosX, m_PosY, m_Angle, M_DEFAULT); return eValid; } //***************************************************************************** // Draw text result. //***************************************************************************** void CSimpleFixture::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CSimpleFixture::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { } ",
      "wordCount": 134
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_targetalignmenttask_cpp",
      "version": "2024020714",
      "title": "targetalignmenttask.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: TargetAlignmentTask.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CTargetAlignmentTask class // which is a utility class to align a model on a template. The class // outputs the fixture location in the original image and outputs // the warped image. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"TargetAlignmentTask.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CTargetAlignmentTask::CTargetAlignmentTask(MIL_CONST_TEXT_PTR ModContextPath, MIL_CONST_TEXT_PTR TemplatePath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CModAlignmentTask(ModContextPath, ColorConversion, FixtureProvider, ImageProvider), m_MilFixturingOffset(M_NULL), m_MilTemplateImage(M_NULL) { // Clone the template path string. CloneString(m_TemplatePath, TemplatePath); } //***************************************************************************** // Destructor. //***************************************************************************** CTargetAlignmentTask::~CTargetAlignmentTask() { if(m_TemplatePath) delete [] m_TemplatePath; if(m_MilTemplateImage) MbufFree(m_MilTemplateImage); if(m_MilFixturingOffset) McalFree(m_MilFixturingOffset); } //***************************************************************************** // Free function. //***************************************************************************** void CTargetAlignmentTask::Free() { if(m_MilTemplateImage) { MbufFree(m_MilTemplateImage); m_MilTemplateImage = M_NULL; } if(m_MilFixturingOffset) { McalFree(m_MilFixturingOffset); m_MilFixturingOffset = M_NULL; } CModAlignmentTask::Free(); } //***************************************************************************** // Init. //***************************************************************************** void CTargetAlignmentTask::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { // Initialize the base classes. CModAlignmentTask::Init(MilSystem, ImageSizeX, ImageSizeY); // Restore the template image. MbufRestore(m_TemplatePath, MilSystem, &amp;m_MilTemplateImage); // Calculate the alignment. CModAlignmentTask::Calculate(m_MilTemplateImage); // Allocate the fixturing offset. McalAlloc(MilSystem, M_FIXTURING_OFFSET, M_DEFAULT, &amp;m_MilFixturingOffset); // Set the fixturing offset. McalFixture(M_NULL, m_MilFixturingOffset, M_LEARN_OFFSET, M_RESULT_MOD, MilResult(), 0, M_DEFAULT, M_DEFAULT, M_DEFAULT); // Allocate a target that is the size of the template. MIL_INT64 SrcAttributes; MbufInquire(m_MilTemplateImage, M_EXTENDED_ATTRIBUTE, &amp;SrcAttributes); AllocateOutputImage(MilSystem, MbufInquire(m_MilTemplateImage, M_SIZE_BAND, M_NULL), MbufInquire(m_MilTemplateImage, M_SIZE_X, M_NULL), MbufInquire(m_MilTemplateImage, M_SIZE_Y, M_NULL), MbufInquire(m_MilTemplateImage, M_TYPE, M_NULL), SrcAttributes); // Put a uniform calibration on the target image. McalUniform(GetOutputImage(), 0, 0, 1, 1, 0, M_DEFAULT); } //***************************************************************************** // Set fixture. //***************************************************************************** void CTargetAlignmentTask::SetFixture() { // Add the fixturing offset on the fixture of the image. SetOutputFixture(M_RESULT_MOD, m_MilFixturingOffset, MilResult(), 0, M_DEFAULT, M_DEFAULT, M_DEFAULT); } //***************************************************************************** // Set output image. //***************************************************************************** void CTargetAlignmentTask::SetOutputImage(MIL_ID MilImage) { // Transform the image to the target. McalTransformImage(MilImage, GetOutputImage(), M_DEFAULT, M_BILINEAR, M_DEFAULT, M_WARP_IMAGE + M_USE_DESTINATION_CALIBRATION); } //***************************************************************************** // Draw text result. //***************************************************************************** void CTargetAlignmentTask::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { } ",
      "wordCount": 343
    }
  ]
}]