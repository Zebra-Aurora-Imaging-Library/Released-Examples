[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_Mdlocr_CS_mdlocr_cs",
      "version": "2024020714",
      "title": "mdlocr.cs",
      "location": "Sample Code from MIL Examples",
      "text": " Top //****************************************************************************** // // File name: Mdlocr.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program uses the Deep Learning Ocr module to read a product // expiry date. // First all strings are read, then a model is defined based on the first // read to filter out the target string using its size and dimensions. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved // using System; using System.Text; using Matrox.MatroxImagingLibrary; namespace Mdlocr { class Program { // MIL image file specifications. const string IMAGE_FILE_TO_READ = MIL.M_IMAGE_PATH + \"ExpiryDateAndLot2.mim\"; // Max string sizes. static readonly int STRING_MAX_SIZE = 256; // Result number to define model static readonly int FIRST_READ_TARGET_INDEX = 0; static void Read( MIL_ID MilDisplay, MIL_ID MilDlocrContext, MIL_ID MilImage, MIL_ID MilOverlayImage, MIL_ID MilDlocrResult, MIL_INT StringMatchingMode) { MIL_INT NumberOfStringRead = 0; // Total number of strings to read. StringBuilder StringResult = new StringBuilder(STRING_MAX_SIZE+1); // String of characters read. /* Perform the read operation on the specified target image. */ MIL.MdlocrRead(MilDlocrContext, MilImage, MilDlocrResult, StringMatchingMode); /* Get number of strings read and show the result. */ MIL.MdlocrGetResult( MilDlocrResult, MIL.M_GENERAL, MIL.M_GENERAL, MIL.M_STRING_NUMBER + MIL.M_TYPE_MIL_INT, ref NumberOfStringRead); /* Clear the display overlay. */ MIL.MdispControl(MilDisplay, MIL.M_OVERLAY_CLEAR, MIL.M_DEFAULT); if (NumberOfStringRead &gt;= 1) { Console.Write(\"The image was read successfully.\\n\\n\"); /* Draw read result. */ MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_CYAN); MIL.MdlocrDraw( MIL.M_DEFAULT, MilDlocrResult, MilOverlayImage, MIL.M_DRAW_STRING, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DEFAULT); MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_GREEN); MIL.MdlocrDraw(MIL.M_DEFAULT, MilDlocrResult, MilOverlayImage, MIL.M_DRAW_STRING_BOX, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DEFAULT); MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_RED); MIL.MdlocrDraw(MIL.M_DEFAULT, MilDlocrResult, MilOverlayImage, MIL.M_DRAW_STRING_INDEX, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DEFAULT); /* Print the read result. */ Console.Write(\" String\\n\"); Console.Write(\" -----------------------------------\\n\"); for (MIL_INT i = 0; i &lt; NumberOfStringRead; ++i) { MIL.MdlocrGetResult(MilDlocrResult, i, MIL.M_GENERAL, MIL.M_STRING, StringResult); Console.Write(\" {0}\\n\", StringResult); } Console.Write(\"\\n\"); } else { Console.Write(\"Error: no strings were read.\\n\"); } } static void Main(string[] args) { MIL_ID MilApplication = MIL.M_NULL; // Application identifier. MIL_ID MilSystem = MIL.M_NULL; // System identifier. MIL_ID MilDisplay = MIL.M_NULL; // Display identifier. MIL_ID MilImage = MIL.M_NULL; // Image buffer identifier. MIL_ID MilOverlayImage = MIL.M_NULL; // Overlay image. MIL_ID MilDlocrContext = MIL.M_NULL; // Dlocr context identifier. MIL_ID MilDlocrResult = MIL.M_NULL; // Dlocr result buffer identifier. MIL_INT MaxSizeX = 0; MIL_INT MaxSizeY = 0; /* Print the example synopsis. */ Console.Write(\"[EXAMPLE NAME]\\n\"); Console.Write(\"Mdlocr\\n\\n\"); Console.Write(\"[SYNOPSIS]\\n\"); Console.Write(\"This program uses the Deep Learning Ocr module to read a product\\n\"); Console.Write(\"expiry date.\\n\"); Console.Write(\"First all strings are read, then a model is defined based on the first\\n\"); Console.Write(\"read to filter out the target string using its size and dimensions.\\n\\n\"); Console.Write(\"[MODULES USED]\\n\"); Console.Write(\"Deep Learning OCR, Buffer, Display, Graphics.\\n\\n\"); /* Allocate defaults. */ MIL.MappAllocDefault(MIL.M_DEFAULT, ref MilApplication, ref MilSystem, ref MilDisplay, MIL.M_NULL, MIL.M_NULL); /* Restore the font definition image. */ MIL.MbufRestore(IMAGE_FILE_TO_READ, MilSystem, ref MilImage); /* Display the image and prepare for overlay annotations. */ MIL.MdispSelect(MilDisplay, MilImage); MIL.MdispControl(MilDisplay, MIL.M_OVERLAY, MIL.M_ENABLE); MIL.MdispInquire(MilDisplay, MIL.M_OVERLAY_ID, ref MilOverlayImage); /* Allocate a new empty dlocr context. */ MIL.MdlocrAlloc(MilSystem, MIL.M_OCR_NET1_BALANCED_V1, MIL.M_DEFAULT, ref MilDlocrContext); /* Allocate a new empty dlocr result buffer. */ MIL.MdlocrAllocResult(MilSystem, MIL.M_DLOCR_READ_RESULT, MIL.M_DEFAULT, ref MilDlocrResult); /* Set the context's target image max size X and Y Note that these dimension can be superior to encompass several images. */ MIL.MbufInquire(MilImage, MIL.M_SIZE_X, ref MaxSizeX); MIL.MbufInquire(MilImage, MIL.M_SIZE_Y, ref MaxSizeY); MIL.MdlocrControl(MilDlocrContext, MIL.M_TARGET_MAX_SIZE_X, MaxSizeX); MIL.MdlocrControl(MilDlocrContext, MIL.M_TARGET_MAX_SIZE_Y, MaxSizeY); /* Preprocess the dlocr context. */ MIL.MdlocrPreprocess(MilDlocrContext, MIL.M_DEFAULT); /* First read. */ Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, MIL.M_READ_ALL); /* Pause to show results. */ Console.Write( \"First read without string model, the best before date was detected among\\n\"); Console.Write( \"others. We note the associated index (in red). It will be used in the next step\\n\"); Console.Write( \"to filter out the targeted string.\\n\"); Console.Write(\"Press any key to continue.\\n\\n\"); Console.ReadKey(); /* Define model from result. */ MIL.MdlocrDefineModelFromResult(MilDlocrContext, MIL.M_DEFAULT, MilDlocrResult, FIRST_READ_TARGET_INDEX, MIL.M_DEFAULT); /* This modification necessitates a new Preprocess. */ MIL.MdlocrPreprocess(MilDlocrContext, MIL.M_DEFAULT); /* Second read. */ Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, MIL.M_MODEL_BASED); /* Pause to show results. */ Console.Write( \"We defined a string model from the result to filter out based on string size\\n\"); Console.Write( \"and character dimensions.\\n\"); Console.Write( \"Second read with the string model. Targeted string is detected.\\n\"); Console.Write(\"Press any key to end.\\n\\n\"); Console.ReadKey(); /* Free all allocations. */ MIL.MdlocrFree(MilDlocrContext); MIL.MdlocrFree(MilDlocrResult); MIL.MbufFree(MilImage); /* Free defaults. */ MIL.MappFreeDefault(MilApplication, MilSystem, MilDisplay, MIL.M_NULL, MIL.M_NULL); } } } ",
      "wordCount": 686
    }
  ]
}]