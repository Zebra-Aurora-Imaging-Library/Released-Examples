[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_Mdlocr_Python_mdlocr_py",
      "version": "2024020714",
      "title": "mdlocr.py",
      "location": "Sample Code from MIL Examples",
      "text": " Top #!/usr/bin/env python3 # -*- coding: utf-8 -*- ########################################################################## # # File name: Mdlocr.py # # Synopsis: This program uses the Deep Learning Ocr module to read a product # expiry date. # First all strings are read, then a model is defined based on the first # read to filter out the target string using its size and dimensions. # # Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. # All Rights Reserved ########################################################################## import mil as MIL # MIL image file specifications. IMAGE_FILE_TO_READ = MIL.M_IMAGE_PATH + \"ExpiryDateAndLot2.mim\" # Max string sizes. STRING_MAX_SIZE = 256 # Result number to define model FIRST_READ_TARGET_INDEX = 0 def Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, StringMatchingMode): # Perform the read operation on the specified target image. MIL.MdlocrRead(MilDlocrContext, MilImage, MilDlocrResult, StringMatchingMode) # Get number of strings read and show the result. NumberOfStringRead = MIL.MdlocrGetResult(MilDlocrResult, MIL.M_GENERAL, MIL.M_GENERAL, MIL.M_STRING_NUMBER + MIL.M_TYPE_MIL_INT) # Clear the display overlay. MIL.MdispControl(MilDisplay, MIL.M_OVERLAY_CLEAR, MIL.M_DEFAULT) if(NumberOfStringRead &gt;= 1): print(\"The image was read successfully.\\n\") # Draw read result. MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_CYAN) MIL.MdlocrDraw(MIL.M_DEFAULT, MilDlocrResult, MilOverlayImage, MIL.M_DRAW_STRING, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DEFAULT) MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_GREEN) MIL.MdlocrDraw(MIL.M_DEFAULT, MilDlocrResult, MilOverlayImage, MIL.M_DRAW_STRING_BOX, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DEFAULT) MIL.MgraControl(MIL.M_DEFAULT, MIL.M_COLOR, MIL.M_COLOR_RED) MIL.MdlocrDraw(MIL.M_DEFAULT, MilDlocrResult, MilOverlayImage, MIL.M_DRAW_STRING_INDEX, MIL.M_ALL, MIL.M_DEFAULT, MIL.M_DEFAULT) # Print the read result. print(\" String\") print(\" -----------------------------------\") for i in range(NumberOfStringRead): StringResult = MIL.MdlocrGetResult(MilDlocrResult, i, MIL.M_GENERAL, MIL.M_STRING) print(\" {StringResult}\".format(StringResult=StringResult)) print() else: print(\"Error: no strings were read.\") def MdlocrExample(): # Print module name. print(\"[EXAMPLE NAME]\") print(\"Mdlocr\\n\") print(\"[SYNOPSIS]\") print(\"This program uses the Deep Learning Ocr module to read a product\") print(\"expiry date.\") print(\"First all strings are read, then a model is defined based on the first\") print(\"read to filter out the target string using its size and dimensions.\\n\") print(\"[MODULES USED]\") print(\"Deep Learning OCR, Buffer, Display, Graphics.\\n\") # Allocate defaults. MilApplication, MilSystem, MilDisplay = MIL.MappAllocDefault(MIL.M_DEFAULT, DigIdPtr=MIL.M_NULL, ImageBufIdPtr=MIL.M_NULL) # Restore the font definition image. MilImage = MIL.MbufRestore(IMAGE_FILE_TO_READ, MilSystem) # Display the image and prepare for overlay annotations. MIL.MdispSelect(MilDisplay, MilImage) MIL.MdispControl(MilDisplay, MIL.M_OVERLAY, MIL.M_ENABLE) MilOverlayImage = MIL.MdispInquire(MilDisplay, MIL.M_OVERLAY_ID) # Allocate a new empty dlocr context. MilDlocrContext = MIL.MdlocrAlloc(MilSystem, MIL.M_OCR_NET1_BALANCED_V1, MIL.M_DEFAULT) # Allocate a new empty dlocr result buffer. MilDlocrResult = MIL.MdlocrAllocResult(MilSystem, MIL.M_DLOCR_READ_RESULT, MIL.M_DEFAULT) # Set the context's target image max size X and Y # Note that these dimension can be superior to encompass several images. MaxSizeX = MIL.MbufInquire(MilImage, MIL.M_SIZE_X) MaxSizeY = MIL.MbufInquire(MilImage, MIL.M_SIZE_Y) MIL.MdlocrControl(MilDlocrContext, MIL.M_TARGET_MAX_SIZE_X, MaxSizeX) MIL.MdlocrControl(MilDlocrContext, MIL.M_TARGET_MAX_SIZE_Y, MaxSizeY) # Preprocess the dlocr context. MIL.MdlocrPreprocess(MilDlocrContext, MIL.M_DEFAULT) # First read. Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, MIL.M_READ_ALL) # Pause to show results. print( \"First read without string model, the best before date was detected among\") print( \"others. We note the associated index (in red). It will be used in the next step\") print( \"to filter out the targeted string.\") print(\"Press any key to continue.\\n\") MIL.MosGetch(); # Define model from result. MIL.MdlocrDefineModelFromResult(MilDlocrContext, MIL.M_DEFAULT, MilDlocrResult, FIRST_READ_TARGET_INDEX, MIL.M_DEFAULT) # This modification necessitate a new Preprocess. MIL.MdlocrPreprocess(MilDlocrContext, MIL.M_DEFAULT) # Second read. Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, MIL.M_MODEL_BASED) # Pause to show results. print( \"We defined a string model from the result to filter out based on string size\") print( \"and character dimensions.\") print( \"Second read with the string model. Targeted string is detected.\") print(\"Press any key to end.\\n\") MIL.MosGetch() # Free all allocations. MIL.MdlocrFree(MilDlocrContext) MIL.MdlocrFree(MilDlocrResult) MIL.MbufFree(MilImage) # Free defaults. MIL.MappFreeDefault(MilApplication, MilSystem, MilDisplay, MIL.M_NULL, MIL.M_NULL) return 0 if __name__ == \"__main__\": MdlocrExample() ",
      "wordCount": 537
    }
  ]
}]