[{
  "id": "Reference_sys",
  "version": "2024020714",
  "title": "sys",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\sys\\ModuleInformation.htm",
  "text": " Msys functions Synopsis The functions prefixed with Msys make up the System module. The System module supports the allocation and inquiry of systems. The system control represents a physical board, most commonly an imaging frame grabber. The system control also allows you to access the graphics controller and Host CPU. You can use the system control to specify the physical device to access, and to set some system-wide settings. Once the system control is configured, you can add other components to your application, such as a digitizer control, to control specific aspects of the device. Functions MsysAlloc MsysControl MsysControlFeature MsysFree MsysGetHookInfo MsysHookFunction MsysInquire MsysInquireFeature ",
  "wordCount": 106,
  "subEntries": [
    {
      "id": "Reference_sys_MsysAlloc",
      "version": null,
      "title": "MsysAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysAlloc.htm",
      "text": " MsysAlloc Synopsis Allocate a MIL system. Syntax MIL_ID MsysAlloc( MIL_ID&nbsp;ContextAppId, //in MIL_CONST_TEXT_PTR&nbsp;SystemDescriptor, //in MIL_INT&nbsp;SystemNum, //in MIL_INT64&nbsp;InitFlag, //in MIL_ID&nbsp;*SysIdPtr //out ) Description This function allocates a MIL system so that it can be used by subsequent MIL functions. This function can allocate a MIL system, which consists of a Matrox imaging board (or third-party board), the Host CPU and memory, and any available graphics controller. Alternatively, this function can allocate a Host-type system, which consists of the Host CPU and memory, and any available graphics controller. A system must be allocated before any buffers, displays, or digitizer can be allocated on it. Before allocating a system, an application must be allocated, using MappAlloc() or MappAllocDefault(). To use the default system, you must allocate it using M_SYSTEM_DEFAULT. Note, upon allocation of an application, a default Host system is automatically allocated. Rather than using MsysAlloc() to allocate a Host system, you can use this default Host system, by specifying M_DEFAULT_HOST wherever a Host system identifier is required. After allocating the system, you should check if the operation was successful, using MappGetError() or by verifying that the system identifier returned is not M_NULL (or nullptr if M_UNIQUE_ID was specified). When the system is no longer required, release it using MsysFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the system's lifetime and you must not manually free it. Parameters Parameters ContextAppId Specifies the identifier of the application context to use. For specifying the application context Value Description M_DEFAULT Specifies the current application context. Application Context Identifier Specifies the application context identifier. SystemDescriptor Specifies the type of system to allocate. Set this parameter to one of the following values: For specifying the type of system to allocate Value Description MIL system-specifictooltip (‡) M_SYSTEM_CLARITY_UHD Allocates a MIL Clarity UHD system. ‡ M_SYSTEM_CONCORD_POE Allocates a MIL Concord POE system. Note that to use Matrox Concord PoE for acquisition, you must allocate and use a MIL GigE Vision system (M_SYSTEM_GIGE_VISION) instead; refer to information denoted for a GigE Vision system. You only need to allocate and use a MIL Concord PoE system (M_SYSTEM_CONCORD_POE) to use the other functionality on the board and to inquire about the board itself. So information in this reference, for use with a MIL Concord PoE system, is denoted MIL Concord PoE with ToE since it is typically only applicable to this model of the board. If the information is applicable to the Matrox Concord PoE base model, it will be explicitly specified. For more information, see the Using a MIL Concord PoE system with the Matrox Concord PoE base model section of the Matrox Concord PoE chapter in the MIL Hardware-specific Notes. ‡ M_SYSTEM_DEFAULT Specifies the default system. This value is set during MIL installation and using the MILConfig utility. Note that the end-user can always change this value. ‡ M_SYSTEM_GENTL Allocates a MIL GenTL system. This allocation opens general communication with a GenTL Producer (library). ‡ M_SYSTEM_GEVIQ Allocates a MIL GevIQ system. ‡ M_SYSTEM_GIGE_VISION Allocates a MIL GigE Vision system. This allocation opens general communication with all the GigE Vision-compliant cameras (or devices) found on your subnet (through one or more Gigabit Ethernet network adapters in your computer). ‡ M_SYSTEM_HOST Specifies a Host system. Note that a Host system has no hardware-supported acquisition capabilities, however some acquisition capabilities are available when using a simulated digitizer, allocated using MdigAlloc() with M_EMULATED. ‡ M_SYSTEM_INDIO Allocates a MIL Indio system. If you need to capture images from a GigE Vision camera, you will need to allocate M_SYSTEM_GIGE_VISION as well. ‡ M_SYSTEM_IRIS_GTX Allocates a MIL Iris GTX system. ‡ M_SYSTEM_MORPHIS Allocates a MIL Morphis system. ‡ M_SYSTEM_RADIENTCXP Allocates a MIL Radient eV-CXP system. ‡ M_SYSTEM_RADIENTEVCL Allocates a MIL Radient eV-CL system. ‡ M_SYSTEM_RAPIXOCL Allocates a MIL Rapixo CL Pro system. ‡ M_SYSTEM_RAPIXOCXP Allocates a MIL Rapixo CXP system. ‡ M_SYSTEM_SOLIOS Allocates a MIL Solios system. ‡ M_SYSTEM_USB3_VISION Allocates a MIL USB3 Vision system. This allocation opens general communication with all the USB3 Vision-compliant cameras (or devices) connected to your computer. ‡ M_SYSTEM_V4L2 Allocates a Video4Linux2 system. This allocation opens general communication with all the V4L2-compliant cameras (or devices) connected to your computer. ‡ MIL_TEXT(\"dmilpcie://[Passkey:]RemoteComputerName[:Port]/MILSystemType\") 1 [This is only applicable to Zebra Supersight] Allocates a DMIL remote system on a remote Zebra Supersight SHB that will communicate with the local SHB, using the PCIe protocol. To allocate a DMIL remote system on a Zebra Supersight SHB, that SHB must have a valid DMIL installation and be in the same Zebra Supersight as the local SHB. When specifying the string that indicates the remote SHB: If required, replace [Passkey] with the passkey for the remote SHB. The passkey is an alphanumeric string of up to 16 characters in length. This passkey is set by the MILConfig utility in the server settings page. If a passkey was not set for the remote system, omit the passkey and the \":\" that follows it. Replace RemoteComputerName with the remote SHB's name. This protocol does not support connections to \"localhost\" or to IP addresses. If required, replace [Port] with the port that the local computer should access on the remote computer to initiate new connections, unless the default server connection port is appropriate; in which case, omit the port number and the \":\" that follows it. Replace MILSystemType with any valid MIL system type listed in this table. If the remote system is the Host CPU of another SHB (without a Matrox frame grabber installed) use M_SYSTEM_HOST. The \"://\" and \"/\" must be included. Prior to allocating a DMIL remote system, certain conditions must be met. For more information, see Chapter 62: Distributed MIL. ‡ MIL system specific Note that to allocate this system, the Distributed MIL server cannot be running as a service on the remote computer; you must either set it to run at logon, or start it manually. To set it to run at logon, open the MILConfig utility and select Run at every logon with user credentials in the Server Settings pane, found under the Distributed MIL item. To start it manually, you must logon to the remote computer and, from the MILConfig utility, click on the Start Server button, found in the Server Settings pane under the Distributed MIL item. For more information, see the Setting up the Distributed MIL server on remote computers subsection of the Preparing computers for Distributed MIL section of Chapter 62: Distributed MIL. ‡ MIL_TEXT(\"dmilshm://[Passkey:]localhost[:Port]/MILSystemType\") 1 Allocates a DMIL remote system for a separate process on the local computer, using the DMIL SHM protocol. This protocol allows you to communicate between a client and server process on the same computer using shared memory. To allocate a DMIL remote system on a computer, that computer must have a valid DMIL installation. When specifying the string that indicates the local computer: If required, replace [Passkey] with the passkey for the DMIL server on the local computer. The passkey is an alphanumeric string of up to 16 characters in length. This passkey is set by the MILConfig utility in the server settings page. If a passkey was not set for the DMIL server, omit the passkey and the \":\" that follows it. Following \"localhost:\", replace [Port] with the port that the local computer should access to initiate new connections with the DMIL server, unless the default connection port is the listening port of the DMIL server; in which case, omit the port number and the \":\" that follows it. Replace MILSystemType with any valid MIL system type listed in this table, such as M_SYSTEM_MORPHIS. The \"://\" and \"/\" must be included. The DMIL SHM protocol only supports connections to localhost. Prior to allocating a DMIL remote system, certain conditions must be met. For more information, see Chapter 62: Distributed MIL. ‡ MIL system specific Note that to allocate this system, the Distributed MIL server cannot be running as a service on the remote computer; you must either set it to run at logon, or start it manually. To set it to run at logon, open the MILConfig utility and select Run at every logon with user credentials in the Server Settings pane, found under the Distributed MIL item. To start it manually, you must logon to the remote computer and, from the MILConfig utility, click on the Start Server button, found in the Server Settings pane under the Distributed MIL item. For more information, see the Setting up the Distributed MIL server on remote computers subsection of the Preparing computers for Distributed MIL section of Chapter 62: Distributed MIL. ‡ MIL_TEXT(\"dmiltcp://[Passkey:]RemoteComputerName[:Port]/MILSystemType\") 1 Allocates a DMIL remote system on a remote or local computer, using the TCP/IP protocol. To allocate a DMIL remote system on a computer, that computer must have a valid DMIL installation. When specifying the string that indicates the remote computer (or local computer for a DMIL server also running locally): If required, replace [Passkey] with the passkey for the remote computer. The passkey is an alphanumeric string of up to 16 characters in length. This passkey is set by the MILConfig utility in the server settings page. If a passkey was not set for the remote computer, omit the passkey and the \":\" that follows it. If you are attempting to connect to a local computer, specify the passkey for the DMIL server on the local computer. Replace RemoteComputerName with the remote computer's name or IP address; MIL supports both IPv4 and IPv6 addresses. A typical IPv4 string has the format n.n.n.n, where n is a number between 0 and 255. A typical IPv6 string has the format x:x:x:x:x:x:x:x, where x is a hexadecimal number between 0000 and FFFF. If you are supplying an IPv6 address, you must use square brackets to separate the address from the port. If you are attempting to connect to the local computer, set this to localhost. If required, replace [Port] with the port that the local computer should access on the remote computer to initiate new connections, unless the default connection port is the listening port of the DMIL server on the remote computer; in which case, omit the port number and the \":\" that follows it. If you are attempting to connect to a local computer, specify the listening port of the DMIL server on the local computer. Replace MILSystemType with any valid MIL system type listed in this table, such as M_SYSTEM_SOLIOS. The \"://\" and \"/\" must be included. Prior to allocating a DMIL remote system, certain conditions must be met. For more information, see Chapter 62: Distributed MIL. ‡ MIL system specific Note that to allocate this system, the Distributed MIL server cannot be running as a service on the remote computer; you must either set it to run at logon, or start it manually. To set it to run at logon, open the MILConfig utility and select Run at every logon with user credentials in the Server Settings pane, found under the Distributed MIL item. To start it manually, you must logon to the remote computer and, from the MILConfig utility, click on the Start Server button, found in the Server Settings pane under the Distributed MIL item. For more information, see the Setting up the Distributed MIL server on remote computers subsection of the Preparing computers for Distributed MIL section of Chapter 62: Distributed MIL. ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). SystemNum Specifies the number (rank) or user-defined name of the target board of the specified system type. This parameter can be set to one of the following: For specifying the number of the target board Value Description MIL system-specifictooltip (‡) M_DEFAULT Specifies the default board. The default board is set in the MILConfig utility. ‡ M_DEVn Specifies the device number (rank) of the board. You can set n to one of the following values: 0 &lt;= n &lt;=15. ‡ MIL system specific Note that only M_DEV0 is valid. ‡ MIL_TEXT(\"BoardIdentifierString\") 1 Specifies the user-defined name of the board. When allocating the board with a name, the InitFlag must be set to M_DEVICE_NAME. The name must also have been previously assigned and written to the board. Typically, this is done from a different executable that allocates a system for the board using M_DEVn, and then assigns a name to the board using MsysControl() with M_DEVICE_NAME. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"BoardIdentifierString\")). ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Combination value for M_DEVn. You can add the following value to the above-mentioned value to identify the GenTL library for which to allocate a MIL GenTL system. All third-party proprietary GenTL libraries installed on your computer are sorted and indexed by MIL. Use the GenTL Producer index number to identify the library that your MIL system should use to communicate with the hardware devices on the specified transportation layer. These libraries are indexed and sorted for reference by MIL (the GenTL Consumer). In all cases, the same number and type of libraries should be installed on every computer that will run your application; the order in which they are installed, however, is not important. To determine the number of GenTL libraries installed on your computer, use MappInquire() with M_GENTL_PRODUCER_COUNT or use the General Default Values page of the MILConfig utility. For identifying the instance of the GenTL library to use Combination value Description MIL system-specifictooltip (‡) M_GENTL_PRODUCER( MIL_INT IndexValue ) Specifies the GenTL Producer (library) for which to allocate this MIL GenTL system. ‡ Parameters IndexValue Specifies the index of the GenTL Producer. ‡ 0 &lt;= Value &lt;= 127 Specifies the index. ‡ InitFlag Specifies how to perform the allocation. To specify the type of initialization to perform on the selected system, set this parameter to one of the following: For specifying the type of initialization setup Value Description MIL system-specifictooltip (‡) M_DEFAULT Specifies the default value. ‡ MIL system specific Same as M_COMPLETE. ‡ Same as M_MIXED. ‡ Specifies to initialize the Video4Linux2 system to its default state. ‡ M_CL Specifies to initialize Camera Link transport layer technology. ‡ M_COMPLETE Specifies to initialize the system completely; the system is initialized to its default state and any required resident software is downloaded. At least one complete initialization is necessary after you power-up your system. ‡ M_CXP Specifies to initialize CoaXPress transport layer technology. ‡ M_GEV Specifies to initialize Ethernet transport layer technology. ‡ M_MIXED Specifies to initialize the transport layer technology specified by the GenTL Producer (library). ‡ M_U3V Specifies to initialize USB transport layer technology. ‡ Combination value that can be used alone or as combination value for M_COMPLETE. You can use the following value on its own, or add it to the above-mentioned value, to set that the target board is identified using its user-defined name. This InitFlag is also available for the Matrox Concord PoE base model. For specifying that the target board is identified using its user-defined name Value Description MIL system-specifictooltip (‡) M_DEVICE_NAME Specifies that the SystemNum parameter identifies the target board using its user-defined name. ‡ SysIdPtr Specifies the address of the variable in which to write the system identifier or specifies the data type that the function should use to return the system identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated system; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated system; in this case, a MIL smart identifier of type MIL_UNIQUE_SYS_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the system (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated system. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the system identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_SYS_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Remark If you are creating a DLL that includes a call to MsysAlloc(), ensure that the call is not made from the DllMain() function, because MsysAlloc() might load a required DLL and you cannot load a DLL from DllMain(). If necessary, call MsysAlloc() from an initialization function in your DLL instead. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextAppId For specifying the application context - SystemDescriptor For specifying the type of system to allocate - SystemNum For specifying the number of the target board + For identifying the instance of the GenTL library to use - InitFlag For specifying the type of initialization setup + For specifying that the target board is identified using its user-defined name - SysIdPtr For retrieving the identifier or specifying how to return it Return value Remarks Compilation information M_DEVn ",
      "wordCount": 2913,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysControl",
      "version": null,
      "title": "MsysControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysControl.htm",
      "text": " MsysControl Synopsis Control a system setting. Syntax void MsysControl( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function allows you to control the specified system setting. Note that, when a control type has only one supported control value on a given system, it is not documented in this function because it cannot be changed to another value. Instead, it can only be inquired. To inquire the current value of a particular system setting, use MsysInquire(). You can also interactively control and test most of the system settings in real-time, using Matrox Intellicam's Feature Browser. Note that presented above is an example prototype of this function. You can call MsysControl() with the same prototype as any of the type-specific functions below, without using the function's type-specific name; that is, use MsysControl() and not, for example, MsysControlInt64(). MIL automatically casts the data into the appropriate type. This is true except when using a C compiler. When using a C compiler, you must always call this function with its type-specific name (you cannot use the standard name of this function). Parameters Parameters SysId Specifies the system identifier. This parameter should be set to one of the following values: For the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlType Specifies the type of setting to control. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the new value to assign to the system setting specified by the ControlType parameter. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ControlType and ControlValue parameters. For general system settings For discovering connected devices For routing I/O signals and setting their mode For resetting CXP connection error counts For setting the state of specified user-bits in a static-user-output register For controlling the settings of a timer For controlling the settings of a rotary decoder For controlling the settings of a data latch associated with rotary encoders For UART settings For Watchdog settings For configuring and sending an action command to a GigE Vision camera For specifying a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module The following control types allow you to control the general system settings. For general system settings ControlType Description MIL system-specifictooltip (‡) ControlValue M_ALLOCATION_OVERSCAN Sets whether image buffers, allocated on the system, are allocated by default with an overscan region. Specify the size of the overscan region using M_ALLOCATION_OVERSCAN_SIZE. Note that you can override this setting when allocating a buffer using the M_ALLOCATION_OVERSCAN attribute. ‡ M_DEFAULT Same as M_ENABLE. ‡ M_DISABLE Specifies that image buffers allocated on the system will have no overscan region. ‡ M_ENABLE Specifies that image buffers are allocated on the system with an overscan region. ‡ M_ALLOCATION_OVERSCAN_SIZE Sets the size of the overscan region, added around all subsequently allocated image buffers (MbufAlloc...()). The overscan settings previously allocated image buffers are not changed. For more information, see the Buffer overscan region section of Chapter 23: Data buffers. To enable or disable the allocation of an overscan region, change the setting of M_ALLOCATION_OVERSCAN. ‡ M_DEFAULT Specifies the default size of the overscan region. ‡ MIL system specific The default size is 8 pixels. ‡ Value Specifies the size of the overscan region, in pixels. For example, if you specify a size of 2, a 2-pixel overscan border is added around subsequently allocated image buffers. ‡ M_DEFAULT_PITCH_BYTE_MULTIPLE Sets the pitch (or stride) multiple (in bytes) for the buffers allocated on the system. The pitch is the number of bytes between the beginnings of any two adjacent rows of the buffer's data. The pitch multiple is the factor by which the pitch of a buffer must be divisible. When a buffer is allocated, if the specified width is not a multiple of this value, padding is added to the buffer so that the buffer's pitch meets this constraint. You would typically change this value when you need to reduce the padding of your buffer. Note that, allocating a buffer with an overscan region can also be a cause of buffer padding. For more information, refer to M_ALLOCATION_OVERSCAN and the Accessing a MIL buffer directly section of Chapter 23: Data buffers. When dealing with an on-board operation, changing the pitch multiple might force on-board operations to be performed off-board due to hardware limitations, thereby increasing the amount of time the operation might take. ‡ M_DEFAULT Specifies the default value for the pitch multiple. The default value is highly MIL system-dependent. Always inquire the current pitch multiple before setting it, using MsysInquire() with M_DEFAULT_PITCH_BYTE_MULTIPLE. ‡ Value Specifies the pitch multiple, in bytes. ‡ M_DEVICE_NAME Sets a user-defined name for the board. The user-defined name is written to the board, making it persistent, and allows the board to be allocated using this user-defined name in the future. The name is typically assigned and written to the board from a separate executable that allocates a system for the board with M_DEVn and then calls MsysControl() with the control type (M_DEVICE_NAME). This control type is also available for the Matrox Concord PoE base model. ‡ MIL_TEXT(\"DeviceName\") 1 Specifies the name of the board. Note that this must be a unique name with a string that can be up to M_DEVICE_NAME_MAX_SIZE characters. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"DeviceName\")). ‡ M_GC_FEATURE_BROWSER [This is only applicable to Windows] Sets whether to open or close a dialog box that allows you to view and edit the GenTL SFNC-compliant system and interface configuration information interactively. This window is referred to as the Matrox Feature Browser. ‡ M_DEFAULT Same as M_OPEN. ‡ M_CLOSE Closes Matrox Feature Browser. ‡ M_OPEN Opens Matrox Feature Browser. You must specify a combination value from the following table: To set whether the Feature Browser should be synchronous or asynchronous ‡ M_GC_FEATURE_EXECUTE_POLLING_MODE Sets whether the executable feature is executed synchronously or asynchronously. ‡ MIL system specific For Radient eV-CXP, this constant is only available as of Update 73. ‡ M_DEFAULT Same as M_MANUAL. ‡ M_AUTOMATIC Specifies that the specific executable camera feature is executed synchronously. When in automatic mode, the executable feature is executed synchronously. MIL polls the feature to establish if the executable feature has completed, returning control only when the operation is complete. Get the polling interval using M...InquireFeature() with M_FEATURE_POLLING_INTERVAL. ‡ M_MANUAL Specifies that the executable camera feature is executed asynchronously. When in manual mode, the executable feature is executed asynchronously, and control is returned once the executable operation begins. To determine whether the executable feature completed, use M...InquireFeature() with M_FEATURE_EXECUTE_COMPLETED. ‡ M_LED_USER Sets the color of the user LED on your Matrox Iris GTX. ‡ M_DEFAULT Same as M_OFF. ‡ M_GREEN Specifies to turn the user LED green. ‡ M_OFF Specifies to turn the user LED off. ‡ M_ORANGE Specifies to turn the user LED orange. ‡ M_RED Specifies to turn the user LED red. ‡ M_MODIFIED_BUFFER_HOOK_MODE Sets whether to run user-defined functions hooked to a buffer modification on separate threads, up to the number of CPU cores present in the computer. This is particularly useful when functions are hooked using MdigProcess(). ‡ M_DEFAULT Same as M_SINGLE_THREAD. ‡ M_MULTI_THREAD Specifies to run user-defined functions hooked to a buffer modification on separate threads. The hooked functions are executed by any available CPU core. MIL cannot guarantee the processing order of any image on such a computer, because they are executed concurrently. If required, use Microsoft Windows functions to synchronize the threads. Note that by default, this control value will allocate, as necessary, up to 16 threads, or the total number of CPU cores in the computer, whichever is least. ‡ M_SINGLE_THREAD Specifies that only one thread should be created and that all user-defined functions hooked to buffer modifications are run on the same thread. ‡ M_POWER_OVER_CABLE Sets whether the board provides power to connected devices. ‡ MIL system specific You must specify a combination value from the following table: To specify which connector or port to control ‡ [This is only applicable to Zebra 4Sight] For a Host system, this sets whether PoE (Power over Ethernet) is enabled on the specified port. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ For Matrox Concorde POE, this sets whether PoE (Power over Ethernet) is enabled on all ports. This control type is also available for the Matrox Concord PoE base model. ‡ For Matrox Rapixo CXP, this sets whether PoCXP (Power over CXP) is automatically enabled when a PoCXP-compliant camera is connected to the specified connector. ‡ M_DEFAULT Specifies the default value. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4sight EV6/EV7, the default value is set in the UEFI. On legacy computers, this was referred to as a BIOS. ‡ For Matrox Concorde POE, this is the same as M_ON. ‡ For Matrox Rapixo CXP, this is the same as M_AUTOMATIC. ‡ M_AUTOMATIC Specifies to automatically enable or disable PoCXP on this CXP connector, depending on detected device support. ‡ M_OFF Specifies not to provide power to connected devices. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4sight EV6/EV7, this specifies to disable PoE on the specified port. ‡ For Matrox Concorde POE, this specifies to disable PoE on all ports. ‡ For Matrox Rapixo CXP, this specifies to manually disable PoCXP on the specified CXP connector. ‡ M_ON Specifies to provide power to connected devices. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4sight EV6/EV7, this specifies to enable PoE on the specified port. ‡ For Matrox Concorde POE, this specifies to enable PoE on all ports. ‡ For Matrox Rapixo CXP, this specifies to manually disable PoCXP on the specified CXP connector. You should typically use the default setting (M_AUTOMATIC) which specifies to automatically detect whether the connected camera supports PoCXP. If you manually enable PoCXP and connect a device that is not fully CXP-compliant, the device might be damaged. ‡ M_RESET Specifies to reset an over- or under-current condition. To learn whether there is an over- or under-current condition, use MsysInquire() with M_POWER_OVER_CABLE_STATUS. Typically, to prevent the over- or under-current condition from immediately recurring, you should first restart PoCXP for this connector by setting this control type to M_OFF and then returning it to its previous setting (M_AUTOMATIC is recommended). If the condition persists, discontinue using PoCXP with your camera by leaving this control type set to M_OFF. ‡ M_THREAD_MODE Sets whether threads allocated on the system can execute in asynchronous mode. If you specify that threads on the system can execute in asynchronous mode, the MthrControl() M_THREAD_MODE control type setting of each of its threads is taken into account; otherwise, their M_THREAD_MODE control type setting is ignored. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ M_DEFAULT Specifies the default value. ‡ MIL system specific Same as M_ASYNCHRONOUS. ‡ Same as M_SYNCHRONOUS. ‡ M_ASYNCHRONOUS Specifies that threads allocated on the system can execute in asynchronous mode. In asynchronous mode, control is returned to the Host immediately after a MIL function is sent to the processor of the system (when the system and function allow an immediate return). ‡ M_SYNCHRONOUS Specifies that threads allocated on the system can only execute in synchronous mode. In synchronous mode, the execution of a MIL function sent to the processor of a system must be completed (execution terminated) before returning control to the Host. ‡ M_TIMEOUT Sets the maximum amount of time for the Host to wait for a synchronous function to return before generating a time-out error, in sec. Note that this value only works with functions that are performed on-board, such as MbufCopy() when copying from (or to) on-board memory or functions using an on-board processing FPGA. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ M_DEFAULT Specifies the default value. ‡ MIL system specific The default value is 20 sec. ‡ Same as M_INFINITE. ‡ M_INFINITE Waits indefinitely. ‡ Value Specifies the time to wait, in sec. ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Combination values for M_POWER_OVER_CABLE. You must add one of the following values to the above-mentioned value to specify which connector or port to control. For specifying which connector or port to control Combination value Description MIL system-specifictooltip (‡) M_ALL Specifies to control all relevant connectors or ports on your board or industrial computer. ‡ M_CONNECTIONn Specifies to control connector n, where n corresponds to a physical connector or port on your board or industrial computer. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For a Zebra 4sight EV6/EV7, n can be a value from 1 to 4, depending on the number of PoE-enabled Ethernet ports on the version of your industrial computer. ‡ For Matrox Rapixo CXP, n can be a value from 0 to 3, depending on the number of CXP connectors on the version of your board. ‡ Combination values for M_GC_FEATURE_BROWSER. You can add one of the following values to the above-mentioned value to specify which instance of the GenTL interface configuration file (XML file) is associated with the feature. For specifying which configuration information file to access Combination value Description MIL system-specifictooltip (‡) M_GENTL_INTERFACE_NUMBER( MIL_INT IndexValue ) Specifies which instance of the GenTL interface configuration file is associated with the feature. ‡ Parameters IndexValue Specifies the index of the GenTL interface configuration file. ‡ 0 &lt;= Value &lt;= MsysInquire(M_GENTL_INTERFACE_COUNT) Specifies the index. ‡ M_GENTL_SYSTEM Specifies to display the GenTL system configuration information. ‡ Combination values for [when ControlType=M_GC_FEATURE_BROWSER and ControlValue=M_OPEN: M_OPEN]. You must add one of the following values to the above-mentioned value to set whether the Feature Browser should be synchronous or asynchronous. For specifying whether Matrox Feature Browser should be synchronous or asynchronous Combination value Description MIL system-specifictooltip (‡) M_ASYNCHRONOUS Specifies that this function returns immediately once Matrox feature browser window opens. ‡ M_SYNCHRONOUS Specifies that this function is blocked until Matrox feature browser window closes. ‡ Combination value for [when ControlType=M_MODIFIED_BUFFER_HOOK_MODE and ControlValue=M_MULTI_THREAD: M_MULTI_THREAD]. You can add the following value to the above-mentioned value to set the number of hook threads to allocate. For specifying the number of hook threads Combination value Description MIL system-specifictooltip (‡) Value &gt;= 1 Specifies the number of hook threads to allocate. Note that this value cannot exceed the number of CPU cores available. ‡ The following control type allows you to refresh the list of discovered devices. For discovering connected devices ControlType Description MIL system-specifictooltip (‡) ControlValue M_DISCOVER_DEVICE Refresh the list of discovered devices that can be accessed by the specified system (for example, all cameras connected to a frame grabber, or all GigE Vision devices accessible on the local subnet). After you have refreshed the list, you can inquire information about connected devices using MsysInquire() with settings from For discovering connected devices. Note that this does not affect which devices are available for you to allocate using MdigAlloc(); you do not need to discover a device before allocating it. ‡ M_DEFAULT Specifies the default mode of operation for M_DISCOVER_DEVICE. ‡ The following control types allow you to set the mode and the routing of your Matrox imaging board's I/O signals (such as, auxiliary signal). Once the routing and mode are determined for an I/O signal, the MIL function that you should use to act upon an input signal or setup the source of an output signal depends on the functionality. For example, you can use MsysControl() with M_USER_BIT... control types, MdigControl() with M_GRAB_TRIGGER... control types, or MdigControl() with M_TIMER... control types. Note that for other Matrox imaging boards that have auxiliary I/O signals, but are not supported with the constants below, see MdigControl(). Each Matrox imaging board and MIL driver has its own list of limitations regarding the signals you can control with this function. While general limitations are listed in the table below, for a complete list of the available signals and their limitations, see the Connectors and signal names section of the MIL Hardware-specific Notes chapter for your Matrox imaging board or MIL driver. For routing I/O signals and setting their mode ControlType Description MIL system-specifictooltip (‡) ControlValue M_IO_DEBOUNCE_TIME Sets the amount of time that the specified auxiliary input signal is debounced. You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ MIL system specific [This is only applicable to Zebra 4Sight] When a signal is debounced on Zebra 4Sight EV6/EV7, after detecting a valid input signal edge any other transitions are considered noise and are suppressed for the specified time, to ignore any additional transitions caused by the contact bounce of mechanical switches. ‡ When a signal is debounced on Matrox Iris GTX, after detecting a valid input signal edge any other transitions are considered noise and are suppressed for the specified time, to ignore any additional transitions caused by the contact bounce of mechanical switches. To remove problems occurring at the edge of a signal, use M_IO_GLITCH_FILTER_STATE. ‡ Value &gt;= 0 Specifies the minimum amount of time to ignore any additional signal transitions after accepting a signal transition, in nsec. ‡ MIL system specific [This is only applicable to Zebra 4Sight] In the case of Zebra 4Sight EV6/EV7, the maximum value is 167772150. Note that the number must be a multiple of 30. ‡ In the case of Matrox Iris GTX, the maximum value is 268435440. Note that the number must be a multiple of 16. ‡ M_IO_GLITCH_FILTER_STATE Sets whether to enable a glitch filter on input signals. A glitch is an unexpected signal transition of a short duration. Enabling the glitch filter will eliminate glitches of less than 500 nsec on all input signals. You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies not to use a glitch filter. ‡ M_ENABLE Specifies to use a glitch filter. ‡ M_IO_INTERRUPT_ACTIVATION Sets the signal transition upon which to generate an interrupt, if interrupt generation has been enabled for the specified I/O signal. Use M_IO_INTERRUPT_STATE to enable interrupt generation. Note that this only applies to input signals. Note that this control type only has an effect when M_IO_INTERRUPT_STATE is enabled. You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ MIL system specific This control type is only available with auxiliary I/O signals 3-6. ‡ [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_ANY_EDGE Specifies to generate an interrupt upon both a low-to-high and a high-to-low signal transition. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_EDGE_FALLING Specifies that an interrupt will be generated upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that an interrupt will be generated upon a low-to-high signal transition. ‡ M_IO_INTERRUPT_STATE Sets whether to generate an interrupt upon the specified transition of the I/O signal. Use M_IO_INTERRUPT_ACTIVATION to specify the transition. Note that this only applies to input signals, or I/O signals set to input (using M_IO_MODE). You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ MIL system specific This control type is only available with auxiliary I/O signals 3-6. ‡ [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies not to generate an interrupt. ‡ M_ENABLE Specifies to generate an interrupt. ‡ M_IO_INVERTER Sets whether the specified I/O signal should be inverted. This causes the low portion of the signal (the delay period) to be high and the high portion of the signal (the active portion) to be low. You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies not to invert the specified I/O signal. ‡ M_ENABLE Specifies to invert the specified I/O signal. ‡ M_IO_MODE Sets the mode of the specified I/O signal. Note that you can only change the mode of a bidirectional (I/O) signal. You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ M_INPUT Specifies that the signal is for input. ‡ M_OUTPUT Specifies that the signal is for output. ‡ M_IO_SOURCE Sets the type of signal to route to an output signal, or a bidirectional signal set to output mode. You must specify a combination value from the following table: To set the type and number of the I/O signal to affect ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_USER_BITn. ‡ M_EXPOSURE Specifies to route the exposure signal of the camera. ‡ M_GRAB_TRIGGER_READY Specifies to route the internal grab trigger ready signal. ‡ M_IO_COMMAND_LISTn Specifies to route a bit of the I/O command register of I/O command list n, where n is the number of the I/O command list. You must specify a combination value from the following table: To specify which I/O command register bit to use ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ For Matrox Iris GTX, n must be 1. ‡ M_ROTARY_ENCODERn Specifies to route the output of rotary encoder n, where n is the number of rotary encoders available. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ For Matrox Iris GTX, n must be 1. ‡ M_TIMER_STROBE Specifies to route the internal timer strobe signal. ‡ M_TIMERn Specifies to route the output of timer n, where n is the number of timers available. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. For Zebra 4Sight EV6/EV7, n can be a value from 1 to 16. ‡ For Matrox Iris GTX, n can be a value from 1 to 8. ‡ M_USER_BITn Specifies to route the state of bit n of the main static-user-output register, where n is the bit number. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ For Matrox Iris GTX, n can be a value from 0 to 2. ‡ Combination value for the values listed in For routing I/O signals and setting their mode. You must add the following value to the above-mentioned values to set the type and number of the I/O signal to affect. For specifying the type and number of the I/O signal to affect Combination value Description MIL system-specifictooltip (‡) M_AUX_IOn Specifies to affect auxiliary signal n, where n is the signal number. For a list of the available auxiliary I/O signals, see the Connectors and signal names section of the MIL Hardware-specific Notes chapter for your Matrox imaging board. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ The following is used to reset CXP errors. For resetting CXP connection error counts ControlType Description MIL system-specifictooltip (‡) ControlValue M_TL_ERROR_CORRECTED_COUNT Resets the count of corrected duplicate character errors in the CXP control words. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of corrected duplicate character errors in the CXP control words. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_COUNT Resets the count of all errors encountered. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of all errors encountered. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_CTRL_CRC_COUNT Resets the count of CRC errors detected in a control packet. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of CRC errors detected in a control packet. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_DATA_CRC_COUNT Resets the count of CRC errors detected in a data packet. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of CRC errors detected in a data packet. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_ENCODING_COUNT Resets the count of protocol encoding errors detected. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of protocol encoding errors detected. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_EVENT_CRC_COUNT Resets the count of CRC errors detected in an event packet. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of CRC errors detected in an event packet. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_LOCK_LOSS_COUNT Resets the count of lock losses encountered. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of lock losses encountered. Note that if a non-zero value is specified, an error is generated. ‡ M_TL_ERROR_UNCORRECTED_COUNT Resets the count of uncorrected duplicate character errors in the CXP control words. You must specify a combination value from the following table: To specify the CXP input connector ‡ Value = 0 Specifies to reset the count of uncorrected duplicate character errors in the CXP control words. Note that if a non-zero value is specified, an error is generated. ‡ Combination values for the values listed in For resetting CXP connection error counts. You must add one of the following values to the above-mentioned values to specify the CXP input connector. For specifying the CXP input connector Combination value Description MIL system-specifictooltip (‡) M_ALL Specifies all CXP input connectors. ‡ M_CONNECTIONn Specifies the connection made at CXP input connector n, where n is the CXP input connector number from 0 to 3. ‡ The following control types and control values allow you to set the bits in a static-user-output register. You can route the bits to output signals or I/O signals set to output; to do so use M_IO_SOURCE with M_USER_BIT...). To establish which user-bits can be routed to a specific signal, see the connectors and signal names section of the MIL Hardware-specific Notes chapter for your Matrox imaging board. [Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. Note that for other Matrox imaging boards that have user-bits, but are not supported with the constants below, see MdigControl(). For setting the state of specified user-bits in a static-user-output register ControlType Description MIL system-specifictooltip (‡) ControlValue M_USER_BIT_STATE Sets the state of the specified bit of a static-user-output register. You must specify a combination value from the following table: To specify the bit in a static-user-output register to affect ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_OFF Specifies that the specified bit is set to off. ‡ M_ON Specifies that the specified bit is set to on. ‡ M_USER_BIT_STATE_ALL Sets the state of all the bits in the main static-user-output register. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ Value Specifies a bit-encoded value that establishes the value of all the bits of the specified static-user-output register. It is recommended to specify the value in hexadecimal notation (0x), so that it is more legible to what you are setting each bit of the register. ‡ Combination value for M_USER_BIT_STATE. You must add the following value to the above-mentioned value to specify the bit in a static-user-output register to affect. For specifying the bit in a static-user-output register to affect Combination value Description MIL system-specifictooltip (‡) M_USER_BITn Specifies to affect bit n of the main static-user-output register. ‡ The following control types and control values specify the settings for controlling timers and the signals generated from a timer (timer output signals). For more information, see the Timers and coordinating events section of Chapter 56: I/O signals and communicating with external devices. For controlling the settings of a timer ControlType Description MIL system-specifictooltip (‡) ControlValue M_TIMER_ARM Sets whether to enable the timer arming mechanism. If timer arming is enabled, then the timer will ignore its trigger signal (M_TIMER_TRIGGER_SOURCE) until a signal transition specified using M_TIMER_ARM_ACTIVATION occurs on the signal specified using M_TIMER_ARM_SOURCE. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies that timer arming is disabled. ‡ M_ENABLE Specifies that timer arming is enabled. ‡ M_TIMER_ARM_ACTIVATION Sets the signal transition upon which to arm the timer, if timer arming is enabled. Use M_TIMER_ARM to enable timer arming. Use M_TIMER_ARM_SOURCE to set which input signal will arm the timer. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_ANY_EDGE Specifies that the timer will be armed by both a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the timer will be armed upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the timer will be armed upon a low-to-high signal transition. ‡ M_LEVEL_HIGH Specifies that a timer is continuously armed during a high signal polarity. ‡ M_LEVEL_LOW Specifies that a timer is continuously armed during a low signal polarity. ‡ M_TIMER_ARM_SOFTWARE Issues a software trigger to arm the timer. To use this setting, the timer's arm source must be set to software (M_TIMER_ARM_SOURCE set to M_SOFTWARE). You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_ACTIVATE Specifies the default behavior. ‡ M_TIMER_ARM_SOURCE Sets which input signal will arm the timer, if timer arming is enabled. Use M_TIMER_ARM to enable timer arming. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the source signal used to arm the specified timer, where n is the number of the auxiliary signal. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_EXPOSURE Specifies to use the exposure signal as the trigger source. ‡ M_GRAB_TRIGGER_READY Specifies to route the internal grab trigger ready signal to the specified signal. ‡ M_SOFTWARE Specifies to use software to arm the specified timer. ‡ M_TIMER_STROBE Specifies to route the strobe's timer signal to the specified signal. ‡ M_TIMERn Specifies to use the output signal of the specified timer as the source signal to arm the timer, where n is the timer number. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 1 to 16. ‡ With Matrox Iris GTX, n can be a value from 1 to 8. ‡ M_TIMER_CLOCK_ACTIVATION Sets the edge of the signal that will increment the clock used to control the active portion of the timer's output signal. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_ANY_EDGE Specifies that the clock will be incremented by both a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the clock will be incremented by a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the clock will be incremented by a low-to-high signal transition. ‡ M_TIMER_CLOCK_FREQUENCY Sets the frequency of the clock source signal for the active portion of the timer's output signal (M_TIMER_CLOCK_SOURCE). Note that if M_TIMER_CLOCK_SOURCE is set to M_AUX_IOn or M_ROTARY_ENCODERn, and no clock source frequency is specified, the values that are normally specified or returned in units of time will be in number of ticks (clock signal transitions on the clock source). If M_TIMER_CLOCK_SOURCE is set to M_SYSCLK, changing the frequency to any value different than the system clock's frequency will cause an error. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_UNKNOWN Specifies that the signal is not periodic or the frequency is unknown. ‡ 0 &lt; Value &lt;= Frequency of M_SYSCLK Specifies the frequency, in Hz. ‡ M_TIMER_CLOCK_SOURCE Sets the source of the clock that drives the active portion of the specified timer's output signal. The clock source used for the delay can be different from the clock source used for the active portion of the timer's output signal. This is useful, for example, if you want to specify the delay in signal transitions and the active portion in nsec. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_SYSCLK. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the clock source, where n is the number of the auxiliary signal. If the signal is periodic, specify its frequency using M_TIMER_CLOCK_FREQUENCY. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the clock source, where n is the number of the rotary decoder. If the signal is periodic, specify its frequency using M_TIMER_CLOCK_FREQUENCY. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. ‡ With Matrox Iris GTX, n must be 1. ‡ M_SYSCLK Specifies to use the allocated system's clock source. ‡ M_TIMER_DELAY Sets the delay between the timer trigger and the active portion of the timer's output signal. Note, an error is generated if the specified delay cannot be respected. The clock source used for the delay can be different from the clock source used for the active portion of the timer's output signal. This is useful, for example, if you want to specify the delay in signal transitions and the active portion in nsec. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ 0 &lt;= Value &lt;= Max. value Specifies the delay. If M_TIMER_DELAY_CLOCK_SOURCE is set to M_SYSCLK or a frequency is specified using M_TIMER_DELAY_CLOCK_FREQUENCY, this value is specified in nsec. Otherwise, it is specified in number of clock ticks (signal transitions on the clock source). Use MsysInquire() to determine the maximum possible value. ‡ M_TIMER_DELAY_CLOCK_ACTIVATION Sets the signal transition that will increment the clock used to control the delay between the timer's trigger and the active portion of the timer's output signal. If M_TIMER_DELAY_CLOCK_SOURCE is set to M_FOLLOW_TIMER_CLOCK, changing this setting to a value different than the value of M_TIMER_CLOCK_ACTIVATION will cause an error. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_ANY_EDGE Specifies that the clock will be incremented by both a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the clock will be incremented by a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the clock will be incremented by a low-to-high signal transition. ‡ M_TIMER_DELAY_CLOCK_FREQUENCY Sets the frequency of the clock source signal for the delay between the timer's trigger and the active portion of the timer's output signal (M_TIMER_DELAY_CLOCK_SOURCE). Note that if M_TIMER_DELAY_CLOCK_SOURCE is set to M_AUX_IOn or M_ROTARY_ENCODERn, and no clock source frequency is specified, the values that are normally specified or returned in units of time will be in number of ticks. If M_TIMER_DELAY_CLOCK_SOURCE is set to M_SYSCLK, changing the frequency to any value different than system clock's frequency will cause an error. If M_TIMER_DELAY_CLOCK_SOURCE is set to M_FOLLOW_TIMER_CLOCK, changing the frequency to a value different than the value of M_TIMER_CLOCK_FREQUENCY will cause an error. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_UNKNOWN Specifies that the signal is not periodic or the frequency is unknown. ‡ 0 &lt; Value &lt;= Frequency of M_SYSCLK Specifies the frequency, in Hz. ‡ M_TIMER_DELAY_CLOCK_SOURCE Sets the source of the clock that drives the delay between the timer's trigger and the active portion of the specified timer's output signal. The clock source used for the delay can be different from the clock source used for the active portion of the timer's output signal. This is useful, for example, if you want to specify the delay in signal transitions and the active portion in nsec. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_FOLLOW_TIMER_CLOCK. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the clock source, where n is the number of the auxiliary signal. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_FOLLOW_TIMER_CLOCK Specifies to use the clock source specified by M_TIMER_CLOCK_SOURCE. If the clock source is set to this value and M_TIMER_CLOCK_SOURCE is changed, this clock source changes as well. Additionally, any changes to M_TIMER_CLOCK_ACTIVATION and M_TIMER_CLOCK_FREQUENCY will also be reflected in M_TIMER_DELAY_CLOCK_ACTIVATION and M_TIMER_DELAY_CLOCK_FREQUENCY. ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the clock source, where n is the number of the rotary decoder. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. ‡ With Matrox Iris GTX, n must be 1. ‡ M_SYSCLK Specifies to use the allocated system's clock source. ‡ M_TIMER_DURATION Sets the duration for the active portion of the timer's output signal. Note, an error is generated if the specified duration cannot be respected. The clock source used for the delay can be different from the clock source used for the active portion of the timer's output signal. This is useful, for example, if you want to specify the delay in signal transitions and the active portion in nsec. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ 0 &lt;= Value &lt;= Max. value Specifies the duration of the active portion of the timer output signal. If M_TIMER_CLOCK_SOURCE is set to M_SYSCLK or a frequency is specified using M_TIMER_CLOCK_FREQUENCY, this value is specified in nsec. Otherwise, it is specified in number of clock ticks (signal transitions on the clock source). Use MsysInquire() to determine the maximum possible value. ‡ M_TIMER_OUTPUT_INVERTER Sets whether the output of the timer should be inverted. This causes the low portion of the signal (the delay period) to be high and the high portion of the signal (the active portion) to be low. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies not to invert the output of the timer. ‡ M_ENABLE Specifies to invert the output of the timer. ‡ M_TIMER_STATE Sets the state of the specified timer. When a timer is enabled, the timer waits for a trigger to be received. To set the source of the trigger, use M_TIMER_TRIGGER_SOURCE. Once the trigger is received, the timer starts by outputting a low signal. This lasts for the duration of the delay period (set using M_TIMER_DELAY). The timer then changes to output a high signal for the duration of the active period (set using M_TIMER_DURATION). To invert this signal, use M_TIMER_OUTPUT_INVERTER. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies that the timer is disabled. ‡ M_ENABLE Specifies that the timer is enabled. ‡ M_TIMER_TRIGGER_ACTIVATION Sets the signal variation upon which to generate a timer trigger. The timer will be triggered when the specified signal transition occurs on the source signal specified by M_TIMER_TRIGGER_SOURCE. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_ANY_EDGE Specifies that a timer trigger will be generated both upon a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that a timer trigger will be generated upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that a timer trigger will be generated upon a low-to-high signal transition. ‡ M_LEVEL_HIGH Specifies that a timer trigger is continuously issued during a high signal polarity. ‡ M_LEVEL_LOW Specifies that a timer trigger is continuously issued during a low signal polarity. ‡ M_TIMER_TRIGGER_OVERLAP Sets how to deal with a new trigger that occurs while the associated timer has not yet expired (both its delay and duration). You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_OFF. ‡ M_LATCH Specifies that a trigger received, while the associated timer has not expired, will be latched (stored). As soon as the current timer expires, a new trigger is issued by software. ‡ M_OFF Specifies that a new trigger is ignored. ‡ M_RESET Specifies that a new trigger automatically resets the timer (regardless of whether it is in its delay or active period) and then restarts the timer. This process will repeat for each new trigger received. ‡ M_TIMER_TRIGGER_SOFTWARE Issues a software trigger for the specified timer. To use this setting, the timer's trigger source must be set to software (M_TIMER_TRIGGER_SOURCE set to M_SOFTWARE). You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_ACTIVATE Specifies the default behavior. ‡ M_TIMER_TRIGGER_SOURCE Sets the trigger source for the specified timer. The timer will be triggered when the signal transition specified using M_TIMER_TRIGGER_ACTIVATION occurs on the selected source. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source for the specified timer, where n is the number of the auxiliary signal. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_CONTINUOUS Specifies to run the specified timer in periodic mode; no actual trigger signal is used. The timer is automatically reset after the timer's duration expires. The timer loops between a delay and an active period. ‡ M_EXPOSURE Specifies to use the exposure signal as the trigger source. ‡ M_GRAB_TRIGGER_READY Specifies to route the internal grab trigger ready signal to the specified signal. ‡ M_IO_COMMAND_LISTn Specifies to use a bit of the I/O command register of I/O command list n, where n is the number of the I/O command list. You must specify a combination value from the following table: To specify which I/O command register bit to use ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. ‡ With Matrox Iris GTX, n must be 1. ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the trigger source, where n is the number of the rotary decoder. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. ‡ For Matrox Iris GTX, n must be 1. ‡ M_SOFTWARE Specifies to use a software trigger as the trigger source. Use M_TIMER_TRIGGER_SOFTWARE to issue the trigger. ‡ M_TIMER_STROBE Specifies to route the strobe's timer signal to the specified signal. ‡ M_TIMERn Specifies to use the output signal of the specified timer as the trigger source, where n is the timer number. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 1 to 16. ‡ With Matrox Iris GTX, n can be a value from 1 to 8. ‡ M_TIMER_USAGE Sets the purpose of the timer. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_PULSE_GENERATION. ‡ M_PULSE_GENERATION Specifies the normal use of the timer, as described in the Timers and coordinating events section of Chapter 56: I/O signals and communicating with external devices. ‡ M_PULSE_MEASUREMENT Specifies to use the timer to measure the duration of the pulse that occurs on the timer's trigger source. Note that when in this mode, the values set using M_TIMER_DELAY_CLOCK_SOURCE, M_TIMER_DELAY, and M_TIMER_DURATION are ignored. When a timer is set in this mode, the duration of pulses that occur on the timer's trigger source (M_TIMER_TRIGGER_SOURCE) are measured with respect to the timer's clock source (M_TIMER_CLOCK_SOURCE). To measure active-high pulses, set M_TIMER_TRIGGER_ACTIVATION to M_LEVEL_HIGH; to measure active-low pulses, set M_TIMER_TRIGGER_ACTIVATION to M_LEVEL_LOW. The duration of the pulse can be inquired using MsysInquire() with M_TIMER_VALUE. Between pulses, you can reset the timer value using MsysControl() with M_TIMER_VALUE. ‡ M_TIMER_VALUE Resets the timer value. You must specify a combination value from the following table: To specify which on-board timer to control ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ 0 Specifies to reset the timer value to 0. ‡ Combination value for the values listed in For controlling the settings of a timer. You must add the following value to the above-mentioned values to specify which on-board timer to control. For specifying which on-board timer to control Combination value Description MIL system-specifictooltip (‡) M_TIMERn Specifies on-board timer n, where n is the number of the timer. To set the exposure and strobe timers, use MdigControl() with M_EXPOSURE_TIME or M_TIMER_STROBE, respectively. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. For Zebra 4Sight EV6/EV7, n can be a value from 1 to 16. ‡ For Matrox Iris GTX, n can be a value from 1 to 8. ‡ The following control types allow you to control the settings of a quadrature decoder with inputs from a rotary or linear encoder. For controlling the settings of a rotary decoder ControlType Description MIL system-specifictooltip (‡) ControlValue M_ROTARY_ENCODER_BIT0_SOURCE Sets the auxiliary input signal on which to receive bit 0 of the 2-bit Gray code. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the signal on which to receive bit 0 of the 2-bit Gray code, where n is the number of the auxiliary signal. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_ROTARY_ENCODER_BIT1_SOURCE Sets the auxiliary input signal on which to receive bit 1 of the 2-bit Gray code. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the signal on which to receive bit 1 of the 2-bit Gray code, where n is the number of the auxiliary signal. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_ROTARY_ENCODER_OUTPUT_MODE Sets the rotary decoder's counter value and/or the direction of movement upon which the rotary decoder should output a pulse. The pulse can be used to trigger a timer. To trigger a timer, set M_TIMER_TRIGGER_SOURCE to M_ROTARY_ENCODERn. To decimate (subsample) the rotary decoder output signal before sending it to a timer or a grab controller, set this control type to M_POSITION_TRIGGER and set M_ROTARY_ENCODER_POSITION_TRIGGER to the required decimation value. For more information, refer to the Pixel aspect ratio subsection of the Using quadrature input from a rotary encoder section of Chapter 56: I/O signals and communicating with external devices. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_POSITION_TRIGGER Specifies to output a pulse upon the trigger generated by M_ROTARY_ENCODER_POSITION_TRIGGER. ‡ M_STEP_ANY Specifies to output a pulse upon any change in the rotary decoder's counter value (position change in any direction). ‡ M_STEP_BACKWARD Specifies to output a pulse upon a rotary decoder counter decrement only. ‡ M_STEP_FORWARD Specifies to output a pulse upon a rotary decoder counter increment only. ‡ M_STEP_FORWARD_NEW_POSITIVE Specifies to output a pulse upon a rotary decoder counter increment of a new value that has not been reached before. For example, if the counter value is at 10, and is decremented down to 7, the rotary decoder will only output a pulse when the counter is incremented up to 11. ‡ M_ROTARY_ENCODER_POSITION Resets the rotary decoder's counter to 0 immediately. To reset the counter to 0 upon a signal, use M_ROTARY_ENCODER_RESET_SOURCE. Note that a call to MsysInquire() with M_ROTARY_ENCODER_POSITION inquires the current value of the rotary decoder counter. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ Value = 0 Implements the default behavior. Note that, if a non-zero value is specified, an error is generated. ‡ M_ROTARY_ENCODER_POSITION_TRIGGER Sets the value of the rotary decoder's counter upon which a trigger is generated. You can output this trigger to a timer or a grab controller using M_ROTARY_ENCODER_OUTPUT_MODE set to M_POSITION_TRIGGER. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ 0 &lt;= Value &lt;= 0xFFFFFFFF Specifies the value of the counter upon which a trigger is generated. If a value beyond the supported range is specified, an error is generated. If you are treating the counter values as a signed range of values (for example, forcing the counter to reset to 0 at 0x80000000) and you want to generate a trigger upon a negative value, specify the equivalent value in the range of 0x80000000 to 0xFFFFFFFF. ‡ M_ROTARY_ENCODER_RESET_ACTIVATION Sets the signal transition upon which to reset the rotary decoder's counter to 0. The rotary decoder will reset the counter to 0 when the signal transition occurs on the source signal specified by M_ROTARY_ENCODER_RESET_SOURCE. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_EDGE_FALLING Specifies to reset the rotary decoder upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies to reset the rotary decoder upon a low-to-high signal transition. ‡ M_ROTARY_ENCODER_RESET_SOURCE Sets the source signal to use to reset the rotary decoder's counter to 0. The rotary decoder will reset the counter to 0 when the signal transition specified using M_ROTARY_ENCODER_RESET_ACTIVATION occurs on the selected source. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_NULL Specifies not to reset using a hardware signal source. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source for the specified timer, where n is the number of the auxiliary signal. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be a value from 8 to 15. ‡ With Matrox Iris GTX, n can be a value from 3 to 6. ‡ M_POSITION_TRIGGER Specifies to use the trigger signal generated by the rotary decoder when the counter reaches the value specified with M_ROTARY_ENCODER_POSITION_TRIGGER. ‡ M_ROTARY_ENCODER_STATE Sets whether to enable the rotary decoder. You must specify a combination value from the following table: To specify which rotary decoder to set ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies that the rotary decoder is disabled. ‡ M_ENABLE Specifies that the rotary decoder is enabled. ‡ Combination value for the values listed in For controlling the settings of a rotary decoder. You must add the following value to the above-mentioned values to specify which rotary decoder to set. For specifying which rotary decoder to set Combination value Description MIL system-specifictooltip (‡) M_ROTARY_ENCODERn Specifies rotary decoder n, where n is the number of the rotary decoder. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. For Zebra 4Sight EV6/EV7, n can be either 1 or 2. ‡ The following control types allow you to control the settings of a data latch associated with the rotary decoders of your system. For controlling the settings of a data latch associated with rotary encoders ControlType Description MIL system-specifictooltip (‡) ControlValue M_SYS_DATA_LATCH_STATE Sets the state of the specified data latch. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies that the data latch is disabled. ‡ M_ENABLE Specifies that the data latch is enabled. The data latch will store the position couner value of the rotary encoder when its associated event (specified using M_SYS_DATA_LATCH_TRIGGER_ACTIVATION) occurs. ‡ M_SYS_DATA_LATCH_TRIGGER_ACTIVATION Sets the trigger signal transition upon which to store the specified information to the specified data latch. To set the signal with which to trigger the data latch, use M_SYS_DATA_LATCH_TRIGGER_SOURCE. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ M_DEFAULT Same as M_EDGE_RISING. ‡ M_ANY_EDGE Specifies that the specified information is stored in the data latch both upon a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the specified information is stored in the data latch upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the specified information is stored in the data latch upon a low-to-high signal transition. ‡ M_SYS_DATA_LATCH_TRIGGER_SOURCE Sets what triggers storing the specified information to the specified data latch. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source, where n is the number of the auxiliary signal. In this case, n can be a value from 8 to 15. To specify the signal transition, use M_SYS_DATA_LATCH_TRIGGER_ACTIVATION. ‡ M_TIMERn Specifies to use the output signal of timer n as the trigger source, where n is the number of the timer. In this case, n can be a value from 1 to 16. ‡ M_SYS_DATA_LATCH_TYPE Sets which rotary decoder the specified data latch will store the position counter value of when the data latch is triggered. You can access the stored rotary decoder position within a hook function that was triggered by an auxiliary input or a timer, using MsysGetHookInfo() with M_SYS_DATA_LATCH_VALUE. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ M_ROTARY_ENCODERn Specifies to store the value of the counter of rotary decoder n, where n is a number between 1 and 2. To configure the rotary decoder, use the M_ROTARY_ENCODER... control types. ‡ Combination value for the values listed in For controlling the settings of a data latch associated with rotary encoders. You must add the following value to the above-mentioned values to specify which data latch to affect. For specifying which data latch to set Combination value Description MIL system-specifictooltip (‡) M_LATCHn Specifies which data latch to affect, where n is 1 or 2. ‡ The following control types and control values specify the settings for UARTs. To specify a particular UART, see the For specifying which UART to control combination value below. Note that for other Matrox imaging boards that have a UART, but are not supported with the constants below, see MdigControl(). For UART settings ControlType Description MIL system-specifictooltip (‡) ControlValue M_UART_DATA_SIZE Sets the number of data bits per character that are sent or received by the UART. ‡ M_DEFAULT Same as 8. ‡ 7 Specifies that the data length is 7 bits. ‡ 8 Specifies that the data length is 8 bits. ‡ M_UART_FREE Stops all MIL UART operations and frees all UART resources used by MIL. ‡ M_DEFAULT Specifies the default behavior. ‡ M_UART_PARITY Sets whether character data is sent or received with a parity bit and how the parity bit is set. The parity bit is an extra data bit (0 or 1) that is added to each character for error checking purposes. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies that no extra bit is added (no parity). ‡ M_EVEN Specifies that the number of 1's will be even. ‡ M_ODD Specifies that the number of 1's will be odd. ‡ M_UART_READ_CHAR Reads one character from the UART input buffer. If the input buffer is empty, the function will wait for the amount of time specified by M_UART_TIMEOUT. If a time-out occurs, the '?' character will be returned. ‡ Value Specifies the address of the variable in which to save the character read from the UART. ‡ M_UART_READ_STRING Reads a string of incoming data from the UART. The number of characters to read can be specified with M_UART_READ_STRING_SIZE or M_UART_STRING_DELIMITER. M_UART_TIMEOUT specifies the maximum time to wait between each byte when reading incoming data. Use MsysInquire() with M_UART_BYTES_READ to wait for the read operation to complete and retrieve the actual number of bytes read. ‡ Value Specifies the address of the character array in which to save the string read from the UART. The size of this array must be set to the same value as the M_UART_READ_STRING_MAXIMUM_SIZE control type. ‡ M_UART_READ_STRING_MAXIMUM_SIZE Sets the maximum length of the string to read. This prevents global protection faults from happening when using the M_UART_READ_STRING control type. ‡ Value Specifies the maximum length of the string, in bytes. ‡ M_UART_READ_STRING_SIZE Sets the length of the string to read using M_UART_READ_STRING. ‡ M_DEFAULT Specifies the use of M_UART_STRING_DELIMITER to delineate the end of the string to read. ‡ Value Specifies the string length, in bytes. ‡ M_UART_SPEED Sets the baud rate of the UART. ‡ M_DEFAULT Specifies the default value; the default value is 14400. ‡ 300;600;1200;1800;2400;4800;7200;9600;14400;19200;38400;57600;115200 Specifies the baud rate of the UART. Note that the maximum baud rate is highly dependent on the amount of computer resources available. ‡ M_UART_STOP_BITS Sets the number of extra data bit(s) (1 or 2) that are added to each character to indicate the end of the character. ‡ M_DEFAULT Same as 1. ‡ 1 Specifies that there is 1 stop bit. ‡ 2 Specifies that there are 2 stop bits. ‡ M_UART_STRING_DELIMITER Sets the character used to terminate strings of incoming or outgoing data. The delimiter is used but not sent when writing data with M_UART_WRITE_STRING; it is read for incoming data with M_UART_READ_STRING. ‡ M_DEFAULT Specifies the default value; the default value is '\\0'. ‡ Value Specifies the character used to terminate strings. ‡ M_UART_TIMEOUT Sets the maximum time to wait between each byte when reading incoming data. ‡ M_DEFAULT Same as M_INFINITE. ‡ M_INFINITE Waits indefinitely. ‡ Value Specifies the time to wait, in msec. ‡ M_UART_WRITE_CHAR Sends one character to the UART for transmission. ‡ Value Specifies the character to send. ‡ M_UART_WRITE_STRING Sends a string of data through the UART for transmission. The number of characters to send can be specified with M_UART_WRITE_STRING_SIZE or M_UART_STRING_DELIMITER. Use MsysInquire() with M_UART_BYTES_WRITTEN to wait for the write operation to complete and retrieve the actual number of bytes written. ‡ Value Specifies the character array. ‡ M_UART_WRITE_STRING_SIZE Sets the length of the string to be sent to the UART for transmission. ‡ M_DEFAULT Specifies the use of M_UART_STRING_DELIMITER to end the string. The delimiter will not be sent through the UART. ‡ Value Specifies the string length, in bytes. ‡ Combination value for the values listed in For UART settings. You can add the following value to the above-mentioned values to set which UART to control. For specifying which UART to control Combination value Description MIL system-specifictooltip (‡) M_UART_NB( MIL_INT DeviceToControl ) Specifies which UART to control. Use MsysInquire() with M_UART_PRESENT to determine the number of UARTS on the system. ‡ Parameters DeviceToControl Specifies a device (UART) to control. ‡ M_DEVn Specifies the device to control, where n can be from 0 and 15. ‡ MIL system specific There is 1 UART available on Matrox Morphis. ‡ There are 4 UARTs available on Matrox Solios eA/XA Quad, 2 on Matrox Solios eA/XA Dual, and 1 on Matrox Solios eA/XA Single. ‡ There are 2 UARTs available on Matrox Solios eCL/XCL dual-Base/single-Medium operating in dual-Base mode, and 1 is available on Matrox Solios eCL/XCL-B, eCL/XCL-F, and eCL/XCL dual-Base/single-Medium operating in single-Medium mode. ‡ There are 2 UARTS available on Matrox Radient eV-CL DB and eV-CL DF, 4 on Matrox Radient eV-CL QB, and 1 on Matrox Radient eV-CL SB and SF. Note that, using the CLProtocol will occupy one COM port per allocated digitizer. ‡ There are 2 UARTS available on Matrox Rapixo CL Pro DB and DF, 4 on Matrox Rapixo CL Pro QB, and 1 on Matrox Rapixo CL Pro SF. Note that, using the CLProtocol will occupy one COM port per allocated digitizer. ‡ The following control types and control values specify the settings for the Watchdog. For Watchdog settings ControlType Description MIL system-specifictooltip (‡) ControlValue M_WATCHDOG_MODE Sets the current state of the Watchdog. ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Disables the Watchdog. ‡ M_ENABLE Enables the Watchdog. The application should be ready to reset the Watchdog and all timeouts (M_WATCHDOG_REBOOT_TIMEOUT &amp; M_WATCHDOG_TIMEOUT) should be programmed before enabling the Watchdog. ‡ M_WATCHDOG_REBOOT_TIMEOUT Sets the timeout value of the Watchdog's reboot timer. If, during a reboot, the Host computer does not reset the Watchdog reboot timer before the specified interval expires, the Host computer is assumed to have hung. The Watchdog's reboot timer will then force the Host computer to reboot again. ‡ Value Specifies the timeout value, in msec. ‡ M_WATCHDOG_RESET Resets the Watchdog main, reboot, and warning timers. ‡ M_DEFAULT Implements the default behavior. ‡ M_WATCHDOG_RESET_COUNTER Clears the \"number of reboots\" counter that counts the number of times the Watchdog has rebooted your Host computer. Note that this count includes both reboots caused by the reboot timer and the main timer. ‡ M_DEFAULT Implements the default behavior. ‡ M_WATCHDOG_TIMEOUT Sets the timeout value of the Watchdog's main timer. If, during the course of regular operations, the Host computer does not reset the main timer before the specified interval expires, it is assumed to have hung. The Watchdog's main timer will then force the Host computer to reboot. To receive a warning before the reboot, you can set the Watchdog's warning timer, using M_WATCHDOG_WARNING_TIME. When the Watchdog's warning timer expires, an interrupt is generated to warn you to reset the Watchdog's main timer. You can hook a function to this interrupt using MsysHookFunction(). Set the Watchdog's main timer to a value greater than that of the Watchdog's warning timer to allow enough time for the interrupt to be generated. ‡ Value Specifies the timeout value, in msec. ‡ M_WATCHDOG_WARNING_TIME Sets the timeout value of the Watchdog's warning timer. If, during the course of regular operations, the Host computer does not reset the warning timer before the specified interval expires, the Host computer is assumed to have hung. The Watchdog's warning timer will then generate a warning interrupt. You can hook a function to this interrupt using MsysHookFunction(). The warning timeout value should be less than M_WATCHDOG_TIMEOUT to give the computer enough time to finish the hooked function. ‡ M_INFINITE Specifies that the Watchdog will never receive a warning. ‡ Value Specifies the warning time interval, in msec. ‡ The following control types and control values allow you to configure an action command and send it to one or more GigE Vision cameras. Action commands require both a MIL-side and a camera-side configuration. The following control types and control values configure the MIL-side of the action command. To configure the camera-side, use MdigControlFeature() with the appropriate feature values. For more information, refer to the Triggering simultaneous actions in multiple GigE Vision cameras section of the Matrox GigE Vision driver chapter in the MIL Hardware-specific Notes. To configure features of the camera, use MdigControlFeature() with a digitizer allocated for the camera on a MIL GigE system. For configuring and sending an action command to a GigE Vision camera ControlType Description MIL system-specifictooltip (‡) ControlValue M_GC_ACTION_ACKNOWLEDGE_NUMBER Sets the number of acknowledgments that MIL should expect to receive when the action command is issued. There should be one per target camera performing the action. By default, this number is equal to the number of MIL digitizers added to the action command. If the number of MIL digitizers added to the action command does not equal the number of MIL digitizers that will perform the action, MIL will return an error (for example, if you set M_GC_ACTION_GROUP_MASK to mask out one or more cameras). To avoid this error, use this control type to set the number of acknowledgments that MIL should expect. You must specify a combination value from the following table: To set which action command to control ‡ M_DEFAULT Specifies the number of cameras added to the action command, using M_GC_ACTION_ADD_DEVICE. ‡ Value Specifies the number of acknowledgments expected. ‡ M_GC_ACTION_ADD_DEVICE Adds a GigE Vision camera to the list of cameras associated with the action command. You must specify a combination value from the following table: To set which action command to control ‡ MIL digitizer identifier Specifies the digitizer identifier allocated for the GigE Vision camera to add. Note that the digitizer should be allocated on a MIL GigE Vision system using MdigAlloc(). ‡ M_GC_ACTION_CLEAR_DEVICES Removes all cameras from the list of cameras associated with the action command. You must specify a combination value from the following table: To set which action command to control ‡ M_DEFAULT Specifies the default behavior. ‡ M_GC_ACTION_DEVICE_KEY Sets the action device key for the action command. The action device key identifies the cameras on which the action should be performed. For the camera to accept and perform the action, the device key on your camera and the device key of the action command must match. If they do not match, the camera ignores the action command. To configure the device key on your camera, use MdigControlFeature() with the appropriate GenICam SFNC feature (for example, ActionDeviceKey). You must specify a combination value from the following table: To set which action command to control ‡ MIL system specific To configure features of the camera, use MdigControlFeature() with a digitizer allocated for the camera on a MIL GigE system. If using a MIL Concord PoE system, this control type is only available for Matrox Concord PoE with ToE. To configure an action command for the Matrox Concord PoE base model, use a MIL GigE system with this control type. ‡ Value Specifies the action device key. ‡ M_GC_ACTION_EXECUTE Issues the action command. You must specify a combination value from the following table: To set which action command to control ‡ M_DEFAULT Specifies the default behavior. ‡ M_GC_ACTION_GROUP_KEY Sets the action group key for the action command. The action group key identifies the action you want to perform on the camera. For the camera to know which action signal to generate, the group key of the action command must match the group key on your camera. If they do not match, the camera ignores the action command. To configure the group key of the action command on your camera, use MdigControlFeature() with the appropriate GenICam SFNC feature (for example, ActionGroupKey). You must specify a combination value from the following table: To set which action command to control ‡ MIL system specific To configure features of the camera, use MdigControlFeature() with a digitizer allocated for the camera on a MIL GigE system. If using a MIL Concord PoE system, this control type is only available for Matrox Concord PoE with ToE. To configure an action command for the Matrox Concord PoE base model, use a MIL GigE system with this control type. ‡ Value Specifies the action group key. ‡ M_GC_ACTION_GROUP_MASK Sets the action group mask for the action command. In the case where you need one (or more) cameras to temporarily ignore an action command, you can mask out the action command for the camera by changing the action group mask. For the camera to know if it generates an action signal upon receiving the command, the action group mask of the action command, and the action group mask of the camera, when combined in a bitwise AND operation, must result in a non-zero value. If the result is a zero, the camera ignores the action command. Note that, if you are masking out the action command for the camera, you must change the number of action acknowledgment packets MIL should expect; otherwise, MIL will generate an error. To set the number of action acknowledgment packets, use M_GC_ACTION_ACKNOWLEDGE_NUMBER. You must specify a combination value from the following table: To set which action command to control ‡ MIL system specific To configure features of the camera, use MdigControlFeature() with a digitizer allocated for the camera on a MIL GigE system. If using a MIL Concord PoE system, this control type is only available for Matrox Concord PoE with ToE. To configure an action command for the Matrox Concord PoE base model, use a MIL GigE system with this control type. ‡ Value Specifies the action group mask. ‡ M_GC_ACTION_REMOVE_DEVICE Removes a MIL GigE Vision camera from the list of cameras associated with the action command. You must specify a combination value from the following table: To set which action command to control ‡ MIL digitizer identifier Specifies the digitizer identifier for the GigE Vision camera to remove. Note that the digitizer should be allocated on a MIL GigE Vision system using MdigAlloc(). ‡ M_GC_ACTION_TIME Sets the time at which the action command should execute. Note that, for scheduled action commands to function, your camera must be capable of using IEEE 1588, and the appropriate feature must be enabled (for example, GevIEEE1588). To verify the availability of these features on your camera, use MdigInquire() with M_GC_CONTROL_PROTOCOL_CAPABILITY. It should return M_GC_SCHEDULED_ACTION_SUPPORT or M_GC_IEEE_1588_SUPPORT. Note that, you must enable 1588 on each GigE Vision camera that will receive this action command, using MdigControlFeature(), or Matrox Feature Browser (accessible through MsysControl() with M_GC_FEATURE_BROWSER) and the appropriate SFNC feature (for example, GevIEEE1588). You must specify a combination value from the following table: To set which action command to control ‡ Value Specifies the time at which to execute the action command on your camera, relative to the time at which the action command was sent, in sec. ‡ The following control types and control values allow you to configure a Trigger-over-Ethernet packet for transmission using a ToE module. The Trigger-over-Ethernet packet can be sent as an action command or a GigE Vision software trigger. Action commands and GigE Vision software triggers require both a MIL-side and a camera-side configuration. The following control types and control values configure the MIL-side of the action command or GigE Vision software trigger. To configure the camera-side, you need to use a digitizer allocated for the camera on a MIL GigE system (MsysAlloc() with M_SYSTEM_GIGE_VISION) and use MdigControlFeature() with the appropriate feature values. For more information, refer to the Triggering simultaneous actions in multiple GigE Vision cameras section of the Matrox GigE Vision driver chapter in the MIL Hardware-specific Notes. For specifying a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module ControlType Description MIL system-specifictooltip (‡) ControlValue M_ADD_DESTINATION Adds a GigE Vision camera to the list of cameras associated with the specified action command or GigE Vision software trigger. You must specify a combination value from one of the following tables: To set which GigE Vision software trigger to control To set which action command to control ‡ MIL digitizer identifier Specifies the digitizer identifier allocated for the GigE Vision camera to add. Note that the digitizer should be allocated on a GigE Vision system using MdigAlloc(). ‡ M_CLEAR_DESTINATIONS Removes all cameras from the list of cameras associated with the specified action command or GigE Vision software trigger. You must specify a combination value from one of the following tables: To set which GigE Vision software trigger to control To set which action command to control ‡ M_DEFAULT Specifies the default behavior. ‡ M_GC_TRIGGER_SELECTOR Sets the type of GigE Vision software trigger that should take place on the camera upon receiving the ToE packet (for example, FrameStart). For the camera to know what should be triggered upon receiving the packet, this control type must match the trigger selector on your camera. To configure the trigger selector on your camera, use MdigControlFeature() with the appropriate GenICam SFNC feature (for example, TriggerSelector). You must specify a combination value from the following table: To set which GigE Vision software trigger to control ‡ MIL_TEXT(\"FeatureName\") 1 Specifies the type of trigger; see your GigE Vision camera's documentation for a list of available types. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"FeatureName\")). ‡ M_REMOVE_DESTINATION Removes a GigE Vision camera from the list of cameras associated with the specifies action command or GigE Vision software trigger. You must specify a combination value from one of the following tables: To set which GigE Vision software trigger to control To set which action command to control ‡ MIL digitizer identifier Specifies the digitizer identifier allocated for the GigE Vision camera to remove. Note that the digitizer should be allocated on a GigE Vision system using MdigAlloc(). ‡ M_TRIGGER_COMMAND Issues a software trigger event to prompt the transmission of the specified action command or GigE Vision software trigger from the ToE module. To use this control type, M_TRIGGER_SOURCE must be set to M_SOFTWAREn. Note that this will trigger any action command or GigE Vision software trigger that uses the same software signal (M_SOFTWAREn) as the specified action command/GigE Vision software trigger. For example, if you specify M_TRIGGER_COMMAND + M_GC_ACTION1 and the trigger source of M_GC_ACTION1 is M_SOFTWARE1, all ToE packets that use M_SOFTWARE1 are triggered. You must specify a combination value from one of the following tables: To set which GigE Vision software trigger to control To set which action command to control ‡ M_ACTIVATE Specifies the default behavior. ‡ M_TRIGGER_SOURCE Sets the event that will cause the ToE module to send the specified action command or GigE Vision software trigger as a ToE packet. You must specify a combination value from one of the following tables: To set which GigE Vision software trigger to control To set which action command to control ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source, where n is the number of the auxiliary signal. In this case, n can be a value from 0 to 5. ‡ M_IO_COMMAND_LISTn Specifies to use the I/O command list n, where n is the number of the I/O command list. In this case, n can be a value from 0 to 1. You must specify a combination value from the following table: To specify which I/O command register bit to use ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the trigger source, where n is the number of the rotary decoder. In this case, n can be a value from 1 to 2. ‡ M_SOFTWAREn Specifies to use software as a trigger source to trigger the ToE module, where n is the number of the software trigger; n can be a value between 1 and 4. Use M_TRIGGER_COMMAND to issue the software trigger event. In this case, n can be a value from 1 to 4. ‡ M_TIMERn Specifies to use the output signal of the specified timer as the trigger source, where n is the number of the timer. In this case, n can be a value from 1 to 16. ‡ M_TRIGGER_STATE Sets the state of the specified action command or GigE Vision software trigger in the ToE module. You must specify a combination value from one of the following tables: To set which GigE Vision software trigger to control To set which action command to control ‡ M_DISABLE Specifies the ToE packet is disabled. ‡ M_ENABLE Specifies the ToE packet is enabled, and will be transmitted when its associated event (specified using M_TRIGGER_SOURCE) occurs. ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Combination value for the values listed in For configuring and sending an action command to a GigE Vision camera, For specifying a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module. (exceptions might exist) You must add the following value to the above-mentioned values to set which action command to control. Alternatively, you can add a value from For specifying which GigE Vision software trigger to control. For specifying which action command to control Combination value Description MIL system-specifictooltip (‡) M_GC_ACTIONn Specifies to control action command n, where n is a value from 0 to 31. ‡ MIL system specific If using this control type with Matrox Concord PoE with ToE, it cannot be used with M_GC_TRIGGER_SELECTOR. ‡ Combination value for the values listed in For specifying a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module. You must add the following value to the above-mentioned values to set which GigE Vision software trigger to control. Alternatively, you can add a value from For specifying which action command to control. For specifying which GigE Vision software trigger to control Combination value Description MIL system-specifictooltip (‡) M_GC_TRIGGER_SOFTWAREn Specifies to control a GigE Vision software trigger n, where n is a value from 0 to 31. This combination value cannot be used with M_GC_ACTION_DEVICE_KEY, M_GC_ACTION_GROUP_KEY, or M_GC_ACTION_GROUP_MASK. ‡ Combination value for [when ControlType=M_IO_SOURCE and ControlValue=M_IO_COMMAND_LISTn: M_IO_COMMAND_LISTn ], [when ControlType=M_TIMER_TRIGGER_SOURCE and ControlValue=M_IO_COMMAND_LISTn: M_IO_COMMAND_LISTn ], [when ControlType=M_TRIGGER_SOURCE and ControlValue=M_IO_COMMAND_LISTn: M_IO_COMMAND_LISTn]. You must add the following value to the above-mentioned values to specify which I/O command register bit to use. For specifying which I/O command register bit to use Combination value Description MIL system-specifictooltip (‡) M_IO_COMMAND_BITn Specifies I/O command register bit n, where n represents the bit number. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. For Zebra 4Sight EV6/EV7, n can be a value from 0 to 7. ‡ With Matrox Iris GTX, n can be a value from 0 to 4. ‡ With Matrox Concord PoE with ToE, n can be a value from 0 to 7. ‡ Type-specific versions of the function when using a C compiler void MsysControlDouble (MIL_ID SysId, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters SysId See SysId of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void MsysControlInt64 (MIL_ID SysId, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters SysId See SysId of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId For the system identifier - ControlType - ControlValue Parameter Associations For general system settings + For specifying which connector or port to control + For specifying which configuration information file to access + For specifying whether Matrox Feature Browser should be synchronous or asynchronous + For specifying the number of hook threads For discovering connected devices For routing I/O signals and setting their mode + For specifying the type and number of the I/O signal to affect For resetting CXP connection error counts + For specifying the CXP input connector For setting the state of specified user-bits in a static-user-output register + For specifying the bit in a static-user-output register to affect For controlling the settings of a timer + For specifying which on-board timer to control For controlling the settings of a rotary decoder + For specifying which rotary decoder to set For controlling the settings of a data latch associated with rotary encoders + For specifying which data latch to set For UART settings + For specifying which UART to control For Watchdog settings For configuring and sending an action command to a GigE Vision camera For specifying a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module + For specifying which action command to control + For specifying which GigE Vision software trigger to control + For specifying which I/O command register bit to use Type-specific versions of the function when using a C compiler Compilation information M_CONNECTIONn M_IO_COMMAND_LISTn M_ROTARY_ENCODERn M_TIMERn M_USER_BITn M_AUX_IOn M_LATCHn M_DEVn M_SOFTWAREn M_GC_ACTIONn M_GC_TRIGGER_SOFTWAREn M_IO_COMMAND_BITn ",
      "wordCount": 15284,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysControlFeature",
      "version": null,
      "title": "MsysControlFeature",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysControlFeature.htm",
      "text": " MsysControlFeature Synopsis Controls a feature of the camera. Syntax void MsysControlFeature( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlType, //in MIL_CONST_TEXT_PTR&nbsp;FeatureName, //in MIL_INT64&nbsp;UserVarType, //in const void&nbsp;*UserVarPtr //in ) Description This function allows you to directly control various GenICam standard feature naming convention (SFNC) features and manufacturer-specific features of the camera. For more information, refer to the Using MIL with GenICam section of Chapter 27: Grabbing with your digitizer. The features described in this function are primarily available to set existing settings using MIL code or to set information from which you can build your own interface for the camera device's description file (XML). MIL provides two versions of an interface that you can use to interactively inquire the camera's features. At design-time, you can use Matrox Intellicam's Feature Browser. At runtime, you can launch the Feature Browser, using MsysControl() with M_GC_FEATURE_BROWSER. Both versions of the Feature Browser provide a list of available feature names and associated possible values, as well as code snippets with the MIL functions and MIL constants associated with the settings selected; you can copy the code snippets to your MIL application code. To inquire a camera's manufacturer-specific feature, use MsysInquireFeature(). Parameters Parameters SysId Specifies the identifier of the system accessing the camera to control. This parameter must be given a valid system identifier, previously allocated using MsysAlloc(). ControlType Specifies the type of information to control for the specified feature. See the Parameter associations section for possible values that can be specified. FeatureName Specifies the name of the camera feature to control. For specifying the name of the feature Value Description MIL system-specifictooltip (‡) MIL_TEXT(\"FeatureName\") 1 Specifies the name of the feature. Note that the feature name is case-sensitive. Refer to your camera's documentation for a list of the features available. ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). UserVarType Specifies the data type of the address pointed to by the UserVarPtr parameter. If not setting the feature's value (using M_FEATURE_VALUE), set this parameter to M_DEFAULT. Note that, in the case of a string (or a multi-byte register), the size of the array passed to the UserVarPtr parameter must be equal to or larger than the returned information; otherwise an application crash will occur. For specifying the UserVarPtr's data type Value Description MIL system-specifictooltip (‡) M_TYPE_BOOLEAN Specifies that UserVarPtr is passed an address of type MIL_BOOL. ‡ M_TYPE_DOUBLE Specifies that UserVarPtr is passed an address of type MIL_DOUBLE. ‡ M_TYPE_INT64 Specifies that UserVarPtr is passed an address of type MIL_INT64. ‡ M_TYPE_STRING Specifies that UserVarPtr is passed an address of type MIL_TEXT_CHAR. You must specify a combination value from the following table: To specify the length of the array ‡ M_TYPE_UINT8 Specifies that UserVarPtr is passed an address of type MIL_UINT8. You must specify a combination value from the following table: To specify the length of the array ‡ Combination value for M_TYPE_STRING , M_TYPE_UINT8. You must add the following value to the above-mentioned values to specify the length of the array. For specifying the length of the array Combination value Description MIL system-specifictooltip (‡) M_FEATURE_USER_ARRAY_SIZE( MIL_INT Length ) Specifies the length of the array. ‡ b vU34 Parameters Length Sets the length, in bytes. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] M_NULL MIL_BOOL MIL_DOUBLE MIL_INT MIL_INT64 Specifies the address of the variable in which to write the value of the feature. See the Parameter associations section for possible values that can be specified. Parameter associations The table below lists possible values for the ControlType and UserVarPtr parameters. For specifying the type of information about the feature to set and the data type returned To determine the data type of the FeatureName specified, use MsysInquireFeature() with M_FEATURE_VALUE. For specifying the type of information about the feature to set and the data type returned ControlType Description MIL system-specifictooltip (‡) UserVarPtr M_FEATURE_CHANGE_HOOK Sets whether to enable an event to occur when the value of the specified feature changes. Once enabled, use MsysHookFunction() with M_FEATURE_CHANGE to hook a specified function to the feature change event. Repeat for each feature that you want to enable a feature change event. Alternatively, to enable an event to occur when the value of any feature changes and at the same time hook a function to any feature change, use MsysHookFunction() with M_FEATURE_CHANGE + M_ALL. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that no event is generated when the value of the specified feature changes. This is the default value. ‡ M_ENABLE Specifies that an event is generated when the value of the specified feature changes. ‡ M_FEATURE_EXECUTE Sets that the specified command feature must be executed. ‡ UserVarPtr extra info Data type info: Data type: Set this parameter to M_NULL Data type: Set this parameter to M_NULL ‡ M_FEATURE_MAX Specifies to set the feature to its maximum value. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; Set this parameter to M_NULL MORE Data type: address of a MIL_DOUBLE Note: For when controlling a feature whose feature data type is a double-precision floating-point; set UserVarType to M_TYPE_DOUBLE. Data type: Set this parameter to M_NULL Note: For when controlling a feature whose feature data type is a 64-bit integer; set UserVarType to M_TYPE_INT64. ‡ M_FEATURE_MIN Specifies to set the feature to its minimum value. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: address of a MIL_DOUBLE Note: For when controlling a feature whose feature data type is a double-precision floating-point; set UserVarType to M_TYPE_DOUBLE. Data type: address of a MIL_INT64 Note: For when controlling a feature whose feature data type is a 64-bit integer; set UserVarType to M_TYPE_INT64. ‡ M_FEATURE_VALUE Sets the current value of the feature. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_BOOL &nbsp;|&nbsp; address of a MIL_DOUBLE &nbsp;|&nbsp; address of a MIL_INT64 &nbsp;|&nbsp; array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] &nbsp;|&nbsp; array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: address of a MIL_BOOL Note: For when controlling a feature value whose feature data type is a boolean; set UserVarType to M_TYPE_BOOLEAN. Data type: address of a MIL_DOUBLE Note: For when controlling a feature whose feature data type is a double-precision floating-point; set UserVarType to M_TYPE_DOUBLE. Data type: address of a MIL_INT64 Note: For when controlling a feature whose feature data type is a 64-bit integer; set UserVarType to M_TYPE_INT64. Data type: array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] Required array size: MsysControlFeature ( M_FEATURE_VALUE + M_STRING_SIZE ) Note: For when controlling a feature whose feature data type is a multi-byte register set UserVarType to M_TYPE_UINT8. Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysControlFeature ( M_FEATURE_VALUE + M_STRING_SIZE ) Note: For when controlling a feature whose feature data type is a string; set UserVarType to M_TYPE_STRING. Note: When using C++, you can pass a reference to a MIL_STRING instead. ‡ Combination values for the values listed in For specifying the type of information about the feature to set and the data type returned. You can add one of the following values to the above-mentioned values to specify the GenTL configuration file (XML file) that is associated with the feature. For specifying the configuration file associated with the feature Combination value Description MIL system-specifictooltip (‡) M_GENTL_INTERFACE_NUMBER( MIL_INT IndexValue ) Specifies which instance of the GenTL interface configuration file is associated with the feature. ‡ b vU34 Parameters IndexValue Specifies the index of the GenTL interface configuration file. 0&lt;= Value&lt;=MsysInquire(M_GENTL_INTERFACE_COUNT) Specifies the index. ‡ M_GENTL_SYSTEM Specifies to display the GenTL system configuration information. This is the default value. ‡ Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId - ControlType - FeatureName For specifying the name of the feature - UserVarType For specifying the UserVarPtr's data type + For specifying the length of the array - UserVarPtr Parameter Associations For specifying the type of information about the feature to set and the data type returned + For specifying the configuration file associated with the feature Compilation information ",
      "wordCount": 1416,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysFree",
      "version": null,
      "title": "MsysFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysFree.htm",
      "text": " MsysFree Synopsis Free a system. Syntax void MsysFree( MIL_ID&nbsp;SysId //in ) Description This function deallocates a system previously allocated with MsysAlloc(). Prior to freeing a system, ensure that all buffers, displays, and digitizers allocated on the system are freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter SysId Specifies the identifier of the system to free. Remark If you are creating a DLL that includes a call to MsysFree(), ensure that the call is not made from the DllMain() function, because MsysFree() might unload any DLL loaded with MsysAlloc() and you cannot unload a DLL from DllMain(). If necessary, call MsysFree() from a clean-up function in your DLL instead. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId Remarks Compilation information ",
      "wordCount": 130,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysGetHookInfo",
      "version": null,
      "title": "MsysGetHookInfo",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysGetHookInfo.htm",
      "text": " MsysGetHookInfo Synopsis Get information about a hook event. Syntax MIL_INT MsysGetHookInfo( MIL_ID&nbsp;SysId, //in MIL_ID&nbsp;EventId, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function allows you to get information about the event that caused the hook function to be called. MsysGetHookInfo() should only be called within the scope of a system hook-handler function (see MsysHookFunction()). Parameters Parameters SysId Specifies the identifier of the system. For the system identifier Value Description MIL system-specifictooltip (‡) M_DEFAULT_HOST Specifies the default Host system of the current MIL application. ‡ MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ‡ EventId Specifies the system event identifier received by the hook-handler function (see MsysHookFunction()). InquireType Specifies the type of information about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] MIL_DOUBLE MIL_INT MIL_INT64 MIL_UINT64 Specifies the address in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For retrieving information about a camera-specific event For retrieving information about a timer start or timer end event For retrieving information about an I/O change event For retrieving information about a data latch value For retrieving information from a GenTL feature change event The following allows you to retrieve information about a camera-specific event. The following information types are only available if MsysGetHookInfo() was called from a function hooked to a system event using MsysHookFunction() with M_CAMERA_PRESENT. For retrieving information about a camera-specific event InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_CAMERA_PRESENT Retrieves whether a camera has been added or re-connected to the system. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_FALSE Specifies that a camera has been removed from the system. ‡ M_TRUE Specifies that a camera has been added or re-connected to the system. ‡ M_GC_REMOTE_IP_ADDRESS_STRING Retrieves the IP address (IPv4) of the camera that generated the M_CAMERA_PRESENT event. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysGetHookInfo ( M_GC_REMOTE_IP_ADDRESS_STRING + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"nnn.nnn.nnn.nnn\") 1 Specifies the IP address of the camera as a string. The address string is expressed in dotted decimal notation, where each dotted decimal value (nnn) is a number between 0 and 255. ‡ M_GC_REMOTE_MAC_ADDRESS_STRING Retrieves the MAC address of the camera that generated the M_CAMERA_PRESENT event. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysGetHookInfo ( M_GC_REMOTE_MAC_ADDRESS_STRING + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"nn-nn-nn-nn-nn-nn\") 1 Specifies the MAC address of the camera, as a string. The address string is expressed in hexadecimal pairs, where each pair (nn) is a hexadecimal number between 00 and FF. ‡ M_GC_UNIQUE_ID_STRING Retrieves the unique identifier for your camera. ‡ MIL system specific This is the camera's MAC address. ‡ This is the camera's global unique identifier (GUID). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysGetHookInfo ( M_GC_UNIQUE_ID_STRING + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"nnnnnnnnnnnn\") 1 Specifies the unique identifier, as a string. The string is expressed in hexadecimal. ‡ M_GC_USER_NAME Retrieves the user-defined name of the camera that generated the M_CAMERA_PRESENT event. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysGetHookInfo ( M_GC_USER_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"CameraName\") 1 Specifies the name of the camera. ‡ M_NUMBER Retrieves the device number of the digitizer to which a camera has been connected or disconnected from, causing an M_CAMERA_PRESENT event. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEVn Specifies the device number (rank) of the board. ‡ MIL system specific This value is combined with a value from the following table: To identify the GenTL library for which a MIL GenTL system was allocated ‡ M_TIME_STAMP Retrieves the operating system's time stamp at the point which the event generated a service request. The time stamp is generated by the operating system's performance counter. Time stamps can be used to see if a frame has been missed since the last time stamp. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies operating system's time stamp, in sec. ‡ 1 If the value was passed in a variable, it won't be returned enclosed in MIL_TEXT(). Combination value for [when InquireType=M_NUMBER and UserVarPtr=M_DEVn: M_DEVn]. The following value is combined with the above-mentioned value to identifythe GenTL library for which a MIL GenTL system was allocated. All third-party proprietary GenTL libraries installed on your computer are sorted and indexed by MIL. Use the GenTL Producer index number to identify the library that your MIL system should use to communicate with the hardware devices on the specified transportation layer. These libraries are indexed and sorted for reference by MIL (the GenTL Consumer). In all cases, the same number and type of libraries should be installed on every computer that will run your application; the order in which they are installed, however, is not important. To determine the number of GenTL libraries installed on your computer, use MappInquire() with M_GENTL_PRODUCER_COUNT or use the General Default Values page of the MILConfig utility. For identifying the instance of the GenTL library to use Combination value Description MIL system-specifictooltip (‡) M_GENTL_PRODUCER( MIL_INT IndexValue ) Specifies the GenTL Producer (library) for which this MIL GenTL system was allocated. ‡ Parameters IndexValue Specifies the index of the GenTL Producer. ‡ 0 &lt;= Value &lt;= 127 Specifies the index. ‡ The following allows you to retrieve information about a timer event. The following information types are only available if MsysGetHookInfo() was called from a function hooked to an event using M_TIMER_START or M_TIMER_END. For retrieving information about a timer start or timer end event InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_TIMER_INDEX Retrieves the index value of the timer that generated an M_TIMER_END or an M_TIMER_START event. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the value of the index of the timer. ‡ M_TIMER_VALUE Retrieves the value of the specified timer. This is typically used with a timer end event (set using MsysHookFunction() with M_TIMER_END). Note that, if used with a timer start event (M_TIMER_START), it will return 0. To inquire the value of the timer that caused the event, use M_TIMER_INDEX to learn which timer to inquire. ‡ MIL system specific You must specify a combination value from the following table: To specify the timer to inquire about ‡ [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the current value of the timer, in nsec. ‡ Combination value for M_TIMER_VALUE. You must add the following value to the above-mentioned value to specify the timer to inquire about. For specifying the timer to inquire about Combination value Description MIL system-specifictooltip (‡) M_TIMERn Specifies the timer to inquire about. ‡ The following allows you to retrieve information about an I/O change event. The following information types are only available if MsysGetHookInfo() was called from a function hooked to an event using M_IO_CHANGE. If more than one input signal triggers an interrupt at the same time, the hook-handler function (or chain of hook-handler functions) is called for each input signal that generated an interrupt. As a result, any and all user-specified function(s) hooked using MsysHookFunction() with M_IO_CHANGE will be executed for each interrupt. For retrieving information about an I/O change event InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_IO_INTERRUPT_SOURCE Retrieves the input signal that triggered the hook function. See the MIL Hardware-specific Notes for a listing of available auxiliary signals and their corresponding numbers in MIL. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies that auxiliary signal n triggered the hook function, where n is the number of the auxiliary signal. ‡ M_IO_STATUS Retrieves the state of the input signal that generated the interrupt. The returned value reflects the state of the input signal at the time of the interrupt. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_OFF Specifies that the I/O signal is off. ‡ M_ON Specifies that the I/O signal is on. ‡ The following allows you to retrieve information about a data latch event. The following information types are only available if using a latch that has previously saved the time, I/O command list counter, or rotary decoder position counter value upon a hardware event. For retrieving information about a data latch value InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_REFERENCE_LATCH_VALUE Retrieves the last timestamp or counter value stored by the specified latch, associated with the specified I/O command list. This setting is available in functions hooked to any type of event. You must specify a combination value from the following table: To specify which of the I/O command lists to use ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the last timestamp or counter value stored by the specified latch, associated with the specified command list. ‡ M_SYS_DATA_LATCH_VALUE Retrieves the last rotary decoder position counter value stored by the specified latch, associated with the rotary decoders of the system. This setting is only available if MsysGetHookInfo() was called from a function hooked to an event using M_TIMER_START, M_TIMER_END, or M_IO_CHANGE. [Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which latch to inquire about ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_UINT64 Data type: address of a MIL_UINT64 ‡ Value Specifies the last rotary decoder position counter value stored by the specified latch, associated with the rotary decoders of the system. ‡ Combination value for M_REFERENCE_LATCH_VALUE. You must add the following value to the above-mentioned value to specify which of the I/O command lists to use. For specifying the I/O command list to use Combination value Description MIL system-specifictooltip (‡) M_IO_COMMAND_LISTn Specifies to inquire about I/O command list n. You must specify a combination value from the following table: To specify which latch to inquire about ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n can be either 1 or 2. ‡ For Matrox Indio and Matrox Concord POE n is a number from 1 to 2. ‡ For Matrox Iris GTX, n must be 1. ‡ Combination value for M_SYS_DATA_LATCH_VALUE , M_IO_COMMAND_LISTn. You must add the following value to the above-mentioned values to specify which latch to inquire about. For specifying the latch to inquire Combination value Description MIL system-specifictooltip (‡) M_LATCHn Specifies to inquire about latch n. ‡ MIL system specific [This is only applicable to Zebra 4Sight] For Zebra 4Sight EV6/EV7, n is a number from 1 to 4, unless used with M_SYS_DATA_LATCH_VALUE (in which case, n is a number from 1 to 2). ‡ For Matrox Indio, n is a number from 1 to 4. ‡ For Matrox Iris GTX, n is a number from 1 to 2. ‡ The following allows you to retrieve information from a GenTL feature change event. These information types are only available if MsysGetHookInfo() was called from a function hooked to GenICam feature change event using MsysHookFunction() with M_FEATURE_CHANGE. For retrieving information from a GenTL feature change event InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_GC_FEATURE_CHANGE_NAME Retrieves the name of the GenTL feature that changed. This information type is only available if MsysGetHookInfo() is used from a function hooked to GenTL feature change events using MsysHookFunction() with M_FEATURE_CHANGE. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysGetHookInfo ( M_GC_FEATURE_CHANGE_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the feature name. ‡ Combination value for M_GC_REMOTE_IP_ADDRESS_STRING , M_GC_REMOTE_MAC_ADDRESS_STRING , M_GC_UNIQUE_ID_STRING , M_GC_FEATURE_CHANGE_NAME. You can add the following value to the above-mentioned values to get the string's length. For getting the string size InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Return value The returned value is M_NULL if successful. If the operation fails, a non-null (!M_NULL) value is returned. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId For the system identifier - EventId - InquireType - UserVarPtr Parameter Associations For retrieving information about a camera-specific event + For identifying the instance of the GenTL library to use For retrieving information about a timer start or timer end event + For specifying the timer to inquire about For retrieving information about an I/O change event For retrieving information about a data latch value + For specifying the I/O command list to use + For specifying the latch to inquire For retrieving information from a GenTL feature change event + For getting the string size Return value Compilation information M_DEVn M_TIMERn M_AUX_IOn M_IO_COMMAND_LISTn M_LATCHn ",
      "wordCount": 2669,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysHookFunction",
      "version": null,
      "title": "MsysHookFunction",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysHookFunction.htm",
      "text": " MsysHookFunction Synopsis Hook a function to a system event. Syntax void MsysHookFunction( MIL_ID&nbsp;SysId, //in MIL_INT&nbsp;HookType, //in MIL_SYS_HOOK_FUNCTION_PTR&nbsp;HookHandlerPtr, //in void&nbsp;*UserDataPtr //in-out ) Description This function allows you to attach or detach a user-defined function to a specified system event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. You can hook more than one function to an event by making separate calls to MsysHookFunction() for each function that you want to hook. MIL automatically chains and keeps an internal list of all these hooked functions. When a function is hooked, this new function is added to the end of the list. When the event happens, all user-defined functions in the list will be executed in the same order that they were hooked to the event. You can also remove any function from the list; in this case, MIL preserves the order of the remaining functions in the list. You can obtain more information about the event from within the hook-handler function using MsysGetHookInfo(). Note that functions hooked to an event execute on a distinct thread. This permits the functions to run concurrently from the operation that fired the event and from functions hooked to other events. Although there is a small queue to permit a certain amount of overlap, hooked functions should not take longer to execute than the period in which two of their associated events can occur. You cannot determine the instance of the event that fired the function. Parameters Parameters SysId Specifies the identifier of the system on which to hook a function. For specifying the system identifier Value Description MIL system-specifictooltip (‡) M_DEFAULT_HOST Specifies the default Host system of the current MIL application. ‡ MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ‡ HookType Specifies the system event to which to hook the function. This parameter can be set to one of the following values. For specifying the system event to hook Value Description MIL system-specifictooltip (‡) M_CAMERA_PRESENT Hooks the function to the presence of the camera. ‡ MIL system specific Note that this hook requires the use of the mtxgigeservice process. If the service is not started, a MIL error will be generated when calling this value. ‡ M_FEATURE_CHANGE Hooks the function to the event that occurs when the value of a GenICam feature changes. To enable an event to occur when the value of a specific feature changes, use MsysControlFeature() with M_FEATURE_CHANGE_HOOK set to M_ENABLE. Repeat for each feature for which you want to enable a feature change event. To enable an event to occur when the value of any feature changes, use M_FEATURE_CHANGE + M_ALL. This setting is only available for hooking to an image buffer. To retrieve the name of the feature that caused the event, use MsysGetHookInfo() with M_GC_FEATURE_CHANGE_NAME. ‡ M_IO_CHANGE Hooks the function to the event that occurs when an I/O signal changes in accordance with its specified interrupt mode, set using MsysControl() with M_IO_INTERRUPT_ACTIVATION. Within the scope of the hook-handler function, it is prudent to verify that the appropriate I/O signal triggered the hook-handler function, using MsysGetHookInfo() with M_IO_INTERRUPT_SOURCE. If more than one input signal triggers an interrupt at the same time, the hook-handler function (or chain of hook-handler functions) is called for each input signal that generated an interrupt. As a result, any and all user-specified function(s) hooked using this hook type will be executed for each interrupt. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_TIMER_END Hooks the function to the event that occurs when the specified timer completes. ‡ MIL system specific You must specify a combination value from the following table: To specify the timer to which to hook the function ‡ [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_TIMER_START Hooks the function to the event that occurs when the specified timer starts its active period (after the timer delay). ‡ MIL system specific You must specify a combination value from the following table: To specify the timer to which to hook the function ‡ [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_UART_DATA_RECEIVED Hooks the function to the event that occurs when the specified UART receives data. Use MsysInquire() with M_UART_PRESENT to return the number of UARTs available. Note that this value can be used in combination; see below. ‡ M_WATCHDOG_WARNING Hooks the function to the event that occurs when the Watchdog warning timer is not reset before the specified interval expires. From within your hook-handler function, you should reset the Watchdog's main timer. If it is not reset, the Host computer will reboot. ‡ Combination values for M_FEATURE_CHANGE. You can add one of the following values to the above-mentioned value to specify the GenTL configuration file (XML file) associated with the feature. For specifying to hook on a specific feature change event associated with a GenTL configuration file Combination value Description MIL system-specifictooltip (‡) M_GENTL_INTERFACE_NUMBER( MIL_INT IndexValue ) Specifies that the hook will occur on a feature change event for a feature associated with a specific instance of the GenTL interface configuration file (XML file). ‡ Parameters IndexValue Specifies the index of the GenTL interface configuration file. ‡ 0 &lt;= Value &lt;=M_GENTL_INTERFACE_COUNT Specifies the index. ‡ M_ALL Specifies that the hook will occur on all feature change events. ‡ M_GENTL_SYSTEM Specifies that the hook will occur on a feature change event of a feature associated with the GenTL system configuration file (XML file). ‡ Combination value for M_UART_DATA_RECEIVED. You can add the following value to the above-mentioned value to set the UART upon which the system event occurs. For specifying the UART upon which the system event occurs Combination value Description MIL system-specifictooltip (‡) M_UART_NB( MIL_INT DeviceToHook ) Specifies the UART upon which the system event occurs. Use MsysInquire() with M_UART_PRESENT to determine the number of UARTS on the system. ‡ Parameters DeviceToHook Specifies a device (UART) on which the system event occurs. ‡ M_DEVn Specifies the device upon which the system event occurs, where n can be from 0 and 15. ‡ MIL system specific There is 1 UART available on Matrox Morphis. ‡ There are 4 UARTs available on Matrox Solios eA/XA Quad, 2 on Matrox Solios eA/XA Dual, and 1 on Matrox Solios eA/XA Single. ‡ There are 2 UARTs available on Matrox Solios eCL/XCL dual-Base/single-Medium operating in dual-Base mode, and 1 is available on Matrox Solios eCL/XCL-B, eCL/XCL-F, and eCL/XCL dual-Base/single-Medium operating in single-Medium mode. ‡ There are 2 UARTS available on Matrox Radient eCL-DB and eCL-DF, 3 on Matrox Radient eCL-QB, and 1 on Matrox Radient eCL-SF. Note that, using the CLProtocol will occupy one COM port per allocated digitizer. ‡ Combination value for M_TIMER_END , M_TIMER_START. You must add the following value to the above-mentioned values to specify the timer to which to hook the function. For specifying the timer to which to hook the function Combination value Description MIL system-specifictooltip (‡) M_TIMERn Specifies the timer to hook. ‡ Combination value for the values listed in For specifying the system event to hook. You can add the following value to the above-mentioned values to specify that the function should be unhooked. For specifying that the function should be unhooked Combination value Description MIL system-specifictooltip (‡) M_UNHOOK Unhooks the specified function if hooked to the specified event. When you use M_UNHOOK, you must provide the same values for all the parameters as when you originally hooked the function. ‡ HookHandlerPtr Specifies the address of the function that should be called when the specified event occurs. The hook-handler function must be declared as follows: MIL_INT MFTYPE HookHandler( MIL_INT HookType, MIL_ID EventId, void *UserDataPtr ) Parameters HookType Type of system event hooked. EventId Event identifier to pass to MsysGetHookInfo() when inquiring about the hooked event. UserDataPtr Specifies the user data pointer passed to MsysHookFunction(). Upon successful completion, the hook-handler function should return M_NULL. Note, MIL_SYS_HOOK_FUNCTION_PTR and MFTYPE are reserved MIL predefined types for functions and data pointers. UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if not used. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId For specifying the system identifier - HookType For specifying the system event to hook + For specifying to hook on a specific feature change event associated with a GenTL configuration file + For specifying the UART upon which the system event occurs + For specifying the timer to which to hook the function + For specifying that the function should be unhooked - HookHandlerPtr - UserDataPtr Compilation information M_DEVn M_TIMERn ",
      "wordCount": 1543,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysInquire",
      "version": null,
      "title": "MsysInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysInquire.htm",
      "text": " MsysInquire Synopsis Inquire about a system setting. Syntax MIL_INT MsysInquire( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about the specified system setting. Note that you can use MsysControl() to control specific system settings. You can also interactively inquire most of the system settings in real-time, using Matrox Intellicam's Feature Browser. Parameters Parameters SysId Specifies the system identifier. This parameter should be set to one of the following values: For the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, which you have allocated using the MsysAlloc() function. InquireType Specifies the type of system setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] MIL_DOUBLE MIL_ID MIL_INT MIL_INT64 Specifies the address in which to write the requested information. Since the MsysInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For general system settings For inquiring CXP connection errors and settings For discovering connected devices For inquiring I/O signals and their mode For inquiring the state of specified user-bits in a static-user-output register For inquiring the settings of a timer For inquiring the settings of a rotary decoder For controlling the settings of a data latch associated with rotary encoders For UART settings For Watchdog settings For inquiring about an action command For inquiring a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module The following inquire types allow you to inquire general system settings. For general system settings InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_ACCELERATOR_PRESENT Inquires whether the processing accelerator is present. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_NO Specifies that the processing accelerator is not present. ‡ M_YES Specifies that the processing accelerator is present. ‡ M_ALLOCATION_OVERSCAN Inquires whether image buffers, allocated on the system, will be allocated with an overscan region. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that image buffers allocated on the system will have no overscan region. ‡ M_ENABLE Specifies that image buffers are allocated on the system with an overscan region. ‡ M_ALLOCATION_OVERSCAN_SIZE Inquires the size of the overscan region, added around all subsequently allocated image buffers (MbufAlloc...()). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the size of the overscan region, in pixels. ‡ M_ASYNCHRONOUS_CALL_SUPPORT Inquires whether the system supports asynchronous function execution or not. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_NO Specifies that the system does not support asynchronous execution. ‡ M_YES Specifies that the system supports asynchronous execution. ‡ M_BOARD_REVISION Inquires the board revision number. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the board revision number. ‡ M_BOARD_SUB_REVISION Inquires the board sub-revision number. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the board sub-revision number. ‡ M_BOARD_TYPE Inquires the type of system board. To return only the main board type and not the sub-board types (for example, to get M_SOLIOS without M_XCL, M_FAST, or M_DBCL), mask the return value with M_BOARD_TYPE_MASK. For an example of how to use this mask, refer to the examples below. ‡ MIL system specific This control type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_CLARITY_UHD Specifies a Matrox Clarity UHD board. ‡ M_CLARITY_UHD + M_H264 Specifies a Matrox Clarity UHD board with the optional on-board H.264 encoding module. ‡ M_CONCORD_POE + M_DCH Specifies a Matrox Concord PoE base model Dual-Port board. ‡ M_CONCORD_POE + M_DCH + M_TOE Specifies a Matrox Concord PoE with ToE Dual-Port board. ‡ M_CONCORD_POE + M_QCH Specifies a Matrox Concord PoE base model Quad-Port board. ‡ M_CONCORD_POE + M_QCH + M_TOE Specifies a Matrox Concord PoE with ToE Quad-Port board. ‡ M_GENTL Specifies a camera that uses the Matrox GenTL driver. ‡ M_GEVIQ + M_D25G Specifies a Matrox GevIQ Dual 25 Gbps Ethernet board. ‡ M_GIGE_VISION Specifies a camera that uses the Matrox GigE Vision driver. ‡ M_HOST [This is only applicable to Non-Zebra computer] Specifies a Host system. ‡ M_HOST+ M_4SIGHT + M_4SIGHT_EV6 [This is only applicable to Zebra 4Sight] Specifies a Host system allocated on Zebra 4Sight EV6. ‡ M_HOST+ M_4SIGHT + M_4SIGHT_EV7 [This is only applicable to Zebra 4Sight] Specifies a Host system allocated on Zebra 4Sight EV7. ‡ M_HOST + M_SUPERSIGHT [This is only applicable to Zebra Supersight] Specifies a Host system allocated on Zebra SuperSight. ‡ M_INDIO Specifies a Matrox Indio board. ‡ M_IRIS_GTX Specifies a Matrox Iris GTX smart camera. ‡ M_MORPHIS + M_2VD + M_IO Specifies a Matrox Morphis board with two video decoders and the I/O module. ‡ M_MORPHIS + M_4VD + M_IO Specifies a Matrox Morphis board with four video decoders and the I/O module. ‡ M_RADIENT + M_CL + M_DBCL Specifies a Matrox Radient eV-CL dual-Base Camera Link board. ‡ M_RADIENT + M_CL + M_DFCL Specifies a Matrox Radient eV-CL dual-Full Camera Link board. ‡ M_RADIENT + M_CL + M_QBCL Specifies a Matrox Radient eV-CL quad-Base Camera Link board. ‡ M_RADIENT + M_CL + M_SBCL Specifies a Matrox Radient eV-CL single-Base Camera Link board. ‡ M_RADIENT + M_CL + M_SFCL Specifies a Matrox Radient eV-CL single-Full Camera Link board. ‡ M_RADIENT + M_CXP + M_D6G Specifies a Matrox Radient eV-CXP Dual board. ‡ M_RADIENT + M_CXP + M_Q6G Specifies a Matrox Radient eV-CXP Quad board. ‡ M_RAPIXO + M_CL + M_DBCL + M_PF Specifies a Matrox RapixoPro DB-CL (dual-Base Camera Link) with a Processing FPGA. ‡ M_RAPIXO + M_CL + M_DFCL + M_PF Specifies a Matrox RapixoPro DF-CL (dual-Full Camera Link) with a Processing FPGA. ‡ M_RAPIXO + M_CL + M_QBCL + M_PF Specifies a Matrox RapixoPro QB-CL (squad-Base Camera Link) with a Processing FPGA. ‡ M_RAPIXO + M_CL + M_SFCL + M_PF Specifies a Matrox RapixoPro SF-CL (single-Full Camera Link) with a Processing FPGA. ‡ M_RAPIXO + M_CXP + M_D12G Specifies a Matrox Rapixo CXP Dual 12G board. ‡ M_RAPIXO + M_CXP + M_Q6G Specifies a Matrox Rapixo CXP (Quad CXP-6) board. ‡ M_RAPIXO + M_CXP + M_Q6G + M_DFWD Specifies a Matrox Rapixo CXP DF (Quad CXP-6 with data forwarding) board. ‡ M_RAPIXO + M_CXP + M_Q12G Specifies a Matrox Rapixo CXP (Quad CXP-12) board. ‡ M_RAPIXO + M_CXP + M_Q12G + M_DFWD Specifies a Matrox Rapixo CXP DF (Quad CXP-12 with data forwarding) board. ‡ M_RAPIXO + M_CXP + M_Q12G + M_PF Specifies a Matrox Rapixo CXP Pro (Quad CXP-12 with a Processing FPGA) board. ‡ M_RAPIXO + M_CXP + M_S12G Specifies a Matrox Rapixo CXP Single 12G board. ‡ M_SOLIOS + M_XA + M_DA Specifies a Matrox Solios eA/XA dual analog board. ‡ M_SOLIOS + M_XA + M_QA Specifies a Matrox Solios eA/XA quad analog board. ‡ M_SOLIOS + M_XA + M_SA Specifies a Matrox Solios eA/XA single analog board. ‡ M_SOLIOS + M_XCL + M_DBCL Specifies a Matrox Solios eCL/XCL dual-Base Camera Link board. ‡ M_SOLIOS + M_XCL + M_DBCL + M_FAST Specifies a Matrox Solios eCL/XCL dual-Base fast Camera Link board. ‡ M_SOLIOS + M_XCL + M_DBCL + M_PF Specifies a Matrox Solios eCL/XCL dual-Base Camera Link board with a Processing FPGA. ‡ M_SOLIOS + M_XCL + M_SBCL Specifies a Matrox Solios eCL/XCL single-Base Camera Link board. ‡ M_SOLIOS + M_XCL + M_SBCL + M_FAST Specifies a Matrox Solios eCL/XCL single-Base fast Camera Link board. ‡ M_SOLIOS + M_XCL + M_SBCL + M_PF Specifies a Matrox Solios eCL/XCL single-Base Camera Link board with a Processing FPGA. ‡ M_SOLIOS + M_XCL + M_SFCL Specifies a Matrox Solios eCL/XCL single-Full Camera Link board. ‡ M_SOLIOS + M_XCL + M_SFCL + M_FAST Specifies a Matrox Solios eCL/XCL single-Full fast Camera Link board. ‡ M_SOLIOS + M_XCL + M_SFCL + M_PF Specifies a Matrox Solios eCL/XCL single-Full Camera Link board with a Processing FPGA. ‡ M_SOLIOS + M_XCL + M_SMCL Specifies a Matrox Solios eCL/XCL single-Medium Camera Link board. ‡ M_SOLIOS + M_XCL + M_SMCL + M_FAST Specifies a Matrox Solios eCL/XCL single-Medium fast Camera Link board. ‡ M_SOLIOS + M_XCL + M_SMCL + M_PF Specifies a Matrox Solios eCL/XCL single-Medium Camera Link board with a Processing FPGA. ‡ M_USB3_VISION Specifies a camera that uses the Matrox USB3 Vision driver. ‡ M_V4L2 Specifies a camera that uses the Video4Linux2 driver. ‡ M_COM_SUPPORTED Inquires whether the system can be used with the MIL Industrial Communication module (Mcom). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_NO Specifies that the system cannot be used. ‡ M_YES Specifies that the system can be used. ‡ M_CURRENT_THREAD_ID Inquires the identifier of the current system thread. This identifier can be used with the thread module. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID ‡ MIL system thread identifier Specifies the identifier of the current system thread. ‡ M_DCF_SUPPORTED Inquires whether the system supports downloadable digitizer configuration format (DCF) files. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_FALSE Specifies that DCF files are not supported. ‡ M_TRUE Specifies that DCF files are supported. ‡ M_DEFAULT_PITCH_BYTE_MULTIPLE Inquires the pitch (or stride) multiple (in bytes) for the buffers allocated on the system. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the pitch multiple, in bytes. ‡ M_DEVICE_NAME Inquires the user-defined name for the board. This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DEVICE_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the device name that was set using M_DEVICE_NAME. ‡ M_DEVICE_NAME_MAX_SIZE Inquires the maximum length that the device name can have of the string returned by M_DEVICE_NAME. This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the maximum length of the string returned by M_DEVICE_NAME. ‡ M_DIGITIZER_NUM Inquires the total number of possible independent acquisition paths on the system. Note that this is not the same as the total number of allocated acquisition paths on the system. ‡ MIL system specific Inquires the total number of Video4Linux2 cameras discovered. ‡ Inquires the total number of GigE Vision cameras discovered. ‡ Inquires the total number of USB cameras discovered. ‡ Inquires the total number of GenICam complaint cameras discovered. ‡ This inquire type is also available for the Matrox Concord PoE base model. ‡ Inquires the total number of GigE Vision cameras connected directly to Matrox GevIQ or behind a switch. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value &gt;= 0 Specifies the number of independent acquisition paths available. ‡ M_DIGITIZER_TYPE Inquires the type of frame grabber(s) available to allocate a digitizer on the system. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_GTX2000 Specifies a Matrox Iris GTX 2000. ‡ M_GTX2000C Specifies a Matrox Iris GTX 2000C. ‡ M_GTX3000 Specifies a Matrox Iris GTX 3000. ‡ M_GTX3000C Specifies a Matrox Iris GTX 3000C. ‡ M_GTX5000 Specifies a Matrox Iris GTX 5000. ‡ M_GTX5000C Specifies a Matrox Iris GTX 5000C. ‡ M_GTX8000 Specifies a Matrox Iris GTX 8000. ‡ M_GTX8000C Specifies a Matrox Iris GTX 8000C. ‡ M_GTX12000 Specifies a Matrox Iris GTX 12000. ‡ M_GTX12000C Specifies a Matrox Iris GTX 12000C. ‡ M_GTX16000 Specifies a Matrox Iris GTX 16000. ‡ M_GTX16000C Specifies a Matrox Iris GTX 16000C. ‡ M_DISPLAY_OUTPUT_NUM Inquires the number of video output controllers available on your Matrox imaging board. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value &gt;= 0 Specifies the number of video output controllers. ‡ M_DISTRIBUTED_MIL_PROTOCOL Inquires the protocol used for DMIL. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DMIL_NOT_USED Specifies that DMIL is not used. ‡ M_DMIL_PCIE [This is only applicable to Zebra Supersight] Specifies that DMIL is using the PCIE protocol. ‡ M_DMIL_SHM Specifies that DMIL is using the SHM protocol. ‡ M_DMIL_TCPIP Specifies that DMIL is using the TCP/IP protocol. ‡ M_DISTRIBUTED_MIL_REMOTE_COMPUTER_NAME Inquires the name of the remote computer. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISTRIBUTED_MIL_REMOTE_COMPUTER_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the computer name that was set in MsysAlloc(). ‡ M_DISTRIBUTED_MIL_TYPE Inquires how the system is allocated via DMIL. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DMIL_LOCAL_HOST Specifies that the system is allocated on the local computer with DMIL. ‡ M_DMIL_NOT_USED Specifies that the system is not allocated with DMIL. ‡ M_DMIL_REMOTE Specifies that the system is allocated on a remote computer with DMIL. ‡ M_EXTENDED_INIT_FLAG Inquires the system initialization flag. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_DEFAULT Specifies the default value. ‡ M_CL Specifies to initialize Camera Link transport layer technology. ‡ M_COMPLETE Specifies to initialize the system completely; the system is initialized to its default state and any required resident software is downloaded. ‡ M_CXP Specifies to initialize CoaXPress transport layer technology. ‡ M_GEV Specifies to initialize Ethernet transport layer technology. ‡ M_MIXED Specifies to initialize the transport layer technology specified by the GenTL Producer (library). ‡ M_U3V Specifies to initialize USB transport layer technology. ‡ M_FIRMWARE_BUILDDATE Inquires the date when the grab firmware was built. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the grab firmware build date. ‡ M_FIRMWARE_BUILDDATE_PROCESSING Inquires the date when the processing firmware was built. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the processing firmware build date. ‡ M_FIRMWARE_REVISION Inquires the revision number of the grab firmware. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the grab firmware revision number. ‡ M_FIRMWARE_REVISION_PROCESSING Inquires the revision number of the processing firmware. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the grab firmware revision number. ‡ M_GC_FEATURE_EXECUTE_POLLING_MODE Inquires whether to automatically perform execution-complete polling on executable camera features. ‡ MIL system specific For Radient eV-CXP, this constant is only available as of Update 73. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUTOMATIC Specifies that the specific executable camera feature is executed synchronously. ‡ M_MANUAL Specifies that the executable camera feature is executed asynchronously. ‡ M_GC_LOCAL_MAC_ADDRESS + n Inquires the MAC address at port n, where n is a number between 0 and the number of Ethernet ports (M_GC_NIC_PORT_COUNT). This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the MAC address at the specified port. The MAC address is stored as a 48-bit integer in a MIL_INT64. Typically, MAC addresses are written as 6 separate 8-bit numbers (hexadecimal number pairs). To retrieve these numbers, map the 48-bit MAC address to 6 MIL_UINT8 variables. For example, the stored representation of the MAC address 84:20:fc:33:0e:e9 is 0x0000e90e33fc2084. The least-significant byte (84) is the first number of the MAC address, the second least-significant byte (0e) is the second number of the MAC address and so on. The first 4 hexadecimal digits (2 most significant bytes) are not part of the MAC address. ‡ M_GC_NIC_PORT_COUNT Inquires the number of Ethernet ports. This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 2 Specifies that the system has 2 Ethernet ports. ‡ 4 Specifies that the system has 4 Ethernet ports. ‡ M_GENICAM_AVAILABLE Inquires whether the system supports a GenICam-compliant device (such as a GigE Vision device). ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_FALSE Specifies that GenICam is not available. ‡ M_TRUE Specifies that GenICam is available. ‡ M_GENTL_DEVICE_COUNT Inquires the number of GenTL devices associated with the specified interface. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of GenTL devices. ‡ M_GENTL_INTERFACE_COUNT Inquires the number of GenTL interfaces available to your MIL system. This is useful when the GenTL Producer (library) is of a mixed type. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 0 &lt;= Value &lt;= 33 Specifies the number of GenTL interfaces. ‡ M_GRAB_FPGA_FAN_RPM Inquires the revolutions per minute (RPM) of the grab firmware's fan. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the speed of the grab firmware's fan, in RPM. ‡ M_INSTALLED_SYSTEM_DEVICE_COUNT Inquires the number of installed devices of the specified system type. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_UNKNOWN Specifies that the number of devices is unknown. ‡ Value Specifies the number of installed devices of the specified system type. ‡ MIL system specific Note that for this system type, this inquire type will return 1. ‡ M_LED_USER Inquires the color of the user LED on your Matrox Iris GTX. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_GREEN Specifies to turn the user LED green. ‡ M_OFF Specifies to turn the user LED off. ‡ M_ORANGE Specifies to turn the user LED orange. ‡ M_RED Specifies to turn the user LED red. ‡ M_LOCATION Inquires the location of the specified system. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_LOCAL Specifies that the system is on the master computer. ‡ M_REMOTE Specifies that the system is on a remote computer or was allocated via Distributed MIL. ‡ M_MEMORY_FREE Inquires the total amount of free on-board memory. Note that this memory might not be contiguous. ‡ MIL system specific Note that, if the specified system is a Matrox Solios eCL/XCL with Processing FPGA, the dedicated Processing FPGA memory is included in the amount returned. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the amount of free on-board memory, in bytes. ‡ M_MEMORY_FREE_BANK_0 Inquires the total amount of free on-board memory the first SDRAM bank. Note that this memory might not be contiguous. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the amount of free on-board memory in the first SDRAM bank, in bytes. ‡ M_MEMORY_FREE_BANK_1 Inquires the total amount of free on-board memory second SDRAM bank. Note that this memory might not be contiguous. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the amount of free on-board memory second SDRAM bank, in bytes. ‡ M_MEMORY_FREE_BANK_2 Inquires the total amount of free on-board memory in the third SDRAM bank. Note that this memory might not be contiguous. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the amount of free on-board memory in the third SDRAM bank, in bytes. ‡ M_MEMORY_SIZE Inquires the amount of on-board memory. ‡ MIL system specific Note that, if the specified system is a Matrox Solios eCL/XCL with Processing FPGA, the dedicated Processing FPGA memory is included in the amount returned. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total amount of on-board memory, in Mbytes. ‡ M_MEMORY_SIZE_BANK_0 Inquires the total amount of on-board shared memory in the first SDRAM bank. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total amount of on-board shared memory in the first SDRAM bank, in Mbytes. ‡ M_MEMORY_SIZE_BANK_1 Inquires the total amount of on-board shared memory. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total amount of on-board shared memory, in Mbytes. ‡ MIL system specific This is the second bank of SDRAM. ‡ This is a bank of SRAM. ‡ M_MEMORY_SIZE_BANK_2 Inquires the total amount of on-board shared memory in the second SRAM bank. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total amount of on-board shared memory in the second SRAM bank, in Mbytes. ‡ M_MODIFIED_BUFFER_HOOK_MODE Inquires whether to run user-defined functions hooked to a buffer modification on separate threads, up to the number of CPU cores present in the computer. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_MULTI_THREAD Specifies to run user-defined functions hooked to a buffer modification on separate threads. ‡ M_SINGLE_THREAD Specifies that only one thread should be created and that all user-defined functions hooked to buffer modifications are run on the same thread. ‡ M_NUM_CAMERA_PRESENT Inquires the number of GigE Vision-compliant cameras connected to the allocated system. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of GigE Vision-compliant cameras. ‡ M_NUMBER Inquires the board number of the system. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEVn Specifies the device number (rank) of the board. ‡ MIL system specific This value is combined with a value from the following table: To specify the GenTL Producer (library) available to this MIL GenTL system ‡ \"BoardIdentifierString\" Specifies the user-defined name of the board. ‡ M_OWNER_APPLICATION Inquires the MIL identifier of the application context in which the system has been allocated. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID ‡ MIL application ID Specifies the MIL application context identifier. ‡ M_PCIE_NUMBER_OF_LANES Inquires the number of PCIe lanes that are currently active. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 1; 2; 4; 8; 16 Specifies the number of active lanes. ‡ M_PCIE_NUMBER_OF_LANES_MAX Inquires the total number of PCIe lanes that your board can use. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 1; 2; 4; 8; 16 Specifies the total number of lanes. ‡ M_PCIE_SPEED Inquires the negotiated generation of the PCIe standard currently being used by the active PCIe lanes. For example, if your board is a PCIe 3.0 device, but it is connected to a PCIe 2.0 device, this inquire type returns M_GEN2. To establish the current PCIe speed possible for your board, use the following equation: M_PCIE_NUMBER_OF_LANES x 2 x speed of PCIe generation ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_GENn Specifies the PCIe generation, where n is a value from 1 to 3. ‡ M_INVALID Specifies that the PCIe generation cannot be returned. ‡ M_PCIE_SPEED_MAX Inquires the generation of the PCIe standard of your board. For example, if your board is a PCIe 3.0 device, this inquire type returns M_GEN3. To establish the maximum PCIe speed possible for your board, use the following equation: M_PCIE_NUMBER_OF_LANES_MAX x 2 x maximum speed of PCIe generation ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_GENn Specifies the PCIe generation, where n is a value from 1 to 3. ‡ M_INVALID Specifies that the PCIe generation cannot be returned. ‡ M_POWER_OVER_CABLE Inquires whether the board provides power to connected devices. ‡ MIL system specific You must specify a combination value from the following table: To specify which connector or port to inquire ‡ For a Host system, this inquires whether PoE (Power over Ethernet) is enabled on the specified port. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ For Matrox Concorde POE, this inquires whether PoE (Power over Ethernet) is enabled on all ports. This control type is also available for the Matrox Concord PoE base model. ‡ For Matrox Rapixo CXP, this inquires whether PoCXP (Power over CXP) is automatically enabled when a PoCXP-compliant camera is connected to the specified connector. M_ON and M_OFF are only returned when PoCXP has been manually enabled or disabled using MsysControl() with M_POWER_OVER_CABLE. When automatic detection is enabled (M_AUTOMATIC), use M_POWER_OVER_CABLE_STATUS to learn whether PoCXP is currently enabled or disabled. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUTOMATIC Specifies to automatically enable or disable PoCXP on this CXP connector, depending on detected device support. ‡ M_OFF Specifies not to provide power to connected devices. ‡ M_ON Specifies to provide power to connected devices. ‡ M_POWER_OVER_CABLE_STATUS Inquires whether PoCXP (power over CXP) is enabled on a CXP connector, and whether an over- or under-current condition has been detected. Once detected, an over- or under-current condition persists until the PoCXP status is reset for the connector (using MsysControl() with M_POWER_OVER_CABLE and M_RESET). Typically, to prevent the over- or under-current condition from immediately recurring, you should first restart PoCXP for this connector using MsysControl() with M_POWER_OVER_CABLE and M_OFF and then returning it to its previous setting (M_AUTOMATIC is recommended). If the condition persists, discontinue using PoCXP with your camera by leaving M_POWER_OVER_CABLE set to M_OFF. You must specify a combination value from the following table: To specify which connector or port to inquire ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_OFF Specifies that PoCXP is disabled on the CXP connector, either because a non-PoCXP-compatible camera is connected, or because PoCXP was manually disabled (using MsysControl() with M_POWER_OVER_CABLE and M_OFF). ‡ M_ON Specifies that PoCXP is enabled on the CXP connector, either because a PoCXP-compatible camera is connected, or because PoCXP was manually enabled (using MsysControl() with M_POWER_OVER_CABLE and M_ON). ‡ M_OVER_CURRENT Specifies that PoCXP is disabled on the connector because an over-current condition was detected and has not been reset. ‡ M_SENSE Specifies that PoCXP will be enabled or disabled automatically on the connector when a camera is connected (depending on detected device support). ‡ M_UNDER_CURRENT Specifies that PoCXP is disabled on the connector because an under-current condition was detected and has not been reset. ‡ M_PROCESSOR_NUM Inquires the number of processors (CPUs) available on the allocated Matrox imaging board. ‡ MIL system specific Note that, when dealing with a Matrox Solios eCL/XCL with the optional Processing FPGA, the FPGA will register as a processor. To find out what type of Matrox Solios you are using, use M_BOARD_TYPE. ‡ This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value &gt;= 0 Specifies the number of processors available. ‡ M_PROFINET_HARDWARE_SUPPORTED Inquires whether the system has access to a Matrox PROFINET Engine. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_NO Specifies that the system does not have access. ‡ M_YES Specifies that the system has access. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_SERIAL_NUMBER Inquires the serial number of the Matrox Imaging board, as a string. ‡ MIL system specific [This is only applicable to Zebra Supersight and Zebra 4Sight] M_SERIAL_NUMBER only applies to Matrox products. When a host system is allocated on a non-Zebra computer, no serial number is returned. ‡ This inquire type is also available for the Matrox Concord PoE base model. ‡ When a Video4Linux2 system is allocated, no serial number is returned. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_SERIAL_NUMBER + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_SHARED_MEMORY_FREE Inquires the total amount of free on-board shared memory. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total amount of free on-board shared memory, in bytes. ‡ M_SHARED_MEMORY_SIZE Inquires the total amount of on-board shared memory. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total amount of on-board shared memory, in Mbytes. ‡ M_SYSTEM_DESCRIPTOR Inquires the system descriptor. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_SYSTEM_DESCRIPTOR + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_SYSTEM_TYPE Inquires the type of system allocated. If a DMIL remote system has been registered, you can use the following macros to further inquire about the system: To determine whether the system is a DMIL remote system, use the M_IS_SYSTEM_DISTRIBUTED macro. This macro returns a non-zero value if the system is a DMIL remote system and zero if the system is local. To remove the bit flag for DMIL remote systems, use the M_REAL_SYSTEM_TYPE macro. This macro returns only the system type and not the system type and DMIL remote system bit flag. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_SYSTEM_CLARITY_UHD_TYPE Specifies a MIL Clarity UHD system. ‡ M_SYSTEM_CONCORD_POE_TYPE Specifies a MIL Concord POE system. Note that to use Matrox Concord PoE for acquisition, you must allocate and use a MIL GigE Vision system (using MsysAlloc() with M_SYSTEM_GIGE_VISION) instead; refer to information denoted for a GigE Vision system. You only need to allocate and use a MIL Concord PoE system (using MsysAlloc() with M_SYSTEM_CONCORD_POE) to use the other functionality on the board and to inquire about the board itself. So information in this reference, for use with a Concord PoE system, is denoted Concord PoE with ToE since it is typically only applicable to this model of the board. If the information is applicable to the Matrox Concord PoE base model it will be explicitly specified. For more information, see the Using a MIL Concord PoE system with the Matrox Concord PoE base model section of the Matrox Concord PoE chapter in the MIL Hardware-specific Notes. This inquire type is also available for the Matrox Concord PoE base model. ‡ M_SYSTEM_GENTL_TYPE Specifies a MIL GenTL system. ‡ M_SYSTEM_GEVIQ_TYPE Specifies a MIL GevIQ system. ‡ M_SYSTEM_GIGE_VISION_TYPE Specifies a MIL GigE Vision system. ‡ M_SYSTEM_HOST_TYPE Specifies the Host. ‡ M_SYSTEM_INDIO_TYPE Specifies a MIL Indio system. ‡ M_SYSTEM_IRIS_GTX_TYPE Specifies a MIL Iris GTX system. ‡ M_SYSTEM_MORPHIS_TYPE Specifies a MIL Morphis system. ‡ M_SYSTEM_RADIENTCXP_TYPE Specifies a MIL Radient eV-CXP system. ‡ M_SYSTEM_RADIENTEVCL_TYPE Specifies a MIL Radient eV-CL system. ‡ M_SYSTEM_RAPIXOCL_TYPE Specifies a MIL Rapixo Pro CL system. ‡ M_SYSTEM_RAPIXOCXP_TYPE Specifies a MIL Rapixo CXP system. ‡ M_SYSTEM_SOLIOS_TYPE Specifies a MIL Solios system. ‡ M_SYSTEM_USB3_VISION_TYPE Specifies a MIL USB3 Vision system. ‡ M_SYSTEM_V4L2_TYPE Specifies a MIL Video4Linux2 system. ‡ M_TEMPERATURE Inquires the current temperature of the sensor. ‡ MIL system specific On Matrox Clarity UHD, this value returns the temperature of the Host interface. ‡ On Matrox Iris GTX, this value returns the temperature of the daughter board (inbox). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the current temperature, in degrees Celsius. ‡ M_TEMPERATURE_CPU Inquires the current temperature of the CPU. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the current temperature, in degrees Celsius. ‡ M_TEMPERATURE_FPGA Inquires the current temperature of the grab firmware. ‡ MIL system specific Note that, on your Matrox Clarity UHD, this value inquires the current temperature of the Acquisition controller. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the current temperature, in degrees Celsius. ‡ M_TEMPERATURE_FPGA_MAX_MEASURED Inquires the maximum temperature of the grab firmware measured. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the maximum measured temperature, in degrees Celsius. ‡ M_TEMPERATURE_IMAGE_SENSOR Inquires the current temperature of the image sensor. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the current temperature, in degrees Celsius. ‡ M_THREAD_MODE Inquires whether threads allocated on the system can execute in asynchronous mode. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ASYNCHRONOUS Specifies that threads allocated on the system can execute in asynchronous mode. ‡ M_SYNCHRONOUS Specifies that threads allocated on the system can only execute in synchronous mode. ‡ M_TIMEOUT Inquires the maximum amount of time for the Host to wait for a synchronous function to return before generating a time-out error, in sec. ‡ MIL system specific This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INFINITE Waits indefinitely. ‡ Value Specifies the time to wait, in sec. ‡ M_UART_PRESENT Inquires the number of UARTs on the system. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ This inquire type is also available for the Matrox Concord PoE base model. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of UARTs on the system. ‡ Combination value for [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_CLARITY_UHD_TYPE: M_SYSTEM_CLARITY_UHD_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_CONCORD_POE_TYPE: M_SYSTEM_CONCORD_POE_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_GENTL_TYPE: M_SYSTEM_GENTL_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_GEVIQ_TYPE: M_SYSTEM_GEVIQ_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_GIGE_VISION_TYPE: M_SYSTEM_GIGE_VISION_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_HOST_TYPE: M_SYSTEM_HOST_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_INDIO_TYPE: M_SYSTEM_INDIO_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_IRIS_GTX_TYPE: M_SYSTEM_IRIS_GTX_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_MORPHIS_TYPE: M_SYSTEM_MORPHIS_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_RADIENTCXP_TYPE: M_SYSTEM_RADIENTCXP_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_RADIENTEVCL_TYPE: M_SYSTEM_RADIENTEVCL_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_RAPIXOCL_TYPE: M_SYSTEM_RAPIXOCL_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_RAPIXOCXP_TYPE: M_SYSTEM_RAPIXOCXP_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_SOLIOS_TYPE: M_SYSTEM_SOLIOS_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_USB3_VISION_TYPE: M_SYSTEM_USB3_VISION_TYPE ], [when InquireType=M_SYSTEM_TYPE and UserVarPtr=M_SYSTEM_V4L2_TYPE: M_SYSTEM_V4L2_TYPE]. The following value might be combined with the above-mentioned values to determine if the inquired system type is remote. By default, an installed systems that is remote will have a distributed flag appended to the returned system type. For inquiring if a system is remote Combination value Description M_SYSTEM_DISTRIBUTED_FLAG Specifies that the system is a DMIL remote system. The following inquire types and inquire values relate to (if available) the connection. For inquiring CXP connection errors and settings InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_CONNECTION_STATE Inquires the state of the connection for a Matrox Rapixo CXP input connector. Note that, connection errors are only meaningful if the specified connection is locked. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INVALID Specifies that the state of the connection is invalid. For example, if you have a Matrox Rapixo CXP Dual board, you can only have connections at input connectors 0 and 1. Therefore, input connectors 2 and 3 would return M_INVALID. ‡ M_LOCK Specifies that the state of the connection is locked. ‡ M_UNLOCK Specifies that the state of the connection is unlocked. ‡ M_TL_ERROR_CORRECTED_COUNT Inquires the count of corrected duplicate character errors in the CXP control words. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of corrected duplicate character errors in the CXP control words. ‡ M_TL_ERROR_COUNT Inquires the count of all errors encountered. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of all errors encountered. ‡ M_TL_ERROR_CTRL_CRC_COUNT Inquires the count of CRC errors detected in a control packet. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of CRC errors detected in a control packet. ‡ M_TL_ERROR_DATA_CRC_COUNT Inquires the count of CRC errors detected in a data packet. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of CRC errors detected in a data packet. ‡ M_TL_ERROR_ENCODING_COUNT Inquires the count of protocol encoding errors detected. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of protocol encoding errors detected. ‡ M_TL_ERROR_EVENT_CRC_COUNT Inquires the count of CRC errors detected in an event packet. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of CRC errors detected in an event packet. ‡ M_TL_ERROR_LOCK_LOSS_COUNT Inquires the count of lock losses encountered. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of lock losses encountered. ‡ M_TL_ERROR_UNCORRECTED_COUNT Inquires the count of uncorrected duplicate character errors in the CXP control words. You must specify a combination value from the following table: To specify the CXP input connector ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the current count of uncorrected duplicate character errors in the CXP control words. ‡ Combination value for the values listed in For inquiring CXP connection errors and settings. You must add the following value to the above-mentioned values to specify the CXP input connector. For specifying the CXP input connector Combination value Description MIL system-specifictooltip (‡) M_CONNECTIONn Specifies the connection made at CXP input connector n, where n is the CXP input connector number from 0 to 3. ‡ Combination value for [when InquireType=M_NUMBER and UserVarPtr=M_DEVn: M_DEVn]. The following value is combined with the above-mentioned value to specify the GenTL Producer (library) available to this MIL GenTL system. For identifying the instance of the GenTL Producer library identifier to use Combination value Description MIL system-specifictooltip (‡) M_GENTL_PRODUCER( MIL_INT IndexValue ) Specifies the GenTL Producer (library) available to this MIL GenTL system. ‡ Parameters IndexValue Specifies the index of the GenTL Producer. ‡ 0 &lt;= Value &lt;= 127 Specifies the index. ‡ Combination value for M_GENTL_DEVICE_COUNT. You can add the following value to the above-mentioned value to specify about which interface type to inquire. The GenTL interface refers to the type of physical connection (port) between the Host and the device (such as Camera Link or Ethernet connections). A mixed-type GenTL Producer (library) supports multiple interface types and M_GENTL_INTERFACEn can be used with any GenTL Producer provided it reports more than one type of interface. You can use the value below to specify about which interface type you would like to inquire. For specifying which configuration information file to access Combination value Description MIL system-specifictooltip (‡) M_GENTL_INTERFACEn Specifies the GenTL interface to use. ‡ Combination value for [when InquireType=M_MODIFIED_BUFFER_HOOK_MODE and UserVarPtr=M_MULTI_THREAD: M_MULTI_THREAD]. The following value might be combined with the above-mentioned value to determine the number of hook threads. Returns the number of hook threads that were allocated Combination value Description MIL system-specifictooltip (‡) Value &gt;= 1 Specifies the number of hook threads that were allocated . ‡ Combination value for M_DIGITIZER_TYPE , M_TEMPERATURE_IMAGE_SENSOR. You can add the following value to the above-mentioned values to specify the acquisition path to inquire. For specifying the acquisition path to inquire Combination value Description MIL system-specifictooltip (‡) M_DEV0 Specifies the number of the acquisition path to inquire. ‡ Combination value for [when InquireType=M_EXTENDED_INIT_FLAG and UserVarPtr=M_COMPLETE: M_COMPLETE]. The following value might be combined with the above-mentioned value to set that the board will have a user-defined board name.. You can use the following value on its own, or add it to the above-mentioned value, to specify that the target board is identified using its user-defined name. This InitFlag is also available for the Matrox Concord PoE base model. For specifying that the target board is identified using its user-defined name Combination value Description MIL system-specifictooltip (‡) M_DEVICE_NAME Specifies that the SystemNum parameter identifies the target board using its user-defined name. ‡ Combination value for M_POWER_OVER_CABLE , M_POWER_OVER_CABLE_STATUS. You must add the following value to the above-mentioned values to specify which connector or port to inquire. For specifying which connector or port to inquire Combination value Description MIL system-specifictooltip (‡) M_CONNECTIONn Specifies to inquire connector n, where n corresponds to a physical connector or port on your board or industrial computer. ‡ The following inquire types allow you to inquire information about discovered devices accessible by the specified system. Before using these inquire types, you must refresh the list of discovered devices for the specified system using MsysControl() with M_DISCOVER_DEVICE. This list is cached; if devices are connected or disconnected, you must refresh the list (until you do, using these inquire types will return outdated information). For discovering connected devices InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_DISCOVER_DEVICE_ADDRESS + n Inquires the IP address (IPv4) of device n as a string, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_ADDRESS + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"nnn.nnn.nnn.nnn\") 1 Specifies the IP address of the GigE Vision-compliant grabberless interface camera, as a string. The address string is expressed in dotted decimal notation, where each dotted decimal (nnn) is a number between 000 and 255. ‡ M_DISCOVER_DEVICE_ALLOCATION_STATUS + n Inquires whether device n has been allocated, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEVICE_ALLOCATED Specifies that the device is allocated (either by this application, or by another application). ‡ MIL system specific The device might be allocated by an application running on another computer on the network. ‡ M_DEVICE_FREE Specifies that the device is not allocated. You can allocate the device using MdigAlloc(). ‡ M_DEVICE_UNREACHABLE Specifies that the device is unreachable. ‡ MIL system specific The device is using an IP address that is outside the range of valid addresses on the network. ‡ The device is controlled by a third-party library. Install the Matrox USB3 Vision driver to resolve the issue. ‡ M_DEVICE_UNREACHABLE_ON_DHCP_NETWORK Specifies that the device is unreachable on the DHCP network. The device has DHCP disabled and is using a static IP or link-local address (LLA). Connect the device peer-to-peer to resolve the issue. Note that to connect the device peer-to-peer, you must enable DHCP and disable static IP on the device. ‡ M_DISCOVER_DEVICE_COUNT Inquires the number of devices that are accessible by the specified system. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of devices that are accessible by the specified system. ‡ M_DISCOVER_DEVICE_DIGITIZER_NUMBER + n Inquires the digitizer number that you can pass to MdigAlloc() to allocate device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEVn Specifies the digitizer number. ‡ M_DISCOVER_DEVICE_INTERFACE_NAME + n Inquires the name of the host interface used by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_INTERFACE_NAME + n ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_INTERFACE_TYPE + n Inquires the type of interface used by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_CL Specifies that the device is connected using Camera Link. ‡ M_CLHS Specifies that the device is connected using Camera Link HS (High Speed). ‡ M_CUSTOM Specifies that the device is connected using a non-standard interface. ‡ M_CXP Specifies that the device is connected using CoaXPress. ‡ M_GIGE_VISION Specifies that the device is connected using GigE Vision. ‡ M_USB3_VISION Specifies that the device is connected using USB3 Vision. ‡ M_V4L2 Specifies that the device is connected using Video4Linux2. ‡ M_DISCOVER_DEVICE_MANUFACTURER_INFO + n Inquires the manufacturer-specific information string reported by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). If the camera does not provide this information, an empty string \"\\0\" is written. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_MANUFACTURER_INFO + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_MANUFACTURER_NAME + n Inquires the manufacturer name string reported by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). If the camera does not provide this information, an empty string \"\\0\" is written. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_MANUFACTURER_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_MODEL_NAME + n Inquires the model name string reported by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). If the camera does not provide this information, an empty string \"\\0\" is written. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_MODEL_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_SERIAL_NUMBER + n Inquires the serial number of device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_SERIAL_NUMBER + n ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_UNIQUE_IDENTIFIER + n Inquires the unique identifier reported by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_VERSION + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_USER_NAME + n Inquires the user-defined name string reported by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). Refer to your camera manual to learn how to set this name string. If the camera does not provide this information, an empty string \"\\0\" is written. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_USER_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ M_DISCOVER_DEVICE_VERSION + n Inquires the version number string reported by device n, where n is a number between 0 and the number of discovered devices (M_DISCOVER_DEVICE_COUNT). If the camera does not provide this information, an empty string \"\\0\" is written. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_DISCOVER_DEVICE_VERSION + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ 1 If the value was passed in a variable, it won't be returned enclosed in MIL_TEXT(). The following inquire types and inquire values allow you to inquire the number, mode, and the purpose of I/O signals (such as, auxiliary signal). Once the format, routing, and mode are determined for an I/O signal, you can further inquire the I/O signal using the inquire types described in the For inquiring the state of specified user-bits in a static-user-output register table. Note that for other Matrox imaging boards that have auxiliary I/O signals, but are not supported with the constants below, see MdigInquire(). For inquiring I/O signals and their mode InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_AUX_IO_COUNT Inquires the total number of auxiliary signals. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of auxiliary signals. ‡ M_AUX_IO_COUNT_IN Inquires the total number of auxiliary input and I/O signals. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of auxiliary input and I/O signals. ‡ M_AUX_IO_COUNT_OUT Inquires the total number of auxiliary output and I/O signals. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of auxiliary output and I/O signals. ‡ M_IO_DEBOUNCE_TIME Inquires the amount of time that the specified auxiliary input signal is debounced. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value &gt;= 0 Specifies the minimum amount of time to ignore any additional signal transitions after accepting a signal transition, in nsec. ‡ M_IO_FORMAT Inquires the format for an I/O signal. For more information, refer to the Technical information appendix in the Installation and Hardware Reference manual for your Matrox imaging board. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_CURRENT_SOURCE Specifies that the specified I/O is an current-controlled output. ‡ M_OPEN_DRAIN Specifies that the specified I/O is an open collector (open drain) I/O signal. ‡ M_OPTO Specifies that the specified I/O is an opto-coupled I/O signal. ‡ M_IO_GLITCH_FILTER_STATE Inquires whether the glitch filter is enabled. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies not to use a glitch filter. ‡ M_ENABLE Specifies to use a glitch filter. ‡ M_IO_INTERRUPT_ACTIVATION Inquires the signal transition upon which to generate an interrupt, if interrupt generation has been enabled for the specified I/O signal. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ANY_EDGE Specifies to generate an interrupt upon both a low-to-high and a high-to-low signal transition. ‡ M_EDGE_FALLING Specifies that an interrupt will be generated upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that an interrupt will be generated upon a low-to-high signal transition. ‡ M_IO_INTERRUPT_STATE Inquires whether to generate an interrupt upon the specified transition of the I/O signal. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies not to generate an interrupt. ‡ M_ENABLE Specifies to generate an interrupt. ‡ M_IO_INVERTER Inquires whether the output of the specified I/O signal should be inverted. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEFAULT Same as M_DISABLE. ‡ M_DISABLE Specifies not to invert the specified I/O signal. ‡ M_ENABLE Specifies to invert the specified I/O signal. ‡ M_IO_MODE Inquires mode of the specified I/O signal. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INPUT Specifies that the signal is for input. ‡ M_OUTPUT Specifies that the signal is for output. ‡ M_IO_SOURCE Inquires the type of signal to route to an output signal, or an I/O signal set to output mode. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_EXPOSURE Specifies to route the exposure signal of the camera. ‡ M_GRAB_TRIGGER_READY Specifies to route the internal grab trigger ready signal. ‡ M_IO_COMMAND_LISTn Specifies to route a bit of the I/O command register of I/O command list n, where n is the number of the I/O command list. This value is combined with a value from the following table: To specify which I/O command register bit was used ‡ M_ROTARY_ENCODERn Specifies to route the output of rotary encoder n, where n is the number of rotary encoders available. ‡ M_TIMER_STROBE Specifies to route the internal timer strobe signal. ‡ M_TIMERn Specifies to route the output of timer n, where n is the number of timers available. ‡ M_USER_BITn Specifies to route the state of bit n of the main static-user-output register, where n is the bit number. ‡ M_IO_STATUS Inquires the status of the specified I/O signal. You must specify a combination value from the following table: To specify the type and number of the I/O signal ‡ MIL system specific Inquiring the status of signals dedicated for trigger inputs will generate an error. ‡ [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INVALID Specifies that the I/O signal is disabled. ‡ M_OFF Specifies that the I/O signal is off. ‡ M_ON Specifies that the I/O signal is on. ‡ M_UNKNOWN Specifies that the I/O signal cannot be inquired with its current configuration. ‡ M_IO_STATUS_ALL Inquires the status of all available I/O signals. Note that if there are I/O signals that cannot be inquired, the bits representing those signals, in the bit-encoded value returned, are not necessarily valid; these bits should be ignored. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the bit-encoded value representing the status of all available and inquirable I/O signals. ‡ MIL system specific The status of signals dedicated for trigger inputs are indeterminable. The bit(s) representing dedicated trigger signal(s) are to be ignored. ‡ Combination value for M_IO_DEBOUNCE_TIME , M_IO_FORMAT , M_IO_GLITCH_FILTER_STATE , M_IO_INTERRUPT_ACTIVATION , M_IO_INTERRUPT_STATE , M_IO_INVERTER , M_IO_MODE , M_IO_SOURCE , M_IO_STATUS. You must add the following value to the above-mentioned values to specify the type and number of the I/O signal. For inquiring the type and number of the I/O signal Combination value Description MIL system-specifictooltip (‡) M_AUX_IOn Specifies to affect auxiliary signal n, where n is the signal number. ‡ Combination value for M_IO_STATUS_ALL. You can add the following value to the above-mentioned value to specify the type of I/O signal to inquire. For specifying the type of I/O signal to inquire Combination value Description MIL system-specifictooltip (‡) M_AUX_IO Specifies to inquire all auxiliary signals. ‡ The following inquire types and inquire values specify the settings for specified bits in a static-user-output register. The user-bits are the bits associated with output signals or I/O signals set to output. To establish which user-bits can be routed to a specific signal, see the connectors and signal names section of the MIL Hardware-specific Notes chapter for your Matrox imaging board. Note that for other Matrox imaging boards that have user-bits, but are not supported with the constants below, see MdigInquire(). For inquiring the state of specified user-bits in a static-user-output register InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_USER_BIT_COUNT Inquires the total number of bits of the main static-user-output register. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of bits in the main static-user-output register. ‡ M_USER_BIT_STATE Inquires the state of the specified bit in a static-user-output register. You must specify a combination value from the following table: To specify the bit in the static-user-output register ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_OFF Specifies that the specified bit is set to off. ‡ M_ON Specifies that the specified bit is set to on. ‡ M_USER_BIT_STATE_ALL Inquires the state of all the bits in the main static-user-output register. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies a bit-encoded value that establishes the value of all the bits of the specified static-user-output register. ‡ Combination value for M_USER_BIT_STATE. You must add the following value to the above-mentioned value to specify the bit in the static-user-output register. For inquiring the bit in the static-user-output register Combination value Description MIL system-specifictooltip (‡) M_USER_BITn Specifies to affect bit n of the main static-user-output register. ‡ The following inquire types and inquire values allow you to inquire about timers and the signals generated from a timer (timer output signals). For more information, see the Timers and coordinating events section of Chapter 56: I/O signals and communicating with external devices. For inquiring the settings of a timer InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_TIMER_ARM Inquires whether to enable the timer arming mechanism. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that timer arming is disabled. ‡ M_ENABLE Specifies that timer arming is enabled. ‡ M_TIMER_ARM_ACTIVATION Inquires the signal transition upon which to arm the timer. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ANY_EDGE Specifies that the timer will be armed by both a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the timer will be armed upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the timer will be armed upon a low-to-high signal transition. ‡ M_LEVEL_HIGH Specifies that a timer is continuously armed during a high signal polarity. ‡ M_LEVEL_LOW Specifies that a timer is continuously armed during a low signal polarity. ‡ M_TIMER_ARM_SOURCE Inquires which input signal will arm the timer. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the source signal used to arm the specified timer, where n is the number of the auxiliary signal. ‡ M_EXPOSURE Specifies to use the exposure signal as the trigger source. ‡ M_GRAB_TRIGGER_READY Specifies to route the internal grab trigger ready signal to the specified signal. ‡ M_SOFTWARE Specifies to use software to arm the specified timer. ‡ M_TIMER_STROBE Specifies to route the strobe's timer signal to the specified signal. ‡ M_TIMERn Specifies to use the output signal of the specified timer as the source signal to arm the timer, where n is the timer number. ‡ M_TIMER_CLOCK_ACTIVATION Inquires the edge of the signal that will increment the clock used to control the active portion of the timer's output signal. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ANY_EDGE Specifies that the clock will be incremented by both a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the clock will be incremented by a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the clock will be incremented by a low-to-high signal transition. ‡ M_TIMER_CLOCK_FREQUENCY Inquires the frequency of the clock source signal for the active portion of the timer's output signal (M_TIMER_CLOCK_SOURCE). You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ M_UNKNOWN Specifies that the signal is not periodic or the frequency is unknown. ‡ 0 &lt; Value &lt;= Frequency of M_SYSCLK Specifies the frequency, in Hz. ‡ M_TIMER_CLOCK_SOURCE Inquires the source of the clock that drives the active portion of the specified timer's output signal. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the clock source, where n is the number of the auxiliary signal. ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the clock source, where n is the number of the rotary decoder. ‡ M_SYSCLK Specifies to use the allocated system's clock source. ‡ M_TIMER_DELAY Inquires the delay between the timer trigger and the active portion of the timer's output signal. Note, an error is generated if the specified delay cannot be respected. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ 0 &lt;= Value &lt;= Max. value Specifies the delay. ‡ M_TIMER_DELAY_CLOCK_ACTIVATION Inquires the signal transition that will increment the clock used to control the delay between the timer's trigger and the active portion of the timer's output signal. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ANY_EDGE Specifies that the clock will be incremented by both a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the clock will be incremented by a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the clock will be incremented by a low-to-high signal transition. ‡ M_TIMER_DELAY_CLOCK_FREQUENCY Inquires the frequency of the clock source signal for the delay between the timer's trigger and the active portion of the timer's output signal (M_TIMER_DELAY_CLOCK_SOURCE). You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ M_UNKNOWN Specifies that the signal is not periodic or the frequency is unknown. ‡ 0 &lt; Value &lt;= Frequency of M_SYSCLK Specifies the frequency, in Hz. ‡ M_TIMER_DELAY_CLOCK_SOURCE Inquires the source of the clock that drives the delay between the timer's trigger and the active portion of the specified timer's output signal. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the clock source, where n is the number of the auxiliary signal. ‡ M_FOLLOW_TIMER_CLOCK Specifies to use the clock source specified by M_TIMER_CLOCK_SOURCE. ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the clock source, where n is the number of the rotary decoder. ‡ M_SYSCLK Specifies to use the allocated system's clock source. ‡ M_TIMER_DURATION Inquires the duration for the active portion of the timer's output signal. Note, an error is generated if the specified duration cannot be respected. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ 0 &lt;= Value &lt;= Max. value Specifies the duration of the active portion of the timer output signal. ‡ M_TIMER_OUTPUT_INVERTER Inquires whether the output of the timer should be inverted. This causes the low portion of the signal (the delay period) to be high and the high portion of the signal (the active portion) to be low. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies not to invert the output of the timer. ‡ M_ENABLE Specifies to invert the output of the timer. ‡ M_TIMER_STATE Inquires the state of the specified timer. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that the timer is disabled. ‡ M_ENABLE Specifies that the timer is enabled. ‡ M_TIMER_TRIGGER_ACTIVATION Inquires the signal variation upon which to generate a timer trigger, if the specified timer is enabled. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ANY_EDGE Specifies that a timer trigger will be generated both upon a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that a timer trigger will be generated upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that a timer trigger will be generated upon a low-to-high signal transition. ‡ M_LEVEL_HIGH Specifies that a timer trigger is continuously issued during a high signal polarity. ‡ M_LEVEL_LOW Specifies that a timer trigger is continuously issued during a low signal polarity. ‡ M_TIMER_TRIGGER_OVERLAP Inquires how to deal with a new trigger that occurs while the previously triggered timer (both its delay and duration) has not expired. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEFAULT Same as M_OFF. ‡ M_LATCH Specifies that a trigger received, while the associated timer has not expired, will be latched (stored). ‡ M_OFF Specifies that a new trigger is ignored. ‡ M_RESET Specifies that a new trigger automatically resets the timer (regardless of whether it is in its delay or active period) and then restarts the timer. ‡ M_TIMER_TRIGGER_SOURCE Inquires the trigger source for the specified timer. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source for the specified timer, where n is the number of the auxiliary signal. ‡ M_CONTINUOUS Specifies to run the specified timer in periodic mode; no actual trigger signal is used. ‡ M_EXPOSURE Specifies to use the exposure signal as the trigger source. ‡ M_GRAB_TRIGGER_READY Specifies to route the internal grab trigger ready signal to the specified signal. ‡ M_IO_COMMAND_LISTn Specifies to use a bit of the I/O command register of I/O command list n, where n is the number of the I/O command list. This value is combined with a value from the following table: To specify which I/O command register bit was used ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the trigger source, where n is the number of the rotary decoder. ‡ M_SOFTWARE Specifies to use a software trigger as the trigger source. ‡ M_TIMER_STROBE Specifies to route the strobe's timer signal to the specified signal. ‡ M_TIMERn Specifies to use the output signal of the specified timer as the trigger source, where n is the timer number. ‡ M_TIMER_USAGE Inquires how the timer should be used. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_PULSE_GENERATION Specifies the normal use of the timer, as described in the Timers and coordinating events section of Chapter 56: I/O signals and communicating with external devices. ‡ M_PULSE_MEASUREMENT Specifies to use the timer to measure the duration of the pulse that occurs on the timer's trigger source. ‡ M_TIMER_VALUE Inquires the current value of the timer's duration. You must specify a combination value from the following table: To specify which on-board timer to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value &gt;= 0 Specifies current value of the timer's duration. If M_TIMER_DELAY_CLOCK_SOURCE is set to M_SYSCLK or a frequency is specified using M_TIMER_DELAY_CLOCK_FREQUENCY, this value is specified in nsec. Otherwise, it is specified in number of signal transitions on the source signal. ‡ Combination value for the values listed in For inquiring the settings of a timer. You must add the following value to the above-mentioned values to specify which on-board timer to inquire. For specifying which on-board timer to inquire Combination value Description MIL system-specifictooltip (‡) M_TIMERn Specifies on-board timer n, where n is the number of the timer. ‡ Combination values for M_TIMER_DELAY , M_TIMER_DURATION. You can add one of the following values to the above-mentioned values to determine the maximum or minimum value for the setting. For inquiring the maximum or minimum value for the setting Combination value Description MIL system-specifictooltip (‡) M_MAX_VALUE Specifies the maximum value for this setting. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ M_MIN_VALUE Specifies the minimum value for this setting. ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ The following inquire types and inquire values allow you to inquire about the settings of a rotary decoder. For inquiring the settings of a rotary decoder InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_ROTARY_ENCODER_BIT0_SOURCE Inquires the auxiliary input signal on which to receive bit 0 of the 2-bit Gray code. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the signal on which to receive bit 0 of the 2-bit Gray code, where n is the number of the auxiliary signal. ‡ M_ROTARY_ENCODER_BIT1_SOURCE Inquires the auxiliary input signal on which to receive bit 1 of the 2-bit Gray code. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the signal on which to receive bit 1 of the 2-bit Gray code, where n is the number of the auxiliary signal. ‡ M_ROTARY_ENCODER_OUTPUT_MODE Inquires the rotary decoder's counter value and/or the direction of movement upon which the rotary decoder should output a pulse. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_POSITION_TRIGGER Specifies to output a pulse upon the trigger generated by M_ROTARY_ENCODER_POSITION_TRIGGER. ‡ M_STEP_ANY Specifies to output a pulse upon any change in the rotary decoder's counter value (position change in any direction). ‡ M_STEP_BACKWARD Specifies to output a pulse upon a rotary decoder counter decrement only. ‡ M_STEP_FORWARD Specifies to output a pulse upon a rotary decoder counter increment only. ‡ M_STEP_FORWARD_NEW_POSITIVE Specifies to output a pulse upon a rotary decoder counter increment of a new value that has not been reached before. ‡ M_ROTARY_ENCODER_POSITION Inquires the current value of the rotary decoder's counter. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 0 &lt;= Value &lt;= 429497295 Specifies the current value of the counter. ‡ M_ROTARY_ENCODER_POSITION_TRIGGER Inquires the value of the rotary decoder's counter upon which a trigger is generated. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 0 &lt;= Value &lt;= 0xFFFFFFFF Specifies the value of the counter upon which a trigger is generated. ‡ M_ROTARY_ENCODER_RESET_ACTIVATION Inquires the signal transition upon which to reset the rotary decoder's counter to 0. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_EDGE_FALLING Specifies to reset the rotary decoder upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies to reset the rotary decoder upon a low-to-high signal transition. ‡ M_ROTARY_ENCODER_RESET_SOURCE Inquires the signal source to use to reset the rotary decoder's counter to 0. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_NULL Specifies not to reset using a hardware signal source. ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source for the specified timer, where n is the number of the auxiliary signal. ‡ M_POSITION_TRIGGER Specifies to use the trigger signal generated by the rotary decoder when the counter reaches the value specified with M_ROTARY_ENCODER_POSITION_TRIGGER. ‡ M_ROTARY_ENCODER_STATE Inquires whether the specified rotary decoder is enabled. You must specify a combination value from the following table: To specify which rotary decoder to inquire ‡ MIL system specific [This is only applicable to Zebra 4Sight] This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that the rotary decoder is disabled. ‡ M_ENABLE Specifies that the rotary decoder is enabled. ‡ Combination value for the values listed in For inquiring the settings of a rotary decoder. You must add the following value to the above-mentioned values to specify which rotary decoder to inquire. For specifying which rotary decoder to inquire about Combination value Description MIL system-specifictooltip (‡) M_ROTARY_ENCODERn Specifies rotary decoder n, where n is the number of the rotary decoder. ‡ The following control types allow you to control the settings of a data latch associated with the rotary decoders of your system. For controlling the settings of a data latch associated with rotary encoders InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_SYS_DATA_LATCH_STATE Inquires the state of the specified data latch. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that the data latch is disabled. ‡ M_ENABLE Specifies that the data latch is enabled. ‡ M_SYS_DATA_LATCH_TRIGGER_ACTIVATION Inquires the trigger signal transition upon which to store the specified information to the specified data latch. To set the signal with which to trigger the data latch, use M_SYS_DATA_LATCH_TRIGGER_SOURCE. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ANY_EDGE Specifies that the specified information is stored in the data latch both upon a high-to-low and a low-to-high signal transition. ‡ M_EDGE_FALLING Specifies that the specified information is stored in the data latch upon a high-to-low signal transition. ‡ M_EDGE_RISING Specifies that the specified information is stored in the data latch upon a low-to-high signal transition. ‡ M_SYS_DATA_LATCH_TRIGGER_SOURCE Inquires what triggers storing the specified information to the specified data latch. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source, where n is the number of the auxiliary signal. ‡ M_TIMERn Specifies to use the output signal of timer n as the trigger source, where n is the number of the timer. ‡ M_SYS_DATA_LATCH_TYPE Inquires which rotary decoder the specified data latch will store the position counter value of when the data latch is triggered. This constant is only available on a Host system if the Host system was previously allocated on a Zebra 4Sight EV6/EV7. It is not available on Zebra 4Sight XV6. You must specify a combination value from the following table: To specify which data latch to affect ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ROTARY_ENCODERn Specifies to store the value of the counter of rotary decoder n, where n is a number between 1 and 2. ‡ Combination value for the values listed in For controlling the settings of a data latch associated with rotary encoders. You must add the following value to the above-mentioned values to specify which data latch to affect. For specifying which data latch to set Combination value Description MIL system-specifictooltip (‡) M_LATCHn Specifies which data latch to inquire, where n is 1 or 2. ‡ The following inquire types allow you to inquire UART settings. For UART settings InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_COM_PORT_NUMBER Inquires the Microsoft Windows COM port number associated with the specified UART. Note that the number of UARTs available differs, depending on the version of your board. You must specify which COM port to inquire. See below for combination values. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the Microsoft Windows COM port number associated with the specified UART. ‡ M_UART_BYTES_READ Inquires the number of bytes read from the UART, after waiting for the UART read operation (using MsysControl() with M_UART_READ_STRING) to complete. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of bytes read from the UART. ‡ M_UART_BYTES_WRITTEN Inquires the number of bytes written to the UART, after waiting for the UART write operation (using MsysControl() with M_UART_WRITE_STRING) to complete. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of bytes written to the UART, in bytes. ‡ M_UART_DATA_PENDING Inquires the number of pending data bytes that are currently available to read from the UART input buffer. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of pending data bytes. ‡ M_UART_DATA_SIZE Inquires the number of data bits per character that is sent or received by the UART. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 7 Specifies that the data length is 7 bits. ‡ 8 Specifies that the data length is 8 bits. ‡ M_UART_INTERFACE_TYPE Inquires the type of interface used by the UART. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_RS232 Specifies that an RS-232 interface is used. ‡ M_RS485 Specifies that an RS-485 interface is used. ‡ M_UART_PARITY Inquires whether character data is sent or received with a parity bit and how the parity bit is set. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that no extra bit is added (no parity). ‡ M_EVEN Specifies that the number of 1's will be even. ‡ M_ODD Specifies that the number of 1's will be odd. ‡ M_UART_READ_STRING_MAXIMUM_SIZE Inquires the maximum length of the string to be read using M_UART_READ_STRING. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the maximum length of the string, in bytes. ‡ M_UART_READ_STRING_SIZE Inquires the number of bytes to read when calling MsysControl() with M_UART_READ_STRING. If this length is specified by M_UART_STRING_DELIMITER, the returned result will be M_DEFAULT. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEFAULT Specifies the use of M_UART_STRING_DELIMITER to delineate the end of the string to read. ‡ Value Specifies the string length, in bytes. ‡ M_UART_SPEED Inquires the baud rate of the UART. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 300;600;1200;1800;2400;4800;7200;9600;14400;19200;38400;57600;115200 Specifies the baud rate of the UART. ‡ M_UART_STOP_BITS Inquires the number of extra data bit(s) that are added to each character to indicate the end of a character. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ 1 Specifies that there is 1 stop bit. ‡ 2 Specifies that there are 2 stop bits. ‡ M_UART_STRING_DELIMITER Inquires the character used to terminate strings of incoming or outgoing data. The delimiter is used but not sent when writing data with M_UART_WRITE_STRING; it is read for incoming data with M_UART_READ_STRING. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the character used to terminate strings. ‡ M_UART_TIMEOUT Inquires the maximum time to wait between each byte when reading incoming data. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INFINITE Waits indefinitely. ‡ Value Specifies the time to wait, in msec. ‡ M_UART_WRITE_STRING_SIZE Inquires the length of the string to be sent to the UART for transmission. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the string length, in bytes. ‡ Combination value for the values listed in For UART settings. You can add the following value to the above-mentioned values to set which UART to inquire. For COM Ports and UARTs Combination value Description MIL system-specifictooltip (‡) M_UART_NB( MIL_INT DeviceToInquire ) Specifies which UART should be inquired. ‡ Parameters DeviceToInquire Specifies a device (UART) to inquire. ‡ M_DEVn Specifies the device to inquire, where n can be from 0 to 15. ‡ MIL system specific There is 1 UART available on Matrox Morphis. ‡ There are 4 UARTs available on Matrox Solios eA/XA Quad, 2 on Matrox Solios eA/XA Dual, and 1 on Matrox Solios eA/XA Single. ‡ There are 2 UARTs are available on Matrox Solios eCL/XCL dual-Base/single-Medium operating in dual-Base mode, and 1 is available on Matrox Solios eCL/XCL-B, eCL/XCL-F, and eCL/XCL dual-Base/single-Medium operating in single-Medium mode. ‡ There are 2 UARTS available on Matrox Radient eV-CL DB and eV-CL DF, 4 on Matrox Radient eV-CL QB, and 1 on Matrox Radient eV-CL SB and SF. Note that, using the CLProtocol will occupy one COM port per allocated digitizer. ‡ There are 2 UARTS available on Matrox Rapixo CL Pro DB and DF, 4 on Matrox Rapixo CL Pro QB, and 1 on Matrox Rapixo CL Pro SF. Note that, using the CLProtocol will occupy one COM port per allocated digitizer. ‡ The following inquire types and inquire values specify the settings for the Watchdog. For Watchdog settings InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_WATCHDOG_MODE Inquires the current state of the Watchdog. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that the Watchdog is disabled. ‡ M_ENABLE Specifies that the Watchdog is enabled. ‡ M_WATCHDOG_REBOOT_TIMEOUT Inquires the timeout value of the Watchdog's reboot timer. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the timeout value, in msec. ‡ M_WATCHDOG_RESET_COUNTER Inquires the number of times the Watchdog has rebooted your computer. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of Watchdog reboots. ‡ M_WATCHDOG_TIMEOUT Inquires the timeout value of the Watchdog's main timer. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the timeout value, in msec. ‡ M_WATCHDOG_WARNING_TIME Inquires the timeout value of the Watchdog's warning timer. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INFINITE Specifies that the Watchdog will never receive a warning. ‡ Value Specifies the warning time interval, in msec. ‡ The following inquire types and inquire values allow you to inquire the details of an action command. Action commands require both a MIL-side and a camera-side configuration. The following inquire types and inquire values inquire the MIL-side of the action command. To inquire the camera-side, use MdigInquireFeature() with the appropriate feature values. For more information, refer to the Triggering simultaneous actions in multiple GigE Vision cameras section of the Matrox GigE Vision driver chapter in the MIL Hardware-specific Notes. To inquire about features of the camera, use MdigInquireFeature() with a digitizer allocated for the camera on a MIL GigE system. For inquiring about an action command InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_GC_ACTION_ACKNOWLEDGE_NUMBER Inquires the number of acknowledgments that MIL should expect to receive when the action command is issued. You must specify a combination value from the following table: To set which action command to inquire ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of acknowledgments expected. ‡ M_GC_ACTION_DEVICE_KEY Inquires the action device key for the action command. The action device key identifies the cameras on which the action should be performed. You must specify a combination value from the following table: To set which action command to inquire ‡ MIL system specific To inquire the features of the camera, use MdigInquireFeature() with a digitizer allocated for the camera on a MIL GigE system. If using a MIL Concord PoE system, this inquire type is only available for Matrox Concord PoE with ToE. To inquire about an action command when using the Matrox Concord PoE base model, use a MIL GigE system with this inquire type. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the action device key. ‡ M_GC_ACTION_GROUP_KEY Inquires the action group key for the action command. The action group key identifies which action you want to perform on the camera. You must specify a combination value from the following table: To set which action command to inquire ‡ MIL system specific To inquire the features of the camera, use MdigInquireFeature() with a digitizer allocated for the camera on a MIL GigE system. If using a MIL Concord PoE system, this inquire type is only available for Matrox Concord PoE with ToE. To inquire about an action command when using the Matrox Concord PoE base model, use a MIL GigE system with this inquire type. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the action group key. ‡ M_GC_ACTION_GROUP_MASK Inquires the action group mask for the action command. In the case where you need one (or more) cameras to temporarily ignore an action command, you can mask out the action command by changing the action group mask. You must specify a combination value from the following table: To set which action command to inquire ‡ MIL system specific To inquire the features of the camera, use MdigInquireFeature() with a digitizer allocated for the camera on a MIL GigE system. If using a MIL Concord PoE system, this inquire type is only available for Matrox Concord PoE with ToE. To inquire about an action command when using the Matrox Concord PoE base model, use a MIL GigE system with this inquire type. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the action group mask. ‡ M_GC_ACTION_TIME Inquires the time at which the action command should execute. You must specify a combination value from the following table: To set which action command to inquire ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Value Specifies the time at which to execute the action command on your camera, relative to the time at which the action command was sent, in sec. ‡ The following inquire types and inquire values allow you to inquire the details of a Trigger-over-Ethernet packet for transmission using a ToE module. The Trigger-over-Ethernet packet can be sent as an action command or a GigE Vision software trigger. Action commands and GigE Vision software triggers require both a MIL-side and a camera-side configuration. The following inquire types and inquire values inquire about the MIL-side of the action command or GigE Vision software trigger. To configure the camera-side, you need to use a digitizer allocated for the camera on a MIL GigE Vision system and use MdigControlFeature() with the appropriate feature values. For more information, refer to the Triggering simultaneous actions in multiple GigE Vision cameras section of the Matrox GigE Vision driver chapter in the MIL Hardware-specific Notes. For inquiring a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_GC_TRIGGER_SELECTOR Inquires the type of GigE Vision trigger that should take place on the camera upon receiving the ToE packet (for example, FrameStart). For the camera to know what should be triggered upon receiving the packet, this control type must match the trigger selector on your camera. To configure the trigger selector on your camera, use MdigControlFeature() with the appropriate GenICam SFNC feature (for example, TriggerSelector). You must specify a combination value from the following table: To specify which GigE Vision software trigger to inquire ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquire ( M_GC_TRIGGER_SELECTOR + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"FeatureName\") 1 Specifies the type of trigger; see your GigE Vision camera's documentation for a list of available types. ‡ M_TRIGGER_SOURCE Inquires the event that will cause the ToE module to send the specified action command or GigE Vision software trigger as a ToE packet. You must specify a combination value from one of the following tables: To specify which GigE Vision software trigger to inquire To set which action command to inquire ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_AUX_IOn Specifies to use auxiliary input signal n as the trigger source, where n is the number of the auxiliary signal. ‡ M_IO_COMMAND_LISTn Specifies to use the I/O command list n, where n is the number of the I/O command list. This value is combined with a value from the following table: To specify which I/O command register bit was used ‡ M_ROTARY_ENCODERn Specifies to use rotary decoder n as the trigger source, where n is the number of the rotary decoder. ‡ M_SOFTWAREn Specifies to use software as a trigger source to trigger the ToE module, where n is the number of the software trigger; n can be a value between 1 and 4. ‡ M_TIMERn Specifies to use the output signal of the specified timer as the trigger source, where n is the number of the timer. ‡ M_TRIGGER_STATE Inquires the state of the specified action command or GigE Vision software trigger in the ToE module. You must specify a combination value from one of the following tables: To specify which GigE Vision software trigger to inquire To set which action command to inquire ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies the ToE packet is disabled. ‡ M_ENABLE Specifies the ToE packet is enabled, and will be transmitted when its associated event (specified using M_TRIGGER_SOURCE) occurs. ‡ 1 If the value was passed in a variable, it won't be returned enclosed in MIL_TEXT(). Combination value for M_DEVICE_NAME , M_DISTRIBUTED_MIL_REMOTE_COMPUTER_NAME , M_SERIAL_NUMBER , M_SYSTEM_DESCRIPTOR , M_DISCOVER_DEVICE_MANUFACTURER_INFO + n , M_DISCOVER_DEVICE_MANUFACTURER_NAME + n , M_DISCOVER_DEVICE_MODEL_NAME + n , M_DISCOVER_DEVICE_USER_NAME + n , M_DISCOVER_DEVICE_VERSION + n , M_GC_TRIGGER_SELECTOR. You can add the following value to the above-mentioned values to get the string's length. For getting the string size InquireType Description UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Combination value for the values listed in For inquiring about an action command, For inquiring a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module. (exceptions might exist) You must add the following value to the above-mentioned values to set which action command to inquire. Alternatively, you can add a value from For specifying which GigE Vision software trigger to inquire. For specifying which action command to inquire Combination value Description MIL system-specifictooltip (‡) M_GC_ACTIONn Specifies to inquire about action command n, where n is a value from 0 to 31. ‡ MIL system specific If using this inquire type with Matrox Concord PoE with ToE, it cannot be used with M_GC_TRIGGER_SELECTOR. ‡ Combination value for the values listed in For inquiring a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module; and for the following value: M_GC_TRIGGER_SELECTOR. You must add the following value to the above-mentioned values to specify which GigE Vision software trigger to inquire. Alternatively, you can add a value from For specifying which action command to inquire. For specifying which GigE Vision software trigger to inquire Combination value Description MIL system-specifictooltip (‡) M_GC_TRIGGER_SOFTWAREn Specified to inquire about the GigE Vision software trigger n, where n is a value from 0 to 31. This combination value cannot be used with M_GC_ACTION_DEVICE_KEY, M_GC_ACTION_GROUP_KEY, or M_GC_ACTION_GROUP_MASK. If using a MIL Concord PoE system, this inquire type is only available for Matrox Concord PoE with ToE. ‡ Combination value for [when InquireType=M_IO_SOURCE and UserVarPtr=M_IO_COMMAND_LISTn: M_IO_COMMAND_LISTn ], [when InquireType=M_TIMER_TRIGGER_SOURCE and UserVarPtr=M_IO_COMMAND_LISTn: M_IO_COMMAND_LISTn ], [when InquireType=M_TRIGGER_SOURCE and UserVarPtr=M_IO_COMMAND_LISTn: M_IO_COMMAND_LISTn]. The following value is combined with the above-mentioned values to specify which I/O command register bit was used. For specifying which I/O command register bit was used Combination value Description MIL system-specifictooltip (‡) M_IO_COMMAND_BITn Specifies I/O command register bit n, where n represents the bit number. ‡ Return value The returned value is the requested information, cast to a MIL_INT. If the requested information does not fit into a MIL_INT, this function will return M_NULL or truncate the information. Example The following example uses M_BOARD_TYPE. The returned value is then masked so that only the board type is returned. /* To return only the main board type, and not the sub-board types (for example M_XCL, M_FAST, or M_PF), mask the return value with M_BOARD_TYPE_MASK. */ /* Call MsysInquire with M_BOARD_TYPE to inquire the full board type. */ MsysInquire(MilSystem, M_BOARD_TYPE, &amp;BoardType); /* Use M_BOARD_TYPE_MASK to verify the main board type. */ if ((BoardType &amp; M_BOARD_TYPE_MASK) == M_SOLIOS) { /* Perform a Matrox Solios-specific task. */ } Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId For the system identifier - InquireType - UserVarPtr Parameter Associations For general system settings + For inquiring if a system is remote For inquiring CXP connection errors and settings + For specifying the CXP input connector + For identifying the instance of the GenTL Producer library identifier to use + For specifying which configuration information file to access + Returns the number of hook threads that were allocated + For specifying the acquisition path to inquire + For specifying that the target board is identified using its user-defined name + For specifying which connector or port to inquire For discovering connected devices For inquiring I/O signals and their mode + For inquiring the type and number of the I/O signal + For specifying the type of I/O signal to inquire For inquiring the state of specified user-bits in a static-user-output register + For inquiring the bit in the static-user-output register For inquiring the settings of a timer + For specifying which on-board timer to inquire + For inquiring the maximum or minimum value for the setting For inquiring the settings of a rotary decoder + For specifying which rotary decoder to inquire about For controlling the settings of a data latch associated with rotary encoders + For specifying which data latch to set For UART settings + For COM Ports and UARTs For Watchdog settings For inquiring about an action command For inquiring a Trigger-over-Ethernet packet (action command or GigE Vision software trigger) for transmission using a ToE module + For getting the string size + For specifying which action command to inquire + For specifying which GigE Vision software trigger to inquire + For specifying which I/O command register bit was used Return value Examples Compilation information M_DEVn M_GENn M_CONNECTIONn M_GENTL_INTERFACEn M_IO_COMMAND_LISTn M_ROTARY_ENCODERn M_TIMERn M_USER_BITn M_AUX_IOn M_LATCHn M_SOFTWAREn M_GC_ACTIONn M_GC_TRIGGER_SOFTWAREn M_IO_COMMAND_BITn ",
      "wordCount": 19362,
      "subEntries": []
    },
    {
      "id": "Reference_sys_MsysInquireFeature",
      "version": null,
      "title": "MsysInquireFeature",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\sys\\MsysInquireFeature.htm",
      "text": " MsysInquireFeature Synopsis Inquires a feature of the camera. Syntax void MsysInquireFeature( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;InquireType, //in MIL_CONST_TEXT_PTR&nbsp;FeatureName, //in MIL_INT64&nbsp;UserVarType, //in void&nbsp;*UserVarPtr //out ) Description This function allows you to directly inquire various GenICam standard feature naming convention (SFNC) features and manufacturer-specific features of the camera. When used with a GenICam SFNC-compliant camera, it allows you to directly inquire various manufacture-specific features specified with the camera's device description file (XML). Note that for the purpose of this function, a feature can also be of type category or command. Although category and command features lack a feature value, all other attributes of the feature can be inquired. For a list of standard category feature names, see the Standard Feature Naming Convention or your GenICam SFNC-compliant camera's documentation. The features described in this function are primarily available to check existing settings using MIL code or to retrieve information from which you can build your own interface for the camera device's description file (XML). MIL provides two versions of an interface that you can use to interactively inquire the camera's features. At design-time, you can use Matrox Intellicam's Feature Browser. At runtime, you can launch Matrox Feature Browser, using MsysControl() with M_GC_FEATURE_BROWSER. Both versions of Matrox Feature Browser provide a list of available feature names and associated possible values, as well as code snippets with the MIL functions and MIL constants associated with the settings selected; you can copy the code snippets to your MIL application code. Occasionally, the returned information is a string whose length can change between when you inquires its size and when you inquire its value (for example, the temperature can change from 99 to 100 between calls). In this case, when you inquire the information's length to allocate an array of an appropriate size, you might allocate an array that is too small to retrieve the data and experience an application crash. To avoid an application crash, specify the length of the array passed to the UserVarPtr parameter using the M_FEATURE_USER_ARRAY_SIZE() macro; the data will be truncated to fit in the array and an error will be generated. To control a camera's manufacturer-specific feature, use MsysControlFeature(). Parameters Parameters SysId Specifies the identifier of the system accessing the camera to inquire. This parameter must be given a valid system identifier, previously allocated using MsysAlloc(). InquireType Specifies the type of information to inquire about the feature. See the Parameter associations section for possible values that can be specified. FeatureName Specifies the name of the camera feature to inquire. Note that this parameter expects a case-sensitive string. For specifying the name of the feature Value Description MIL system-specifictooltip (‡) MIL_TEXT(\"FeatureName\") 1 Specifies the name of the feature. Note that the feature name is case-sensitive. Refer to your camera's documentation for a list of the features available. ‡ MIL_TEXT(\"Root\") 1 Specifies to inquire the highest-level feature of the XML structure; this feature is of type category and typically, its subfeatures are also of type category. Note that this value is only available when using M_SUBFEATURE_.... ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). UserVarType Specifies the data type of the address pointed to by the UserVarPtr parameter. If not inquiring the feature's value (using M_FEATURE_VALUE), set this parameter to M_DEFAULT. Note that, in the case of a string (or a multi-byte register), the size of the array passed to the UserVarPtr parameter must be equal to or larger than the returned information; otherwise an application crash will occur. For specifying the UserVarPtr's data type Value Description MIL system-specifictooltip (‡) M_TYPE_BOOLEAN Specifies that UserVarPtr is passed an address of type MIL_BOOL. ‡ M_TYPE_DOUBLE Specifies that UserVarPtr is passed an address of type MIL_DOUBLE. ‡ M_TYPE_INT64 Specifies that UserVarPtr is passed an address of type MIL_INT64. ‡ M_TYPE_STRING Specifies that UserVarPtr is passed an address of type MIL_TEXT_CHAR. You must specify a combination value from the following table: To specify the length of the array ‡ M_TYPE_UINT8 Specifies that UserVarPtr is passed an address of type MIL_UINT8. You must specify a combination value from the following table: To specify the length of the array ‡ Combination value for M_TYPE_STRING , M_TYPE_UINT8. You must add the following value to the above-mentioned values to specify the length of the array. For specifying the length of the array Combination value Description MIL system-specifictooltip (‡) M_FEATURE_USER_ARRAY_SIZE( MIL_INT Length ) Specifies the length of the array. ‡ b vU34 Parameters Length Sets the length, in bytes. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_BOOL [optionally, in C++: a reference to a std::vector&lt;MIL_BOOL&gt; ] array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] array of type MIL_UINT8 [optionally, in C++: a reference to a std::vector&lt;MIL_UINT8&gt; ] MIL_BOOL MIL_DOUBLE MIL_INT MIL_INT64 Specifies the address of the variable in which to return the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For specifying the type of information to inquire about the feature and the data type returned For inquiring about the enumeration entry of a feature's value For inquiring about the subfeatures of a feature The following inquire types are used to specify the type of information about the feature to inquire and the data type returned. For specifying the type of information to inquire about the feature and the data type returned InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_FEATURE_ACCESS_MODE Inquires whether the specified feature is implemented, available, readable, and/or writable. Note that an error is generated if the feature does not exist in the camera's device description file (XML). To learn if the specified feature exists in the file and is implemented on your camera, use M_FEATURE_PRESENT. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Bit-encoded access mode value Specifies a bit-encoded value that details the access mode. To establish the access mode from the encoded value, use the following macros: To learn whether the specified feature is available, use the M_FEATURE_IS_AVAILABLE macro. Note that if a feature is not available, use M_FEATURE_IS_IMPLEMENTED to learn whether the specified feature is only temporarily unavailable or actually not implemented on your camera. A feature that is temporarily unavailable typically relies on the setting of another feature (for example, when a trigger feature is set to off, its associated trigger polarity feature would be unavailable). To learn whether the specified feature is implemented, use the M_FEATURE_IS_IMPLEMENTED macro. For example, a Bayer color feature would not be implemented on a monochrome camera because the hardware cannot support it. To learn whether the specified feature can be read, use the M_FEATURE_IS_READABLE macro. To learn whether the specified feature can be written to, use the M_FEATURE_IS_WRITABLE macro. ‡ M_FEATURE_CACHING_MODE Inquires whether a copy of the specified feature's value is stored in Host memory for faster access and retrieval. If so, the feature is known as a cachable feature. A cachable feature is typically only retrieved from the camera whenever the cache is invalidated (such as, before the first read and before the first read to occur after a write operation). A cachable feature is typically a value that only changes based on user-interaction (setting a control value). For example, a temperature feature is not cachable. To return a true/false value for this inquire, use the M_FEATURE_IS_CACHABLE macro on the returned result. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_FEATURE_CACHING_MODE_NONE Specifies that the feature is not cachable. ‡ M_FEATURE_CACHING_MODE_WRITE_AROUND Specifies that feature's values are written only to the camera, and the cache is updated the next time the feature's value is inquired. ‡ M_FEATURE_CACHING_MODE_WRITE_THROUGH Specifies that when information is written to the camera, the cache is updated simultaneously. ‡ M_FEATURE_CHANGE_HOOK Inquires whether an event occurs when the value of the specified feature changes. If enabled, MsysHookFunction() with M_FEATURE_CHANGE hooks a specified function to the feature change event. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DISABLE Specifies that no event is generated when the value of the specified feature changes. This is the default value. ‡ M_ENABLE Specifies that an event is generated when the value of the specified feature changes. ‡ M_FEATURE_DEPRECATED Inquires whether the specified feature is deprecated and should no longer be used. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_FALSE Specifies that the feature is not depreciated. ‡ M_TRUE Specifies that the feature is depreciated. ‡ M_FEATURE_DESCRIPTION Inquires the description of the specified feature. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_DESCRIPTION + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the description of the feature. ‡ M_FEATURE_DISPLAY_NAME Inquires the specified feature's display name. Note that this can differ slightly from the internally-used feature name (M_FEATURE_NAME). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_DISPLAY_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the display name of the feature. ‡ M_FEATURE_EXECUTE_COMPLETED Inquires whether the specified executable camera feature (command) has finished executing on your camera. Note that to enable command execution-completion polling, set MsysControl() with M_GC_FEATURE_EXECUTE_POLLING_MODE to M_AUTOMATIC. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_BOOL Data type: address of a MIL_BOOL ‡ M_FALSE Specifies that the executable camera feature has not finished executing. ‡ M_TRUE Specifies that the executable camera feature has finished executing. ‡ M_FEATURE_INCREMENT Inquires the value by which the feature's value increments. For example, if a feature's possible values are 2, 4, 6, ..., then the feature's value increments by 2. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the feature's incremental value. ‡ M_FEATURE_MAX Inquires the maximum possible value for the feature. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: address of a MIL_DOUBLE Note: For when inquiring a feature whose feature data type is a double-precision floating-point; set UserVarType to M_TYPE_DOUBLE. Data type: address of a MIL_INT64 Note: For when inquiring a feature whose feature data type is a 64-bit integer; set UserVarType to M_TYPE_INT64. ‡ Value Specifies the maximum possible value for the feature. ‡ M_FEATURE_MIN Inquires the minimum possible value for the feature. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: address of a MIL_DOUBLE Note: For when inquiring a feature whose feature data type is a double-precision floating-point; set UserVarType to M_TYPE_DOUBLE. Data type: address of a MIL_INT64 Note: For when inquiring a feature whose feature data type is a 64-bit integer; set UserVarType to M_TYPE_INT64. ‡ Value Specifies the maximum possible value for the feature. ‡ M_FEATURE_NAME Inquires the specified internally-used feature name. Note that this can differ slightly from the displayed name of the feature (M_FEATURE_DISPLAY_NAME). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the feature's name. ‡ M_FEATURE_POLLING_INTERVAL Inquires the interval between inquiring an executable feature's completion status, when automatically polling (using MsysControl() with M_GC_FEATURE_EXECUTE_POLLING_MODE). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value &gt;= -1 Specifies the polling interval, in msecs. ‡ M_FEATURE_PRESENT Inquires whether the specified feature is present in the camera's device description file. Note that, if the feature is listed in the camera's device description file (XML), use M_FEATURE_ACCESS_MODE and the M_FEATURE_IS_IMPLEMENTED macro to determine if the feature is supported. If the feature is not present in the file, M_FEATURE_PRESENT will return M_NO, whereas M_FEATURE_ACCESS_MODE will generate an error. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_BOOL Data type: address of a MIL_BOOL ‡ M_NO Specifies that the specified feature is not present. ‡ M_YES Specifies that the specified feature is present. ‡ M_FEATURE_REPRESENTATION Inquires the display format for the feature's value. The display format dictates the size of the field and its form (for example, check box, slider, text-box) used in a user interface for the camera's device description file (XML), such as Matrox Feature Browser (accessible through Matrox Intellicam or MsysControl() with M_GC_FEATURE_BROWSER). Note that this inquire type can only be used with a feature that has a data type of MIL_INT64 or MIL_DOUBLE. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_FEATURE_REPRESENTATION_BOOLEAN Specifies that the feature should be displayed as a checkbox. ‡ M_FEATURE_REPRESENTATION_HEX_NUMBER Specifies that the feature should be displayed as a hexadecimal value. ‡ M_FEATURE_REPRESENTATION_IPV4_ADDRESS Specifies that the feature should be displayed as an IP address in dotted decimal notation. ‡ M_FEATURE_REPRESENTATION_LINEAR Specifies that the feature should be displayed as a slider with the appropriate range shown. ‡ M_FEATURE_REPRESENTATION_LOGARITHMIC Specifies that the feature should be displayed as a slider with the appropriate logarithmic range shown. ‡ M_FEATURE_REPRESENTATION_MAC_ADDRESS Specifies that the feature should be displayed as a hexadecimal MAC address. ‡ M_FEATURE_REPRESENTATION_PURE_NUMBER Specifies that the feature should be displayed as edit text-box with a decimal display. ‡ M_FEATURE_SELECTOR_COUNT Inquires the number of selectors that are ancestors of the feature. Selectors take an enumerator or integer to index which instance of a subfeature should be accessed, when multiple instances of a subfeature exist. For example, the GenICam standard TriggerSelector feature is used to select which type of trigger to configure ( for example, FrameStart and AcquisitionStart are both enumerators that can be passed to TriggerSelector). All subfeatures of the selector (such as its source) are referenced from the trigger selector (TriggerSource[AcquisitionStart]). This inquire type only returns a value greater than 0 if the feature is a subfeature of a selector. It returns 1 if the feature is a subfeature of a selector. It returns 2 if its selector is also referenced by another selector. The M_FEATURE_SELECTOR_COUNT for TriggerMode, in this example, would be 1. To inquires the name of the selector associated with the specified feature, use M_FEATURE_SELECTOR_NAME + n. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of ancestor selectors of the feature. ‡ M_FEATURE_SELECTOR_NAME + n Inquires the name of the ancestor selector of the specified subfeature, where n is the number of generations. So, if inquiring the feature selector name of the 1st selector of TriggerSource, the returned name would be TriggerSelector. To inquires the number of selectors that are associated with the specified feature, use M_FEATURE_SELECTOR_COUNT. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_SELECTOR_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the name associated with the selector index. ‡ M_FEATURE_SIZE Inquires the size of the feature's value. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the feature's size, in bytes. ‡ M_FEATURE_STREAMABLE Inquires whether the specified feature is streamable. A streamable feature can be stored in the local camera's description file (an XML file stored on your computer). Streamable features are typically not persistent values (such as pixel format and image size). In most cases, a streamable feature is capable of being saved and loaded from file at a later date, possibly on a different camera. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_FALSE Specifies that the feature is not streamable. ‡ M_TRUE Specifies that the feature is streamable. ‡ M_FEATURE_TOOLTIP Inquires the tooltip of the specified feature. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_TOOLTIP + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the feature's tooltip. ‡ M_FEATURE_TYPE Inquires the specified feature's type. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_TYPE_BOOLEAN Specifies that the feature's value is a boolean. ‡ M_TYPE_CATEGORY Specifies that the feature is a category feature, and its value cannot be inquired. ‡ M_TYPE_COMMAND Specifies that the feature is a command and its value cannot be inquired. ‡ M_TYPE_DOUBLE Specifies that the feature's value is a floating-point. ‡ M_TYPE_ENUMERATION Specifies that the feature's value is an enumeration. ‡ M_TYPE_INT64 Specifies that the feature's value is a 64-bit integer. ‡ M_TYPE_REGISTER Specifies that the feature's value is mapped to a multi-byte register. ‡ M_TYPE_STRING Specifies that the feature's value is a string. ‡ M_FEATURE_VALUE Inquires the current value of the feature. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_BOOL &nbsp;|&nbsp; address of a MIL_DOUBLE &nbsp;|&nbsp; address of a MIL_INT64 &nbsp;|&nbsp; array of type MIL_UINT8 [optionally, in C++: a reference to a std::vector&lt;MIL_UINT8&gt; ] &nbsp;|&nbsp; array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: address of a MIL_BOOL Note: For when inquiring a feature's value whose feature data type is a boolean; set UserVarType to M_TYPE_BOOLEAN. Data type: address of a MIL_DOUBLE Note: For when inquiring a feature's value whose feature data type is a double-precision floating-point; set UserVarType to M_TYPE_DOUBLE. Data type: address of a MIL_INT64 Note: For when inquiring a feature's value whose feature data type is a 64-bit integer; set UserVarType to M_TYPE_INT64. Data type: array of type MIL_UINT8 [optionally, in C++: a reference to a std::vector&lt;MIL_UINT8&gt; ] Required array size: MsysInquireFeature ( M_TYPE_STRING + M_FEATURE_USER_ARRAY_SIZE() ) Note: For when inquiring a feature's value whose feature data type is a multi-byte register set UserVarType to M_TYPE_UINT8 + M_FEATURE_USER_ARRAY_SIZE(). Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_TYPE_STRING + M_FEATURE_USER_ARRAY_SIZE() ) Note: For when inquiring a feature's value whose feature data type is a string; set UserVarType to M_TYPE_STRING + M_FEATURE_USER_ARRAY_SIZE(). Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the feature's value. ‡ M_FEATURE_VALUE_ARRAY Inquires the array of values of the specified feature. The array of values will be inquired without needing to be indexed by a selector. This is internally handled by MIL and simplifies implementation. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_BOOL [optionally, in C++: a reference to a std::vector&lt;MIL_BOOL&gt; ] &nbsp;|&nbsp; array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_BOOL [optionally, in C++: a reference to a std::vector&lt;MIL_BOOL&gt; ] Required array size: MsysInquireFeature ( M_TYPE_BOOLEAN + M_FEATURE_USER_ARRAY_SIZE() ) Note: For when inquiring an array of feature values whose feature data type is a boolean; set UserVarType to M_TYPE_BOOLEAN + M_FEATURE_USER_ARRAY_SIZE(). Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size: MsysInquireFeature ( M_TYPE_INT64 + M_FEATURE_USER_ARRAY_SIZE() ) Note: For when inquiring an array of feature values whose feature data type is an integer; set UserVarType to M_TYPE_INT64 + M_FEATURE_USER_ARRAY_SIZE(). Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: MsysInquireFeature ( M_TYPE_DOUBLE + M_FEATURE_USER_ARRAY_SIZE() ) Note: For when inquiring an array of feature values whose feature data type is a double; set UserVarType to M_TYPE_DOUBLE + M_FEATURE_USER_ARRAY_SIZE(). ‡ M_FEATURE_VALUE_ARRAY_SIZE Inquires the number of elements in the specified feature's array of values. For use with M_FEATURE_VALUE_ARRAY. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value &gt;= 0 Specifies the number of elements in the feature array. ‡ M_FEATURE_VISIBILITY Inquires the visibility level of the specified feature. The visibility level indicates the level of expertise required to view or select the feature. When creating a custom user interface for the camera's device description file (XML), the visibility level of the specified feature can be used to potentially hide the specified feature. The current level of visibility should be set within your custom user interface, and the enumeration entry for the visibility level of the specified feature must be compared against it. If the specified enumeration entry has a level of visibility higher than the current level of visibility, it is hidden. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_FEATURE_VISIBILITY_BEGINNER Specifies that the feature is suggested for beginners. ‡ M_FEATURE_VISIBILITY_EXPERT Specifies that the feature is suggested for experts. ‡ M_FEATURE_VISIBILITY_GURU Specifies that the feature is suggested for advanced experts. ‡ M_FEATURE_VISIBILITY_INVISIBLE Specifies that the feature should not be shown in the user interface for the camera's device description file (XML). Note that an invisible feature can still be set or inquired using MsysControlFeature() and MsysInquireFeature(), respectively. ‡ When the specified feature is of type enumeration, you can use one of the following to inquire about the specified enumeration entry in the supported enumeration list of the feature. When the information pertains to a specific enumeration entry (for example, M_FEATURE_ENUM_ENTRY_ACCESS_MODE + n), the value is described in relation to its position in the enumerated list, where n is the index into the enumerated list. Note that these values can only be used when the feature type to inquire is an enumeration. For inquiring about the enumeration entry of a feature's value InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_FEATURE_ENUM_ENTRY_ACCESS_MODE + n Inquires whether the specified enumeration entry is implemented, available, readable, and/or writable, where n is the index into the enumerated list. Note that an error is generated if the enumeration entry does not exist in the camera's device description file (XML). To learn if the specified enumeration entry exists in the file and is implemented on your camera, use the M_FEATURE_IS_IMPLEMENTED macro. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Bit-encoded access mode value Specifies a bit-encoded value that details the access mode. To establish the access mode from the encoded value, use the following macros: To learn whether the specified enumeration entry is available, use the M_FEATURE_IS_AVAILABLE macro. Note that if an enumeration entry is not available, use M_FEATURE_IS_IMPLEMENTED to learn whether the specified enumeration entry is only temporarily unavailable or actually not implemented on your camera. An enumeration entry that is temporarily unavailable typically relies on the setting of another feature or enumeration entry. To learn whether the specified enumeration entry is implemented, use the M_FEATURE_IS_IMPLEMENTED macro. To learn whether the specified enumeration entry can be read, use the M_FEATURE_IS_READABLE macro. ‡ M_FEATURE_ENUM_ENTRY_COUNT Inquires the total number of enumeration entries in the supported enumerated list of the feature. Note that this inquire type can only be used when the feature to inquire is of type enumeration. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of enumeration entries. ‡ M_FEATURE_ENUM_ENTRY_DESCRIPTION + n Inquires the description of the specified enumeration entry, where n is the index into the enumerated list. Note that this inquire type can only be used when the feature type to inquire is an enumeration. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_ENUM_ENTRY_DESCRIPTION + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the enumeration entry's description. ‡ M_FEATURE_ENUM_ENTRY_DISPLAY_NAME + n Inquires the internally used name of the specified enumeration entry, where n is the index into the enumerated list. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_ENUM_ENTRY_DISPLAY_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the enumeration entry's display name. ‡ M_FEATURE_ENUM_ENTRY_NAME + n Inquires the internally-used name of the specified enumeration entry of the feature, where n is the index into the enumerated list. Note that this can differ slightly from the display name of the entry (M_FEATURE_ENUM_ENTRY_DISPLAY_NAME + n). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_ENUM_ENTRY_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the enumeration entry's name. ‡ M_FEATURE_ENUM_ENTRY_TOOLTIP + n Inquires the tool-tip for the specified enumeration entry, where n is the index into the enumerated list. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_FEATURE_ENUM_ENTRY_TOOLTIP + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the enumeration entry's tooltip. ‡ M_FEATURE_ENUM_ENTRY_VALUE + n Inquires the enumeration integer value of the specified enumeration entry, where n is the index into the enumerated list. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ Value Specifies the enumeration entry's integer value. ‡ M_FEATURE_ENUM_ENTRY_VISIBILITY + n Inquires the visibility level of the specified enumeration entry, where n is the index into the enumerated list. The visibility level indicates the level of expertise required to view or select the enumeration entry. When creating a custom user interface for the camera's device description file (XML), the visibility level of the specified enumeration entry can be used to potentially hide the specified enumeration entry. The current level of visibility should be set within your custom user interface, and the visibility level of the specified enumeration entry must be compared against it. If the specified enumeration entry has a level of visibility higher than the current level of visibility, it is hidden. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_FEATURE_VISIBILITY_BEGINNER Specifies that the enumeration entry is suggested for beginners. ‡ M_FEATURE_VISIBILITY_EXPERT Specifies that the enumeration entry is suggested for experts. ‡ M_FEATURE_VISIBILITY_GURU Specifies that the enumeration entry is suggested for advanced experts. ‡ M_FEATURE_VISIBILITY_INVISIBLE Specifies that the enumeration entry should not be shown in the user interface for the camera's device description file (XML). Note that an invisible feature can still be set or inquired using MsysControlFeature() and MsysInquireFeature(), respectively. ‡ When the specified feature is of type category or \"Root\", you can use one of the following to inquire about its subfeatures. This is useful for enumerating the features of your camera. For inquiring about the subfeatures of a feature InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_SUBFEATURE_COUNT Inquires the number of subfeatures or subcategories that the specified category feature (node) has. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of subfeatures. ‡ M_SUBFEATURE_NAME + n Inquires the name of the specified subfeature, where n is the index of subfeature. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MsysInquireFeature ( M_SUBFEATURE_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the name of the subfeature. ‡ M_SUBFEATURE_TYPE + n Inquires the type of the specified subfeature, where n is the index of subfeature. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 ‡ M_TYPE_BOOLEAN Specifies that the feature's value is a boolean. ‡ M_TYPE_CATEGORY Specifies that the feature is a category. ‡ M_TYPE_COMMAND Specifies that the feature is a command to be executed. ‡ M_TYPE_DOUBLE Specifies that the feature's value is a floating-point. ‡ M_TYPE_ENUMERATION Specifies that the feature's value is an enumeration. ‡ M_TYPE_INT64 Specifies that the feature's value is a 64-bit integer. ‡ M_TYPE_REGISTER Specifies that the feature is mapped to a multi-byte register. ‡ M_TYPE_STRING Specifies that the feature's value is a string. ‡ Combination values for the values listed in For inquiring about the enumeration entry of a feature's value, For inquiring about the subfeatures of a feature; and for the following values: M_FEATURE_ACCESS_MODE , M_FEATURE_CACHING_MODE , M_FEATURE_CHANGE_HOOK , M_FEATURE_DEPRECATED , M_FEATURE_DESCRIPTION , M_FEATURE_DISPLAY_NAME , M_FEATURE_EXECUTE_COMPLETED , M_FEATURE_INCREMENT , M_FEATURE_MAX , M_FEATURE_MIN , M_FEATURE_NAME , M_FEATURE_POLLING_INTERVAL , M_FEATURE_PRESENT , M_FEATURE_REPRESENTATION , M_FEATURE_SELECTOR_COUNT , M_FEATURE_SELECTOR_NAME + n , M_FEATURE_SIZE , M_FEATURE_STREAMABLE , M_FEATURE_TOOLTIP , M_FEATURE_TYPE , M_FEATURE_VALUE , M_FEATURE_VISIBILITY. You can add one of the following values to the above-mentioned values to specify the GenTL configuration file (XML file) that is associated with the feature. For specifying the configuration file associated with the feature Combination value Description MIL system-specifictooltip (‡) M_GENTL_INTERFACE_NUMBER( MIL_INT IndexValue ) Specifies which instance of the GenTL interface configuration file is associated with the feature. ‡ Parameters IndexValue Specifies the index of the GenTL interface configuration file. ‡ 0&lt;= Value&lt;=MsysInquire(M_GENTL_INTERFACE_COUNT) Specifies the index. ‡ M_GENTL_SYSTEM Specifies to display the GenTL system configuration information. This is the default value. ‡ Combination value for M_FEATURE_DESCRIPTION , M_FEATURE_DISPLAY_NAME , M_FEATURE_NAME , M_FEATURE_SELECTOR_NAME + n , M_FEATURE_TOOLTIP , M_FEATURE_VALUE , M_FEATURE_ENUM_ENTRY_DESCRIPTION + n , M_FEATURE_ENUM_ENTRY_DISPLAY_NAME + n , M_FEATURE_ENUM_ENTRY_NAME + n , M_FEATURE_ENUM_ENTRY_TOOLTIP + n , M_SUBFEATURE_NAME + n. You can add the following value to the above-mentioned values to get the string's length. To inquire the size of a string InquireType combination value Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). Note that, when used with M_FEATURE_VALUE, you can only use this combination value if the feature is of type string. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId - InquireType - FeatureName For specifying the name of the feature - UserVarType For specifying the UserVarPtr's data type + For specifying the length of the array - UserVarPtr Parameter Associations For specifying the type of information to inquire about the feature and the data type returned For inquiring about the enumeration entry of a feature's value For inquiring about the subfeatures of a feature + For specifying the configuration file associated with the feature + To inquire the size of a string Compilation information ",
      "wordCount": 5510,
      "subEntries": []
    }
  ]
}]