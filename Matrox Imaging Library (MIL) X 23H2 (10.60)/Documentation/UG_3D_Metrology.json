[{
  "id": "UG_3D_Metrology",
  "version": "2024020714",
  "title": "3D metrology",
  "subTitles": null,
  "location": "MIL UG P05: 3D processing and analysis",
  "pageURL": "content\\UserGuide\\3D_Metrology\\ChapterInformation.htm",
  "text": " Chapter 39: 3D metrology This chapter explains how to use the 3D Metrology module to compute a variety of distance measurements and statistics on a point cloud or depth map, or to fit a 3D geometry to a point cloud or depth map. MIL 3D Metrology module Basic concepts for the MIL 3D Metrology module Calculating geometric and scalar measurements Steps to performing a M3dmetFeatureEx or M3dmetFeature operation Operations that compute a 3D geometry or matrix Operations that compute a scalar value Operations that compute a 3D geometry, a related scalar value, or both. Performing 3D fitting Steps to perform a fitting operation Specifying points or pixels not to use for fitting Using a fitted geometry to mask points from a point cloud Calculating distance measurements and statistics Steps to calculate distance measurements and statistics How distances are calculated Point cloud as a reference Depth map as a reference 3D geometry as a reference Calculating a volume Specifying a reference object Delimiting the volume to calculate Considerations Volume elements How the volume of a meshed point cloud with holes is calculated Diagnosing volume results Retrieving and drawing results Possible results Fit results Statistics results Feature results Volume results Drawing results Drawing fit results Drawing volume results ",
  "wordCount": 208,
  "subEntries": [
    {
      "id": "UG_3D_Metrology_3D_Metrology_overview",
      "version": null,
      "title": "MIL 3D Metrology module",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\3D_Metrology_overview.htm",
      "text": " MIL 3D Metrology module The MIL 3D Metrology module allows you to calculate various distance measurements between a point cloud, depth map, or geometry object, and compute a variety of statistics using these distance measurements. The module can also be used to fit a 3D geometry to a point cloud or depth map. Fitting a 3D geometry gives you more structural information about the object represented by the point cloud or depth map, and gives you more options for analyzing or processing it. MIL 3D Metrology module ",
      "wordCount": 89,
      "subEntries": []
    },
    {
      "id": "UG_3D_Metrology_Basic_concepts",
      "version": null,
      "title": "Basic concepts for the MIL 3D Metrology module",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\Basic_concepts.htm",
      "text": " Basic concepts for the MIL 3D Metrology module The basic concepts and vocabulary conventions for the MIL 3D Metrology module are: Depth. A measurement extending from the surface of the object to the XY-plane (that is, the Z=0 plane), in world units. Depth map. An image where the gray value of a pixel represents its depth in the world. Fully corrected depth map. A depth map that accurately represents the height and shape of portrayed objects; its pixels represent a constant size in X and Y in the world. Note that, when dealing with depth maps, the size of the pixels is not necessarily square. Initial fit estimate. Specifies an initial estimate for the position of a 3D geometry, relative to the point cloud or depth map, at the start of the fitting operation. Mesh. A triangulated surface generated for a point cloud. Pose. The established position and orientation of an object in space. Reference plane. A plane with a known height and orientation, and used as a measure against which to compute distances, angles, volumes, or other calculations. Root-mean-square (RMS) error. In the MIL 3D Metrology module, the RMS error is a measure of the overall distance between two MIL objects. A lower error indicates a smaller overall distance between the two MIL objects, and vice versa. XY-plane. The plane defined by the equation Z=0 in a world coordinate system. XZ-plane. The plane defined by the equation Y=0 in a world coordinate system. Basic concepts for the MIL 3D Metrology module ",
      "wordCount": 254,
      "subEntries": []
    },
    {
      "id": "UG_3D_Metrology_Calculate_and_Calculate_Scalar",
      "version": null,
      "title": "Calculating geometric and scalar measurements",
      "subTitles": [
        "Steps to performing a M3dmetFeatureEx or M3dmetFeature operation",
        "Operations that compute a 3D geometry or matrix",
        "Operations that compute a scalar value",
        "Operations that compute a 3D geometry, a related scalar value, or both."
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\Calculate_and_Calculate_Scalar.htm",
      "text": " Calculating geometric and scalar measurements The MIL 3D Metrology module can perform geometric and scalar measurements for 3D geometry objects, using M3dmetFeatureEx() and M3dmetFeature(). For example, you can use either of these functions to find the closest distance between a point and another 3D geometry. Note that M3dmetFeatureEx() can calculate both the distance and the point on the second geometry. If you only need the distance (and not the associated point), use M3dmetFeature(), which returns the distance measurement directly. In general, if you require a calculated 3D geometry, use M3dmetFeatureEx(); if you require a scalar measurement only, use M3dmetFeature(). Note that passing a result buffer to M3dmetFeatureEx() ensures that you can retrieve both scalar measurements and any computed geometry. If instead you pass a 3D geometry object to hold the result, you will only obtain a defined 3D geometry; no scalar measurement is saved. Besides 3D geometries, you can also perform some operations on transformation matrix objects. For example, you can interpolate between matrices, calculate the distance between origins defined in the matrices, or calculate the angle between their rotations. Steps to performing a M3dmetFeatureEx or M3dmetFeature operation The following steps provide a basic methodology for performing a M3dmetFeatureEx() or M3dmetFeature() operation: Obtain the source geometries or matrices. You will likely already have at least one source 3D geometry or matrix with which you want to work. To create a new 3D geometry or matrix, see Chapter 44: Using the 3D Geometry module. For an M3dmetFeatureEx() operation, allocate a result object: Note that, for operations that result in a transformation matrix (for example, when interpolating between two matrices with M_INTERPOLATION), you must allocate a result buffer to store the result. To allocate a 3D metrology result buffer, use M3dmetAllocResult() with M_CALCULATE_RESULT. To allocate a 3D geometry object, use M3dgeoAlloc() with M_GEOMETRY. M3dmetFeature() returns a single value, so it does not take a result object. Call M3dmetFeatureEx() or M3dmetFeature() with the source 3D geometries or matrices, the operation to perform, and the object/location in which to store results. If necessary, retrieve results from the 3D metrology result buffer using M3dmetGetResult(). If required, copy results from your 3D metrology result buffer into a 3D geometry object or a transformation matrix object, using M3dmetCopyResult(). For example, to retrieve a resulting 3D geometry after a M3dmetFeatureEx() operation, you can pass the result buffer and a 3D geometry object to M3dmetCopyResult() to obtain a defined 3D geometry. In the following subsections, the possible M3dmetFeatureEx() and M3dmetFeature() operations are presented in tables, arranged into groups of operations that only compute a 3D geometry or matrix, operations that only compute a scalar or other non-geometric value, and operations that compute a 3D geometry, a non-geometric value (typically, a scalar value), or both. Operations that compute a 3D geometry or matrix You can use M3dmetFeatureEx() to compute and obtain one or more 3D geometries from source objects. Note that the M_INTERPOLATION operation defines either a 3D geometry or transformation matrix object, depending on the source object type. The following operations compute a 3D geometry or matrix: Operation Src1 Src2 Src3 Param Result (computed directly using M3dmetFeatureEx(), or obtained from a result buffer using M3dmetCopyResult() with M_CALCULATED_OBJECT()) Example diagram M_BOUNDING_BOX Box Finite cylinder Finite line Point Sphere Box Finite cylinder Finite line Point Sphere Uninitialized geometry — — 1 box M_INTERPOLATION Box Cylinder Line Plane Point Sphere Matrix Box Cylinder Line Plane Point Sphere Matrix (Src2 must be of the same type as Src1) — Interpolation factor Object of the same type as Src1. The resulting object's size and position will reflect an intermediate size and position, relative to the source objects. You must set an interpolation factor, where 0.0 maps to Src1, and 1.0 maps to Src2. The interpolation is linear; values between 0.0 and 1.0 are interpolated and values outside of this range are extrapolated. In general, given Src1, Src2, and an interpolation factor, the resulting object's size will be: Factor*Src1 + (1-Factor)*Src2 . For matrices, the operation interpolates any difference in translation, scale, and/or rotation. Translations and scales are linearly interpolated, while rotations are spherically interpolated. For example, given that any two rotations differ by some angle around some axis, M_INTERPOLATION finds an intermediate angle, while also applying the specified interpolation factor. When interpolating between matrices, note that the two source matrices must be similarity transformations, and must have the same handedness. M_NORMAL_AT_POSITION Point Box Cylinder Plane Sphere — — 1 line (1 unit in length) M_POINT_ON_LINE Line — — Distance 1 point M_POINT_ON_LINE_CLIPPED Line — — Distance 1 point Operations that compute a scalar value You can use either M3dmetFeatureEx() or M3dmetFeature() to compute scalar measurements. If you need a single measurement, M3dmetFeature() returns the calculated value directly, without requiring a result buffer. The following operations compute non-geometric values (typically, these are scalar values): Operation Src1 Src2 Param Result (M3dmetFeature() with the ResultPtr parameter, or obtained using M3dmetGetResult() after calling M3dmetFeatureEx()) Example diagram M_ANGLE Cylinder Line Plane Cylinder Line Plane — The angle between the two source 3D geometries (M_ANGLE). Note that, when computed using M3dmetFeatureEx(), this operation also performs M_PARALLELISM and M_PERPENDICULARITY operations. See below. Matrix Matrix — The angle of the axis-angle rotation between the matrices. This is the angle through which an object with the Src1 rotation must be rotated to align with an object with the Src2 rotation (M_ANGLE). — M_DISTANCE Matrix Point Matrix Point — The distance between the source objects. If a source is a matrix, the distance is measured from the origin defined in the matrix (M_DISTANCE). M_IS_INSIDE Box Cylinder Plane Point Sphere Box Cylinder Plane Sphere — Whether Src1 is inside, partially inside, or outside Src2 (M_IS_INSIDE). M_OVERLAP Box Cylinder Sphere Box Cylinder Sphere Size of the smallest measurable detail; the specified value represents the length of a cube, for which the operation can resolve. The percentage of volume overlap between the two source 3D geometries (M_OVERLAP). Note that, when computed using M3dmetFeatureEx(), this operation also calculates the following: The volume of the union of the two source 3D geometries (M_UNION). The volume of the intersection of the two source 3D geometries (M_INTERSECTION). The difference between the union and intersection (M_UNION - M_INTERSECTION) of the two source 3D geometries (M_DIFFERENCE). M_PARALLELISM Cylinder Line Plane Cylinder Line Plane — An angle representing the degree to which Src1 is parallel to Src2 (0 to 90 degrees, where 0 is parallel) (M_PARALLELISM). M_PERPENDICULARITY Cylinder Line Plane Cylinder Line Plane — An angle representing the degree to which Src1 is perpendicular to Src2 (0 to 90 degrees, where 0 is perpendicular) (M_PERPENDICULARITY). Operations that compute a 3D geometry, a related scalar value, or both. Some operations compute a 3D geometry, a related non-geometric value (typically, a scalar value), or both. For example, M_SHORTEST_LINE calculates the shortest line between two source lines; you can choose to obtain the computed 3D line geometry, its length, or both. These operations are available when using M3dmetFeatureEx() (geometry and scalar results) or M3dmetFeature() (scalar result only). Typical scalar results include the number of resulting 3D geometries, as well as certain distance measurements. Note that, for some of the operations listed below, you can also retrieve information about the computation, such as the degree to which the source geometries are parallel or perpendicular, if applicable. You can use these results to determine edge cases. For example, when calculating the intersection of two planes, the resulting line might be too far away to be useful, which can occur when the source planes are almost parallel. When using M3dmetFeatureEx(), if you want to obtain both 3D geometry and scalar results, you must specify a result buffer; if you specify a 3D geometry result object when using this function, you will obtain a 3D geometry only. The following operations compute a 3D geometry and/or a scalar value: Operation Src1 Src2 Src3 Param Result 3D geometry (computed directly using M3dmetFeatureEx(), or obtained from a result buffer using M3dmetCopyResult() with M_CALCULATED_OBJECT()) Result scalar (M3dmetFeature() with the ResultPtr parameter, or obtained using M3dmetGetResult() after calling M3dmetFeatureEx()) Example diagram M_CLIP Line Box Cylinder (Finite) Plane Sphere — Length of the clipped line, when Src1 is an infinite line, and Src2 is a plane. 0-1 lines Whether Src1 is inside, partially inside, or outside Src2 (M_IS_INSIDE). M_CLOSEST_POINT Point Box Cylinder Line Plane Point Sphere — — 1 point The distance between Src1 and the closest point on Src2 (M_DISTANCE). M_EXTRUSION_BORDER Box Plane — — 1 box Whether the operation was successful (M_STATUS_EXTRUSION). M_EXTRUSION_CENTER Box Plane — — 1 box Whether the operation was successful (M_STATUS_EXTRUSION). M_FARTHEST_POINT Point Box Cylinder (Finite) Line (Finite) Plane Point Sphere — — 1 point The distance between Src1 and the farthest point on Src2 (M_DISTANCE). M_INTERSECTION Plane Plane Plane — 0-1 points The number of intersection points (M_NUMBER). The parallelism between the source planes (M_ANGLE_TO_EDGE_CASE). Plane Plane — — 0-1 infinte lines The number of intersection lines (M_NUMBER). The parallelism between the source planes (M_ANGLE_TO_EDGE_CASE). Plane Box — — 0 or 3-6 lines The number of intersection lines (M_NUMBER). Line Box Cylinder Plane Sphere — — 0-2 points The number of intersection points (M_NUMBER). The distance of the specified point along the source line (M_DISTANCE_ALONG_LINE()). If Src2 is a plane, the parallelism between the source line and the plane (M_ANGLE_TO_EDGE_CASE). M_ORTHOGONALIZE Cylinder Line Plane Cylinder Line Plane M_NULL Point — Geometry of the same type as Src1. The parallelism between the source geometries (M_ANGLE_TO_EDGE_CASE). M_PROJECTION Point Box Cylinder Line Plane Sphere — — 1 point — Line Plane — — 1 line The perpendicularity between the source line and plane (M_ANGLE_TO_EDGE_CASE). M_RAY_CAST Line Box Cylinder Plane Sphere — — 0-2 points The number of intersection points (M_NUMBER). The distance of the specified point along the source 3D line (M_DISTANCE_ALONG_LINE()). If Src2 is a plane, the parallelism between the source line and the plane (M_ANGLE_TO_EDGE_CASE). M_SHORTEST_LINE Line Line — — 1 line Length of the shortest line connecting Src1 and Src2 (M_DISTANCE). Calculating geometric and scalar measurements Steps to performing a M3dmetFeatureEx or M3dmetFeature operation Operations that compute a 3D geometry or matrix Operations that compute a scalar value Operations that compute a 3D geometry, a related scalar value, or both. ",
      "wordCount": 1692,
      "subEntries": []
    },
    {
      "id": "UG_3D_Metrology_3D_Fitting",
      "version": null,
      "title": "Performing 3D fitting",
      "subTitles": [
        "Steps to perform a fitting operation",
        "Specifying points or pixels not to use for fitting",
        "Using a fitted geometry to mask points from a point cloud"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\3D_Fitting.htm",
      "text": " Performing 3D fitting The MIL 3D metrology module can perform a fitting operation. The fitting operation tries to fit a specified type of 3D geometry to a point cloud or depth map; you can fit one of the following geometries: cylinder, line, plane, or sphere. The fitting operation minimizes the average root-mean-squared (RMS) error between the 3D geometry and the inlier points of the point cloud or depth map. The RMS error is minimized over several iterations. For a single iteration, the RMS error is only calculated for points that are considered inliers for that iteration (as specified using M3dmetFit() with the OutlierDistance parameter) to avoid fitting the specified 3D geometry to spurious points in the point cloud or depth map. Spurious points are typically caused by image noise, object deformity, or occlusion. You can let M3dmetFit() automatically determine the outlier distance, using M_AUTO_VALUE. Retrieve the computed value using M3dmetGetResult() with M_OUTLIER_DISTANCE. At the beginning of the fitting operation, an initial fit estimate is calculated (as specified using M3dmetControl() with M_ESTIMATION_MODE) to define an initial position of the 3D geometry relative to the point cloud or depth map. In the next iteration, points are defined as inliers or outliers depending on whether they are within the outlier distance from the surface of the 3D geometry. The RMS error between the geometry and inliers is calculated, and the 3D geometry is then repositioned to minimize the RMS error. This continues with each iteration, until one of the stop conditions is met. Optionally, when performing a fitting operation with a fit 3D metrology context that has M_ESTIMATION_MODE set to M_FROM_GEOMETRY, you can specify a 3D geometry object (allocated using M3dgeoAlloc() and defined using an appropriate function from the M3dgeo...() module) to use for the first iteration. Otherwise, you do not specify a 3D geometry object for a fitting operation. Steps to perform a fitting operation The following steps provide a basic methodology for performing a fitting operation: Allocate a fit 3D metrology context, using M3dmetAlloc() with M_FIT_CONTEXT. Allocate a fit 3D metrology result buffer, using M3dmetAllocResult() with M_FIT_RESULT. Control the settings of the fit 3D metrology context using M3dmetControl(). These settings specify stop conditions for the fitting operation, and determine how the initial fit estimate is calculated using M_ESTIMATION_MODE. Note that, if M_ESTIMATION_MODE is set to M_FROM_GEOMETRY, use M3dmetCopy() with M_ESTIMATE_GEOMETRY to copy a 3D geometry into the fit 3D metrology context. This geometry will then be used as the initial fit estimate. By default, the fit 3D metrology context contains an undefined geometry object, and will cause an error if you initiate the fit operation with this estimation mode. Call M3dmetFit() to perform the fitting operation. In the function call, you must specify the type of 3D geometry to fit to the point cloud or depth map, and how points are determined to be outliers or inliers. Retrieve results from the fit 3D metrology result buffer using M3dmetGetResult(), including the status of the fitting operation. Retrieve the fitted geometry using M3dmetCopyResult() with M_FITTED_GEOMETRY. Specifying points or pixels not to use for fitting If you need to only fit to a subset of the points of a point cloud, or pixels of a depth map, you can do so by cropping a point cloud (using M3dimCrop()) or specifying a raster ROI for a depth map (using MbufSetRegion()), respectively. This is useful, for example, when there are multiple objects in the point cloud or depth map to which a 3D geometry could be fit. For information about cropping a point cloud, see the Cropping or masking points subsection of the Working with points in a point cloud section of Chapter 35: 3D image processing. When specifying an ROI for a depth map, note that M3dmetFit() fits the geometry to all depth map pixels inside the ROI that are not outside the specified outlier distance (OutlierDistance). Therefore, your ROI should mask out any objects or parts of objects that you do not want considered for the fit operation. Using a fitted geometry to mask points from a point cloud You can use a fitted geometry to specify which points to mask from a point cloud. That is, any points that the geometry was fitted to will have their confidence score set to 0, using M3dmetCopyResult() with M_OUTLIER_MASK. Once the confidence score is set to 0, these points will be excluded from analysis and processing operations. This can be useful to remove a plane from the background. The snippet below shows how to use a fitted plane geometry to mask points from a point cloud: // Specify a tolerance for the fitting operation static const MIL_DOUBLE PLANE_TOLERANCE = 1.0; // Fit a plane using default settings MIL_ID MilFitResult = M3dmetAllocResult(MilSystem, M_FIT_RESULT, M_DEFAULT, M_NULL); M3dmetFit(M_DEFAULT, MilPointCloud, M_PLANE, MilFitResult, PLANE_TOLERANCE, M_DEFAULT); // Inquire the ID of the point cloud's confidence component MIL_ID ConfidenceBuffer; MbufInquireContainer(MilPointCloud, M_COMPONENT_CONFIDENCE, M_COMPONENT_ID, &amp;ConfidenceBuffer); // Copy only the points that were considered outliers during the fit operation // into ConfidenceBuffer M3dmetCopyResult(MilFitResult, ConfidenceBuffer, M_OUTLIER_MASK, M_DEFAULT); M3dmetFree(MilFitResult); Performing 3D fitting Steps to perform a fitting operation Specifying points or pixels not to use for fitting Using a fitted geometry to mask points from a point cloud ",
      "wordCount": 862,
      "subEntries": []
    },
    {
      "id": "UG_3D_Metrology_Calculate_statistics",
      "version": null,
      "title": "Calculating distance measurements and statistics",
      "subTitles": [
        "Steps to calculate distance measurements and statistics",
        "How distances are calculated",
        "Point cloud as a reference",
        "Depth map as a reference",
        "3D geometry as a reference"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\Calculate_statistics.htm",
      "text": " Calculating distance measurements and statistics The 3D Metrology module can calculate distance measurements between two MIL objects, and compute a variety of statistics (such as, the minimum, maximum and average distances) on those distance measurements. To calculate distances and statistics for a single point cloud or depth map (such as, the bounding box or the distances between the points), use the 3D image processing module (M3dimStat()) instead. For more information, see the Calculating statistics on a point cloud, depth map, or 3D geometry section of Chapter 35: 3D image processing. Steps to calculate distance measurements and statistics The following steps provide a basic methodology for calculating distance measurements and statistics: Optionally, allocate a statistics 3D metrology context, using M3dmetAlloc() with M_STATISTICS_CONTEXT. Note that if you want to evaluate a single statistics calculation, you can call M3dmetStat() with a predefined statistics 3D metrology context, without having to allocate a statistics 3D metrology context beforehand. Allocate a statistics 3D metrology result buffer, using M3dmetAllocResult() with M_STATISTICS_RESULT. Control the settings of the statistics 3D metrology context using M3dmetControl(). These settings determine which distance measurements and statistics to calculate. Call M3dmetStat() to calculate the distance measurements and evaluate their statistics. Retrieve results from the statistics 3D metrology result buffer using M3dmetGetResult(). Note that you can calculate distance measurements without evaluating statistics using M3dmetDistance(). This function creates a distance map which is useful, for example, to highlight defects using a LUT in a 2D or 3D display. For more information about showing point clouds in a 3D display using a LUT, see the Applying LUTs subsection of the Color and display settings for 3D data section of Chapter 43: 3D Display and graphics. How distances are calculated Depending on the type of reference object that you pass, and the setting of the DistanceType parameter, M3dmetStat() or M3dmetDistance() can calculate different distances for each point in the source. You must specify the distance type to be calculated, even if only one option is available (for example, when the reference is a point cloud without a mesh). When a depth map is passed as a source to these functions, it is typically internally converted to a point cloud. When referring to the source object in this section, the term point can refer to either a point in a point cloud, or the position in 3D space represented by a pixel of a depth map. This does not apply to the reference object; when passed as a reference, depth maps and point clouds are treated differently. Point cloud as a reference When the reference is a point cloud without a mesh, distances are measured from each point in the source to the nearest point in the reference. To calculate these distances, set DistanceType to M_DISTANCE_TO_NEAREST_NEIGHBOR. When the reference is a meshed point cloud, you can choose to instead measure distances from each point in the source to the nearest position on the surface of the mesh. To calculate these distances, set DistanceType to M_DISTANCE_TO_MESH. For maximum performance, you can specify not to complete calculations for points in the source which are determined to be more than a certain distance from the reference point cloud. For M3dmetDistance(), this is specified by the Param parameter. For M3dmetStat(), this is specified using the Condition, CondHigh and CondLow parameters, which also determine whether a given distance is used when calculating statistics. Depth map as a reference When the reference is a fully corrected depth map, distances are measured from each point in the source to the position in the depth map that is directly above or below the source point along the Z-axis. To calculate these distances, set DistanceType to M_ABSOLUTE_DISTANCE_Z_TO_SURFACE or M_SIGNED_DISTANCE_Z_TO_SURFACE. If a point does not map to a position in the depth map, it is assigned a distance of MIL_FLOAT_MAX and is ignored for statistics calculations. 3D geometry as a reference When the reference is a 3D geometry object, you can choose to measure distances in several ways depending on the type of the 3D geometry: For all types of 3D geometry objects (except lines), you can choose to measure distances from each point to the nearest position on the surface of the 3D geometry. To calculate these distances, set DistanceType to M_ABSOLUTE_DISTANCE_TO_SURFACE, M_SIGNED_DISTANCE_TO_SURFACE, or M_MANHATTAN_DISTANCE_TO_SURFACE (for a 3D box geometry only). Manhattan distance is the combined distance in all 3 axes between two positions, as opposed to the length of the shortest path between the two positions. For example, the shortest distance from (0,0,0) to (1,1,1) is ~1.73, but the Manhattan distance is 3 (1 + 1 + 1). Typically, you should not use M_MANHATTAN_DISTANCE_TO_SURFACE unless it is specifically required for your application. For a cylinder 3D geometry object, you can choose to measure distances from each point in the source to the nearest position on the central axis of the cylinder. The central axis is extended infinitely, even if the cylinder is finite. To calculate these distances, set DistanceType to M_DISTANCE_TO_CENTER_AXIS or M_DISTANCE_TO_CENTER_AXIS_SQUARED. For a line 3D geometry object, distances are measured from each point in the source to the nearest position on the line. Unlike the central axis of a cylinder, a finite line is not extended infinitely for this calculation. To calculate these distances, set DistanceType to M_DISTANCE_TO_LINE or M_DISTANCE_TO_LINE_SQUARED. For a plane 3D geometry object, you can choose to measure distances from each point in the source to the position on the surface of the plane that is directly above or below the point along the Z-axis. To calculate these distances, set DistanceType to M_ABSOLUTE_DISTANCE_Z_TO_SURFACE or M_SIGNED_DISTANCE_Z_TO_SURFACE. For a sphere 3D geometry object, you can choose to measure distances from each point in the source to the center of the sphere. To calculate these distances, set DistanceType to M_DISTANCE_TO_CENTER or M_DISTANCE_TO_CENTER_SQUARED. When calculating distances to the surface of a 3D geometry object, you can specify to have distances returned as either absolute or signed values (for example, using M_ABSOLUTE_DISTANCE_TO_SURFACE or M_SIGNED_DISTANCE_TO_SURFACE respectively). When you specify to return signed values, the sign indicates whether the point is above or below the surface of the reference object. Some types of distance calculations with 3D geometries (such as M_DISTANCE_TO_CENTER) include a square root operation to determine the distance for each point in the source. You can improve the performance of these types of distance calculations by specifying an alternate version (such as, M_DISTANCE_TO_CENTER_SQUARED) that bypasses this step and instead stores the square of the distance in the result buffer. Calculating distance measurements and statistics Steps to calculate distance measurements and statistics How distances are calculated Point cloud as a reference Depth map as a reference 3D geometry as a reference ",
      "wordCount": 1105,
      "subEntries": []
    },
    {
      "id": "UG_3D_Metrology_Calculate_volume",
      "version": null,
      "title": "Calculating a volume",
      "subTitles": [
        "Specifying a reference object",
        "Delimiting the volume to calculate",
        "Considerations",
        "Volume elements",
        "How the volume of a meshed point cloud with holes is calculated",
        "Diagnosing volume results"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\Calculate_volume.htm",
      "text": " Calculating a volume You can calculate the volume of a point cloud's mesh or a fully corrected depth map, using M3dmetVolumeEx() or M3dmetVolume(). You can, and in some cases must, specify a reference object to delimit the volume. Note that M3dmetVolumeEx() stores the result of the volume operation in a result buffer. M3dmetVolume() does not require a result buffer and returns the calculated volume directly. Specifying a reference object When calculating the volume of a mesh without holes, you do not need to specify a reference object. When calculating the volume of a depth map (with or without holes) or a mesh that has holes, a reference object is required to define a closed shape for which to calculate the volume. In either case, you might need to specify a reference object to limit the volume to calculate. Note that to reduce the number of holes, you can try using the smoothed reconstruction mode (M_MESH_SMOOTHED) to generate the mesh. For more information, see the Surface reconstruction subsection of the Working with points in a point cloud section of Chapter 35: 3D image processing. You can specify that the reference is the XY (Z=0) plane, a defined 3D plane geometry, or a fully corrected depth map (when the source is also a depth map). By default, for a depth map as a source, the reference is the XY (Z=0) plane; however, for a mesh, there is no default reference (if the mesh has holes, you must explicitly pass a reference object). When you specify a reference object and the source is a depth map or a mesh with holes, M3dmetVolumeEx() or M3dmetVolume() extends the boundaries of the source object onto it, to define the closed 3D shape for which to calculate the volume. If the source is a mesh, its boundaries are extended perpendicular to the reference object. If the source is a depth map image buffer, its boundaries are extended in the Z-direction until they meet the reference object. Delimiting the volume to calculate Whether or not a reference object is required, you can specify one to limit the volume to calculate. For example, you can calculate just the volume above the reference object (M_ABOVE), under the reference object (M_UNDER), or the volume that is above the reference object minus the volume below it (M_DIFFERENCE). These calculations are made, given the position of the source object relative to the reference object. If the reference object is a plane, any volume on the same side as the plane's normal is considered to be above the plane. If the reference object is a depth map, a given pixel in the source depth map is considered above a corresponding pixel (at the same X- and Y-coordinate) in the reference depth map if its Z-coordinate is greater. By default, M3dmetVolumeEx() and M3dmetVolume() calculate the sum of all volumes between the source and reference objects, whether above or below the reference object. Considerations If the source is a depth map with holes, you can use M3dimFillGaps() to fill them before calculating the volume. If the source is a mesh with disconnected triangles, the volumes for each set of connected triangles are calculated separately and summed in the final result. This can lead to unexpected results if two sets of triangles overlap, or if one set of triangles is above another with respect to the reference object. Volume elements A volume element is a triangular prism or pyramid that represents the computed 3D volume associated with one triangle of the source meshed point cloud. Pyramids occur for closed mesh volume calculations, since, in this case, the volume element is computed between a surface triangle and the origin of the working coordinate system. For a source depth map, the volume element is a rectangular prism. For more information on spliced volume elements, see the Diagnosing volume results subsection of this section. How the volume of a meshed point cloud with holes is calculated The following steps describe how the volume of a mesh with holes is calculated. When calculating the volume of a mesh with holes, it is the orientation of the meshed point cloud's triangles that defines how M3dmetVolume() calculates the volume. An arbitrary orientation (relative to the reference plane) is guessed for one triangle. The orientation of each triangle in the mesh is extrapolated from the first triangle. If any triangle in the mesh crosses the reference plane, the triangle is subdivided into triangles that do not. For each triangle above the reference plane, a triangular prism (volume element) from the triangle to the plane is defined. If the triangle was orientated away from the reference plane, the volume of the prism adds to the total calculated volume (illustrated in green). If the triangle was orientated towards the reference plane, the volume of the prism subtracts from the total calculated volume (illustrated in red). The absolute value of the total calculated volume is returned. After a successful volume computation, you can use M3dmetGetResult() to obtain the calculated volume and other data, such as the number of volume elements that were used in the calculation (M_VOLUME_NB_ELEMENTS). For a full list of available results, see the Volume results subsection of the Retrieving and drawing results section later in this chapter. Diagnosing volume results Using the 3D Metrology module, you can create index, mask, and status images for use when diagnosing volume operation results. Use M3dmetCopyResult() to copy results into an image buffer to create: An index image in which a pixel's gray value is set to the index of the volume element that was used to compute the volume (M_VOLUME_ELEMENT_INDEX_IMAGE). A mask image whose pixels are non-zero for volume elements that were used for the volume computation, and zero otherwise (M_VOLUME_ELEMENT_MASK). A mask image whose pixels are non-zero for source points that contributed to the volume computation, and zero otherwise (M_VOLUME_SOURCE_POINTS_MASK). A status image whose pixels represent how the source volume elements contributed to the volume calculation (M_VOLUME_ELEMENT_STATUS_IMAGE). A status image whose pixels represent how the source points contributed to the volume calculation (M_VOLUME_SOURCE_POINTS_STATUS_IMAGE). A volume element's index is its numbered position in the source container's mesh component or in the source depth map image buffer. For a container, the mesh component is one-dimensional, and indexing begins at 0. For a depth map, indexing begins at 0 for the upper left position and proceeds from left to right across all rows in the 2D pixel grid. Each pixel of a status image created with M_VOLUME_ELEMENT_STATUS_IMAGE can have one of up to 8 possible status values, as listed in the table below. Unused Positive Negative Both 0 1 (0b00000001) 2 (0b00000010) 3 (0b00000011) Unused Spliced Positive Spliced Negative Spliced Both Spliced 4 (0b00000100) 5 (0b00000101) 6 (0b00000110) 7 (0b00000111) Note that spliced volume elements are those that intersect the reference object (only for source point clouds). See the illustration below. Whether the status of a spliced volume element is positive, negative, or both depends on the M_VOLUME_MODE and/or M_VOLUME_OUTPUT_MODE control type settings, set using M3dmetControl(). A spliced volume element receives a status of both if one part of the spliced volume contributes positively and the other part contributes negatively (for example, when the specified volume mode is M_DIFFERENCE). When working with status images, it might be useful to map the status image through a LUT to display each volume element's (or source point's) status in different colors, which can help you visualize individual contributions to the volume operation. For example, you can map the status image of a depth map volume calculation through a LUT so that positive status values display in one color and negative status values display in a contrasting color. You can also use M3dmetCopyResult() to copy volume results into a container or depth map image buffer. The resulting object can help when diagnosing certain volume results. You can copy results into a: Container to hold projected source points that were used to compute the volume (M_VOLUME_REFERENCE_CONTAINER). Note that the reference object must have been planar. Depth map in which pixel values will represent volume element depths (M_VOLUME_REFERENCE_DEPTH_MAP). Note that the source object must have been a depth map. The following example demonstrates how to use the 3D Metrology module to calculate a volume and diagnose the result. calculatevolumediagnostic.cpp To run this example, use the Matrox Example Launcher in the MIL Control Center. Calculating a volume Specifying a reference object Delimiting the volume to calculate Considerations Volume elements How the volume of a meshed point cloud with holes is calculated Diagnosing volume results ",
      "wordCount": 1420,
      "subEntries": []
    },
    {
      "id": "UG_3D_Metrology_Retrieving_and_drawing_results",
      "version": null,
      "title": "Retrieving and drawing results",
      "subTitles": [
        "Possible results",
        "Fit results",
        "Statistics results",
        "Feature results",
        "Volume results",
        "Drawing results",
        "Drawing fit results",
        "Drawing volume results"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Metrology\\Retrieving_and_drawing_results.htm",
      "text": " Retrieving and drawing results After successfully performing an M3dmetFit(), M3dmetStat(), M3dmetFeatureEx(), or M3dmetVolumeEx() operation, you can retrieve the required results from your 3D metrology result buffer using M3dmetGetResult(). You can also copy certain results using M3dmetCopyResult(). Note that functions suffixed with Ex (for example, M3dmetFeatureEx()) have a corresponding function without the Ex (for example, M3dmetFeature()) that return the results directly, instead of returning them in a result buffer. The M3dmet...Ex() functions calculate more results at once. To draw the result of a fit or volume operation, use M3dmetDraw3d(). Possible results You can retrieve several types of results with the 3D Metrology module. These results provide considerable information about fit, statistics, feature, and volume operations. Fit results For fit operations, you can retrieve numerous details about the fitted geometry, as well as general information. After a successful fit operation, you can retrieve the following results about a fitted geometry, using M3dmetGetResult(): The type of fitted geometry (M_GEOMETRY_TYPE). Its center point (M_CENTER_...). Its start and end point (M_START_POINT_... and M_END_POINT_..., respectively). The components of its unit vector (M_AXIS_...), which is, for example, the vector coincident upon a cylinder's central axis or along a fitted line. Its closest point to the origin of the working coordinate system (M_CLOSEST_TO_ORIGIN_...). For a fitted plane geometry, the coefficients of its equation (M_COEFFICIENT_...). You can also retrieve the following information about the fit operation itself, using M3dmetGetResult(): The status of the operation (M_STATUS_FIT). The root-mean-squared (RMS) error for the fit (M_FIT_RMS_ERROR). The outlier distance (M_OUTLIER_DISTANCE). The number of points used in the fit (M_NUMBER_OF_POINTS_TOTAL), and subsets of this total, such as the number of inlier and outlier points (M_NUMBER_OF_POINTS_...). The size of the source range component (M_RESULT_IMAGE_SIZE_...), which is useful for allocating an image buffer of an appropriate size for M3dmetCopyResult(). To obtain the fitted geometry itself, copy it into a 3D geometry object using M3dmetCopyResult(). Statistics results For an M3dmetStat() operation, you can retrieve statistics such as the maximum or minimum distance between the specified reference object and the source point cloud or depth map. To retrieve a statistics result, you must have enabled its calculation using M3dmetControl() or you must have called M3dmetStat() with a predefined context. For the distances between a reference object and the source point cloud or depth map, you can retrieve the following statistics results, using M3dmetGetResult(): The maximum and minimum distance (M_STAT_MAX and M_STAT_MIN, respectively). The maximum and minimum absolute distance (M_STAT_MAX_ABS and M_STAT_MIN_ABS, respectively). The mean distance (M_STAT_MEAN). The mean absolute distance (M_STAT_MEAN_ABS). The standard deviation (M_STAT_STANDARD_DEVIATION). The RMS error (M_STAT_RMS). The sum of all distances (M_STAT_SUM). The sum of all absolute distances (M_STAT_SUM_ABS). The sum of squared distances (M_STAT_SUM_OF_SQUARES). Feature results For results that are available after an M3dmetFeatureEx() operation, refer to the tables in the Calculating geometric and scalar measurements section earlier in this chapter. Note that, unlike M3dmetFeatureEx(), the M3dmetFeature() function returns results directly and does not use a result buffer. Volume results For an M3dmetVolumeEx() operation, you can retrieve the computed volume and other data. Note that, unlike M3dmetVolumeEx(), the M3dmetVolume() function returns results directly and does not use a result buffer. After calling M3dmetVolumeEx() to calculate a volume, you can retrieve, using M3dmetGetResult(): The computed volume (M_VOLUME). The mode used (M_VOLUME_MODE), which indicates how the volume was calculated relative to the reference object, either above, under, total, difference, or complete. The type of reference object used (M_VOLUME_REFERENCE_TYPE). The number of elements used (M_VOLUME_NB_ELEMENTS). The number of positive elements used (M_VOLUME_NB_POSITIVE_ELEMENTS). The number of negative elements used (M_VOLUME_NB_NEGATIVE_ELEMENTS). The number of valid elements that were not used (M_VOLUME_NB_UNUSED_ELEMENTS). The status of the volume operation (M_STATUS_VOLUME). Whether volume information was saved into the result buffer (M_SAVE_VOLUME_INFO). Note that you can have positive and negative volume elements on either side of a reference object. For example, for an M_DIFFERENCE operation, in which the total volume is calculated as the volume above the reference object minus the volume below, both calculated volumes (before the subtraction) could be composed of positive and negative volume elements. In this case, M_VOLUME_NB_POSITIVE_ELEMENTS and M_VOLUME_NB_NEGATIVE_ELEMENTS return the total positive or negative elements, respectively, regardless of whether those elements were above or below the reference object. See the How the volume of a meshed point cloud with holes is calculated subsection of the Calculating a volume section earlier in this chapter for more information. You can also obtain source component dimensions, to use for allocating an image buffer of the correct size when retrieving a result image created using M3dmetCopyResult(). You can retrieve: The size of the source range component (M_RESULT_IMAGE_SIZE_...). The size of the source mesh component (M_RESULT_ELEMENT_IMAGE_SIZE_...). An index, mask, or status image created using M3dmetCopyResult() is useful for diagnosing volume operation results. For more information, see the Diagnosing volume results subsection of the Calculating a volume section earlier in this chapter. Drawing results You can draw the results of a fit or volume operation using M3dmetDraw3d(). Note that points are represented as squares in a 3D display. You can specify the thickness of points in number of pixels, and they will always be shown with sides of this length when displayed, regardless of their distance from the 3D display's viewpoint. Drawing fit results For fit results, you must use a default draw 3D metrology context (M_DEFAULT) when calling M3dmetDraw3d(). Default settings of the 3D graphics list are used for the draw. Once you have drawn a fit result in a 3D graphics list, you can access and modify it using M3dgraControl(). When drawing a fitted plane, M3dmetDraw3d() will draw a 3D plane geometry clipped to the limits of the points that were used to fit the plane, unlike M3dgeoDraw3d(), which clips the 3D graphic using the 3D graphics list's clipping box. Drawing volume results For volume results, you typically allocate a draw 3D metrology context to hold the settings for the draw, using M3dmetAlloc() with M_DRAW_3D_CONTEXT. You then specify draw operations and options for the draw with successive calls to M3dmetControlDraw(). Finally, you call M3dmetDraw3d() to perform the draw. Note that for volume results, you can skip allocating a draw 3D metrology context and instead use a default draw 3D metrology context with default draw settings. To do so, directly call M3dmetDraw3d() with M_DEFAULT. Note that the default settings specify to draw the 3D graphic with a default point thickness of one pixel and a default wireframe bounding box appearance. The M3dmetControlDraw() function provides several operations for drawing volume results into a 3D graphics list. For volume results, you can draw: Volume elements that increased the volume (M_DRAW_VOLUME_POSITIVE_ELEMENTS). Volume elements that decreased the volume (M_DRAW_VOLUME_NEGATIVE_ELEMENTS). All volume elements that contributed to the volume, both positively and negatively (M_DRAW_VOLUME_ELEMENTS). By default, MIL draws all the volume elements that were used to compute the volume, independent of whether the elements contributed positively or negatively to the operation. To draw only positive or negative volume elements, you must explicitly enable the relevant draw operation (using M3dmetControlDraw()). You can also specify to draw a single volume element (M_GLOBAL_DRAW_SETTINGS with M_VOLUME_ELEMENT_INDEX). Use successive calls to M3dmetControlDraw() to specify how to draw the 3D graphics. For example, you can set the color for each type of drawn graphic. You can also set the thickness with which to draw the graphic, and whether it appears as a solid surface, a wireframe, or as points. By default, MIL draws each volume element as a distinguishable volume (M_VOLUME_ELEMENT_APPEARANCE set to M_VOLUME). Alternatively, you can specify to draw only the surfaces of the source and reference objects (M_SURFACE), only the surfaces of the source (M_SURFACE_SOURCE), or only the surfaces of the reference (M_SURFACE_REFERENCE). For a complete description of all possible options for the draw, refer to the description of M3dmetControlDraw() in the MIL Reference. The following images show a depth map drawn using M3dmetDraw3d(). Depth map drawn using M3dmetDraw3d(). Here, one surface of each volume element that makes up the source object is drawn, at a height above (green) or below (red) the reference plane. M3dmetControlDraw() settings include M_DRAW_VOLUME_ELEMENTS with M_VOLUME_ELEMENT_APPEARANCE set to M_SURFACE and M_APPEARANCE set to M_SOLID. The same depth map with a single volume element drawn in white. Here, besides the full depth map drawn using surfaces, a single volume element is drawn using the volume option, which shows the faces of the rectangular prism. For this volume element, M3dmetControlDraw() settings include M_GLOBAL_DRAW_SETTINGS with M_VOLUME_ELEMENT_INDEX set to the element's index, M_DRAW_VOLUME_ELEMENTS with M_VOLUME_ELEMENT_APPEARANCE set to M_VOLUME, M_APPEARANCE set to M_SOLID, and M_COLOR set to M_COLOR_WHITE. Retrieving and drawing results Possible results Fit results Statistics results Feature results Volume results Drawing results Drawing fit results Drawing volume results ",
      "wordCount": 1431,
      "subEntries": []
    }
  ]
}]