[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Core_General_MdispWebClient_CPP_webclient_cpp",
      "version": "2024020714",
      "title": "webclient.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /***************************************************************************************/ /* * File name: MWebClient.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This program shows how to use web publishing. * * * * Copyright Â(C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved */ #include \"webclient.h\" static bool sDisConnect = false; /* Disconnect hook handler*/ MIL_INT MFTYPE DisconnectHookHandler(MIL_INT /*HookType*/, MIL_ID /*EventId*/, void* /*UserData*/) { sDisConnect = true; return M_NULL; } /* Update hook handler*/ /* Get object data, call user function */ MIL_INT MFTYPE UpdateHookHandler(MIL_INT /*HookType*/, MIL_ID EventId,void* UserData) { MIL_ID ObjId = M_NULL; MilWeb::MobjGetHookInfo(EventId, M_OBJECT_ID, &amp;ObjId); if(ObjId) { MIL_INT64 ObjectType; MilWeb::MobjInquire(ObjId,M_OBJECT_TYPE,&amp;ObjectType); if(ObjectType == M_MESSAGE_MAILBOX) { MIL_INT MsgLength = M_NULL; MilWeb::MobjInquire(ObjId, M_MESSAGE_LENGTH, &amp;MsgLength); if(MsgLength &gt; 0 ) { MIL_UINT8* MsgData = new MIL_UINT8[(size_t)MsgLength]; MIL_INT64 MsgTag; MIL_INT64 MsgStatus; memset(MsgData, 0, (size_t)MsgLength); // Got message image data MilWeb::MobjMessageRead(ObjId, MsgData, MsgLength,NULL,&amp;MsgTag, &amp;MsgStatus,M_DEFAULT); DisplayMessage(MsgData, (MIL_INT)MsgLength, MsgTag, UserData); delete [] MsgData; } } else if (ObjectType == M_DISPLAY) { MIL_INT SizeByte = M_NULL; MilWeb::MdispInquire(ObjId, M_SIZE_BYTE, &amp;SizeByte); MIL_UINT8 *Data = M_NULL; MIL_INT SizeX = 0, SizeY = 0, PitchByte = 0; MilWeb::MdispInquire(ObjId, M_SIZE_X, &amp;SizeX); MilWeb::MdispInquire(ObjId, M_SIZE_Y, &amp;SizeY); MilWeb::MdispInquire(ObjId, M_PITCH_BYTE, &amp;PitchByte); MilWeb::MdispInquire(ObjId, M_IMAGE_HOST_ADDRESS, &amp;Data); if(SizeX &gt; 0 &amp;&amp; SizeY &gt; 0 &amp;&amp; PitchByte &gt; 0 &amp;&amp; Data) { // Got display image data DisplayImage(Data, SizeByte, SizeX, SizeY, PitchByte, UserData); } } } return M_NULL; } /* Open new connection */ /* and connect to published objects */ MIL_ID StartConnection(void *UserData, MIL_CONST_TEXT_PTR Url) { MIL_ID AppId = M_NULL; MIL_ID DispId = M_NULL; MIL_ID MsgId = M_NULL; MilWeb::MappOpenConnection(Url, M_DEFAULT, M_DEFAULT, &amp;AppId); if(AppId) { //MilWeb::MappControl(AppId, M_ERROR, M_PRINT_DISABLE); MilWeb::MappInquireConnection(AppId, M_WEB_PUBLISHED_NAME, MIL_TEXT(\"Message\"), M_DEFAULT, &amp;MsgId); MilWeb::MappInquireConnection(AppId, M_WEB_PUBLISHED_NAME, MIL_TEXT(\"Display\"), M_DEFAULT, &amp;DispId); MilWeb::MappHookFunction(AppId, M_DISCONNECT, DisconnectHookHandler, NULL); MilWeb::MdispControl(DispId, M_WEB_PUBLISHED_FORMAT, M_BGR32); MilWeb::MobjHookFunction(MsgId, M_UPDATE_WEB, UpdateHookHandler, UserData); MilWeb::MobjHookFunction(DispId, M_UPDATE_WEB, UpdateHookHandler, UserData); } return AppId; } /* Close connection */ void EndConnection(MIL_ID AppId) { if(AppId &amp;&amp; !sDisConnect) MilWeb::MappCloseConnection(AppId); } ",
      "wordCount": 303
    },
    {
      "id": "Examples_Core_General_MdispWebClient_CPP_webclientqt_cpp",
      "version": "2024020714",
      "title": "webclientqt.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /***************************************************************************************/ /* * File name: webclientqt.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This program shows how to use web publishing. * * * * Copyright Â(C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved */ #include \"webclientqt.h\" #include \"webclient.h\" /* default ws url */ #define MILWEB_URL MIL_TEXT(\"ws://localhost:7681\") /* Window title. */ #define MIL_APPLICATION_NAME \"MdispWebClient\" /* Default image dimensions. */ #define DEFAULT_IMAGE_SIZE_X 640 #define DEFAULT_IMAGE_SIZE_Y 480 QVBoxLayout *layout = NULL; #if STATIC_QT5 #include &lt;QtPlugin&gt; #if !M_MIL_USE_LINUX Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin) #else Q_IMPORT_PLUGIN(QXcbIntegrationPlugin) #endif #endif #if M_MIL_USE_LINUX #if QT_VERSION &gt;= QT_VERSION_CHECK(5, 0, 0) void MessageOutput(QtMsgType type, const QMessageLogContext &amp;context, const QString &amp;msg) { QByteArray localMsg = msg.toLocal8Bit(); switch (type) { case QtDebugMsg: fprintf(stderr, \"Debug: %s (%s:%u, %s)\\n\", localMsg.constData(), context.file, context.line, context.function); break; case QtWarningMsg: #if QT_VERSION &gt;= QT_VERSION_CHECK(5, 5, 0) case QtInfoMsg: #endif break; case QtCriticalMsg: fprintf(stderr, \"Critical: %s (%s:%u, %s)\\n\", localMsg.constData(), context.file, context.line, context.function); break; case QtFatalMsg: fprintf(stderr, \"Fatal: %s (%s:%u, %s)\\n\", localMsg.constData(), context.file, context.line, context.function); abort(); } } #endif #endif /* display message handler */ void DisplayMessage(MIL_UINT8 *MsgData, MIL_INT MsgLength, MIL_INT64 /*MsgTag*/, void *UserData) { MilWebWidget *msgWidget = (MilWebWidget *)UserData; if(msgWidget &amp;&amp; msgWidget-&gt;IsVisible() &amp;&amp; MsgData &amp;&amp; MsgLength &gt; 0) { QString Result = QString::fromLatin1((const char *)MsgData); msgWidget-&gt;RedrawText(Result); } } /* display image handler */ void DisplayImage(MIL_UINT8 *Data, MIL_INT SizeByte, MIL_INT SizeX, MIL_INT SizeY, MIL_INT PitchByte, void *UserData) { MilWebWidget *dispWidget = (MilWebWidget *)UserData; if(dispWidget &amp;&amp; dispWidget-&gt;IsVisible() &amp;&amp; Data &amp;&amp; SizeByte &gt; 0 &amp;&amp; SizeX &gt; 0 &amp;&amp; SizeY &gt; 0) { if (dispWidget-&gt;SizeX() != SizeX || dispWidget-&gt;SizeY() != SizeY) { dispWidget-&gt;ResizeImage(SizeX, SizeY); return; } QImage image((const unsigned char*)Data, SizeX, SizeY, PitchByte,QImage::Format_RGB32); dispWidget-&gt;RedrawImage(image); } } /* Open new connection */ /* and connect to published objects */ MIL_ID StartConnection(MIL_CONST_TEXT_PTR Url) { MIL_ID AppId = M_NULL; MIL_ID DispId = M_NULL; MIL_ID MsgId = M_NULL; MilWeb::MappOpenConnection(Url, M_DEFAULT, M_DEFAULT, &amp;AppId); if(AppId) { //MilWeb::MappControl(AppId, M_ERROR, M_PRINT_DISABLE); MilWeb::MappInquireConnection(AppId, M_WEB_PUBLISHED_NAME, MIL_TEXT(\"Message\"), M_DEFAULT, &amp;MsgId); MilWeb::MappInquireConnection(AppId, M_WEB_PUBLISHED_NAME, MIL_TEXT(\"Display\"), M_DEFAULT, &amp;DispId); if(DispId) { QLabel *dispWidget = new MilWebWidget(DispId, M_DISPLAY, \"display\"); dispWidget-&gt;setFocusPolicy(Qt::ClickFocus); layout-&gt;addWidget(dispWidget); dispWidget-&gt;setFocus(); MilWeb::MdispControl(DispId, M_WEB_PUBLISHED_FORMAT, M_BGR32); MilWeb::MobjHookFunction(DispId, M_UPDATE_WEB, UpdateHookHandler, dispWidget); } if(MsgId) { QLabel *msgWidget = new MilWebWidget(MsgId,M_MESSAGE_MAILBOX, \"message\"); layout-&gt;addWidget(msgWidget); MilWeb::MobjHookFunction(MsgId, M_UPDATE_WEB, UpdateHookHandler, msgWidget); } } return AppId; } /***************************************************************** * * Name: main() * * Synopsis: Call initialization function, processes message loop. * ****************************************************************/ int main(int argc, char* argv[]) { MIL_ID AppId = M_NULL; MIL_CONST_TEXT_PTR url = MILWEB_URL; #if M_MIL_USE_LINUX #if QT_VERSION &gt;= QT_VERSION_CHECK(5, 0, 0) qInstallMessageHandler(MessageOutput); #endif #endif QApplication a(argc, argv); #if M_MIL_USE_WINDOWS int win_argc; LPWSTR* win_argv = CommandLineToArgvW(GetCommandLineW(),&amp;win_argc); if(win_argc &gt; 1) url = win_argv[1]; #else if(argc &gt;1) url = argv[1]; #endif QWidget *mainWidget = new QWidget; layout = new QVBoxLayout; mainWidget-&gt;setLayout(layout); mainWidget-&gt;resize(DEFAULT_IMAGE_SIZE_X, DEFAULT_IMAGE_SIZE_Y); mainWidget-&gt;show(); AppId = StartConnection(url); a.exec(); EndConnection(AppId); #if M_MIL_USE_WINDOWS if(win_argv) LocalFree(win_argv); #endif return 0; } #if (M_MIL_USE_LINUX &amp;&amp; !STATIC_QT5) || (M_MIL_USE_WINDOWS &amp;&amp; STATIC_QT5) #include \"moc_webclientqt.cpp\" #endif ",
      "wordCount": 461
    },
    {
      "id": "Examples_Core_General_MdispWebClient_CPP_webclientwin_cpp",
      "version": "2024020714",
      "title": "webclientwin.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /***************************************************************************************/ /* * File name: WebClientWin.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This program shows how to use web publishing. * * * * Copyright Â(C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved */ #include \"resource.h\" #define MAX_LOADSTRING 100 #include \"webclient.h\" MilWebWindow gMainWindow = { NULL, NULL, NULL, NULL }; HINSTANCE hInst; // current instance /* Get Message object data */ void DisplayMessage(MIL_UINT8 *MsgData, MIL_INT MsgLength, MIL_INT64 MsgTag, void *UserData) { MilWebWindow *MainWindow = (MilWebWindow *)UserData; if (MainWindow &amp;&amp; MsgData &amp;&amp; MsgLength &gt; 0) { /* do whatever with data*/ } } /* Get Display image object data */ /* display it in the window */ void DisplayImage(MIL_UINT8 *Data, MIL_INT SizeByte, MIL_INT SizeX, MIL_INT SizeY, MIL_INT PitchByte, void *UserData) { MilWebWindow *MainWindow = (MilWebWindow *)UserData; if (MainWindow &amp;&amp; Data &amp;&amp; SizeByte &gt; 0 &amp;&amp; SizeX &gt; 0 &amp;&amp; SizeY &gt; 0) { if (!MainWindow-&gt;image_data) { MainWindow-&gt;image_data = new MIL_UINT8[SizeX *SizeY * 4]; MainWindow-&gt;MemDC = CreateCompatibleDC(NULL); SetWindowPos(MainWindow-&gt;Window, 0, 0, 0, (int)SizeX, (int)SizeY, SWP_NOMOVE|SWP_NOZORDER|SWP_NOACTIVATE); BITMAPINFOHEADER bmih; memset(&amp;bmih, 0, sizeof(BITMAPINFOHEADER)); bmih.biWidth = (LONG)SizeX; bmih.biHeight = (LONG)-SizeY; bmih.biBitCount = 32; bmih.biCompression = BI_RGB; bmih.biSize = sizeof(BITMAPINFOHEADER); bmih.biPlanes = 1; BITMAPINFO* bmi = (BITMAPINFO*)&amp;bmih; MainWindow-&gt;hbmp = CreateDIBitmap(GetDC(MainWindow-&gt;Window), &amp;bmih, CBM_INIT, (BYTE*)MainWindow-&gt;image_data, bmi, DIB_RGB_COLORS); } MIL_UINT8 const* Src = Data; MIL_UINT8* Dst = MainWindow-&gt;image_data; memcpy(Dst, Src, SizeByte); SetBitmapBits(MainWindow-&gt;hbmp, (DWORD)SizeByte, MainWindow-&gt;image_data); InvalidateRect(MainWindow-&gt;Window, NULL, false); } } // Global Variables: TCHAR szTitle[MAX_LOADSTRING]; // The title bar text TCHAR szWindowClass[MAX_LOADSTRING]; // the main window class name // Forward declarations of functions included in this code module: ATOM MyRegisterClass(HINSTANCE hInstance); BOOL InitInstance(HINSTANCE, int); LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); int APIENTRY _tWinMain( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance, __in LPTSTR lpCmdLine, __in int nCmdShow ) { MIL_ID AppId = M_NULL; MIL_TEXT_PTR Url = MILWEB_URL; if (__argc &gt; 1) Url = __targv[1]; AppId = StartConnection(&amp;gMainWindow, Url); UNREFERENCED_PARAMETER(hPrevInstance); UNREFERENCED_PARAMETER(lpCmdLine); // TODO: Place code here. MSG msg; // Initialize global strings LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING); LoadString(hInstance, IDC_WEBCLIENT, szWindowClass, MAX_LOADSTRING); MyRegisterClass(hInstance); // Perform application initialization: if (!InitInstance (hInstance, nCmdShow)) { return FALSE; } // Main message loop: /* Get and dispatch messages until a WM_QUIT message is received. */ while (GetMessage(&amp;msg, (HWND)NULL, (UINT)NULL, (UINT)NULL)) { TranslateMessage(&amp;msg); /* Translates virtual key codes. */ DispatchMessage(&amp;msg); /* Dispatches message to window. */ } EndConnection(AppId); if (gMainWindow.image_data) delete[] gMainWindow.image_data; return (int) msg.wParam; } // // FUNCTION: MyRegisterClass() // // PURPOSE: Registers the window class. // ATOM MyRegisterClass(HINSTANCE hInstance) { WNDCLASSEX wcex; wcex.cbSize = sizeof(WNDCLASSEX); wcex.style = CS_HREDRAW | CS_VREDRAW; wcex.lpfnWndProc = WndProc; wcex.cbClsExtra = 0; wcex.cbWndExtra = 0; wcex.hInstance = hInstance; wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WEBCLIENT)); wcex.hCursor = LoadCursor(NULL, IDC_ARROW); wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW+1); wcex.lpszMenuName = MAKEINTRESOURCE(IDC_WEBCLIENT); wcex.lpszClassName = szWindowClass; wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL)); return RegisterClassEx(&amp;wcex); } // // FUNCTION: InitInstance(HINSTANCE, int) // // PURPOSE: Saves instance handle and creates main window // // COMMENTS: // // In this function, we save the instance handle in a global variable and // create and display the main program window. // BOOL InitInstance(HINSTANCE hInstance, int nCmdShow) { HWND hWnd; hInst = hInstance; // Store instance handle in our global variable hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL); if (!hWnd) { return FALSE; } gMainWindow.Window = hWnd; ShowWindow(hWnd, nCmdShow); UpdateWindow(hWnd); return TRUE; } // // FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM) // // PURPOSE: Processes messages for the main window. // // WM_COMMAND - process the application menu // WM_PAINT - Paint the main window // WM_DESTROY - post a quit message and return // // LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) { PAINTSTRUCT ps; HDC hdc; switch (message) { case WM_PAINT: { if (gMainWindow.hbmp) { hdc = BeginPaint(hWnd, &amp;ps); BITMAP bitmap; HDC hdcMem = CreateCompatibleDC(hdc); HGDIOBJ oldBitmap = SelectObject(hdcMem, gMainWindow.hbmp); GetObject(gMainWindow.hbmp, sizeof(bitmap), &amp;bitmap); BitBlt(hdc, 0, 0, bitmap.bmWidth, bitmap.bmHeight, hdcMem, 0, 0, SRCCOPY); SelectObject(hdcMem, oldBitmap); DeleteDC(hdcMem); EndPaint(hWnd, &amp;ps); } else { hdc = BeginPaint(hWnd, &amp;ps); TextOut(hdc, 10, 50, MIL_TEXT(\"Not connected.\"), 14); EndPaint(hWnd, &amp;ps); } } break; case WM_DESTROY: DeleteObject(gMainWindow.MemDC); DeleteObject(gMainWindow.hbmp); PostQuitMessage(0); break; default: return DefWindowProc(hWnd, message, wParam, lParam); } return 0; } ",
      "wordCount": 671
    }
  ]
}]