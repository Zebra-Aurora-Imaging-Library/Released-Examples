[{
  "id": "Reference_reg",
  "version": "2024020714",
  "title": "reg",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\reg\\ModuleInformation.htm",
  "text": " Mreg functions Synopsis The functions prefixed with Mreg make up the Registration module. The Registration module allows you to find the transformations that optimally position images in the same coordinate system, to mosaic images, to extend your depth of field, to generate an index map from a scene, or to detect defects on a reflective or smooth surface using photometric stereo. The MIL Registration module uses multiple images of the same, or of overlapping scenes, to generate an image. Functions MregAlloc MregAllocResult MregCalculate MregControl MregDraw MregFree MregGetResult MregInquire MregRestore MregSave MregSetLocation MregStream MregTransformCoordinate MregTransformCoordinateList MregTransformImage ",
  "wordCount": 97,
  "subEntries": [
    {
      "id": "Reference_reg_MregAlloc",
      "version": null,
      "title": "MregAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregAlloc.htm",
      "text": " MregAlloc Synopsis Allocate a registration context. Syntax MIL_ID MregAlloc( MIL_ID&nbsp;SystemId, //in MIL_INT64&nbsp;RegistrationType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*ContextIdPtr //out ) Description This function allocates a correlation-stitching, depth from focus, extended depth of field (EDoF), high dynamic range, or photometric stereo registration context on the specified system. A registration context contains all the information needed to perform the registration operation, using MregCalculate(). Note that correlation-stitching and photometric stereo contexts contain registration elements and their settings, as well as the global registration settings. When you allocate a correlation-stitching or photometric stereo registration context, it is defined with a default number of registration elements (256 or 16, respectively). You can add or remove registration elements using MregControl() with M_NUMBER_OF_REGISTRATION_ELEMENTS. When the registration context is no longer required, release it using MregFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the registration context's lifetime and you must not manually free it. Parameters Parameters SystemId Specifies the system on which to allocate the context. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). RegistrationType Specifies the type of registration context. This parameter defines the registration operation to perform. This parameter should be set to one of the following values: For specifying the type of registration context Value Description M_DEPTH_FROM_FOCUS Specifies a registration context for a depth-from-focus registration operation. M_EXTENDED_DEPTH_OF_FIELD Specifies a registration context for an extended depth of field registration operation. M_HIGH_DYNAMIC_RANGE Specifies a registration context for a high dynamic range registration operation. M_PHOTOMETRIC_STEREO Specifies a registration context for a photometric stereo registration operation. M_STITCHING Specifies a registration context for a correlation-stitching registration operation. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. ContextIdPtr Specifies the address of the variable in which to write the registration context identifier or specifies the data type that the function should use to return the registration context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated registration context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated registration context ; in this case, a MIL smart identifier of type MIL_UNIQUE_REG_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the registration context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the DFF context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated DFF context. If allocation fails, M_NULL is written as the identifier. Address in which to write the EDOF context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated EDOF context. If allocation fails, M_NULL is written as the identifier. Address in which to write the HDR context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated HDR context. If allocation fails, M_NULL is written as the identifier. Address in which to write the photometric stereo context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated photometric stereo context. If allocation fails, M_NULL is written as the identifier. Address in which to write the stitching context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated stitching context. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the registration context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_REG_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - SystemId For specifying the system - RegistrationType For specifying the type of registration context - ControlFlag - ContextIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 766,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregAllocResult",
      "version": null,
      "title": "MregAllocResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregAllocResult.htm",
      "text": " MregAllocResult Synopsis Allocate a registration result buffer. Syntax MIL_ID MregAllocResult( MIL_ID&nbsp;SystemId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*ResultIdPtr //out ) Description This function allocates a registration result buffer, on the specified system, to store results obtained from an MregCalculate() operation. When the registration result buffer is no longer required, release it using MregFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the registration result buffer's lifetime and you must not manually free it. Parameters Parameters SystemId Specifies the system on which to allocate the result buffer. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Specifies the type of result buffer to allocate. This parameter should be set to one of the following values. For specifying the type of result buffer Value Description M_DEFAULT Same as M_STITCHING_RESULT. M_DEPTH_FROM_FOCUS_RESULT Specifies that the result buffer can hold results from a depth-from-focus operation. M_EXTENDED_DEPTH_OF_FIELD_RESULT Specifies that the result buffer can hold results from an extended depth of field (EDoF) operation. M_HIGH_DYNAMIC_RANGE_RESULT Specifies that the result buffer can hold results from a high dynamic range operation. M_PHOTOMETRIC_STEREO_RESULT Specifies that the result buffer can hold results from a photometric stereo operation. M_STITCHING_RESULT Specifies that the result buffer can hold results from a correlation-stitching registration operation. ResultIdPtr Specifies the address of the variable in which to write the registration result buffer identifier or specifies the data type that the function should use to return the registration result buffer identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated registration result buffer ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated registration result buffer ; in this case, a MIL smart identifier of type MIL_UNIQUE_REG_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the registration result buffer (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the DFF result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated DFF result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the EDOF result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated EDOF result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the HDR result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated HDR result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the photometric stereo result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated photometric stereo result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the stitching result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated stitching result buffer. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the registration result buffer identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_REG_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - SystemId For specifying the system - ControlFlag For specifying the type of result buffer - ResultIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 710,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregCalculate",
      "version": null,
      "title": "MregCalculate",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregCalculate.htm",
      "text": " MregCalculate Synopsis Perform the registration operation specified by the registration context on the input images. Syntax void MregCalculate( MIL_ID&nbsp;ContextId, //in const MIL_ID&nbsp;*ImageOrContainerArrayPtr, //in MIL_ID&nbsp;RegResultOrImageId, //in MIL_INT&nbsp;NumImages, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function performs the registration operation specified by the registration context on the input images. It can perform a correlation-stitching registration operation, an extended depth of field registration operation, a depth-from-focus registration operation, a high dynamic range registration operation, or a photometric stereo registration operation. Parameters Parameters ContextId Specifies the context to use for the registration; this establishes the operation to perform. The context must have been allocated using MregAlloc(). See the Parameter associations section for possible values that can be specified. ImageOrContainerArrayPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_ID [optionally, in C++: a reference to a constant std::vector&lt;MIL_ID&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumImages) MIL_ID Specifies the address of the array containing the buffer identifiers of the input images or specifies the address of the variable containing the identifier of the image buffer container. The image buffers must not have a region of interest (ROI) associated with them. Using images with an ROI will cause an error. When using a container, the container cannot have M_NULL images. If unused, set this parameter to M_NULL. See the Parameter associations section for possible values that can be specified. RegResultOrImageId Specifies the identifier of the registration result buffer or image buffer in which to write the results of the registration operation. If unused, set this parameter to M_NULL. See the Parameter associations section for possible values that can be specified. NumImages Specifies the size of the specified image buffer array, or specifies the number of image buffer components in the specified image buffer container. If unused, set this parameter to M_NULL. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the ImageOrContainerArrayPtr parameter. See the Parameter associations section for possible values that can be specified. ControlFlag Specifies the operation mode. See the Parameter associations section for possible values that can be specified. Parameter associations The table below lists possible values for the ContextId, ImageOrContainerArrayPtr, RegResultOrImageId, NumImages, and ControlFlag parameters. For specifying the operation mode Set unused parameters to M_NULL. Note that except in the case of M_DEFAULT_EXTENDED_DEPTH_OF_FIELD_CONTEXT, if the ImageOrContainerArrayPtr, RegResultOrImageId, and/or NumImages parameters are not listed, they are not used and should be set to M_NULL. For specifying the operation mode ContextId Description ControlFlag ImageOrContainerArrayPtr RegResultOrImageId NumImages M_DEFAULT_EXTENDED_DEPTH_OF_FIELD_CONTEXT Same as MIL extended depth of field registration context identifier. Specifies the default M_EXTENDED_DEPTH_OF_FIELD registration context with all the control types (MregControl()) in the context set to M_DEFAULT. MIL correlation-stitching registration context identifier Specifies a valid correlation-stitching registration context identifier, previously allocated using MregAlloc() with M_STITCHING. When this context is passed, a correlation-stitching registration operation is performed. The function calculates the optimal match in the overlapping region between each image and its reference image and then calculates the transformation needed to achieve this match. Once the transformation that maps each image into its reference image's pixel coordinate system is calculated, it is converted so that it maps the image into the global pixel coordinate system. Typically for a correlation-stitching registration context, every input image is associated with a registration element that provides the rough location of the image in another input image (reference image) or in the global pixel coordinate system. M_DEFAULT Specifies the default correlation-stitching registration operation mode. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. Every image in the specified array is associated with the registration element and registration result element of the same index. For example, the first image is associated with the first registration element and the first registration result element. Therefore, it is important that the number of input images be less than or equal to the number of registration elements. When using an image buffer array, you might not want to perform the optimization step of the correlation-stitching registration calculation when the precise location of one or more images is known. In this case, you have two options. You can replace the image for which you want to skip the optimization step with M_NULL in the image buffer array or you can disable M_OPTIMIZE_LOCATION in the image's registration element using MregControl(). For more information, see the Skipping the optimization step subsection of the Customizing your registration settings section of Chapter 12: Correlation stitching registration and mosaicing. RegResultOrImageId Specifies a valid correlation-stitching result buffer identifier, previously allocated using MregAllocResult() with M_STITCHING_RESULT. The results of the registration calculation can be retrieved using MregGetResult(). These results can be used to perform other operations supported by the registration module. For example, the results can be used to create a mosaic of the input images using MregTransformImage(); you can also use them with MregTransformCoordinate() or MregTransformCoordinateList() to transform positions between two of the following coordinate systems: the global pixel coordinate system, any registered image's pixel coordinate system, or the mosaic's coordinate system. NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. MIL depth-from-focus registration context identifier Specifies a valid depth-from-focus registration context identifier, previously allocated using MregAlloc() with M_DEPTH_FROM_FOCUS. When this context is passed, a depth-from-focus registration operation is performed. This operation generates an image that conveys depth information, from a set of two-dimensional images of the same scene taken at different focus distances. The operation calculates, for each pixel, in which image that pixel is found most in focus. It replaces the corresponding pixel entry with the index of the image. This output image is referred to as the index map. The depth-from-focus operation requires that every input image is of the same scene, at different focus levels. M_DEFAULT Same as M_COMPUTE. M_ACCUMULATE_AND_COMPUTE Specifies to process additional input images, and then calculate the index map using this new information and all of the information previously processed and stored in the result buffer. Each call to MregCalculate() with this constant will accumulate new results and a new index map in the depth-from-focus result buffer. This operation will not empty the result buffer of previous entries. If an index map is already in the result buffer prior to MregCalculate(), it will be discarded and replaced with the new index map. Note that when using this value with a non-empty result buffer, the settings of the specified context must match the settings of the context used to add the previous image information to the result buffer, otherwise an error occurs. You can retrieve preprocessing results from a depth-from-focus result buffer using MregGetResult(), and access the depth-from-focus index map by drawing it using MregDraw() with M_DRAW_DEPTH_INDEX_MAP. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. These images must not have a region of interest (ROI) associated with them. Using images with an ROI will cause an error. The image buffers identified in the array or in the container must be 1-band, and must all have the same size and type. RegResultOrImageId Specifies the identifier of the result buffer in which to save results; if the result buffer contains results from a previous depth-from-focus operation, they will be considered for the current operation. NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. M_COMPUTE Specifies to calculate the index map from the specified input images. If passing a result buffer to RegResultOrImageId, MregCalculate() will clear the result buffer of previous results, and then fill the buffer with the index map and new results. You can retrieve preprocessing results from a depth-from-focus result buffer using MregGetResult(), and access the depth-from-focus index map by drawing it using MregDraw() with M_DRAW_DEPTH_INDEX_MAP. If passing an image buffer to RegResultOrImageId, the function clears the image buffer, and writes the resulting index map in the image buffer; no other results are accessible. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. These images must not have a region of interest (ROI) associated with them. Using images with an ROI will cause an error. The image buffers identified in the array or in the container must be 1-band, and must all have the same size and type. RegResultOrImageId Specifies the identifier of the result buffer or image buffer in which to save results. MIL depth-from-focus registration result buffer identifier Specifies a valid depth-from-focus registration result buffer identifier, previously allocated using MregAllocResult() with M_DEPTH_FROM_FOCUS_RESULT. MIL image buffer identifier Specifies the identifier of a valid image buffer, previously allocated on the required system using MbufAlloc...(). The image buffer must have a type large enough to contain the maximum number of indices (NumImages). NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. M_RESET Specifies to clear the specified result buffer. RegResultOrImageId Specifies the identifier of the result buffer, previously allocated using MregAllocResult() with M_DEPTH_FROM_FOCUS_RESULT, to clear. MIL extended depth of field registration context identifier Specifies a valid extended depth of field registration context identifier, previously allocated using MregAlloc() with M_EXTENDED_DEPTH_OF_FIELD. When using an M_EXTENDED_DEPTH_OF_FIELD registration context, this function performs an extended depth of field registration operation. It will preprocess the specified input images and then fuse the images to create an extended depth of field (EDoF) image. The results can be stored in a previously allocated result buffer or an image buffer. Each input image must be of the same scene, taken under different focus distances; the operation combines the focused objects in all of the images to create an image with all the objects of interest in focus. In the M_ACCUMULATE and M_ACCUMULATE_AND_COMPUTE modes, images must be preprocessed using the same registration context and settings (for example, same maximum radius of the circle of confusion). You can retrieve results from an extended depth of field result buffer using MregGetResult(), and access the EDoF image by drawing it using MregDraw(). M_DEFAULT Same as M_COMPUTE. M_ACCUMULATE Specifies to preprocess the images and to add the information to the result buffer. This will not empty the result buffer prior to writing to it, nor calculate the extended depth of field (EDoF) image. To create the EDoF image after accumulating, you must call MregCalculate() with M_ACCUMULATE_AND_COMPUTE. Note that when using this value with a non-empty result buffer, the settings of the specified context must match the settings of the context used to add the previous image information to the result buffer. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. The input images must have the same size, type, and number of bands. When using an image buffer array, you can replace images in the array that you do not want to use in the calculations with M_NULL. This allows you to establish the minimum number of focus distances at which to grab the input images and still obtain a good EDoF image. The fewer the number of input images, the faster the operation. For example, you can perform the operation with 10 different focus distances, and then try performing the same operation with every second image set to M_NULL to see if the EDoF image is still acceptable. RegResultOrImageId Specifies the extended depth of field result buffer to fill with the information extracted when preprocessing the input images. NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. M_ACCUMULATE_AND_COMPUTE Specifies to preprocess the additional input images, and then compute the EDoF image using this new information and all of the information previously processed and stored in the result buffer. The EDoF image will only be calculated after the last image has been processed. This will not empty the result buffer of previous entries. If an EDoF image is already in the result buffer prior to MregCalculate(), it will be discarded and replaced with the new EDoF image. Note that you don't have to pass additional input images. If no input images are specified, the operation calculates the EDoF image using only the preprocessed information in the result buffer. Note that when using this value with a non-empty result buffer, the settings of the specified context must match the settings of the context used to add the previous image information to the result buffer. ImageOrContainerArrayPtr Specifies the input images to use when performing the registration operation. M_NULL Specifies to calculate the EDoF image using only the preprocessed information available in the result buffer. Array of image buffer IDs Specifies the address of an array of MIL image buffer identifiers to use, besides also using the preprocessed information available in the result buffer. The input images must have the same size, type, and number of bands. You can replace images in the array that you do not want to use in the calculations with M_NULL. This allows you to establish the minimum number of focus distances at which to grab the input images and still obtain a good EDoF image. The fewer the number of input images, the faster the operation. For example, you can perform the operation with 10 different focus distances, and then try performing the same operation with every second image set to M_NULL to see if the EDoF image is still acceptable. MIL container ID Specifies the address of the variable containing the identifier of the image buffer container to use, besides also using the preprocessed information available in the result buffer. The input images must have the same size, type, and number of bands. RegResultOrImageId Specifies the result buffer to fill. You can retrieve preprocessing results from an extended depth of field result buffer using MregGetResult(), and access the EDoF image by drawing it using MregDraw(). NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. If you passed M_NULL to ImageOrContainerArrayPtr, set this parameter to 0. M_COMPUTE Specifies to calculate the EDoF image immediately. If passing a result buffer to RegResultOrImageId, MregCalculate() will clear the result buffer of previous results, and then fill the result with the preprocessing information and the EDoF image. If passing an image buffer to RegResultOrImageId, the function clears the image buffer of any previous image, and writes the resulting EDoF image in the image buffer; no other results are accessible. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. The input images must have the same size, type, and number of bands. When using an image buffer array, you can replace images in the array that you do not want to use in the calculations with M_NULL. This allows you to establish the minimum number of focus distances at which to grab the input images and still obtain a good EDoF image. The fewer the number of input images, the faster the operation. For example, you can perform the operation with 10 different focus distances, and then try performing the same operation with every second image set to M_NULL to see if the EDoF image is still acceptable. RegResultOrImageId Specifies the result buffer or image buffer to fill. MIL extended depth of field registration result buffer identifier Specifies a valid extended depth of field registration result buffer identifier, previously allocated using MregAllocResult() with M_EXTENDED_DEPTH_OF_FIELD_RESULT. You can retrieve preprocessing results from an extended depth of field result buffer using MregGetResult(), and access the EDoF image by drawing it using MregDraw(). MIL image buffer identifier Specifies a valid image buffer, previously allocated on the required system using MbufAlloc...(). NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. M_RESET Specifies to clear the result buffer of all preprocessing information and the EDoF image, if applicable. RegResultOrImageId Specifies the result buffer, previously allocated using MregAllocResult() with M_EXTENDED_DEPTH_OF_FIELD_RESULT, to clear. MIL high dynamic range registration context identifier Specifies a valid high dynamic range registration context identifier, previously allocated using MregAlloc() with M_HIGH_DYNAMIC_RANGE. When this context is passed, a high dynamic range registration operation is performed. This function merges two or more images of the same subject that were taken with different exposure times, and therefore have different levels of saturation. Shorter exposure times produce darker images in which details in dark areas might not appear, and that have no saturation in brighter areas. Similarly, longer exposure times produce brighter images in which details in dark areas will appear, but brighter areas might begin to saturate (going over the sensor's light accumulation capacity) and lose detail. When the images are fused together, the resulting HDR image will show details in both dark areas and bright areas. When finished, the function applies tone mapping. The tone mapping is non-linear and can be tuned to better highlight a range of pixel intensities in the resulting images, without truncating other pixel intensities. You can control tone mapping settings using MregControl() with M_TONE_MAPPING_.... You can retrieve results from a high dynamic range result buffer using MregGetResult(), and access the HDR image by drawing it using MregDraw() with M_DRAW_HDR_IMAGE. M_DEFAULT Same as M_COMPUTE. M_ACCUMULATE Specifies to preprocess the images and to add the information to the result buffer. This will not empty the result buffer prior to writing to it, nor calculate the high dynamic range image. To create the HDR image after accumulating, you must call MregCalculate() with M_ACCUMULATE_AND_COMPUTE. Note that when using this value with a non-empty result buffer, the settings of the specified context must match the settings of the context used to add the previous image information to the result buffer. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. Note that you must add images in sequence, where the first array or component index (index 0) holds the image providing the darkest details (longest exposure) and the largest index holds the image providing the brightest details (shortest exposure); calling MregCalculate() multiple times with M_ACCUMULATE does not change this requirement. Also note that each index does not correspond to a specific exposure; only the order matters (from longest to shortest exposure), across all arrays passed until computation. When using an image buffer array, you can replace images in the array that you do not want to use in the calculations with M_NULL. The input images must have the same size, and be 1-band 8- or 16-bit unsigned images. RegResultOrImageId Specifies the identifier of the high dynamic range result buffer to fill with the information extracted when preprocessing the input images. The result buffer must have been previously allocated using MregAllocResult() with M_HIGH_DYNAMIC_RANGE_RESULT. NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. Value &gt;= 1 Specifies the array size. M_ACCUMULATE_AND_COMPUTE Specifies to process additional input images, and then calculate the HDR image using this new information and all of the information previously processed and stored in the result buffer. The HDR image is calculated only after the last image has been processed. This will not empty the result buffer of previous entries. If an HDR image is already in the result buffer prior to calling MregCalculate(), it is discarded and replaced with the new HDR image. Note that you don't have to pass additional input images. If no input images are specified, the operation calculates the HDR image using only the preprocessed information in the result buffer. Note that when using this value with a non-empty result buffer, the settings of the specified context must match the settings of the context used to add the previous image information to the result buffer, otherwise an error occurs. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. Note that you must add images to the array in sequence, where the first index (index 0) holds the image providing the darkest details (longest exposure) and the largest index holds the image providing the brightest details (shortest exposure). If you have previously called MregCalculate() with M_ACCUMULATE, the current call to MregCalculate() with M_ACCUMULATE_AND_COMPUTE must continue the sequence. Also note that each array index does not correspond to a specific exposure; only the order matters (from longest to shortest exposure), across all arrays passed until computation. The input images must have the same size, and be 1-band 8- or 16-bit unsigned images. M_NULL Specifies to calculate the HDR image using only the preprocessed information available in the result buffer. Array of image buffer IDs Specifies the address of an array of MIL image buffer identifiers to use, besides also using the preprocessed information available in the result buffer. The input images must have the same size, type, and number of bands. You can replace images in the array that you do not want to use in the calculations with M_NULL. This allows you to establish the minimum number of exposures at which to grab the input images and still obtain a good HDR image. The fewer the number of input images, the faster the operation. For example, you can perform the operation with 10 different exposures, and then try performing the same operation with every second image set to M_NULL to see if the HDR image is still acceptable. MIL container ID Specifies the address of the variable containing the identifier of the image buffer container to use. RegResultOrImageId Specifies the identifier of the result buffer in which to save results; if the result buffer contains results from a previous high dynamic range operation, they will be considered for the current operation. The result buffer must have been previously allocated using MregAllocResult() with M_HIGH_DYNAMIC_RANGE_RESULT. NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. If you passed M_NULL to ImageOrContainerArrayPtr, set this parameter to 0. 0 Specifies no input images. Value &gt;= 1 Specifies the array size. M_COMPUTE Specifies to complete the HDR processing with the input images provided in the call. No previously added images are used. If passing a result buffer to RegResultOrImageId, MregCalculate() will clear the result buffer of previous results, and then fill the result with the preprocessing information and the HDR image. If passing an image buffer to RegResultOrImageId, the function clears the image buffer of any previous image, and writes the resulting HDR image in the image buffer; no other results are accessible. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. Note that you must add images in sequence, where the first array or component index (index 0) holds the image providing the darkest details (longest exposure) and the largest index holds the image providing the brightest details (shortest exposure). Also note that each index does not correspond to a specific exposure; only the order matters (from longest to shortest exposure). The input images must have the same size, and be 1-band 8- or 16-bit unsigned images. RegResultOrImageId Specifies the identifier of the result buffer or image buffer in which to store results. MIL high dyamic range registration result buffer identifier Specifies a valid high dynamic range registration result buffer identifier, previously allocated using MregAllocResult() with M_HIGH_DYNAMIC_RANGE_RESULT. MIL image buffer identifier Specifies the identifier of a valid image buffer to hold the computed HDR image; the image buffer must have been previously allocated on the required system using MbufAlloc...(). NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. Value &gt;= 2 Specifies the array size. M_RESET Specifies to clear the specified result buffer. RegResultOrImageId Specifies the identifier of the result buffer, previously allocated using MregAllocResult() with M_HIGH_DYNAMIC_RANGE_RESULT, to clear. MIL photometric stereo registration context identifier Specifies a valid photometric stereo registration context identifier, previously allocated using MregAlloc() with M_PHOTOMETRIC_STEREO. When this context is passed, a photometric stereo registration operation is performed. This operation generates an image that reveals raised and recessed features, surface reflectance changes, and/or surface defects. To highlight such features, the operation uses multiple images of the same scene taken under different directional lighting to produce a single enhanced image. The photometric stereo operation uses all of the source images jointly to compute the surface normal in each neighborhood of pixels, which is used to produce an albedo image, for example, and/or other photometric stereo images, depending on the operation specified with MregControl(). The photometric stereo operation requires that every input image is of the same scene, with different lighting source orientations. In addition, it assumes no camera settings are changed while grabbing the image. To perform this operation, the photometric stereo context must contain a registration element for each input image. Each registration element must specify the direction of the light used for its corresponding input image. M_COMPUTE Specifies to calculate the photometric stereo image(s), and store results in a result buffer or an image buffer. Use MregControl() to specify the type of photometric stereo computation. ImageOrContainerArrayPtr Specifies the address of an array or of the identifier of an image buffer container that holds the input images to use when performing the registration operation. Note that the order in which the input images are specified in the array or container must agree with the counter-clockwise order in which the lights are placed around the scene. To illustrate, if you have four lights spaced evenly around a scene, and your first light is placed in line with the positive X-axis (zero degrees), and lights 2, 3, and 4 are placed at 90, 180, and 270 degrees, respectively, you must specify their corresponding images in the same order. The input images must have the same size and have one band only. RegResultOrImageId Specifies the result buffer or image buffer in which to store results. MIL image buffer identifier Specifies the identifier of the image buffer in which to store results. Specify the type of image to output using MregControl() with M_DRAW_WITH_NO_RESULT. MIL photometric stereo registration result buffer identifier Specifies the identifier of the result buffer in which to store results. The identifier must be a valid photometric stereo registration result buffer identifier, previously allocated using MregAllocResult() with M_PHOTOMETRIC_STEREO_RESULT. If passing a result buffer to RegResultOrImageId, MregCalculate() will clear the result buffer of previous results, and then fill the result buffer with the photometric stereo image(s) and/or other new results. You can access the calculated images by drawing them using MregDraw(), provided you have passed a registration result buffer using MregControl(). NumImages Specifies the size of the array when using an image buffer array, or the number of image buffers in the container. When using an image buffer array and the array contains fewer image buffer identifiers than the specified size, the outstanding elements of the array should be set to M_NULL. Value &gt; 3 Specifies the size. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - ContextId - ImageOrContainerArrayPtr - RegResultOrImageId - NumImages - ControlFlag Parameter Associations For specifying the operation mode [MIL correlation-stitching registration context identifier] [MIL depth-from-focus registration context identifier] [MIL extended depth of field registration context identifier] [MIL high dynamic range registration context identifier] [MIL photometric stereo registration context identifier] Compilation information ",
      "wordCount": 4861,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregControl",
      "version": null,
      "title": "MregControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregControl.htm",
      "text": " MregControl Synopsis Control a registration context, registration element, or registration result buffer setting. Syntax void MregControl( MIL_ID&nbsp;ContextOrResultId, //in MIL_INT&nbsp;Index, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls the settings of a registration context or a registration result buffer. It also controls the registration elements of a correlation-stitching, photometric stereo, or high dynamic range registration context. For registration contexts and registration elements, these settings control the execution of MregSetLocation(), MregCalculate(), and/or MregDraw() operations. For correlation-stitching registration result buffers, these settings control the execution of MregDraw() and MregTransformImage() operations. Use MregInquire() to inquire about control type settings. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, MregControl() internally calls the MIL_DOUBLE version of this function (MregControlDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (MregControlInt64()). Parameters Parameters ContextOrResultId Specifies the identifier of the registration context or registration result buffer whose settings you can modify; you can only control settings of correlation-stitching or photometric stereo types of registration result buffers. The registration context must have been previously allocated on the system using MregAlloc(). The correlation-stitching or photometric stereo registration result buffer must have been previously allocated on the system using MregAllocResult() with M_STITCHING_RESULT or M_PHOTOMETRIC_STEREO_RESULT. Index Specifies that a registration context, an individual registration element (of a correlation-stitching, photometric stereo, or high dynamic range registration context), or a registration result buffer is controlled. Set this parameter to one of the following values: For the registration context, registration element, or registration result buffer Value Description M_DEFAULT Specifies the default value. If an M_STITCHING registration context is specified, same as M_ALL. If an M_EXTENDED_DEPTH_OF_FIELD, M_DEPTH_FROM_FOCUS, M_HIGH_DYNAMIC_RANGE, or M_PHOTOMETRIC_STEREO registration context is specified, same as M_CONTEXT. If a registration result buffer is specified, same as M_GENERAL. M_ALL Applies the specified control setting to all registration elements, if a correlation-stitching, photometric stereo, or high dynamic range registration context is specified. Note that this setting is not available for an M_EXTENDED_DEPTH_OF_FIELD or M_DEPTH_FROM_FOCUS registration context. M_CONTEXT Controls a general setting of a registration context, if one is specified. M_GENERAL Controls a general setting of a registration result buffer, if one is specified. 0 &lt; Value &lt; M_NUMBER_OF_REGISTRATION_ELEMENTS Specifies the index of the individual registration element to control, if a correlation-stitching, photometric stereo, or high dynamic range registration context is specified. Note that this setting is not available for an M_EXTENDED_DEPTH_OF_FIELD or M_DEPTH_FROM_FOCUS registration context. ControlType Specifies the setting to change. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ControlType and ControlValue parameters. For operation settings of M_STITCHING, M_PHOTOMETRIC_STEREO or M_HIGH_DYNAMIC_RANGE registration contexts For operation settings of M_STITCHING registration contexts For registration elements (one or all) of an M_STITCHING registration context For M_STITCHING_RESULT result buffers For operation settings of M_PHOTOMETRIC_STEREO registration contexts For operation settings of M_PHOTOMETRIC_STEREO registration result buffers For registration elements of an M_PHOTOMETRIC_STEREO registration context For operation settings of M_EXTENDED_DEPTH_OF_FIELD registration contexts For operation settings of M_DEPTH_FROM_FOCUS registration contexts For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements For operation timeout settings of any registration context The following ControlType and corresponding ControlValue parameter settings are used to control M_STITCHING, M_PHOTOMETRIC_STEREO or M_HIGH_DYNAMIC_RANGE registration context settings; in this case, the Index parameter must be set to M_CONTEXT. For operation settings of M_STITCHING, M_PHOTOMETRIC_STEREO or M_HIGH_DYNAMIC_RANGE registration contexts ControlType Description ControlValue M_NUMBER_OF_REGISTRATION_ELEMENTS Sets the number of registration elements in the registration context. If you reduce the number of registration elements, the settings of the ones that remain are kept unchanged. If you increase the number of registration elements, the new ones are initialized with the default settings. You should have at least as many registration elements as the number of images that you want to register. For a photometric stereo registration context, the number of registration elements also corresponds to the maximum number of lights used during the photometric stereo computation. M_DEFAULT Specifies the default value. For a correlation-stitching registration context, the default value is 256. For a photometric stereo or high dynamic range registration context, the default value is 16. 2 &lt;= Value &lt; 8192 Specifies the number of registration elements for a correlation-stitching registration context. Value &gt; 3 Specifies the number of registration elements for a photometric stereo registration context. Value &gt;= 2 Specifies the number of registration elements for a high dynamic range registration context. The following ControlType and corresponding ControlValue parameter settings are used to control M_STITCHING registration context settings; in this case, the Index parameter must be set to M_CONTEXT. For operation settings of M_STITCHING registration contexts ControlType Description ControlValue M_ACCURACY Sets the accuracy of the registration calculation. Accuracy depends on the image's dynamic range, sharpness, and noise. The best accuracy is achieved for well-contrasted noise-free images. M_DEFAULT Same as M_HIGH. M_HIGH Specifies high accuracy. Registration will be calculated with subpixel accuracy. M_LOW Specifies low accuracy. Registration will be calculated with pixel accuracy. M_LOCATION_DELTA Sets the maximum displacement that will be applied to any pixel in the images during registration, relative to its initial location set using MregSetLocation(). With a larger maximum displacement, you can align the images even if the location that was set using MregSetLocation() was not precise. However, this can lead to a longer calculation time. Note that if you have not set the rough location using MregSetLocation(), set M_LOCATION_DELTA to 100, so that all possible translations are searched. M_DEFAULT Specifies the default value; the default value is 5%. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum displacement as a percentage. The displacement is expressed an a percentage of the biggest dimension of the images to align. M_MIN_OVERLAP Sets the minimum overlap that should exist between an image and its reference image so that the registration calculation can optimize the match in their overlapping region. If the minimum overlap is not met, the optimization step will not be performed for this image. Instead, the transformation that was set using MregSetLocation() becomes the optimal transformation. The image's registration result element will indicate that the registration operation failed for this image. M_DEFAULT Specifies the default value; the default value is 20.0%. 0.0 &lt; Value &lt;= 100.0 Specifies the minimum overlap as a percentage. The overlap is expressed as a percentage of the smallest of the two images. M_SCORE_TYPE Sets the type of score calculated during registration. This calculated score can be retrieved after registration using MregGetResult() with M_SCORE. M_CORRELATION Specifies to calculate the score based on the normalized grayscale correlation in the overlapped region. M_NONE Specifies that no score is calculated; it is set to 100%. This is the default value. M_STITCHING_LAST_LEVEL Sets the resolution level for the final stage (highest resolution) of the correlation algorithm. Note that if the specified level is not supported by the correlation algorithm, the highest acceptable level will be used. It only needs to be controlled in rare situations, where images sizes are large and contain small details. M_DEFAULT Same as M_AUTO. M_AUTO Specifies that the last level is set automatically based on image size. 0 &lt;= Value &lt;= 16 Specifies the resolution level for the final stage of the correlation algorithm. M_TRANSFORMATION_TYPE Sets the type of transformation that the registration calculation will use to optimize the match in the images' overlapping regions. M_DEFAULT Same as M_TRANSLATION. M_PERSPECTIVE Specifies that a perspective warping can be performed to optimize the match in the overlapping regions. M_TRANSLATION Specifies that a translation can be performed to optimize the match in the overlapping regions. M_TRANSLATION_ROTATION Specifies that a translation and a rotation can be performed to optimize the match in the overlapping regions. M_TRANSLATION_ROTATION_SCALE Specifies that a translation, a rotation, and a scale operation can be performed to optimize the match in the overlapping regions. The following ControlType and corresponding ControlValue parameter settings are used to control settings of registration elements (one or all) of a M_STITCHING registration context. For registration elements (one or all) of an M_STITCHING registration context ControlType Description ControlValue M_OPTIMIZE_LOCATION Sets whether to perform the optimization step of the registration calculation for the registration element's image. If you choose not to perform the optimization calculation, the transformation that you set with MregSetLocation() becomes the optimal transformation for this image. When MregCalculate() is called, the transformation is converted so that it maps the image into the global pixel coordinate system instead of into its reference image's pixel coordinate system. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to perform the optimization calculation. M_ENABLE Specifies to perform the optimization calculation. M_REFERENCE_X Sets the X-coordinate of the origin of the image's pixel coordinate system. This is an advanced control type and changing the origin of an image's pixel coordinate system will affect various aspects of the registration process. This origin is used when specifying the approximate location of the image in its registration element's image (MregSetLocation()); you must specify the location of the origin with respect to the origin of the reference element's image. Similarly, if you use the image to position other images, specify locations relative to this origin. The position of your mosaic in the destination image buffer depends on the mosaic's reference coordinate system (MregControl() with M_MOSAIC_STATIC_INDEX), which can be the coordinate system of a particular image. Finally, you can convert coordinates to and from an image's pixel coordinate system, with MregTransformCoordinate() and MregTransformCoordinateList(). If you modify the origin of an image's pixel coordinate system, you must keep the origin's new location in mind when performing any of these operations. M_DEFAULT Specifies that the default X-coordinate of the origin will be used. The default value is 0.0. M_CENTER_ELEMENT Specifies the X-coordinate of the origin to be at the center of the image. Value Specifies the X-coordinate of the origin, in pixels. The value can be specified with subpixel accuracy. M_REFERENCE_Y Sets the Y-coordinate of the origin of the image's pixel coordinate system. This is an advanced control type and changing the origin of an image's pixel coordinate system will affect various aspects of the registration process. This origin is used when specifying the approximate location of the image in its registration element's image (MregSetLocation()); you must specify the location of the origin with respect to the origin of the reference element's image. Similarly, if you use this image to position other images, specify locations relative to this origin. The position of your mosaic in the destination image buffer depends on the mosaic's reference coordinate system (MregControl() with M_MOSAIC_STATIC_INDEX), which can be the coordinate system of a particular image. Finally, you can convert coordinates to and from an image's pixel coordinate system, with MregTransformCoordinate() and MregTransformCoordinateList(). If you modify the origin of an image's pixel coordinate system, you must keep the origin's new location in mind when performing any of these operations. M_DEFAULT Specifies that the default Y-coordinate of the origin will be used. The default value is 0.0. M_CENTER_ELEMENT Specifies the Y-coordinate of the origin to be at the center of the image. Value Specifies the Y-coordinate of the origin, in pixels. The value can be specified with subpixel accuracy. The following ControlType and corresponding ControlValue parameter settings are used to control the settings of a M_STITCHING_RESULT result buffer; in this case, the Index parameter must be set to M_GENERAL. For M_STITCHING_RESULT result buffers ControlType Description ControlValue M_MOSAIC_COMPOSITION Sets which image's pixel values to use when composing the mosaic and two or more images overlap. M_DEFAULT Same as M_LAST_IMAGE. M_AVERAGE_IMAGE Specifies to use the average value of the images' pixels in the overlapping region. M_FIRST_IMAGE Specifies to use the pixels of the image associated with the registration result element with the lowest index. M_FUSION_IMAGE Specifies to fuse the images by progressively blending overlapping pixels. That is, overlapping pixel values are modified (blended) to form a transitional portion. Blending is based on the distance between each pixel and the edges of the images in the mosaic. M_LAST_IMAGE Specifies to use the pixels of the image associated with the registration result element with the highest index. M_SUPER_RESOLUTION Specifies to use a super-resolution algorithm to create the mosaic. For best results, the image alignment should be accurate. To perform registration calculations with subpixel accuracy, call MregControl() with M_ACCURACY set to M_HIGH. The source images should be of good quality with clear, distinct features in the overlapping region. To customize the super-resolution process, set the point-spread function, its radius, and the degree of smoothness to use, with M_SR_PSF_TYPE, M_SR_PSF_RADIUS, and M_SR_SMOOTHNESS respectively. M_MOSAIC_OFFSET_X Sets the X-offset between the origin of the coordinate system used to compose the mosaic and the left side of the destination image buffer. The coordinate system used to compose the mosaic is the one specified with M_MOSAIC_STATIC_INDEX. M_DEFAULT Same as M_ALIGN_LEFT. M_ALIGN_LEFT Specifies that the X-offset (in pixels) will be calculated such that the left-most part of the mosaic will be aligned with the left side of the destination image buffer. Value Specifies the X-offset, in pixels. M_MOSAIC_OFFSET_Y Sets the Y-offset between the origin of the coordinate system used to compose the mosaic and the top of the destination image buffer. The coordinate system used to compose the mosaic is the one specified with M_MOSAIC_STATIC_INDEX. M_DEFAULT Same as M_ALIGN_TOP. M_ALIGN_TOP Specifies that the Y-offset (in pixels) will be calculated such that the top-most part of the mosaic will be aligned with the top of the destination image buffer. Value Specifies the Y-offset, in pixels. M_MOSAIC_SCALE Sets the scale factor to apply to the images before composition of the mosaic. A value greater than 1.0 produces an enlarged mosaic, while a value less than 1.0 produces a reduced one. 0.0 &lt; Value &lt;= 10.0 Specifies the scale factor. The default value is 1.0. M_MOSAIC_STATIC_INDEX Sets the coordinate system relative to which the mosaic will be composed. This can be a registered image's pixel coordinate system or the global pixel coordinate system. If you select an image's pixel coordinate system, that image will appear upright in the mosaic, and the other images will be oriented relative to it. By default, the origin of the mosaic will appear at the top-left corner of the destination image buffer. You can adjust the horizontal and vertical offset of the origin using M_MOSAIC_OFFSET_X and M_MOSAIC_OFFSET_Y. M_DEFAULT Specifies the default value. By default, the mosaic will be composed with respect to the pixel coordinate system of the image associated with registration result element 0. M_ALL Specifies that the coordinate system will be chosen such that the minimum change is done on all images during the mosaic composition. This setting is only available when composing a mosaic with only two images. M_REGISTRATION_GLOBAL Specifies that the mosaic will be composed with respect to the global pixel coordinate system. 0 &lt;= Value &lt; NumberOfElements Specifies the index of the registration result element whose image's pixel coordinate system will be used as the reference coordinate system. M_SR_PSF_RADIUS Sets the radius of the M_CIRCULAR and M_GAUSSIAN point-spread functions (PSF). For M_GAUSSIAN, the radius corresponds to the standard deviation. For M_SQUARE, the radius corresponds to half the size of the square side. This control type is only taken into account when M_MOSAIC_COMPOSITION is set to M_SUPER_RESOLUTION and M_SR_PSF_TYPE is not set to M_DISABLE. M_DEFAULT Specifies the default value; the default value is 0.5 pixels. Value &gt;= 0.0 Specifies the radius of the PSF, in pixel units at the scale of the source images. M_SR_PSF_TYPE Sets the type of point-spread function (PSF) to use during super-resolution calculations to model the blurring in source images. The point-spread function describes how a small point of light in the world is blurred by the acquisition setup (lens and CCD). Use M_SR_PSF_RADIUS to set the radius of the PSF. The value of this control type is only taken into account when M_MOSAIC_COMPOSITION is set to M_SUPER_RESOLUTION. M_DEFAULT Same as M_GAUSSIAN. M_CIRCULAR Specifies to assume a PSF that models blurring of single points of light into uniform circles in the image. M_DISABLE Specifies that no PSF should be assumed during super-resolution calculations. M_GAUSSIAN Specifies to assume a PSF that models blurring of single points of light into radially symmetric gaussian functions in the image. M_SQUARE Specifies to assume a PSF that models blurring of single points of light into symmetric square functions in the image. M_SR_SMOOTHNESS Sets the smoothness value to use during super-resolution calculations. Use a high smoothness value to reduce local variations in the mosaic image. This is useful to prevent artifacts caused by noise in the source images. Use a low smoothness value when there is little noise in the source image. This is useful to preserve the most detail in your mosaic. This control type is only taken into account when M_MOSAIC_COMPOSITION is set to M_SUPER_RESOLUTION. M_DEFAULT Specifies the default value; the default value is 50.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the smoothness value. The following ControlType and corresponding ControlValue parameter settings are used to control M_PHOTOMETRIC_STEREO registration context settings; in this case, the Index parameter must be set to M_CONTEXT. For operation settings of M_PHOTOMETRIC_STEREO registration contexts ControlType Description ControlValue M_DRAW_WITH_NO_RESULT Sets the type of image to draw when using MregCalculate() with RegResultOrImageId set to an image buffer. M_DEFAULT Same as M_DRAW_ALBEDO_IMAGE. M_DRAW_ALBEDO_IMAGE Specifies to draw the albedo image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. The albedo image is a composite image derived from multiple image samples, each with a different lighting perspective. The different lighting perspectives help to show changes in reflectance, especially when a change in material occurs, such as when a scratch reveals an underlying material that differs from the surface material. Small defects become more apparent when reflectance changes are revealed using this technique. This operation is equivalent to performing MregCalculate() followed by MregDraw() with M_DRAW_ALBEDO_IMAGE, without the need to allocate a result buffer. M_DRAW_GAUSSIAN_CURVATURE_IMAGE Specifies to draw the Gaussian curvature image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. This operation is equivalent to performing MregCalculate() when M_GAUSSIAN_CURVATURE is set to M_ENABLE followed by MregDraw() with M_DRAW_GAUSSIAN_CURVATURE_IMAGE, without the need to allocate a result buffer. M_DRAW_LOCAL_CONTRAST_IMAGE Specifies to draw the local contrast image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. This operation is equivalent to performing MregCalculate() when M_LOCAL_CONTRAST is set to M_ENABLE followed by MregDraw() with M_DRAW_LOCAL_CONTRAST_IMAGE, without the need to allocate a result buffer. M_DRAW_LOCAL_SHAPE_IMAGE Specifies to draw the local shape image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. This operation is equivalent to performing MregCalculate() when M_LOCAL_SHAPE is set to M_ENABLE followed by MregDraw() with M_DRAW_LOCAL_SHAPE_IMAGE, without the need to allocate a result buffer. M_DRAW_MEAN_CURVATURE_IMAGE Specifies to draw the mean curvature image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. This operation is equivalent to performing MregCalculate() when M_MEAN_CURVATURE is set to M_ENABLE followed by MregDraw() with M_DRAW_MEAN_CURVATURE_IMAGE, without the need to allocate a result buffer. M_DRAW_TEXTURE_IMAGE Specifies to draw the texture image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. This operation is equivalent to performing MregCalculate() when M_TEXTURE_IMAGE is set to M_ENABLE followed by MregDraw() with M_DRAW_TEXTURE_IMAGE, without the need to allocate a result buffer. M_GAUSSIAN_CURVATURE Sets whether to compute the Gaussian curvature image when using MregCalculate() with RegResultOrImageId set to a result buffer. The Gaussian curvature image reveals defects on smooth surfaces, because surface curvature values change abruptly when a defect occurs on such surfaces. This setting is useful when examining a flat printed surface where the printing can obscure defects. Note that this setting is not suitable for finely textured surfaces. Try M_MEAN_CURVATURE instead. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the Gaussian curvature image. M_DRAW_GAUSSIAN_CURVATURE_IMAGE becomes unavailable in the draw. M_ENABLE Specifies to compute the Gaussian curvature image. M_IMPROVED_LOCAL_SHAPE Sets whether to compute an improved version of the local shape image. This value is only used when M_LOCAL_SHAPE is set to M_ENABLE; otherwise, it is ignored. Note that this value cannot be set to M_ENABLE unless there are 4 input images, and the azimuth angles of their light sources are 0, 90, 180, and 270, respectively. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to compute the default version of the local shape image. M_ENABLE Specifies to compute an improved version of the local shape image. M_LOCAL_CONTRAST Sets whether to compute the local contrast image when using MregCalculate() with RegResultOrImageId set to a result buffer. M_LOCAL_CONTRAST reveals surface height variations by increasing the contrast between highlights and shadows. This setting performs morphological operations using M_OBJECT_SIZE to control the number of iterations to perform. A local contrast operation can remove printed text on flat surface areas in the resulting enhanced image, provided source image illumination is even (equal relative intensities across the light sources). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the local contrast image. M_DRAW_LOCAL_CONTRAST_IMAGE becomes unavailable in the draw. M_ENABLE Specifies to compute the local contrast image. M_LOCAL_SHAPE Sets whether to compute the local shape image when using MregCalculate() with RegResultOrImageId set to a result buffer. A local shape image captures raised and recessed features on a surface that are not apparent with a single image using one light source. Multiple acquisitions using many light sources allow the extraction of structural content not otherwise visible, facilitating further image analysis. You can control shape smoothness in the resulting image with M_SHAPE_SMOOTHNESS. Note that, while each image uses one light source, your lights must be set up in opposite pairs. That is, for each light in the setup, there should be another light positioned 180 degrees opposite. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the local shape image. M_DRAW_LOCAL_SHAPE_IMAGE becomes unavailable in the draw. M_ENABLE Specifies to compute the local shape image. M_MEAN_CURVATURE Sets whether to compute the mean curvature image when using MregCalculate() with RegResultOrImageId set to a result buffer. A mean curvature image can reveal small (local) curvature changes, because the curvature is calculated at every pixel, resulting in more local information. Fine scratches or very small features on a surface are revealed. Note that the mean curvature operation can substitute for local shape when opposite-paired lighting is not achievable. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the mean curvature image. M_DRAW_MEAN_CURVATURE_IMAGE becomes unavailable in the draw. M_ENABLE Specifies to compute the mean curvature image. M_NON_UNIFORMITY_CORRECTION Sets whether to compute a correction for non-uniform illumination on the input image. M_DEFAULT Same as M_DISABLE. M_AUTO Specifies to compute a correction for non-uniform illumination on the input image. The correction is done without reference images, and uses a pixel neighborhood process. It is recommended to use this setting only when the image illumination is severely non-uniform. M_DISABLE Specifies not to compute a correction for non-uniform illumination on the input image. M_OBJECT_SIZE Sets the number of iterations to perform when computing a local contrast image (M_LOCAL_CONTRAST or M_DRAW_WITH_NO_RESULT set to M_DRAW_LOCAL_CONTRAST_IMAGE). For the local contrast operation, M_OBJECT_SIZE controls the number of iterations of a morphological operation. The number of iterations to perform is related to the feature size of the object(s) in the scene. For larger features, more iterations might be needed. The default is 1 iteration, but it is recommended to experiment to find the best setting for your needs. M_DEFAULT Specifies the default value; the default value is 1. Value &gt;= 0 Specifies the number of iterations of morphological operations to perform. Note that setting a value of zero is permitted. If your scene is mostly flat, try setting M_OBJECT_SIZE to zero. In this case, calculations are performed that do not include morphological operations, resulting in reduced prominence of printed text or imagery on flat surfaces, allowing easier detection of surface defects. M_SHAPE_NORMALIZATION Sets whether to perform shape normalization when computing a local shape image (M_LOCAL_SHAPE or M_DRAW_WITH_NO_RESULT set to M_DRAW_LOCAL_SHAPE_IMAGE). Shape normalization is performed by default. You can choose to disable shape normalization if the region undergoing photometric stereo registration is mostly flat (perpendicular to the camera). Disabling shape normalization can improve results in such instances, because surface normals from flat regions will be ignored. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to normalize the shape information during local shape computation. M_ENABLE Specifies to normalize the shape information during local shape computation. M_SHAPE_SMOOTHNESS Sets the amount of smoothness to apply to surface variations when computing the M_LOCAL_SHAPE, M_MEAN_CURVATURE, or M_GAUSSIAN_CURVATURE image (or when using M_DRAW_LOCAL_SHAPE_IMAGE, M_DRAW_MEAN_CURVATURE_IMAGE, or M_DRAW_GAUSSIAN_CURVATURE_IMAGE). M_DEFAULT Specifies the default value; the default value is 50.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the degree of smoothness applied to frontiers between raised and recessed regions. Large values apply more smoothing, and result in the suppression of smaller features on an object's surface, making the dominant structure more prominent. M_TEXTURE_IMAGE Sets whether to compute the texture image when using MregCalculate() with RegResultOrImageId set to a result buffer. This operation targets surface luminance and can remove spectral reflections. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the texture image. M_DRAW_TEXTURE_IMAGE becomes unavailable in the draw. M_ENABLE Specifies to compute the texture image. The following ControlType and corresponding ControlValue parameter settings are used to control M_PHOTOMETRIC_STEREO registration result buffer settings; in this case, the Index parameter must be set to M_GENERAL. For operation settings of M_PHOTOMETRIC_STEREO registration result buffers ControlType Description ControlValue M_DRAW_REMAP_FACTOR_MODE Sets whether to automatically calculate the remap factor, or to use a user-defined value. The remap factor is the factor needed to remap the result of an M_DRAW_GAUSSIAN_CURVATURE_IMAGE, M_DRAW_LOCAL_SHAPE_IMAGE, or M_DRAW_MEAN_CURVATURE_IMAGE operation when the destination is not a 32-bit floating-point image buffer. This control type is useful when you are performing several of these operations and want to ensure that the same factor is used to remap the results of the operation from 32-bit floating-point data to the data type of the destination buffer (ensuring that the stored results are directly comparable). If you specify M_USER_DEFINED, and set a remap factor using M_DRAW_REMAP_FACTOR_VALUE, the same remapping will be used to remap the result every time you perform one of the relevant operations. If you specify M_AUTO (or M_DEFAULT), a different remap factor is calculated each time, based on the maximum and minimum values in the result. With M_AUTO, the remap factor is automatically defined so that the entire range of the drawn image is represented. You can retrieve the automatically defined remap factor value using MregGetResult() with M_RANGE_FACTOR_GAUSSIAN_CURVATURE, M_RANGE_FACTOR_LOCAL_SHAPE, or M_RANGE_FACTOR_MEAN_CURVATURE. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the remap factor so that the entire range of the drawn image is represented. M_USER_DEFINED Specifies to use the remap factor set with M_DRAW_REMAP_FACTOR_VALUE. M_DRAW_REMAP_FACTOR_VALUE Sets the remap factor value when M_DRAW_REMAP_FACTOR_MODE is set to M_USER_DEFINED and the destination is not a 32-bit floating-point image buffer. Pixel intensities are multiplied by ((2 n - 1)/2) * M_DRAW_REMAP_FACTOR_VALUE , then offset by ((2 n - 1)/2); n is the number of bits per pixel. When M_DRAW_REMAP_FACTOR_MODE is set to M_AUTO, this value isn't used. To specify an appropriate remap factor value, it is recommended to obtain the automatically calculated remap factor (using MregGetResult() with M_RANGE_FACTOR_...) for some typical images. If the resulting output is satisfactory, set M_DRAW_REMAP_FACTOR_VALUE to the automatically calculated value. If not, you can try setting the remap factor to a higher value; this increases image contrast and helps to bring out smaller details in the resulting photometric stereo image. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the remap factor. M_STOP_CALCULATE Stops the current photometric stereo calculation operation. You must call MregControl() with M_STOP_CALCULATE from another thread of higher priority. Results already available in the result buffer become invalid and will be discarded. M_DEFAULT Specifies the default behavior. The following ControlType and corresponding ControlValue parameter settings are used to control registration elements of a M_PHOTOMETRIC_STEREO registration context; in this case, the Index parameter must be set to M_ALL or a specific value. Note that you must specify your lights in a counter-clockwise order, starting at the positive X-axis. To illustrate, if you have four lights spaced evenly around a scene, and your first light is placed in line with the X-axis (zero degrees), lights 2, 3, and 4 are placed at 90, 180, and 270 degrees, respectively, and must be specified in the same order. Note that the origin is located at the center of the plane upon which the object is placed for the photometric stereo registration operation, directly below the camera (assuming the camera is perpendicular to the scene). For registration elements of an M_PHOTOMETRIC_STEREO registration context ControlType Description ControlValue M_LIGHT_VECTOR_COMPONENT_1 Sets the first component of the light vector for the specified registration element. When M_LIGHT_VECTOR_TYPE is set to M_SPHERICAL, this component is the polar (zenith) angle. When M_LIGHT_VECTOR_TYPE is set to M_CARTESIAN, this component is the vector's X-coordinate in pixel units. 0.0 &lt;= Value &lt;= 90.0 Specifies the polar (zenith) angle, in degrees, if the light mode is set to the spherical coordinate system. The polar angle is defined as the angle between the image's normal vector (the primary axis) and the light vector. The polar angle is measured from the vertical; that is, the primary axis is at zero degrees. The primary axis is the vector that goes from the camera to the image. It is typical for the camera to be perpendicular to the object's surface for this application. Value Specifies the X-coordinate of the light vector, if the light mode is set to the Cartesian coordinate system. Set this value in pixel units, considering the light vector projected onto the XY-plane. M_LIGHT_VECTOR_COMPONENT_2 Sets the second component of the light vector for the specified registration element. When M_LIGHT_VECTOR_TYPE is set to M_SPHERICAL, this component is the azimuth angle. When M_LIGHT_VECTOR_TYPE is set to M_CARTESIAN, this component is the vector's Y-coordinate in pixel units. 0.0 &lt;= Value &lt;= 360.0 Specifies the azimuth angle, in degrees, if the light mode is set to the spherical coordinate system. The azimuth angle is the angular distance from the positive X-axis to the light vector when projected on the image's XY-plane; the azimuth angle increases counterclockwise. Value Specifies the Y-coordinate of the light vector, if the light mode is set to the Cartesian coordinate system. Set this value in pixel units, considering the light vector projected onto the XY-plane. M_LIGHT_VECTOR_COMPONENT_3 Sets the third component of the light vector for the specified registration element. When M_LIGHT_VECTOR_TYPE is set to M_SPHERICAL, this component is the relative intensity of the light source. If relative light intensity is set to 1.0 for all light sources, each light provides the same intensity to the setup, which is the ideal arrangement. If equal light intensities are not possible, set the strongest light to 1.0 and set the other light intensity values relative to this. When M_LIGHT_VECTOR_TYPE is set to M_CARTESIAN, this component is the vector's Z-coordinate, specified in a pixel unit equivalent. That is, specify the Z-distance in units equivalent to those used for the X- and Y-coordinates. By default, the Z-axis points downward, so the light source is usually in the negative Z-region of the relative coordinate system. Use an absolute value for this component. Value &gt;= 0.0 Specifies the value of the third component. M_LIGHT_VECTOR_TYPE Sets the coordinate system in which the input light vector is represented. M_DEFAULT Same as M_SPHERICAL. M_CARTESIAN Specifies that the light vector is defined in the Cartesian coordinate system. Coordinates follow the standard MIL right-hand 3D coordinate system. The origin is located at the center of the plane upon which the object is placed; that is, directly below the camera. The Z-axis follows the primary axis, along the line from the image's normal vector to the camera. M_SPHERICAL Specifies that the light vector is defined in the spherical coordinate system. The components include the polar (zenith) angle, the azimuth angle, and the relative intensity of the light source. The following ControlType and corresponding ControlValue parameter settings are used to control M_EXTENDED_DEPTH_OF_FIELD registration context settings; in this case, the Index parameter must be set to M_CONTEXT. For operation settings of M_EXTENDED_DEPTH_OF_FIELD registration contexts ControlType Description ControlValue M_CIRCLE_OF_CONFUSION_RADIUS_MAX Sets the maximum radius of the circle of confusion (blurring circle), among the input images. If this control type is set incorrectly, the EDoF image might not be completely in focus, even if it should be possible given the input images. M_DEFAULT Specifies the default value; the default value is 8 pixels. 1 &lt;= Value &lt;= 256 Specifies the maximum radius of the circle of confusion (blurring circle) in pixels. M_MODE Sets the computation mode of the extended depth of field operation. M_DEFAULT Same as M_RECONSTRUCTION. M_FAST Specifies a faster computation mode. Note that using a faster computation mode can decrease robustness of the registration operation. M_RECONSTRUCTION Specifies a computation mode that favors the quality of the extended depth of field (EDoF) image. This setting can lead to longer computation times. M_TRANSLATION_TOLERANCE Sets the maximum distance between a point of an object that is in focus in one image, and the same point in an image in which the object is out of focus, in pixels. If this control type is set incorrectly, the EDoF image might not be completely in focus, even if it should be possible given the input images. M_DEFAULT Specifies the default value; the default value is 1 pixel. 1 &lt;= Value &lt;= 4 Specifies the maximum translation distance of a point between two images, in pixels. The following ControlType and corresponding ControlValue parameter settings are used to control M_DEPTH_FROM_FOCUS registration context settings; in this case, the Index parameter must be set to M_CONTEXT. For operation settings of M_DEPTH_FROM_FOCUS registration contexts ControlType Description ControlValue M_ADAPTIVE_INTENSITY_DELTA Sets the maximum difference between the intensity values for an object in an image. This value is used when performing the intensity component of an M_ADAPTIVE regularization. This determines whether neighboring pixels are considered part of the same object when using M_ADAPTIVE regularization mode. M_DEFAULT Specifies the default value; the default value is 50.0. Value &gt; 0.0 Specifies the maximum difference of intensities. M_ADAPTIVE_SMOOTHING Sets which neighborhood pixels are given more weight when performing the smoothing component of the adaptive regularization. This determines how neighborhood pixels are weighted when using an M_ADAPTIVE regularization mode. M_DEFAULT Specifies the default value; the default value is 3.0 pixels. Value &gt; 0.0 Specifies a distance, in pixels, from the pixel being evaluated. Neighborhood pixels that are within this distance from the pixel being evaluated are given more weight. A lower adaptive smoothing value gives more weight to pixels closer to the pixel being evaluated; while a higher adaptive smoothing value equalizes the weight given to pixels in the neighborhood. If the distance is larger than the regularization neighborhood (M_REGULARIZATION_SIZE), any pixels outside of the regularization neighborhood will have a weight of 0. M_CONFIDENCE_MAP Sets whether the confidence map is computed. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the confidence map is not computed. M_ENABLE Specifies that the confidence map is computed. M_FOCUS_DEPTH_SIZE Sets the number of images for a portion of the image to go from out of focus to in focus, to out of focus again. A larger number of images indicates a more precise operation, and a longer processing time. M_DEFAULT Specifies the default value; the default value is 3 images. Value &gt; 1 Specifies the number of images. M_INTENSITY_MAP Sets whether the intensity map is computed. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the intensity map is not computed. M_ENABLE Specifies that the intensity map is computed. M_REGULARIZATION_MODE Sets the mode of regularization. The mode establishes how to adjust the coherency of neighboring pixels in the index map. M_DEFAULT Same as M_AVERAGE. M_ADAPTIVE Specifies that the regularization takes into account the local geometry and the change in intensity of the content in the source image. This regularization mode is made up of two components: the smoothing (M_ADAPTIVE_SMOOTHING) and the intensity (M_ADAPTIVE_INTENSITY_DELTA) components. M_AVERAGE Specifies that the regularization takes into account the average dominance of neighboring pixels. M_DISABLE Specifies that the regularization is based on the raw pixel values and that no post-processing is done to ensure the coherency of neighboring pixels. M_REGULARIZATION_SIZE Sets the neighborhood size when regularization is used. The neighborhood should be the size of the minimum texture pattern in an object in the image, but no larger than the smallest object dimension in the image. M_DEFAULT Specifies the default value; the default value is 5 pixels. Value &gt;= 3 Specifies the size of the neighborhood, in pixels. The size of the neighborhood used is always an odd number. If you specify an even number, the next largest odd number is applied. The following ControlType and corresponding ControlValue parameter settings are used to control M_HIGH_DYNAMIC_RANGE registration context settings; in this case, the Index parameter must be set to M_CONTEXT. Note that these controls apply to all input images. For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts ControlType Description ControlValue M_FUSION_COVERAGE Sets the required proportion of non-saturated pixels within each input image that qualifies the image for inclusion in the HDR calculation. Non-saturated pixels are neither underexposed nor overexposed, according to the limits set with M_FUSION_LOW_THRESHOLD and M_FUSION_HIGH_THRESHOLD. The specified M_FUSION_COVERAGE value is the ratio between the number of qualifying, non-saturated pixels in the input image and the total number of pixels in the image, from 0.0-1.0. A lower value for this setting is less restrictive because fewer pixels are required per input image. Setting M_FUSION_COVERAGE to a larger value requires more qualifying pixels and is more restrictive. Note that qualifying pixels are those that are also non-saturated in the working HDR image (that is, those that are in the common merge area). When M_GAIN_MODE is set to M_AUTO (or M_DEFAULT), the M_FUSION_COVERAGE ratio determines the number of pixels used to automatically calculate the gain applied to the input image to successfully merge it with the intermediate, working HDR image. If the input image gives a calculated ratio that is below the specified ratio, the addition of this image to the final HDR image fails. M_DEFAULT Specifies the default value; the default value is 0.05. 0.0 &lt;= Value &lt;= 1.0 Specifies the fusion coverage ratio. M_FUSION_HIGH_THRESHOLD Sets the threshold to filter out the saturated pixels (that is, the near maximum values) of the current input image and the working HDR image. The threshold is specified as a percentage of the total number of pixels in the working HDR image. MIL will internally convert this threshold to the lowest pixel value that allows for at least M_FUSION_HIGH_THRESHOLD percent of pixels in the image to be included. All pixels with values above this threshold will be excluded. For example, if M_FUSION_HIGH_THRESHOLD is set to 95%, then MIL will internally select the lowest pixel value that allows for at least 95% of pixels in the image to be included (that is, at most 5% of the highest pixels in the image to be excluded). M_DEFAULT Specifies the default value; the default value is 95.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies the fusion high threshold, as a percentage. M_FUSION_LOW_THRESHOLD Sets the threshold to filter out the underexposed pixels (that is, the near 0 values) of the current input image and the working HDR image. The threshold is specified as a percentage of the total number of pixels in the working HDR image. MIL will internally convert this threshold to the highest pixel value that excludes at most M_FUSION_LOW_THRESHOLD percent of pixels. All pixels with values below this threshold will be excluded. For example, if M_FUSION_LOW_THRESHOLD is set to 5%, then MIL will internally select the highest pixel value where at most 5% of the lowest pixels in the image would be excluded. M_DEFAULT Specifies the default value; the default value is 5.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies the fusion low threshold, as a percentage. M_FUSION_MODE Sets the criteria by which input image pixels are selected for contribution to the HDR image calculation. Saturated and underexposed pixels are excluded, and the remaining pixels are then used to calculate the gain to apply to the input image to successfully merge it with the intermediate, working HDR image. M_DEFAULT Specifies the default value; the default value is M_PERCENTILE_VALUE + M_IN_RANGE. M_PERCENTILE_VALUE Specifies to eliminate from the calculation those pixels whose values exceed or fall short of the limits set with M_FUSION_HIGH_THRESHOLD and M_FUSION_LOW_THRESHOLD, respectively. You must specify a combination value from the following table: To specify a threshold condition M_GAIN_MODE Sets how MIL establishes the image gain to apply to an input image when merging it with the intermediate, working HDR image. M_DEFAULT Same as M_AUTO. M_AUTO Specifies that the image gains will be automatically estimated by MIL. M_USER_DEFINED Specifies that you will explicitly set the image gain to use for a given input image, using M_IMAGE_GAIN. M_TONE_MAPPING_COEFFICIENT Sets the tone mapping coefficient when calculating the tone-mapped HDR image. The specified M_TONE_MAPPING_COEFFICIENT affects the pixel intensity distribution during the tone mapping between the HDR image and the end image. A higher value (closer to 1.0) gives a broader intensity range to bright areas, improving bright area detail and lowering the overall brightness of the final image. Conversely, a lower value (closer to 0.0), gives a broader intensity range to dark areas, improving dark area detail and increasing the overall brightness of the final image. M_DEFAULT Specifies the default value; the default value is 0.5. 0.0 &lt;= Value &lt;= 1.0 Specifies the tone mapping coefficient. M_TONE_MAPPING_HIGH_THRESHOLD Sets the tone mapping high threshold to use when calculating the tone-mapped HDR image. Specify the threshold as a percentage of the raw HDR image's pixel intensity levels. This clamps unnecessary pixel intensity levels at the saturated end, and allows more intensity distribution elsewhere in the image. For example, if you set the tone mapping high threshold to 90%, pixels in the raw HDR image with intensities in the brightest 10% are mapped to a constant saturated value in the tone-mapped result. M_DEFAULT Specifies the default value; the default value is 99.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the tone mapping high threshold, as a percentage. M_TONE_MAPPING_LOW_THRESHOLD Sets the tone mapping low threshold to use when calculating the tone-mapped HDR image. Specify the threshold as a percentage of the raw HDR image's pixel intensity levels. This clamps unnecessary pixel intensity levels at the near-zero end, and allows more intensity distribution elsewhere in the image. For example, if you set the tone mapping low threshold to 10%, pixels in the raw HDR image with intensities in the darkest 10% are mapped to a constant low value in the tone-mapped result. M_DEFAULT Specifies the default value; the default value is 1.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the tone mapping low threshold, as a percentage. M_TONE_MAPPING_MODE Sets the tone mapping mode to use when calculating the tone-mapped HDR image. Tone mapping distributes pixel intensity values within the specified range. You can also specify to disable tone mapping (M_DISABLE), in which case the raw HDR image is drawn into the destination buffer. Note that, when writing results to a result buffer (using MregCalculate()), the raw HDR image is always available to draw (using MregDraw() with M_DRAW_HDR_FULL_IMAGE), whether or not tone mapping was applied. Use MregDraw() with M_DRAW_HDR_IMAGE to draw the tone-mapped HDR image. When enabled, the tone mapping result is written to the result buffer or the image buffer passed to MregCalculate() or MregDraw(). M_DEFAULT Specifies the default value; the default value is M_PERCENTILE_VALUE + M_IN_RANGE. M_DISABLE Specifies not to use a tone mapping mode. M_PERCENTILE_VALUE Specifies to apply tone mapping to input image pixels whose intensity levels fall within the limits set with M_TONE_MAPPING_HIGH_THRESHOLD and M_TONE_MAPPING_LOW_THRESHOLD, respectively. Tone mapping uses specified percentages to calculate upper and lower limits for the operation. To specify explicit values instead of percent thresholds, use MgenLutFunction() with M_TONE_MAPPING to generate the mapping, and then use, for example, MimLutMap() to map the raw HDR image. Note that M_TONE_MAPPING_LOW_THRESHOLD corresponds to a, M_TONE_MAPPING_HIGH_THRESHOLD corresponds to b, and M_TONE_MAPPING_COEFFICIENT corresponds to c. You must specify a combination value from the following table: To specify a threshold condition The following ControlType and corresponding ControlValue parameter settings are used to control M_HIGH_DYNAMIC_RANGE registration context settings; in this case, the Index parameter must be set to the index of the input image to control, or M_ALL. For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements ControlType Description ControlValue M_IMAGE_GAIN Sets the image gain that MregCalculate() should use to merge the given input image with the intermediate, working HDR image, when M_GAIN_MODE is set to M_USER_DEFINED. Note that this setting is ignored when M_GAIN_MODE is set to M_AUTO (or M_DEFAULT). M_DEFAULT Specifies the default value; the default value is 1.0. M_INVALID Specifies that the image will be ignored. Value &gt;= 1.0 Specifies the image gain to be used by MregCalculate(). Combination value for [when ControlType=M_FUSION_MODE and ControlValue=M_PERCENTILE_VALUE: M_PERCENTILE_VALUE ], [when ControlType=M_TONE_MAPPING_MODE and ControlValue=M_PERCENTILE_VALUE: M_PERCENTILE_VALUE]. You must add the following value to the above-mentioned values to specify a threshold condition. For specifying a threshold condition Combination value Description M_IN_RANGE Specifies to apply the fusion or tone mapping to pixels within a specified range. Set the bounds of the range with M_FUSION_LOW_THRESHOLD and M_FUSION_HIGH_THRESHOLD, or with M_TONE_MAPPING_LOW_THRESHOLD and M_TONE_MAPPING_HIGH_THRESHOLD. The following ControlType and corresponding ControlValue parameter settings are used to control the timeout value for any registration context setting (M_DEPTH_FROM_FOCUS, M_EXTENDED_DEPTH_OF_FIELD, M_HIGH_DYNAMIC_RANGE, M_PHOTOMETRIC_STEREO, or M_STITCHING registration context); in this case, the Index parameter must be set to M_CONTEXT. For operation timeout settings of any registration context ControlType Description ControlValue M_TIMEOUT Sets the timeout value for MregCalculate(). M_DEFAULT Specifies the default value; the default value is 2000.0 msec. M_DISABLE Specifies that there is no timeout value. Value Specifies the timeout value, in msec. Type-specific versions of the function when using a C compiler under 64-bit void MregControlInt64 (MIL_ID ContextOrResultId, MIL_INT Index, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters ContextOrResultId See ContextOrResultId of the main function for a description. Index See Index of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void MregControlDouble (MIL_ID ContextOrResultId, MIL_INT Index, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters ContextOrResultId See ContextOrResultId of the main function for a description. Index See Index of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - ContextOrResultId - Index For the registration context, registration element, or registration result buffer - ControlType - ControlValue Parameter Associations For operation settings of M_STITCHING, M_PHOTOMETRIC_STEREO or M_HIGH_DYNAMIC_RANGE registration contexts For operation settings of M_STITCHING registration contexts For registration elements (one or all) of an M_STITCHING registration context For M_STITCHING_RESULT result buffers For operation settings of M_PHOTOMETRIC_STEREO registration contexts For operation settings of M_PHOTOMETRIC_STEREO registration result buffers For registration elements of an M_PHOTOMETRIC_STEREO registration context For operation settings of M_EXTENDED_DEPTH_OF_FIELD registration contexts For operation settings of M_DEPTH_FROM_FOCUS registration contexts For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements + For specifying a threshold condition For operation timeout settings of any registration context Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 7894,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregDraw",
      "version": null,
      "title": "MregDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregDraw.htm",
      "text": " MregDraw Synopsis Draw specific features of the registration results in an image buffer or 2D graphics list. Syntax void MregDraw( MIL_ID&nbsp;ContextGraId, //in MIL_ID&nbsp;ResultRegId, //in MIL_ID&nbsp;DstImageBufOrListGraId, //in MIL_INT64&nbsp;Operation, //in MIL_INT&nbsp;Index, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function draws specific features of the registration results in the destination image buffer or 2D graphics list. To draw these results, the required information must be available in the registration result buffer. Parameters Parameters ContextGraId Specifies the identifier of the 2D graphics context to use when drawing. This parameter must be set to one of the following values. Note that while this parameter is required for calling MregDraw(), when using an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer, this parameter will not affect the function. For specifying the 2D graphics context Value Description M_DEFAULT Specifies that the default 2D graphics context of the current MIL application is used. Note that there is a different default 2D graphics context for each thread. MIL 2D graphics context identifier Specifies a valid 2D graphics context identifier, which you have allocated using MgraAlloc(). ResultRegId Specifies the identifier of the registration result buffer from which to extract the results to draw. The registration result buffer must have been previously allocated on the required system using MregAllocResult(). DstImageBufOrListGraId Specifies the identifier of the destination image buffer or 2D graphics list in which to draw. The buffer can be any valid MIL image buffer allocated using MbufAlloc...(). The 2D graphics list must be previously allocated using MgraAllocList(). By drawing into a display's overlay buffer or associating the 2D graphics list with the display, you can also annotate an image non-destructively. If specifying an image buffer, it must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. Operation Specifies the type of operation to perform. This parameter can be set to one of the following: For specifying the operation Value Description M_DRAW_ALBEDO_IMAGE Draws the albedo image into the target buffer. Note that this operation is only available for an M_PHOTOMETRIC_STEREO_RESULT registration result buffer. M_DRAW_BOX Draws the bounding box of the image associated with the specified registration element, at its position, angle, and scale. The position, angle, and scale are determined by the registration. Note that this operation is only available for an M_STITCHING_RESULT registration result buffer. M_DRAW_DEPTH_CONFIDENCE_MAP Draws the confidence map into the target buffer. Note that this operation is only available for an M_DEPTH_FROM_FOCUS_RESULT registration result buffer. To enable the computation of the confidence map when performing a depth-from-focus registration operation, you must use MregControl() with M_CONFIDENCE_MAP set to M_ENABLE. M_DRAW_DEPTH_INDEX_MAP Draws the index map into the target buffer. Note that this operation is only available for an M_DEPTH_FROM_FOCUS_RESULT registration result buffer. M_DRAW_DEPTH_INTENSITY_MAP Draws the intensity map into the target buffer. Note that this operation is only available for an M_DEPTH_FROM_FOCUS_RESULT registration result buffer. To enable the computation of the intensity map when performing a depth-from-focus registration operation, you must use MregControl() with M_INTENSITY_MAP set to M_ENABLE. M_DRAW_EDOF_IMAGE Draws the extended depth of field (EDoF) image into the target buffer. In this case, the DstImageBufOrListGraId parameter must be set to an image buffer. Note that this operation is only available for an M_EXTENDED_DEPTH_OF_FIELD_RESULT registration result buffer. M_DRAW_GAUSSIAN_CURVATURE_IMAGE Draws the Gaussian curvature map image into the target buffer. Note that this operation is only available for an M_PHOTOMETRIC_STEREO_RESULT registration result buffer. To enable computation of the Gaussian curvature image when performing a photometric stereo registration operation, MregControl() with M_GAUSSIAN_CURVATURE must be set to M_ENABLE. M_DRAW_HDR_FULL_IMAGE Draws the internal HDR image, without tone mapping, into the target buffer. In this case, the DstImageBufOrListGraId parameter must be set to an image buffer. The internal HDR image is remapped to use the full range of the target buffer, which must have a bit depth that is twice that of the input images. For example, if the input images are 8-bit, then the raw HDR image must be written to a 16-bit buffer. Note that this operation is only available for an M_HIGH_DYNAMIC_RANGE_RESULT registration result buffer. M_DRAW_HDR_IMAGE Draws the tone mapped HDR image into the target buffer, which should have the same bit depth and data type as the input image buffers. The image will be remapped if the provided target buffer is different. For this operation, the DstImageBufOrListGraId parameter must be set to an image buffer. Note that, if tone mapping was not enabled (M_TONE_MAPPING_MODE set to M_DISABLE), the image drawn with M_DRAW_HDR_IMAGE is the raw HDR image where the image's lowest pixel value has been subtracted from all pixel values. This ensures that the image has a true black value (minimum pixel value of 0). Note that this operation is only available for an M_HIGH_DYNAMIC_RANGE_RESULT registration result buffer. M_DRAW_LOCAL_CONTRAST_IMAGE Draws the local contrast image into the target buffer. Note that this operation is only available for an M_PHOTOMETRIC_STEREO_RESULT registration result buffer. To enable computation of the local contrast image when performing a photometric stereo registration operation, MregControl() with M_LOCAL_CONTRAST must be set to M_ENABLE. M_DRAW_LOCAL_SHAPE_IMAGE Draws the local shape image into the target buffer. Note that this operation is only available for an M_PHOTOMETRIC_STEREO_RESULT registration result buffer. To enable computation of the local shape image when performing a photometric stereo registration operation, MregControl() with M_LOCAL_SHAPE must be set to M_ENABLE. M_DRAW_MEAN_CURVATURE_IMAGE Draws the mean curvature map image into the target buffer. Note that this operation is only available for an M_PHOTOMETRIC_STEREO_RESULT registration result buffer. To enable computation of the mean curvature image when performing a photometric stereo registration operation, MregControl() with M_MEAN_CURVATURE must be set to M_ENABLE. M_DRAW_TEXTURE_IMAGE Draws the texture image into the target buffer. Note that this operation is only available for an M_PHOTOMETRIC_STEREO_RESULT registration result buffer. To enable computation of the texture image when performing a photometric stereo registration operation, MregControl() with M_TEXTURE_IMAGE must be set to M_ENABLE. Index Specifies the registration element that is associated with the image whose features you want to draw when drawing results of an M_STITCHING_RESULT registration result buffer. This parameter must be set to one of the values below. For specifying the registration element Value Description M_DEFAULT Specifies the default value. For an M_STITCHING_RESULT result buffer, same as M_ALL. For an M_EXTENDED_DEPTH_OF_FIELD_RESULT, M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, or M_PHOTOMETRIC_STEREO_RESULT result buffer, this is the only possible value. M_ALL Specifies all registration elements. 0 &lt;= Value &lt; M_NUMBER_OF_REGISTRATION_ELEMENTS Specifies the registration element's index. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - ContextGraId For specifying the 2D graphics context - ResultRegId - DstImageBufOrListGraId - Operation For specifying the operation - Index For specifying the registration element - ControlFlag Compilation information ",
      "wordCount": 1109,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregFree",
      "version": null,
      "title": "MregFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregFree.htm",
      "text": " MregFree Synopsis Free a registration context or a registration result buffer. Syntax void MregFree( MIL_ID&nbsp;ContextOrResultId //in ) Description This function deletes the specified registration context or registration result buffer, and releases any memory associated with it. All registration contexts and registration result buffers allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter ContextOrResultId Specifies the identifier of the registration context or registration result buffer to free. These must have been successfully allocated (with MregAlloc() or MregAllocResult()) prior to calling this function. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - ContextOrResultId Compilation information ",
      "wordCount": 116,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregGetResult",
      "version": null,
      "title": "MregGetResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregGetResult.htm",
      "text": " MregGetResult Synopsis Get the specified type of result(s) from a registration result buffer. Syntax void MregGetResult( MIL_ID&nbsp;RegResultId, //in MIL_INT&nbsp;ResultIndex, //in MIL_INT64&nbsp;ResultType, //in void&nbsp;*ResultArrayPtr //out ) Description This function retrieves the result(s) of the specified type from a registration result buffer. The result(s) that can be retrieved from an M_STITCHING_RESULT result buffer are only available after calling MregCalculate() with an M_STITCHING registration context. Result(s) from an M_DEPTH_FROM_FOCUS_RESULT result buffer can only be retrieved after calling MregCalculate() with an M_DEPTH_FROM_FOCUS registration context. Result(s) from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer can only be retrieved after calling MregCalculate() with an M_EXTENDED_DEPTH_OF_FIELD registration context. Result(s) from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer can only be retrieved after calling MregCalculate() with an M_HIGH_DYNAMIC_RANGE registration context. Result(s) from an M_PHOTOMETRIC_STEREO_RESULT result buffer can only be retrieved after calling MregCalculate() with an M_PHOTOMETRIC_STEREO registration context. Parameters Parameters RegResultId Specifies the identifier of the registration result buffer from which to retrieve results. ResultIndex Specifies which results to get. This parameter can be set to one of the following values: For retrieving results Value Description M_DEFAULT Specifies the default value. For an M_STITCHING_RESULT result buffer, same as M_ALL. For an M_EXTENDED_DEPTH_OF_FIELD_RESULT, M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, or M_PHOTOMETRIC_STEREO_RESULT result buffer, same as M_GENERAL. M_ALL Specifies to retrieve the results of the specified type for all registration result elements. This setting is only available for M_STITCHING_RESULT result buffers. M_GENERAL Specifies to retrieve a result relating to the entire registration result buffer. 0 &lt;= Value &lt; M_NUMBER_OF_IMAGES Specifies the registration result element's index, for an M_HIGH_DYNAMIC_RANGE_RESULT result buffer. Note that the maximum index (M_NUMBER_OF_IMAGES - 1) is also equal to M_HDR_IMAGE_STATUS_SIZE - 1. 0 &lt;= Value &lt; M_NUMBER_OF_REGISTRATION_ELEMENTS Specifies the registration result element's index, for an M_STITCHING_RESULT or M_PHOTOMETRIC_STEREO_RESULT result buffer. ResultType Specifies the type of result to retrieve. See the Parameter associations section for possible values that can be specified. ResultArrayPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_ID [optionally, in C++: a reference to a std::vector&lt;MIL_ID&gt; ] array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MIL_DOUBLE MIL_ID MIL_INT MIL_INT32 MIL_INT64 Specifies the address of the array in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the ResultType parameter and possible values returned to the ResultArrayPtr parameter. For general results or registration result element results from an M_STITCHING_RESULT result buffer For general results from an M_STITCHING_RESULT result buffer For results from one or all registration result elements of an M_STITCHING_RESULT result buffer For general results from an M_PHOTOMETRIC_STEREO_RESULT result buffer For general results from an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, M_PHOTOMETRIC_STEREO_RESULT, or M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer For general results from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer For general results or registration result element results from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer For retrieving results for depth-from-focus, extended depth of field, high dynamic range, or photometric stereo registration operations To retrieve a general result or the result for one or all registration result elements of an M_STITCHING_RESULT result buffer, the ResultType parameter can be set to one of the following values. For general results or registration result element results from an M_STITCHING_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_RESULT Retrieves whether the registration calculation (MregCalculate()) was successful. When using M_GENERAL, and the calculation of one registration result element fails, M_RESULT returns a fail as well. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element or M_GENERAL Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_RESULT + M_NB_ELEMENTS ) Note: for M_ALL Recommended casting type: Array of type MIL_INT M_FAILURE Specifies that the registration calculation failed. M_SUCCESS Specifies that the registration calculation was successful. M_SCORE Retrieves the score of the registration calculation (MregCalculate()). To determine the type of score to calculate, use MregControl() with M_SCORE_TYPE. When using M_GENERAL, the score is an average of the scores of all result elements together. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element or M_GENERAL Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_SCORE + M_NB_ELEMENTS ) Note: for M_ALL 0.0 &lt;= Value &lt;= 100.0 Specifies the score of the registration calculation. The lower the value, the less optimal the alignment. For example, 0.0 equals no alignment and 100.0 equals a perfect alignment. Note that image noise can also adversely affect the score. To retrieve a general result from an M_STITCHING_RESULT result buffer, the ResultType parameter can be set to one of the following values: For general results from an M_STITCHING_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_MOSAIC_OFFSET_X Retrieves the horizontal offset that will exist between the origin of the mosaic's coordinate system and the left side of the destination image buffer, when you compose the mosaic. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_MOSAIC_OFFSET_Y Retrieves the vertical offset that will exist between the origin of the mosaic's coordinate system and the top of the destination image buffer, when you compose the mosaic. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_MOSAIC_SIZE_X Retrieves the width that the mosaic will have when it is composed. This value can be used to allocate an image buffer large enough to hold the entire mosaic composed by MregTransformImage(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_MOSAIC_SIZE_Y Retrieves the height that the mosaic will have when it is composed. This value can be used to allocate an image buffer large enough to hold the entire mosaic composed by MregTransformImage(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT To retrieve the result from one or all the registration result elements of an M_STITCHING_RESULT result buffer, the ResultType parameter can be set to one of the following values: For results from one or all registration result elements of an M_STITCHING_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_POSITION_X Retrieves the X-coordinate of the registration result element image's origin in the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_POSITION_X + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_POSITION_Y Retrieves the Y-coordinate of the registration result element image's origin in the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_POSITION_Y + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_REVERSE_TRANSFORMATION_MATRIX Retrieves the 9 elements of the 3x3 transformation matrix that performs a reverse transformation. The transformation matrix can transform any position in the specified image (xs , ys ) with a position in the global/reference coordinate system (xg , yg ). ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): (9) MregGetResult ( M_REVERSE_TRANSFORMATION_MATRIX + M_NB_ELEMENTS ) Note: for 1 registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): 9 * MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_REVERSE_TRANSFORMATION_MATRIX + M_NB_ELEMENTS ) Note: for M_ALL M_REVERSE_TRANSFORMATION_MATRIX_ID Retrieves the identifier of the MIL array buffer containing the 3x3 transformation matrix that performs a reverse transformation. The transformation matrix can transform any position in the specified image (xs , ys ) with a position in the global/reference coordinate system (xg , yg ). Note that you cannot free the retrieved buffer. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_REVERSE_TRANSFORMATION_MATRIX_ID + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) Recommended casting type: Array of type MIL_ID M_TRANSFORMATION_MATRIX Retrieves the 9 elements of the 3x3 transformation matrix. The transformation matrix can transform any position in the global/reference coordinate system (xg , yg ) with a position in the specified image (xs , ys ). You can put the matrix data into a MIL buffer (MbufPut()) and pass the matrix (buffer) to MimWarp() to transform the source image to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): (9) MregGetResult ( M_TRANSFORMATION_MATRIX + M_NB_ELEMENTS ) Note: for 1 registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): 9 * MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMATION_MATRIX + M_NB_ELEMENTS ) Note: for M_ALL M_TRANSFORMATION_MATRIX_ID Retrieves the identifier of the MIL array buffer containing the 3x3 transformation matrix. The transformation matrix can transform any position in the global/reference coordinate system (xg , yg ) with a position in the specified image (xs , ys ). You can pass the matrix to MimWarp() to transform the source image to the global/reference coordinate system. Note that you cannot free the retrieved buffer. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMATION_MATRIX_ID + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) Recommended casting type: Array of type MIL_ID M_TRANSFORMED_BL_X Retrieves the X-coordinate of the bottom-left corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_BL_X + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_BL_Y Retrieves the Y-coordinate of the bottom-left corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_BL_Y + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_BR_X Retrieves the X-coordinate of the bottom-right corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_BR_X + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_BR_Y Retrieves the Y-coordinate of the bottom-right corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_BR_Y + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_UL_X Retrieves the X-coordinate of the upper left corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_UL_X + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_UL_Y Retrieves the Y-coordinate of the upper left corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_UL_Y + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_UR_X Retrieves the X-coordinate of the upper right corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_UR_X + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) M_TRANSFORMED_UR_Y Retrieves the Y-coordinate of the upper right corner of the specified registration result element's image. This coordinate is with respect to the global/reference coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: for one registration result element Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): MregInquire ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) MregGetResult ( M_TRANSFORMED_UR_Y + M_NB_ELEMENTS ) Note: For multiple registration result elements (M_ALL) Combination value for the values listed in For general results or registration result element results from an M_STITCHING_RESULT result buffer, For results from one or all registration result elements of an M_STITCHING_RESULT result buffer; and for the following values: M_REVERSE_TRANSFORMATION_MATRIX , M_TRANSFORMATION_MATRIX. You can add the following value to the above-mentioned values to determine the required array size (number of elements) to store the returned values. For determining the required array size (number of elements) to store the returned values ResultType combination value Description ResultArrayPtr - Possible values returned M_NB_ELEMENTS Retrieves the required array size (number of elements) to store the returned values. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT Combination values for the values listed in For results from one or all registration result elements of an M_STITCHING_RESULT result buffer. You can add one of the following values to the above-mentioned values to get the requested results with respect to the required coordinate system. For specifying the coordinate system Combination value Description M_REFERENCE Retrieves the results with respect to the reference coordinate system. The reference coordinate system is associated with the registration element that was specified in the Target parameter of MregSetLocation(). M_REGISTRATION_GLOBAL Retrieves the results with respect to the global pixel coordinate system. This is the default value. To retrieve a general result from an M_PHOTOMETRIC_STEREO_RESULT result buffer, the result type parameter can be set to one of the following values: For general results from an M_PHOTOMETRIC_STEREO_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_GAUSSIAN_CURVATURE Retrieves whether the Gaussian curvature image was computed when using MregCalculate(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that the Gaussian curvature image was not computed and is not available to draw. M_ENABLE Specifies that the Gaussian curvature image was computed and is available to draw using MregDraw() with M_DRAW_MEAN_CURVATURE_IMAGE. M_LOCAL_CONTRAST Retrieves whether the local contrast image was computed when using MregCalculate(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that the local contrast image was not computed and is not available to draw. M_ENABLE Specifies that the local contrast image was computed and is available to draw using MregDraw() with M_DRAW_LOCAL_CONTRAST_IMAGE. M_LOCAL_SHAPE Retrieves whether the local shape image was computed when using MregCalculate(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that the local shape image was not computed and is not available to draw. M_ENABLE Specifies that the local shape image was computed and is available to draw using MregDraw() with M_DRAW_LOCAL_SHAPE_IMAGE. M_MEAN_CURVATURE Retrieves whether the mean curvature image was computed when using MregCalculate(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that the mean curvature image was not computed and is not available to draw. M_ENABLE Specifies that the mean curvature image was computed and is available to draw using MregDraw() with M_DRAW_MEAN_CURVATURE_IMAGE. M_RANGE_FACTOR_GAUSSIAN_CURVATURE Retrieves the automatically calculated remap factor value for an M_DRAW_GAUSSIAN_CURVATURE_IMAGE operation, when M_DRAW_REMAP_FACTOR_MODE is set to M_AUTO. The calculated value is equal to 1 / (max | Gaussian curvature image |), where (max | Gaussian curvature image |) is the maximum of the absolute value of the pixel intensity values in the Gaussian curvature image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_RANGE_FACTOR_LOCAL_SHAPE Retrieves the automatically calculated remap factor value for an M_DRAW_LOCAL_SHAPE_IMAGE operation, when M_DRAW_REMAP_FACTOR_MODE is set to M_AUTO. The calculated value is equal to 1 / (max | local shape image |), where (max | local shape image |) is the maximum of the absolute value of the pixel intensity values in the local shape image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_RANGE_FACTOR_MEAN_CURVATURE Retrieves the automatically calculated remap factor value for an M_DRAW_MEAN_CURVATURE_IMAGE operation, when M_DRAW_REMAP_FACTOR_MODE is set to M_AUTO. The calculated value is equal to 1 / (max | mean curvature image |), where (max | mean curvature image |) is the maximum of the absolute value of the pixel intensity values in the mean curvature image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TEXTURE_IMAGE Retrieves whether the texture image was computed when using MregCalculate(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that the texture image was not computed and is not available to draw. M_ENABLE Specifies that the texture image was computed and is available to draw using MregDraw() with M_DRAW_TEXTURE_IMAGE. To retrieve a general result from an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, M_PHOTOMETRIC_STEREO_RESULT, or M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer, the result type parameter can be set to one of the values listed in the table below. Note that for an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, or an M_PHOTOMETRIC_STEREO_RESULT result buffer, M_STATUS must return M_COMPLETE. For general results from an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, M_PHOTOMETRIC_STEREO_RESULT, or M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_IMAGE_SIZE_BAND Retrieves the number of bands of the images used as input in the MregCalculate() operation. This value can be used to allocate an image buffer large enough to hold the image drawn using MregDraw(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_IMAGE_SIZE_X Retrieves the size of the X-dimension of the images used as input in the MregCalculate() operation. This value can be used to allocate an image buffer large enough to hold the image drawn using MregDraw(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_IMAGE_SIZE_Y Retrieves the size of the Y-dimension of the images used as input in the MregCalculate() operation. This value can be used to allocate an image buffer large enough to hold the image drawn using MregDraw(). ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_IMAGE_TYPE Retrieves the data type and depth of the images used as input in the MregCalculate() operation. This value can be used to allocate an image buffer with the appropriate settings to hold the image drawn using MregDraw(). In the case of a raw HDR image, its bit depth must be twice that of the input images. For example, if the input images are 8-bit, then the raw HDR image must be written to a 16-bit buffer. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_FLOAT + 32 Specifies 32-bit float data. M_SIGNED + 8 Specifies 8-bit signed data. M_SIGNED + 16 Specifies 16-bit signed data. M_SIGNED + 32 Specifies 32-bit signed data. M_UNSIGNED + 1 Specifies 1-bit unsigned data. M_UNSIGNED + 8 Specifies 8-bit unsigned data. M_UNSIGNED + 16 Specifies 16-bit unsigned data. M_UNSIGNED + 32 Specifies 32-bit unsigned data. M_MAX_INDEX_VALUE Retrieves the highest index value of the non-null images used as input in the MregCalculate() operation. This result type is only available for M_DEPTH_FROM_FOCUS_RESULT. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 1 Specifies the highest index value. To retrieve a general result from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer, the result type parameter can be set to one of the following values: For general results from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_CIRCLE_OF_CONFUSION_RADIUS_MAX Retrieves the radius of the maximum circle of confusion (blurring circle) used during calculations, in pixels. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_MODE Retrieves the computation mode used. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_FAST Specifies that the extended depth of field registration operation used the fast computation mode. This mode favored reducing computation time over accuracy. M_RECONSTRUCTION Specifies that the extended depth of field registration operation used the reconstruction computation mode. This mode favored accuracy over reducing computation time. M_TRANSLATION_TOLERANCE Retrieves the maximum distance, used during calculations, between a point of an object that is in focus in one image, and the same point in an image in which the object is out of focus, in pixels. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE To retrieve a general result or the result of one registration result element from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer, the result type parameter can be set to one of the following values: For general results or registration result element results from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer ResultType Description ResultArrayPtr - Possible values returned M_HDR_IMAGE_STATUS Retrieves the status of the image associated with the specified registration result element. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_HDR_IMAGE_LIMITED_TO_SINGLE_COLOR Specifies that the number of colors in the current HDR image is reduced to a single color within the merge area. M_HDR_INSUFFICIENT_CONTRAST Specifies that there is inadequate contrast in the merge area of the input image. M_HDR_INSUFFICIENT_CONTRIBUTION Specifies that the input image does not increase the dynamic range already present in the current HDR image. M_HDR_MERGE_AREA_GAIN_INCORRECT Specifies that the gain to be applied to the input image is less that 1. M_HDR_MERGE_AREA_SIZE_INSUFFICIENT Specifies that the calculated merge area, where the pixel values are between M_FUSION_LOW_THRESHOLD and M_FUSION_HIGH_THRESHOLD, on both the working HDR image and the input image, is below the threshold specified with M_FUSION_COVERAGE. M_HDR_SUCCESSFUL Specifies that the image was successfully merged into the intermediate, working HDR image. M_HDR_IMAGE_STATUS_SIZE Retrieves the number of images that have been processed and that have their status available. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_HDR_STATUS Retrieves the ratio of images used with success to the total number of input images, when calculating the HDR image. This is a quick check value to evaluate the relative quality of the HDR image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 1.0 Specifies the HDR status ratio. A ratio of 1.0 signifies that every image was used. M_IMAGE_GAIN Retrieves the gain used to merge the corresponding input image with the intermediate, working HDR image. The image gain is always 1.0 for the first input image added. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INVALID Specifies that the corresponding input image was not successfully merged with the intermediate, working HDR image. An image was successfully merged during the HDR operation if M_HDR_IMAGE_STATUS is M_HDR_SUCCESSFUL. Value &gt;= 1.0 Specifies the gain used for the corresponding input image. M_TONE_MAPPING Retrieves the tone mapping mode used for the resulting HDR image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Combination value for Tables: For general results from an M_PHOTOMETRIC_STEREO_RESULT result buffer For general results from an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, M_PHOTOMETRIC_STEREO_RESULT, or M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer For general results from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer For general results or registration result element results from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer the values listed in all the parameter association tables except For general results or registration result element results from an M_STITCHING_RESULT result buffer, For general results from an M_STITCHING_RESULT result buffer, For results from one or all registration result elements of an M_STITCHING_RESULT result buffer, For retrieving results for depth-from-focus, extended depth of field, high dynamic range, or photometric stereo registration operations. You can add the following value to the above-mentioned values to determine whether a result is available. For requesting availability ResultType Description ResultArrayPtr - Possible values returned M_AVAILABLE Retrieves whether the requested result type is available for retrieval. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_FALSE Specifies that the requested result type is not available. M_TRUE Specifies that the requested result type is available. To retrieve a general result from a M_DEPTH_FROM_FOCUS_RESULT, M_EXTENDED_DEPTH_OF_FIELD_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT or M_PHOTOMETRIC_STEREO_RESULT result buffer, the result type parameter can be set to one of the following values: For retrieving results for depth-from-focus, extended depth of field, high dynamic range, or photometric stereo registration operations ResultType Description ResultArrayPtr - Possible values returned M_NUMBER_OF_IMAGES Retrieves the number of non-null images used to calculate the results that are stored in the result buffer. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_STATUS Retrieves the status of the registration operation. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_ACCUMULATE Specifies that the result buffer has been filled with some preprocessing information, but the EDoF or HDR image is not yet available. The EDoF image can be calculated using MregCalculate() with M_ACCUMULATE_AND_COMPUTE. The HDR image can be calculated using MregCalculate() with M_ACCUMULATE_AND_COMPUTE. This value can only be returned for an M_EXTENDED_DEPTH_OF_FIELD_RESULT or an M_HIGH_DYNAMIC_RANGE_RESULT result buffer. M_COMPLETE Specifies that the resulting image (EDoF image, photometric stereo image, HDR image, or index image) is available and can be retrieved using MregDraw(). M_EMPTY Specifies that the result buffer is empty. M_INTERNAL_ERROR Specifies that an unexpected internal error occurred during the registration operation. This value can only be returned for an M_PHOTOMETRIC_STEREO_RESULT result buffer. M_NOT_ENOUGH_MEMORY Specifies that this operation was not completed because of a lack of available memory. This value can only be returned for an M_PHOTOMETRIC_STEREO_RESULT result buffer. M_STOPPED_BY_REQUEST Specifies that the registration operation was stopped from another thread using MregControl() with M_STOP_CALCULATE. This value can only be returned for an M_PHOTOMETRIC_STEREO_RESULT result buffer. M_TIMEOUT_REACHED Specifies that the operation took longer than the allowed value, specified by MregControl() with M_TIMEOUT, and has stopped before completion. This value can only be returned for an M_PHOTOMETRIC_STEREO_RESULT result buffer. Combination values for the values listed in For general results or registration result element results from an M_STITCHING_RESULT result buffer, For general results from an M_STITCHING_RESULT result buffer, For results from one or all registration result elements of an M_STITCHING_RESULT result buffer, For general results from an M_PHOTOMETRIC_STEREO_RESULT result buffer, For general results from an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, M_PHOTOMETRIC_STEREO_RESULT, or M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer, For general results from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer, For general results or registration result element results from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer, For retrieving results for depth-from-focus, extended depth of field, high dynamic range, or photometric stereo registration operations; and for the following value: M_AVAILABLE. You can add one of the following values to the above-mentioned values to cast the requested results to the required data type. Note: In C++, when using a standard vector (std::vector) instead of an array, the values listed in this combination table must not be used. If you need to use a specific data type, instantiate the vector with the necessary data type. For specifying the data type ResultType Description ResultArrayPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested results to a MIL_DOUBLE. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] &nbsp;|&nbsp; address of a MIL_DOUBLE MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_DOUBLE Note: When a single result. M_TYPE_MIL_ID Casts the requested results to a MIL_ID. ResultArrayPtr extra info Data type info: Data type: array of type MIL_ID [optionally, in C++: a reference to a std::vector&lt;MIL_ID&gt; ] &nbsp;|&nbsp; address of a MIL_ID MORE Data type: array of type MIL_ID [optionally, in C++: a reference to a std::vector&lt;MIL_ID&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_ID Note: When a single result. M_TYPE_MIL_INT Casts the requested results to a MIL_INT. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] &nbsp;|&nbsp; address of a MIL_INT MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT Note: When a single result. M_TYPE_MIL_INT32 Casts the requested results to a MIL_INT32. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] &nbsp;|&nbsp; address of a MIL_INT32 MORE Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT32 Note: When a single result. M_TYPE_MIL_INT64 Casts the requested results to a MIL_INT64. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT64 Note: When a single result. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - RegResultId - ResultIndex For retrieving results - ResultType - ResultArrayPtr Parameter Associations For general results or registration result element results from an M_STITCHING_RESULT result buffer For general results from an M_STITCHING_RESULT result buffer For results from one or all registration result elements of an M_STITCHING_RESULT result buffer + For determining the required array size (number of elements) to store the returned values + For specifying the coordinate system For general results from an M_PHOTOMETRIC_STEREO_RESULT result buffer For general results from an M_DEPTH_FROM_FOCUS_RESULT, M_HIGH_DYNAMIC_RANGE_RESULT, M_PHOTOMETRIC_STEREO_RESULT, or M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer For general results from an M_EXTENDED_DEPTH_OF_FIELD_RESULT result buffer For general results or registration result element results from an M_HIGH_DYNAMIC_RANGE_RESULT result buffer + For requesting availability For retrieving results for depth-from-focus, extended depth of field, high dynamic range, or photometric stereo registration operations + For specifying the data type Compilation information ",
      "wordCount": 5793,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregInquire",
      "version": null,
      "title": "MregInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregInquire.htm",
      "text": " MregInquire Synopsis Inquire about a registration context, registration element, or registration result buffer setting. Syntax MIL_INT MregInquire( MIL_ID&nbsp;ContextOrResultId, //in MIL_INT&nbsp;Index, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function allows you to inquire about the settings of a registration context itself, one (or all) of the registration elements contained therein (for correlation-stitching, photometric stereo, or high dynamic range registration contexts), or a registration result buffer. Note that for a registration result buffer, this function only retrieves information about result buffer settings (set using MregAllocResult() or MregControl()). To retrieve results from the registration result buffer, use MregGetResult(). Parameters Parameters ContextOrResultId Specifies the identifier of the registration context or registration result buffer about which to inquire. The registration context must have been previously allocated on the required system using MregAlloc(). The registration result buffer must have been previously allocated on the required system using MregAllocResult(). Index Specifies that a registration context, an individual registration element (of a correlation-stitching, photometric stereo, or high dynamic range registration context), or a registration result buffer is inquired. Set this parameter to one of the following values: For specifying a registration context, registration element, or registration result buffer Value Description M_DEFAULT Specifies the default value. If an M_STITCHING registration context is specified, this parameter inquires information about registration element 0. If an M_EXTENDED_DEPTH_OF_FIELD, M_DEPTH_FROM_FOCUS, M_HIGH_DYNAMIC_RANGE, or M_PHOTOMETRIC_STEREO registration context is specified, same as M_CONTEXT. If a registration result buffer is specified, same as M_GENERAL. M_CONTEXT Inquires information about a registration context, if one is specified. M_GENERAL Inquires general information about the registration result buffer, if one is specified. 0 &lt; Value &lt; M_NUMBER_OF_REGISTRATION_ELEMENTS Inquires information about a registration element, if you specify a correlation-stitching, photometric stereo registration, or high dynamic range registration context. Set the Index parameter to the index of the required registration element. Note that this parameter is only available for M_STITCHING, M_PHOTOMETRIC_STEREO, or M_HIGH_DYNAMIC_RANGE registration contexts. InquireType Specifies the setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_ID MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the MregInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For inquiring general settings of a registration context or result buffer For inquiring correlation context settings For registration elements of correlation-stitching contexts and correlation-stitching result buffers For correlation-stitching result buffers For operation settings of M_PHOTOMETRIC_STEREO registration contexts For operation settings of M_PHOTOMETRIC_STEREO registration result buffers For registration settings of an M_PHOTOMETRIC_STEREO registration context For M_EXTENDED_DEPTH_OF_FIELD contexts For M_DEPTH_FROM_FOCUS contexts For inquiring about the operation settings of an M_HIGH_DYNAMIC_RANGE registration context For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements For inquiring the timeout value for any registration context For the following inquire types, the ContextOrResultId parameter must specify a registration context or result buffer. The Index parameter must be set to M_CONTEXT or M_GENERAL, for a registration context or result buffer respectively. For inquiring general settings of a registration context or result buffer InquireType Description UserVarPtr - Possible values returned M_NUMBER_OF_REGISTRATION_ELEMENTS Inquires the number of registration elements in the registration context or the number of registration result elements in the result buffer. Note that this inquire is only available for an M_STITCHING, M_PHOTOMETRIC_STEREO or M_HIGH_DYNAMIC_RANGE registration context, or an M_STITCHING_RESULT, M_PHOTOMETRIC_STEREO_RESULT or M_HIGH_DYNAMIC_RANGE_RESULT result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value. 2 &lt;= Value &lt; 8192 Specifies the number of registration elements for a correlation-stitching registration context. Value &gt; 3 Specifies the number of registration elements for a photometric stereo registration context. Value &gt;= 2 Specifies the number of registration elements for a high dynamic range registration context. M_OWNER_SYSTEM Inquires the identifier of the system on which the specified registration context or registration result buffer was allocated. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_ID M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). For the following inquire types, the ContextOrResultId parameter must specify an M_STITCHING registration context. In this case, the Index parameter must be set to M_CONTEXT. For inquiring correlation context settings InquireType Description UserVarPtr - Possible values returned M_ACCURACY Inquires the accuracy of the registration calculation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_HIGH. M_HIGH Specifies high accuracy. M_LOW Specifies low accuracy. M_LOCATION_DELTA Inquires the maximum displacement that will be applied to any pixel in the image during registration, relative to its initial location. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 5 %. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum displacement as a percentage. M_MIN_OVERLAP Inquires the minimum overlap that should exist between an image and its reference image so that the registration calculation can optimize the match in their overlapping region. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 20.0 %. 0.0 &lt; Value &lt;= 100.0 Specifies the minimum overlap as a percentage. M_SCORE_TYPE Inquires the type of score calculated during registration. This calculated score can be retrieved after registration using MregGetResult() with M_SCORE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_CORRELATION Specifies to calculate the score based on the normalized grayscale correlation in the overlapped region. M_NONE Specifies that no score is calculated; it is set to 100%. M_STITCHING_LAST_LEVEL Inquires the resolution level for the final stage (highest level) of the correlation algorithm. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_AUTO. M_AUTO Specifies that the last level is set automatically based on image size. 0 &lt;= Value &lt;= 16 Specifies the resolution level for the final stage of the correlation algorithm. M_TRANSFORMATION_TYPE Inquires the type of transformation that the registration calculation will use to optimize the match in the images' overlapping regions. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_TRANSLATION. M_PERSPECTIVE Specifies that a perspective warping can be performed to optimize the match in the overlapping regions. M_TRANSLATION Specifies that a translation can be performed to optimize the match in the overlapping regions. M_TRANSLATION_ROTATION Specifies that a translation and a rotation can be performed to optimize the match in the overlapping regions. M_TRANSLATION_ROTATION_SCALE Specifies that a translation, a rotation, and a scale operation can be performed to optimize the match in the overlapping regions. For the following inquire types, the ContextOrResultId parameter must specify an M_STITCHING registration context or a M_STITCHING_RESULT registration result buffer. In this case the Index parameter must be set to a specific element of the registration context or registration result buffer. For registration elements of correlation-stitching contexts and correlation-stitching result buffers InquireType Description UserVarPtr - Possible values returned M_OPTIMIZE_LOCATION Inquires whether the optimization step of the registration calculation will be performed. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to perform the optimization calculation. M_ENABLE Specifies to perform the optimization calculation. M_REFERENCE_X Inquires the X-coordinate of the origin of the image's pixel coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies that the default X-coordinate of the origin will be used. M_CENTER_ELEMENT Specifies the X-coordinate of the origin to be at the center of the image. Value Specifies the X-coordinate of the origin, in pixels. M_REFERENCE_Y Inquires the Y-coordinate of the origin of the image's pixel coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies that the default Y-coordinate of the origin will be used. M_CENTER_ELEMENT Specifies the Y-coordinate of the origin to be at the center of the image. Value Specifies the Y-coordinate of the origin, in pixels. M_SET_LOCATION_PARAM_1 Inquires the first attribute of the transformation used to set the rough location of the registration element's image. If the first attribute was set to a MIL identifier, this identifier cannot be returned; M_NULL is returned instead. This is the case when the rough location was set using MregSetLocation() with, for example, M_COPY_REG_CONTEXT or M_COPY_REG_RESULT. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_NULL Specifies that the first attribute was set to a MIL identifier. Value Specifies the X-coordinate. M_SET_LOCATION_PARAM_2 Inquires the second attribute of the transformation used to set the rough location of the registration element's image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default index. 0 &lt;= Value &lt; Number of source elements This value can have multiple meanings, as indicated below. Specifies the registration element's index. Specifies the registration result element's index. Value Specifies the Y-coordinate. M_SET_LOCATION_PARAM_3 Inquires the third attribute of the transformation used to set the rough location of the registration element's image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies that the target registration result element's index is the same as the one that is specified in the Target parameter. M_REGISTRATION_GLOBAL Specifies that the target registration result element's reference is the global pixel coordinate system. 0.0 &lt;= Value &lt;= 360.0 Specifies the angle of the image in its reference coordinate system. Value &gt;= 0 Specifies the target registration result element's index. M_SET_LOCATION_PARAM_TYPE Inquires the type of transformation used to set the rough location of the registration element's image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_COPY_REG_CONTEXT Specifies that the rough locations are copied from another registration context. M_COPY_REG_RESULT Specifies that the transformation between two registration result elements is copied. M_POSITION_XY Specifies the coordinates of the origin of the registration element's image in the coordinate system of its reference. M_POSITION_XY_ANGLE Specifies the coordinates of the origin and the angle of the registration element's image in the coordinate system of its reference. M_WARP_4_CORNER Specifies the transformation that transforms an arbitrary quadrilateral in the current image's pixel coordinate system into a rectangle in its reference coordinate system. M_WARP_4_CORNER_REVERSE Specifies the transformation that transforms a rectangle in the current image's pixel coordinate system into an arbitrary quadrilateral in its reference coordinate system. M_WARP_POLYNOMIAL Specifies the transformation matrix that transforms points in the reference coordinate system into points in the current image's pixel coordinate system. M_SET_LOCATION_TARGET Inquires the reference of the registration element's image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_PREVIOUS. M_NEXT Specifies the reference to be the image associated with the registration element whose index follows the specified registration element's index. M_PREVIOUS Specifies the reference to be the image associated with the registration element whose index precedes the specified registration element's index. M_REGISTRATION_GLOBAL Specifies that the reference is the global pixel coordinate system. 0 &lt;= Value &lt; Number of source elements Specifies the index of the registration element of the reference image. For the following inquire types, the ContextOrResultId parameter must specify an M_STITCHING_RESULT result buffer. In this case, the Index parameter must be set to M_GENERAL. For correlation-stitching result buffers InquireType Description UserVarPtr - Possible values returned M_MOSAIC_COMPOSITION Inquires which image's pixel values to use when composing the mosaic and two or more images overlap. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_LAST_IMAGE. M_AVERAGE_IMAGE Specifies to use the average value of the images' pixels in the overlapping region. M_FIRST_IMAGE Specifies to use the pixels of the image associated with the registration result element with the lowest index. M_FUSION_IMAGE Specifies to fuse the images by progressively blending overlapping pixels. M_LAST_IMAGE Specifies to use the pixels of the image associated with the registration result element with the highest index. M_SUPER_RESOLUTION Specifies to use a super-resolution algorithm to create the mosaic. M_MOSAIC_OFFSET_X Inquires the X-offset between the origin of the coordinate system used to compose the mosaic and the left side of the destination image buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_ALIGN_LEFT. M_ALIGN_LEFT Specifies that the X-offset (in pixels) will be calculated such that the left-most part of the mosaic will be aligned with the left side of the destination image buffer. Value Specifies the X-offset, in pixels. M_MOSAIC_OFFSET_Y Inquires the Y-offset between the origin of the coordinate system used to compose the mosaic and the top of the destination image buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_ALIGN_TOP. M_ALIGN_TOP Specifies that the Y-offset (in pixels) will be calculated such that the top-most part of the mosaic will be aligned with the top of the destination image buffer. Value Specifies the Y-offset, in pixels. M_MOSAIC_SCALE Inquires the scaling factor used on images while creating the mosaic. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 10.0 Specifies the scale factor. M_MOSAIC_STATIC_INDEX Inquires the element whose coordinate system is used when generating the mosaic. If the coordinate system of one of the images is used, the index of its corresponding registration element is returned. If the coordinate system which minimizes changes to the images or the global pixel coordinate system is used, M_ALL or M_REGISTRATION_GLOBAL will be returned, respectively. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Specifies the default value. M_ALL Specifies that the coordinate system will be chosen such that the minimum change is done on all images during the mosaic composition. M_REGISTRATION_GLOBAL Specifies that the mosaic will be composed with respect to the global pixel coordinate system. 0 &lt;= Value &lt; NumberOfElements Specifies the index of the registration result element whose image's pixel coordinate system will be used as the reference coordinate system. M_SR_PSF_RADIUS Inquires the radius of the M_CIRCULAR or M_GAUSSIAN point-spread functions (PSF). For M_GAUSSIAN, the radius corresponds to the standard deviation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 0.5 pixels. Value &gt;= 0.0 Specifies the radius of the PSF, in pixel units at the scale of the source images. M_SR_PSF_TYPE Inquires the type of point-spread function (PSF) to use during super-resolution calculations to model the blurring in source images. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_GAUSSIAN. M_CIRCULAR Specifies to assume a PSF that models blurring of single points of light into uniform circles in the image. M_DISABLE Specifies that no PSF should be assumed during super-resolution calculations. M_GAUSSIAN Specifies to assume a PSF that models blurring of single points of light into radially symmetric gaussian functions in the image. M_SQUARE Specifies to assume a PSF that models blurring of single points of light into symmetric square functions in the image. M_SR_SMOOTHNESS Inquires the smoothness value used during super-resolution calculations. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 50.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the smoothness value. For the following inquire types, the ContextOrResultId parameter must specify an M_PHOTOMETRIC_STEREO_RESULT result buffer. In this case, the Index parameter must be set to M_CONTEXT. For operation settings of M_PHOTOMETRIC_STEREO registration contexts InquireType Description UserVarPtr - Possible values returned M_DRAW_WITH_NO_RESULT Inquires the type of image to draw when using MregCalculate() with RegResultOrImageId set to an image buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DRAW_ALBEDO_IMAGE. M_DRAW_ALBEDO_IMAGE Specifies to draw the albedo image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. M_DRAW_GAUSSIAN_CURVATURE_IMAGE Specifies to draw the Gaussian curvature image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. M_DRAW_LOCAL_CONTRAST_IMAGE Specifies to draw the local contrast image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. M_DRAW_LOCAL_SHAPE_IMAGE Specifies to draw the local shape image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. M_DRAW_MEAN_CURVATURE_IMAGE Specifies to draw the mean curvature image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. M_DRAW_TEXTURE_IMAGE Specifies to draw the texture image into the image buffer when using MregCalculate() with RegResultOrImageId set to an image buffer. M_GAUSSIAN_CURVATURE Inquires whether the Gaussian curvature image is computed when using MregCalculate() with RegResultOrImageId set to a result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the Gaussian curvature image. M_ENABLE Specifies to compute the Gaussian curvature image. M_IMPROVED_LOCAL_SHAPE Inquires the mode used to compute the local shape image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Recommended casting type: MIL_INT M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to compute the default version of the local shape image. M_ENABLE Specifies to compute an improved version of the local shape image. M_LOCAL_CONTRAST Inquires whether to compute the local contrast image when using MregCalculate() with RegResultOrImageId set to a result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the local contrast image. M_ENABLE Specifies to compute the local contrast image. M_LOCAL_SHAPE Inquires whether to compute the local shape image when using MregCalculate() with RegResultOrImageId set to a result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the local shape image. M_ENABLE Specifies to compute the local shape image. M_MEAN_CURVATURE Inquires whether the mean curvature image is computed when using MregCalculate() with RegResultOrImageId set to a result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the mean curvature image. M_ENABLE Specifies to compute the mean curvature image. M_NON_UNIFORMITY_CORRECTION Inquires whether to compute a correction for non-uniform illumination on the input image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_AUTO Specifies to compute a correction for non-uniform illumination on the input image. M_DISABLE Specifies not to compute a correction for non-uniform illumination on the input image. M_OBJECT_SIZE Inquires the number of iterations to perform when M_LOCAL_CONTRAST or M_DRAW_LOCAL_CONTRAST_IMAGE is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 1. Value &gt;= 0 Specifies the number of iterations of morphological operations to perform. M_SHAPE_NORMALIZATION Inquires whether shape normalization is performed when computing a local shape image (M_LOCAL_SHAPE or M_DRAW_WITH_NO_RESULT set to M_DRAW_LOCAL_SHAPE_IMAGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to normalize the shape information during local shape computation. M_ENABLE Specifies to normalize the shape information during local shape computation. M_SHAPE_SMOOTHNESS Inquires the amount of smoothness to apply to surface variations when computing the M_LOCAL_SHAPE, M_MEAN_CURVATURE, or M_GAUSSIAN_CURVATURE image (or when using M_DRAW_LOCAL_SHAPE_IMAGE, M_DRAW_MEAN_CURVATURE_IMAGE, or M_DRAW_GAUSSIAN_CURVATURE_IMAGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 50.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the degree of smoothness applied to frontiers between raised and recessed regions. M_TEXTURE_IMAGE Inquires whether to compute the texture image when using MregCalculate() with RegResultOrImageId set to a result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to compute the texture image. M_ENABLE Specifies to compute the texture image. For the following inquire types, the ContextOrResultId parameter must specify an M_PHOTOMETRIC_STEREO_RESULT result buffer. In this case, the Index parameter must be set to M_GENERAL. For operation settings of M_PHOTOMETRIC_STEREO registration result buffers InquireType Description UserVarPtr - Possible values returned M_DRAW_REMAP_FACTOR_MODE Inquires whether to automatically calculate the remap factor, or to use a user-defined value. The remap factor is the factor needed to remap the result of an M_DRAW_GAUSSIAN_CURVATURE_IMAGE, M_DRAW_LOCAL_SHAPE_IMAGE, or M_DRAW_MEAN_CURVATURE_IMAGE operation when the destination is not a 32-bit floating-point image buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the remap factor so that the entire range of the drawn image is represented. M_USER_DEFINED Specifies to use the remap factor set with M_DRAW_REMAP_FACTOR_VALUE. M_DRAW_REMAP_FACTOR_VALUE Inquires the remap factor value when M_DRAW_REMAP_FACTOR_MODE is set to M_USER_DEFINED and the destination is not a 32-bit floating-point image buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the remap factor. For the following inquire types, the ContextOrResultId parameter must specify an M_PHOTOMETRIC_STEREO_RESULT result buffer. In this case, the Index parameter must be set to M_CONTEXT or a specific value. For registration settings of an M_PHOTOMETRIC_STEREO registration context InquireType Description UserVarPtr - Possible values returned M_LIGHT_VECTOR_COMPONENT_1 Inquires the first component of the light vector. When M_LIGHT_VECTOR_TYPE is set to M_SPHERICAL, this component is the polar (zenith) angle. When M_LIGHT_VECTOR_TYPE is set to M_CARTESIAN, this component is the vector's X-coordinate. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0.0 &lt;= Value &lt;= 90.0 Specifies the polar (zenith) angle, in degrees, if the light mode is set to the spherical coordinate system. Value Specifies the X-coordinate of the light vector, if the light mode is set to the Cartesian coordinate system. M_LIGHT_VECTOR_COMPONENT_2 Inquires the second component of the light vector. When M_LIGHT_VECTOR_TYPE is set to M_SPHERICAL, this component is the azimuth angle. When M_LIGHT_VECTOR_TYPE is set to M_CARTESIAN, this component is the vector's Y-coordinate. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0.0 &lt;= Value &lt;= 360.0 Specifies the azimuth angle, in degrees, if the light mode is set to the spherical coordinate system. Value Specifies the Y-coordinate of the light vector, if the light mode is set to the Cartesian coordinate system. M_LIGHT_VECTOR_COMPONENT_3 Inquires the third component of the light vector. When M_LIGHT_VECTOR_TYPE is set to M_SPHERICAL, this component is the relative intensity of the light source. When M_LIGHT_VECTOR_TYPE is set to M_CARTESIAN, this component is the vector's Z-coordinate. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0.0 Specifies the value of the third component. M_LIGHT_VECTOR_TYPE Inquires the coordinate system in which the input light vector is represented. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_SPHERICAL. M_CARTESIAN Specifies that the light vector is defined in the Cartesian coordinate system. M_SPHERICAL Specifies that the light vector is defined in the spherical coordinate system. For the following inquire types, the ContextOrResultId parameter must specify an M_EXTENDED_DEPTH_OF_FIELD registration context. In this case, the Index parameter must be set to M_CONTEXT. For M_EXTENDED_DEPTH_OF_FIELD contexts InquireType Description UserVarPtr - Possible values returned M_CIRCLE_OF_CONFUSION_RADIUS_MAX Inquires the radius of the maximum circle of confusion (blurring circle), among the input images. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 8 pixels. 1 &lt;= Value &lt;= 256 Specifies the maximum radius of the circle of confusion (blurring circle) in pixels. M_MODE Inquires the computation mode of the registration operation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_RECONSTRUCTION. M_FAST Specifies a faster computation mode. M_RECONSTRUCTION Specifies a computation mode that favors the quality of the extended depth of field (EDoF) image. M_TRANSLATION_TOLERANCE Inquires the maximum distance between a point of an object that is in focus in one image, and the same point in an image in which the object is out of focus, in pixels, among the input images. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 1 pixel. 1 &lt;= Value &lt;= 4 Specifies the maximum translation distance of a point between two images, in pixels. For the following inquire types, the ContextOrResultId parameter must specify an M_DEPTH_FROM_FOCUS registration context. In this case, the Index parameter must be set to M_CONTEXT. For M_DEPTH_FROM_FOCUS contexts InquireType Description UserVarPtr - Possible values returned M_ADAPTIVE_INTENSITY_DELTA Inquires the adaptive intensity delta. The adaptive intensity delta is the difference between the maximum and minimum intensity values for an object in an image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 50.0. Value &gt; 0.0 Specifies the maximum difference of intensities. M_ADAPTIVE_SMOOTHING Inquires the size of the neighborhood on which to apply the adaptive smoothing. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 3.0 pixels. Value &gt; 0.0 Specifies a distance, in pixels, from the pixel being evaluated. M_CONFIDENCE_MAP Inquires whether the confidence map is computed. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the confidence map is not computed. M_ENABLE Specifies that the confidence map is computed. M_FOCUS_DEPTH_SIZE Inquires the focus depth size. The focus depth size is the number of images for an object in the image to go from out of focus, to in focus, to out of focus again. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 3 images. Value &gt; 1 Specifies the number of images. M_INTENSITY_MAP Inquires whether the intensity map is computed. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that the intensity map is not computed. M_ENABLE Specifies that the intensity map is computed. M_REGULARIZATION_MODE Inquires the mode of regularization used to adjust the coherency of neighboring pixels in the index map. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Same as M_AVERAGE. M_ADAPTIVE Specifies that the regularization takes into account the local geometry and the change in intensity of the content in the source image. M_AVERAGE Specifies that the regularization takes into account the average dominance of neighboring pixels. M_DISABLE Specifies that the regularization is based on the raw pixel values and that no post-processing is done to ensure the coherency of neighboring pixels. M_REGULARIZATION_SIZE Inquires the neighborhood size when regulation is used. This should typically not be larger than the smallest object's dimension in the image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 5 pixels. Value &gt;= 3 Specifies the size of the neighborhood, in pixels. For the following inquire types, the ContextOrResultId parameter must specify an M_HIGH_DYNAMIC_RANGE registration context. In this case, the Index parameter must be set to M_CONTEXT. For inquiring about the operation settings of an M_HIGH_DYNAMIC_RANGE registration context InquireType Description UserVarPtr - Possible values returned M_FUSION_COVERAGE Inquires the required proportion of non-saturated pixels within each input image that qualifies the image for inclusion in the HDR calculation. Non-saturated pixels are neither underexposed nor overexposed, according to the limits set with M_FUSION_LOW_THRESHOLD and M_FUSION_HIGH_THRESHOLD. The specified M_FUSION_COVERAGE value is the ratio between the number of qualifying, non-saturated pixels in the input image and the total number of pixels in the image, from 0.0-1.0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 0.05. 0.0 &lt;= Value &lt;= 1.0 Specifies the fusion coverage ratio. M_FUSION_HIGH_THRESHOLD Inquires the threshold to filter out the saturated pixels (that is, the near maximum values) of the image. Specify the threshold as a percentage of the current working range of pixel values, which widens with each input image that is merged into the intermediate, working HDR image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 95.0 %. 0.0 &lt;= Value &lt;= 100.0 Specifies the fusion high threshold, as a percentage. M_FUSION_LOW_THRESHOLD Inquires the threshold to filter out the underexposed pixels (that is, the near 0 values) of the image. Specify the threshold as a percentage of the current working range of pixel values, which widens with each input image that is merged into the intermediate, working HDR image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 5.0 %. 0.0 &lt;= Value &lt;= 100.0 Specifies the fusion low threshold, as a percentage. M_FUSION_MODE Inquires the criteria by which input image pixels are selected for contribution to the HDR image calculation. Saturated and underexposed pixels are excluded, and the remaining pixels are then used to calculate the gain to apply to the input image to successfully merge it with the intermediate, working HDR image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is M_PERCENTILE_VALUE + M_IN_RANGE. M_PERCENTILE_VALUE Specifies to eliminate from the calculation those pixels whose values exceed or fall short of the limits set with M_FUSION_HIGH_THRESHOLD and M_FUSION_LOW_THRESHOLD, respectively. This value is combined with a value from the following table: To specify a threshold condition M_GAIN_MODE Inquires how MIL establishes the image gain to apply to an input image when merging it with the intermediate, working HDR image. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_AUTO. M_AUTO Specifies that the image gains will be automatically estimated by MIL. M_USER_DEFINED Specifies that you will explicitly set the image gain to use for a given input image, using M_IMAGE_GAIN. M_TONE_MAPPING_COEFFICIENT Inquires the tone mapping coefficient when calculating the tone-mapped HDR image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 0.5. 0.0 &lt;= Value &lt;= 1.0 Specifies the tone mapping coefficient. M_TONE_MAPPING_HIGH_THRESHOLD Inquires the tone mapping high threshold to use when calculating the tone-mapped HDR image. Specify the threshold as a percentage of the raw HDR image's pixel intensity levels. This removes unnecessary pixel intensity levels at the saturated end, and allows more intensity distribution elsewhere in the image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 99.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the tone mapping high threshold, as a percentage. M_TONE_MAPPING_LOW_THRESHOLD Inquires the tone mapping low threshold to use when calculating the tone-mapped HDR image. Specify the threshold as a percentage of the raw HDR image's pixel intensity levels. This removes unnecessary pixel intensity levels at the near-zero end, and allows more intensity distribution elsewhere in the image. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 1.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the tone mapping low threshold, as a percentage. M_TONE_MAPPING_MODE Inquires the tone mapping mode to use when calculating the tone-mapped HDR image. Tone mapping distributes pixel intensity values within the specified range. You can also specify to disable tone mapping (M_DISABLE), in which case the raw HDR image is drawn into the destination buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is M_PERCENTILE_VALUE + M_IN_RANGE. M_DISABLE Specifies not to use a tone mapping mode. M_PERCENTILE_VALUE Specifies to apply tone mapping to input image pixels whose intensity levels fall within the limits set with M_TONE_MAPPING_HIGH_THRESHOLD and M_TONE_MAPPING_LOW_THRESHOLD, respectively. This value is combined with a value from the following table: To specify a threshold condition For the following inquire types, the ContextOrResultId parameter must specify an M_HIGH_DYNAMIC_RANGE registration context. In this case, the Index parameter must be set to the index of the input image to inquire. For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements InquireType Description UserVarPtr - Possible values returned M_IMAGE_GAIN Inquires the image gain that MregCalculate() should use to merge the given input image with the intermediate, working HDR image, when M_GAIN_MODE is set to M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 1.0. M_INVALID Specifies that the image will be ignored. Value &gt;= 1.0 Specifies the image gain to be used by MregCalculate(). Combination value for [when InquireType=M_FUSION_MODE and UserVarPtr=M_PERCENTILE_VALUE: M_PERCENTILE_VALUE ], [when InquireType=M_TONE_MAPPING_MODE and UserVarPtr=M_PERCENTILE_VALUE: M_PERCENTILE_VALUE]. The following value is combined with the above-mentioned values to specify a threshold condition. For specifying a threshold condition Combination value Description M_IN_RANGE Specifies to apply the fusion or tone mapping to pixels within a specified range. For the following inquire type, the ContextOrResultId parameter must specify a M_DEPTH_FROM_FOCUS, M_EXTENDED_DEPTH_OF_FIELD, M_HIGH_DYNAMIC_RANGE, M_PHOTOMETRIC_STEREO, or M_STITCHING registration context. In this case, the Index parameter must be set to M_CONTEXT. For inquiring the timeout value for any registration context InquireType Description UserVarPtr - Possible values returned M_TIMEOUT Inquires the timeout value for MregCalculate(). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DEFAULT Specifies the default value; the default value is 2000.0 msec. M_DISABLE Specifies that there is no timeout value. Value Specifies the timeout value, in msec. Combination values for Tables: For inquiring general settings of a registration context or result buffer For inquiring correlation context settings For registration elements of correlation-stitching contexts and correlation-stitching result buffers For correlation-stitching result buffers For operation settings of M_PHOTOMETRIC_STEREO registration contexts For registration settings of an M_PHOTOMETRIC_STEREO registration context For M_EXTENDED_DEPTH_OF_FIELD contexts For M_DEPTH_FROM_FOCUS contexts For inquiring about the operation settings of an M_HIGH_DYNAMIC_RANGE registration context the values listed in all the parameter association tables except For operation settings of M_PHOTOMETRIC_STEREO registration result buffers, For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements, For inquiring the timeout value for any registration context. You can add one of the following values to the above-mentioned values to cast the requested information to a required data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TYPE_MIL_ID Casts the requested information to a MIL_ID. Note that M_TYPE_MIL_ID should only be used with M_OWNER_SYSTEM. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 Data type: address of a MIL_INT32 M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Return value The returned value is the requested information, cast to a MIL_INT. If the requested information does not fit into a MIL_INT, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - ContextOrResultId - Index For specifying a registration context, registration element, or registration result buffer - InquireType - UserVarPtr Parameter Associations For inquiring general settings of a registration context or result buffer For inquiring correlation context settings For registration elements of correlation-stitching contexts and correlation-stitching result buffers For correlation-stitching result buffers For operation settings of M_PHOTOMETRIC_STEREO registration contexts For operation settings of M_PHOTOMETRIC_STEREO registration result buffers For registration settings of an M_PHOTOMETRIC_STEREO registration context For M_EXTENDED_DEPTH_OF_FIELD contexts For M_DEPTH_FROM_FOCUS contexts For inquiring about the operation settings of an M_HIGH_DYNAMIC_RANGE registration context For operation settings of M_HIGH_DYNAMIC_RANGE registration contexts, when the Index parameter is set to one or all registration elements + For specifying a threshold condition For inquiring the timeout value for any registration context + For specifying the data type Return value Compilation information ",
      "wordCount": 6475,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregRestore",
      "version": null,
      "title": "MregRestore",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregRestore.htm",
      "text": " MregRestore Synopsis Restore a registration context or result buffer from disk. Syntax MIL_ID MregRestore( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;SystemId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*ContextOrResultIdPtr //out ) Description This function restores a registration context or result buffer that was previously saved to a file, using MregSave() or MregStream(). This function restores all of the registration context's or result buffer's settings that were in effect when it was saved. Note that you can only restore an M_STITCHING_RESULT result buffer. After restoring the registration context, you should check if the operation was successful, using MappGetError() or by verifying that the registration context identifier returned is not M_NULL (or nullptr if M_UNIQUE_ID was specified). When the restored registration context is no longer required, release it using MregFree() unless M_UNIQUE_ID was specified during restoration; if M_UNIQUE_ID was specified, the smart identifier manages the restored registration context's lifetime and you must not manually free it. Parameters Parameters FileName Specifies the name and path of the file from which to restore the registration context or result buffer. The function handles (internally) the opening and closing of the file. For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Open dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). Typically, registration context files have an MREG extension. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). SystemId Specifies the system on which to restore the registration context. This parameter should be set to one of the following values: For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. ContextOrResultIdPtr Specifies the address of the variable in which to write the registration context identifier or specifies the data type that the function should use to return the registration context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated registration context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated registration context ; in this case, a MIL smart identifier of type MIL_UNIQUE_REG_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the registration context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the EDOF registration context identifier Specifies the address of a MIL_ID in which to write the identifier of the restored EDOF registration context. If restoration fails, M_NULL is written as the identifier. Address in which to write the EDOF result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the restored EDOF result buffer. If restoration fails, M_NULL is written as the identifier. Address in which to write the HDR registration context identifier Specifies the address of a MIL_ID in which to write the identifier of the restored HDR context. If restoration fails, M_NULL is written as the identifier. Address in which to write the stitching registration context identifier Specifies the address of a MIL_ID in which to write the identifier of the restored stitching context. If restoration fails, M_NULL is written as the identifier. Address in which to write the stitching result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the restored stitching result buffer. If restoration fails, M_NULL is written as the identifier. Return value The returned value is the registration context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_REG_ID). If restoration fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - FileName For specifying the file name and path - SystemId For specifying the system identifier - ControlFlag - ContextOrResultIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 804,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregSave",
      "version": null,
      "title": "MregSave",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregSave.htm",
      "text": " MregSave Synopsis Save a registration context or an M_STITCHING_RESULT result buffer to a file. Syntax void MregSave( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;ContextOrResultId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function saves all the information about a previously allocated registration context or an M_STITCHING_RESULT result buffer. This information can be reloaded, using MregRestore() or MregStream(). Saving an M_STITCHING_RESULT result buffer is useful if you want to reuse the registration results (you cannot save other types of registration result buffers). Parameters Parameters FileName Specifies the name and path of the file in which to save the registration context or the contents of the registration result buffer. It is recommended that you use the MREG file extension for easier use with other Matrox Imaging software products. The function handles (internally) the opening and closing of the file. This parameter can be set to one of the following values: For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Save As dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). Typically, registration context files have an MREG extension. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ContextOrResultId Specifies either the identifier of the registration context or the M_STITCHING_RESULT result buffer to save. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - FileName For specifying the file name and path - ContextOrResultId - ControlFlag Compilation information ",
      "wordCount": 298,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregSetLocation",
      "version": null,
      "title": "MregSetLocation",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregSetLocation.htm",
      "text": " MregSetLocation Synopsis Sets the rough location of the specified registration element's image with respect to another registration element's image or the global pixel coordinate system. Syntax void MregSetLocation( MIL_ID&nbsp;ContextId, //in MIL_INT&nbsp;Index, //in MIL_INT&nbsp;Target, //in MIL_INT64&nbsp;ParamType, //in MIL_DOUBLE&nbsp;Param1, //in MIL_DOUBLE&nbsp;Param2, //in MIL_DOUBLE&nbsp;Param3, //in MIL_DOUBLE&nbsp;Param4, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function sets the rough location of the specified registration element's image with respect to another registration element's image or the global pixel coordinate system. The MregCalculate() function uses this location to find the transformations that optimally position the images in the global pixel coordinate system. You can explicitly specify the rough location or you can copy it from a registration element of another registration context or a result element of a registration result buffer. When copying the rough location, you can use the same reference index as the element from which you are copying the rough location. Alternatively, you can specify a different reference index. The more precise the information, the faster the registration calculation will be. If you know the exact position of the image, you can bypass the optimization step of the calculation by either disabling the MregControl() M_OPTIMIZE_LOCATION control type or replacing the image in the array by M_NULL (see the Skipping the optimization step subsection of the Customizing your registration settings section of Chapter 12: Correlation stitching registration and mosaicing). In this case, the transformation that you specify using MregSetLocation() becomes the optimal transformation. Upon calling MregCalculate(), this transformation will be converted so that it maps the image into the global pixel coordinate system without first converting it into its reference image's pixel coordinate system. Some restrictions apply when selecting the image's reference. The settings cannot be circularly defined. If you take a specific image and look at its reference, and then at its reference image's reference, and continue through the series of images linked in this manner, the first image must never appear as another image's reference. Furthermore, there should only be one image with its reference set to the global pixel coordinate system. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, MregSetLocation() internally calls the MIL_DOUBLE version of this function (MregSetLocationDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (MregSetLocationInt64()). Parameters Parameters ContextId Specifies the registration context of the registration element to affect. The registration context must have been previously allocated on the required system using MregAlloc(). Index Specifies the index of the registration element. This parameter can be set to one of the following: For specifying the index Value Description M_ALL Specifies that all of the registration elements will have their location set. 0 &lt;= Value &lt; Number of source elements Specifies the index of the registration element. Target Specifies the reference of the registration element's image. The coordinate system associated with this reference is used as the reference coordinate system. For specifying the reference Value Description M_DEFAULT Same as M_PREVIOUS. M_COPY Uses the same index as the reference of the element from which positional information is being copied. This setting is only available if the ParamType parameter is set to either M_COPY_REG_CONTEXT or M_COPY_REG_RESULT. M_NEXT Specifies the reference to be the image associated with the registration element whose index follows the specified registration element's index. When the registration element's image is the last one in the input sequence, the reference is set to M_REGISTRATION_GLOBAL, the global pixel coordinate system. M_PREVIOUS Specifies the reference to be the image associated with the registration element whose index precedes the specified registration element's index. When the registration element has an index 0, the reference is set to M_REGISTRATION_GLOBAL, the global pixel coordinate system. M_REGISTRATION_GLOBAL Specifies that the reference is the global pixel coordinate system. M_UNCHANGED Specifies that only the rough locations are changed; the same reference is used. 0 &lt;= Value &lt; Number of source elements Specifies the index of the registration element of the reference image. ParamType Specifies the type of transformation to use to set the location of the registration element's image. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param1 Specifies an attribute of the transformation. Its definition depends on the value of ParamType. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param2 Specifies an attribute of the transformation. Its definition depends on the value of ParamType. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param3 Specifies an attribute of the transformation. Its definition depends on the value of ParamType. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param4 Reserved for future expansion and must be set to M_DEFAULT. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the ParamType, Param1, Param2, and Param3 parameters. For specifying the transformation type Note that any unused parameters should be set to M_DEFAULT. For specifying the transformation type ParamType Description Param1 Param2 Param3 M_COPY_REG_CONTEXT Specifies that the rough locations are copied from another registration context. Param1 Specifies the identifier of the registration context from which to copy the transformation settings. Param2 Specifies the registration element index from which to copy the transformation settings. M_DEFAULT Specifies the default index. The default index is the same as the one specified for the Index parameter. If the Index parameter is set to M_ALL, the function copies each rough location from the source context into the corresponding index in the destination context. In this case, the number of elements in the source registration context passed to Param1 must be greater than or equal to the number of elements in the destination registration context. Any extra elements in the source context will not be copied. 0 &lt;= Value &lt; Number of source elements Specifies the registration element's index. M_COPY_REG_RESULT Specifies that the transformation between two registration result elements is copied. Param1 Specifies the identifier of the registration result buffer from which to copy the transformations. Param2 Specifies the registration result element's index from which to copy the transformation settings. M_DEFAULT Specifies the default index. The default index is the same as the one specified for the Index parameter. 0 &lt;= Value &lt; Number of source elements Specifies the registration result element's index. Param3 Specifies the registration result element's index of the target transformation element. M_DEFAULT Specifies that the target registration result element's index is the same as the one that is specified in the Target parameter. M_REGISTRATION_GLOBAL Specifies that the target registration result element's reference is the global pixel coordinate system. Value &gt;= 0 Specifies the target registration result element's index. M_POSITION_XY Specifies the coordinates of the origin of the registration element's image in the coordinate system of its reference. Note that when the reference is an image, the specified coordinates need not lie within the reference image. Param1 Sets the X-coordinate of the image's origin in its reference coordinate system. Param2 Sets the Y-coordinate of the image's origin in its reference coordinate system. M_POSITION_XY_ANGLE Specifies the coordinates of the origin and the angle of the registration element's image in the coordinate system of its reference. Note that when the reference is an image, the specified coordinates need not lie within the reference image. Param1 Sets the X-coordinate of the image's origin in its reference coordinate system. Param2 Sets the Y-coordinate of the image's origin in its reference coordinate system. Param3 Sets the angle of the image in its reference coordinate system. The angle is measured in degrees in counter-clockwise direction. M_WARP_4_CORNER Specifies the transformation that transforms an arbitrary quadrilateral in the current image's pixel coordinate system into a rectangle in its reference coordinate system. You specify the transformation by supplying 4 points in the current image and 2 points in the reference image. Param1 Specifies the MIL identifier of the buffer to use to store the coordinates of the 6 points. This buffer should have an M_ARRAY attribute. For more information on the buffer and its contents, see MgenWarpParameter(). M_WARP_4_CORNER_REVERSE Specifies the transformation that transforms a rectangle in the current image's pixel coordinate system into an arbitrary quadrilateral in its reference coordinate system. You specify the transformation by supplying 2 points in the current image and 4 points in the reference image. Param1 Specifies the MIL identifier of the buffer to use to store the coordinates of the 6 points needed to warp the image. This buffer should have an M_ARRAY attribute. For more information on the buffer and its contents, see MgenWarpParameter(). M_WARP_POLYNOMIAL Specifies the transformation matrix that transforms points in the reference coordinate system into points in the current image's pixel coordinate system. Param1 Specifies the MIL identifier of the buffer containing the transformation matrix. For more information on the buffer and its contents, see MimWarp(). Type-specific versions of the function when using a C compiler under 64-bit void MregSetLocationInt64 (MIL_ID ContextId, MIL_INT Index, MIL_INT Target, MIL_INT64 ParamType, MIL_INT64 Param1, MIL_DOUBLE Param2, MIL_DOUBLE Param3, MIL_DOUBLE Param4, MIL_INT64 ControlFlag) Details Parameters ContextId See ContextId of the main function for a description. Index See Index of the main function for a description. Target See Target of the main function for a description. ParamType See ParamType of the main function for a description. Param1 See Param1 of the main function for a description. Param2 See Param2 of the main function for a description. Param3 See Param3 of the main function for a description. Param4 See Param4 of the main function for a description. ControlFlag See ControlFlag of the main function for a description. void MregSetLocationDouble (MIL_ID ContextId, MIL_INT Index, MIL_INT Target, MIL_INT64 ParamType, MIL_DOUBLE Param1, MIL_DOUBLE Param2, MIL_DOUBLE Param3, MIL_DOUBLE Param4, MIL_INT64 ControlFlag) Details Parameters ContextId See ContextId of the main function for a description. Index See Index of the main function for a description. Target See Target of the main function for a description. ParamType See ParamType of the main function for a description. Param1 See Param1 of the main function for a description. Param2 See Param2 of the main function for a description. Param3 See Param3 of the main function for a description. Param4 See Param4 of the main function for a description. ControlFlag See ControlFlag of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - ContextId - Index For specifying the index - Target For specifying the reference - ParamType - Param1 - Param2 - Param3 - Param4 - ControlFlag Parameter Associations For specifying the transformation type Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 1794,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregStream",
      "version": null,
      "title": "MregStream",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregStream.htm",
      "text": " MregStream Synopsis Load, restore, or save a registration context or an M_STITCHING_RESULT result buffer from/to a file or memory stream. Syntax void MregStream( MIL_TEXT_PTR&nbsp;MemPtrOrFileName, //in-out MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;StreamType, //in MIL_DOUBLE&nbsp;Version, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*ContextOrResultRegIdPtr, //in-out MIL_INT&nbsp;*SizeByteVarPtr //out ) Description This function can load, restore, or save a registration context and/or an M_STITCHING_RESULT registration result buffer from/to a file or memory stream. To inquire the number of bytes necessary to save a registration context or result buffer to a memory stream, you should first call this function (MregStream()) with M_INQUIRE_SIZE_BYTE. The content saved to memory stream is equivalent to the content saved to file. This function is equivalent to a file saved using MregSave(). You can use this and other MIL stream functions, for example, to save all required MIL objects, as well as any other custom data, for your application to a memory stream. Once in a memory stream, you can write the stream to a single file or transfer it over a network. You are responsible for concatenating the streams and for saving the stream to file. Using MregStream(), you can choose to save a backwards-compatible version of the registration context or result buffer, which will work using a version of MIL that is up to one major release older than the current version (depending on which version is specified). For example, if you allocate a registration context using MIL 10.0 and save it to version 9.0, you can restore this context on a computer where MIL 9.0 is installed. However, all settings and features unique to the higher version will be ignored when restored using the lower version. Besides saving backwards-compatible versions, you can also load or restore registration contexts or result buffers saved using MIL version 9.0 or above. Settings that do not exist in the lower version will be filled with default values when the registration context is loaded or restored. Parameters Parameters MemPtrOrFileName Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_TEXT_PTR [optionally, in C++: a reference to a MIL_STRING] Optionally, in C++: a reference to a std::vector of type MIL_UINT8 Specifies the file or memory stream. See the Parameter associations section for possible values that can be returned/specified. SysId Specifies the system on which to restore the registration context or M_STITCHING_RESULT result buffer. See the Parameter associations section for possible values that can be specified. Operation Specifies the operation to perform. See the Parameter associations section for possible values that can be specified. StreamType Specifies the type of stream in which to store/from which to restore the registration context or the M_STITCHING_RESULT result buffer. This parameter must be set to one of the following values: For specifying the type of stream Value Description M_FILE Specifies a file stream. M_MEMORY Specifies a memory stream. You are responsible for allocating a block of memory for the stream. Version Specifies the MIL version of the registration context or M_STITCHING_RESULT result buffer. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. ContextOrResultRegIdPtr Specifies the address of the variable in which to write or from which to read the identifier of the registration context or the M_STITCHING_RESULT result buffer. If the M_RESTORE operation is not successful, M_NULL is returned. See the Parameter associations section for possible values that can be returned/specified. SizeByteVarPtr Specifies the address of the variable in which to write the size of the registration context or M_STITCHING_RESULT result buffer, in bytes. If the size is not required, you can set this parameter to M_NULL. Note that the size of the registration context or result buffer will vary depending on the MIL version specified. Parameter associations The table below lists possible values for the MemPtrOrFileName, SysId, Operation, Version, and ContextOrResultRegIdPtr parameters. For performing the stream operation. For performing the stream operation. Operation Description MemPtrOrFileName - Possible values passed or returned SysId Version ContextOrResultRegIdPtr - Possible values passed or returned M_INQUIRE_SIZE_BYTE Inquires the number of bytes required to save a registration context or result buffer to memory stream. This operation is not supported when the StreamType parameter is set to M_FILE. MemPtrOrFileName This parameter must be set to M_NULL. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the registration context or result buffer must be compatible when saved. The size of a registration context or result buffer might differ from one MIL version to another. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_90 Specifies the version as being MIL 9.0. M_PROC_VERSION_90_PP1 Specifies the version as being MIL 9.0 Processing Pack 1. M_PROC_VERSION_90_PP2 Specifies the version as being MIL 9.0 Processing Pack 2. M_PROC_VERSION_100 Specifies the version as being MIL 10.0. M_PROC_VERSION_100_PP1 Specifies the version as being MIL 10.0 Processing Pack 1. M_PROC_VERSION_100_PP2 Specifies the version as being MIL 10.0 Processing Pack 2. M_PROC_VERSION_100_PP3 Specifies the version as being MIL 10.0 Processing Pack 3. M_PROC_VERSION_100_SP4 Specifies the version as being MIL 10.0 Service Pack 4. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. ContextOrResultRegIdPtr Specifies the address of the variable containing the identifier of the registration context or result buffer. M_LOAD Loads the content of a specified file or memory stream into a previously allocated registration context or result buffer. MemPtrOrFileName Specifies the file or memory stream from which to load the context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. Registration contexts or result buffers typically have an MREG file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version This parameter must be set to M_DEFAULT. ContextOrResultRegIdPtr Specifies the address of the variable containing the identifier of the registration context or result buffer. All previous settings are overwritten with those of the loaded context or result buffer, or are set to the default value if the settings didn't exist in the version of MIL from which the context or result buffer is being loaded. M_RESTORE Restores a registration context or result buffer from a file or memory stream and assigns it a MIL identifier. MemPtrOrFileName Specifies the file or memory stream from which to restore the context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. Registration contexts or result buffers typically have an MREG file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId Specifies the system on which to allocate the registration context or result buffer. M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). Version This parameter must be set to M_DEFAULT. ContextOrResultRegIdPtr Specifies the address of the variable in which to write the identifier of the registration context or result buffer. If the operation is not successful, M_NULL is returned. M_SAVE Saves a registration context or an M_STITCHING_RESULT the contents of a registration result buffer to a specified file or memory stream. MemPtrOrFileName Specifies the file or memory stream. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. For easier use with other Matrox Imaging software products, when saving a registration context to a file, use the MREG file extension. The function handles (internally) the opening and closing of the file. If the file already exists, it will be overwritten. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which to write, and the block of memory must be large enough to stream the entire object. To determine the required size, call this function with M_INQUIRE_SIZE_BYTE. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the registration context or result buffer must be compatible when saved. Note that the registration context or result buffer can only be up to one major release older (MIL 9.0) than the current version. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_90 Specifies the version as being MIL 9.0. M_PROC_VERSION_90_PP1 Specifies the version as being MIL 9.0 Processing Pack 1. M_PROC_VERSION_90_PP2 Specifies the version as being MIL 9.0 Processing Pack 2. M_PROC_VERSION_100 Specifies the version as being MIL 10.0. M_PROC_VERSION_100_PP1 Specifies the version as being MIL 10.0 Processing Pack 1. M_PROC_VERSION_100_PP2 Specifies the version as being MIL 10.0 Processing Pack 2. M_PROC_VERSION_100_PP3 Specifies the version as being MIL 10.0 Processing Pack 3. M_PROC_VERSION_100_SP4 Specifies the version as being MIL 10.0 Service Pack 4. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. ContextOrResultRegIdPtr Specifies the address of the variable containing the identifier of the registration context or result buffer to save. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - MemPtrOrFileName - SysId - Operation - StreamType For specifying the type of stream - Version - ControlFlag - ContextOrResultRegIdPtr - SizeByteVarPtr Parameter Associations For performing the stream operation. Compilation information ",
      "wordCount": 1939,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregTransformCoordinate",
      "version": null,
      "title": "MregTransformCoordinate",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregTransformCoordinate.htm",
      "text": " MregTransformCoordinate Synopsis Convert a pair of coordinates between two of the following coordinate systems: the global pixel coordinate system, any registered image's pixel coordinate system, and the mosaic's coordinate system. Syntax void MregTransformCoordinate( MIL_ID&nbsp;RegResultId, //in MIL_INT&nbsp;Source, //in MIL_INT&nbsp;Destination, //in MIL_DOUBLE&nbsp;X, //in MIL_DOUBLE&nbsp;Y, //in MIL_DOUBLE&nbsp;*ResXPtr, //out MIL_DOUBLE&nbsp;*ResYPtr, //out MIL_INT64&nbsp;ControlFlag //in ) Description This function converts a pair of coordinates between two of the following coordinate systems: the global pixel coordinate system, any registered image's pixel coordinate system, and the mosaic's coordinate system. Parameters Parameters RegResultId Specifies the registration result buffer that contains the information that will be used to transform the coordinates. The registration result buffer must have been previously allocated on the required system using MregAllocResult() or restored from a file using MregRestore(). Source Specifies the source coordinate system. This parameter must be set to one of the following values: For the source coordinate system Value Description M_MOSAIC Specifies to use the coordinate system relative to which the mosaic will be composed. This coordinate system was specified using MregControl() with M_MOSAIC_STATIC_INDEX. M_REGISTRATION_GLOBAL Specifies the global pixel coordinate system. Value Specifies the index of the registration result element associated with the image whose coordinate system to use. Destination Specifies the destination coordinate system. This parameter must be set to one of the following values: For the destination coordinate system Value Description M_MOSAIC Specifies to use the coordinate system relative to which the mosaic will be composed. This coordinate system was specified using MregControl() with M_MOSAIC_STATIC_INDEX. M_REGISTRATION_GLOBAL Specifies the global pixel coordinate system. Value Specifies the index of the registration result element associated with the image whose coordinate system to use. X Specifies the X-coordinate in the source coordinate system. Y Specifies the Y-coordinate in the source coordinate system. ResXPtr Specifies the address in which to write the resulting X-coordinate. This coordinate is given in the coordinate system that is specified in the Destination parameter. ResYPtr Specifies the address in which to write the resulting Y-coordinate. This coordinate is given in the coordinate system that is specified in the Destination parameter. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - RegResultId - Source For the source coordinate system - Destination For the destination coordinate system - X - Y - ResXPtr - ResYPtr - ControlFlag Compilation information ",
      "wordCount": 396,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregTransformCoordinateList",
      "version": null,
      "title": "MregTransformCoordinateList",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregTransformCoordinateList.htm",
      "text": " MregTransformCoordinateList Synopsis Convert a list of coordinates between two of the following coordinate systems: the global pixel coordinate system, any registered image's pixel coordinate system, and the mosaic's coordinate system. Syntax void MregTransformCoordinateList( MIL_ID&nbsp;RegResultId, //in MIL_INT&nbsp;Source, //in MIL_INT&nbsp;Destination, //in MIL_INT&nbsp;NumPoints, //in const MIL_DOUBLE&nbsp;*SrcCoordXArrayPtr, //in const MIL_DOUBLE&nbsp;*SrcCoordYArrayPtr, //in MIL_DOUBLE&nbsp;*DstCoordXArrayPtr, //out MIL_DOUBLE&nbsp;*DstCoordYArrayPtr, //out MIL_INT64&nbsp;ControlFlag //in ) Description Convert a list of coordinates between two of the following coordinate systems: the global pixel coordinate system, any registered image's pixel coordinate system, and the mosaic's coordinate system. Parameters Parameters RegResultId Specifies the registration result buffer that contains the information that will be used to transform the coordinates. The registration result buffer must have been previously allocated on the required system using MregAllocResult() or restored from a file using MregRestore(). Source Specifies the source coordinate system. This parameter must be set to one of the following values: For the source coordinate system Value Description M_MOSAIC Specifies to use the coordinate system relative to which the mosaic will be composed. This coordinate system was specified using MregControl() with M_MOSAIC_STATIC_INDEX. M_REGISTRATION_GLOBAL Specifies the global pixel coordinate system. Value Specifies the index of the registration result element associated with the image whose coordinate system to use. Destination Specifies the destination coordinate system. This parameter must be set to one of the following values: For the destination coordinate system Value Description M_MOSAIC Specifies to use the coordinate system relative to which the mosaic will be composed. This coordinate system was specified using MregControl() with M_MOSAIC_STATIC_INDEX. M_REGISTRATION_GLOBAL Specifies the global pixel coordinate system. Value Specifies the index of the registration result element associated with the image whose coordinate system to use. NumPoints Specifies the number of points in the coordinate list. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the SrcCoordXArrayPtr or SrcCoordYArrayPtr parameter. SrcCoordXArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the address of the array of the X-coordinates in the source coordinate system. SrcCoordYArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the address of the array of the Y-coordinates in the source coordinate system. DstCoordXArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the address in which to write the resulting X-coordinate. This coordinate is given in the coordinate system that is specified in the Destination parameter. DstCoordYArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) Specifies the address in which to write the resulting Y-coordinate. This coordinate is given in the coordinate system that is specified in the Destination parameter. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - RegResultId - Source For the source coordinate system - Destination For the destination coordinate system - NumPoints - SrcCoordXArrayPtr - SrcCoordYArrayPtr - DstCoordXArrayPtr - DstCoordYArrayPtr - ControlFlag Compilation information ",
      "wordCount": 598,
      "subEntries": []
    },
    {
      "id": "Reference_reg_MregTransformImage",
      "version": null,
      "title": "MregTransformImage",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\reg\\MregTransformImage.htm",
      "text": " MregTransformImage Synopsis Composes a mosaic from the specified source images and stores it in the destination image buffer. Syntax void MregTransformImage( MIL_ID&nbsp;RegResultId, //in const MIL_ID&nbsp;*ImageOrContainerArrayPtr, //in MIL_ID&nbsp;DestImageBufId, //in MIL_INT&nbsp;NumImages, //in MIL_INT64&nbsp;InterpolationMode, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function composes a mosaic from the specified source images and stores it in the destination image buffer. The source images are transformed according to the results, stored in the registration result buffer, that were calculated during the MregCalculate() operation. Each source image is associated with the registration result element with the same index. For example, the third image in the array (or the third image buffer component in the container) is associated with the third registration result element. Note that for the image to appear at the correct location in the mosaic, its index in the array or its component index must match the index of the registration result element containing the image's transformation. When using an image buffer array, it is possible to use some images and omit others when composing the mosaic. In this case, replace the images that you want to omit by M_NULL in the image buffer array. It can be useful to omit images from a mosaic if you want to add images to a preexisting mosaic, for example. In this case, replace all the images in the array by M_NULL, except the ones to add, and call MregTransformImage() with the preexisting mosaic passed in DestImageBufId. When composing the mosaic, you can control how it will appear in the destination image buffer. You can specify which image to place first, using M_MOSAIC_STATIC_INDEX. This image will be placed upright and will not be scaled. The other images in the mosaic will be positioned relative to this image's pixel coordinate system. In addition, you can also adjust the vertical and horizontal offsets between the origin of the mosaic's coordinate system and the origin of the destination image buffer, using MregControl() with M_MOSAIC_OFFSET_X and M_MOSAIC_OFFSET_Y. Parameters Parameters RegResultId Specifies the identifier of the registration result buffer with which to perform the mosaicing operation. The registration result buffer must have been previously allocated or restored on the required system using MregAllocResult() or MregRestore(), respectively. ImageOrContainerArrayPtr Accepts the address of one of the following: array of type MIL_ID [optionally, in C++: a reference to a constant std::vector&lt;MIL_ID&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumImages) MIL_ID Specifies the address of the array containing the buffer identifiers of the input images or specifies the address of the variable containing the identifier of the image buffer container. When using an array of individual image buffers, to omit images from the mosaic, replace their identifiers with M_NULL in the array. When using a container, you cannot specify a null image. These images must not have a region of interest (ROI) associated with them. Using images with an ROI will cause an error. DestImageBufId Specifies the destination image buffer that will contain the mosaic after the MregTransformImage() operation is performed. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. NumImages Specifies the size of the specified image buffer array, or specifies the number of image buffer components in the specified image buffer container. If unused, set this parameter to M_NULL. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the ImageOrContainerArrayPtr parameter. InterpolationMode Specifies the interpolation mode. This parameter must be set to one of the values below. For specifying the interpolation mode Value Description M_DEFAULT Same as M_NEAREST_NEIGHBOR + M_OVERSCAN_ENABLE. M_BICUBIC Specifies bicubic interpolation. The new value is determined by taking a weighted average of the 16 values (4x4) that surround the source point. Note that the sum of the weights used for bicubic interpolation might be greater than one. If this occurs and the result reflects an overflow or underflow, the result is saturated according to the depth and data type of the destination buffer. M_BILINEAR Specifies bilinear interpolation. The new value is determined by taking a weighted average of the 4 values (2x2) that surround the source point. M_NEAREST_NEIGHBOR Specifies nearest neighbor interpolation. The new value is that of the pixel closest to the source point. Combination values for any of the possible values of the InterpolationMode parameter. You can add one of the following values to the above-mentioned values to specify the type of overscan to use for a destination pixel when its associated point falls outside the source buffers. For overscan Combination value Description M_OVERSCAN_CLEAR Sets the destination pixel to 0. M_OVERSCAN_DISABLE Leaves the destination pixel as is. M_OVERSCAN_ENABLE Uses pixels from the source buffer's ancestor buffer. If the source buffer is not a child buffer or if the point falls outside all of the ancestor buffers, it leaves the destination pixel as is. This is the default value. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; milreg.lib. DLL Requires mil.dll; milreg.dll. Syntax Description Parameters - RegResultId - ImageOrContainerArrayPtr - DestImageBufId - NumImages - InterpolationMode For specifying the interpolation mode + For overscan - ControlFlag Compilation information ",
      "wordCount": 885,
      "subEntries": []
    }
  ]
}]