[{
  "id": "Readme_linux",
  "version": "2023100322",
  "title": "linux",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Readme_linux_MilLinux",
      "title": "MilLinux",
      "location": "MIL Release Notes",
      "pageURL": "\\linux\\MilLinux.htm",
      "text": " ------------------------------------------------------------------------------- Matrox Imaging Library (MIL) X Version 23H1 for Linux Release Notes (MilLinux) August 2023 (c) Copyright Matrox Electronic Systems Ltd., 1992-2023. ------------------------------------------------------------------------------- This document outlines limitations and notes when using MIL under Linux. Contents: 1. What's new in MIL X 23H1 (10.53) for Linux 2. Conventions 3. Installation 4. Supported distributions 5. Packages required 6. Recompiling examples 7. Licensing 8. Intellicam utility and the MIL Processing GUIs 9. Display 10. Boards and drivers 10.1 Matrox Radient 10.1.1 Serial port 10.2 Matrox GigE Vision 10.2.1 Bandwidth optimisation 10.2.2 Firewall 10.2.3 Multiple Interfaces 10.2.3.1 Ubuntu 10.2.3.2 RHEL 10.2.4 Configuration Notes 10.2.5 Camera Discovery 10.3 Matrox Clarity UHD 10.4 Video 4 Linux 2 (V4L2) 10.5 USB3 Vision 11. Security and permissions. 12. SecureBoot 13. Configuration 14. Firewall 15. Using MIL in a deamon/service 15.1 Services started using initd 15.2 Services started using systemd 16. .NET 6.0 support 16.1 Installing MIL for .NET 16.1.1 .NET is installed before MIL 16.1.2 .NET is installed after MIL 16.2 Compiling C# examples 17. Arm support 17.1 Tested hardware and distributions 17.2 Licenses 17.3 Know limitations ------------------------------------------------------------------------------- 1 - What's new in MIL X 23H1 (10.53) for Linux * Added support for ARM platforms (see section 17) * Now using GenICam 3.4 * Added support for Video4Linux2: MsysAlloc(M_SYSTEM_V4L2...) Note that it is based on Service Pack 5. 2. Conventions * Command lines starting with # must be executed with root permissions, either as the root user or using the sudo command. Command lines starting with $ can be executed without root permissions. 3. Installation * Before installing MIL, make sure the required packages are installed; see &quot;Section 4. Packages required&quot; in this readme file. * If you use sudo and wish to use the graphical installer, you may need to execute the following command prior to starting the installation: $ xhost si:localuser:root This will be necessary on a default installation of RHEL but not on a default installation of Ubuntu. * To install MIL, execute the following command: # sh ./mil-10.YY_XXXX-installer64.run Whereas, to install MIL-Lite, execute the following command: # sh ./mil-lite-10.YY_XXXX-installer64.run Replace YY.XXXX with the MIL build number. * During installation, a new group named mil is added to the /etc/group file, and you will be prompted to add at least one valid user to this group. Any user in this group can change the MIL configuration using the MILConfig utility (modify examples, recompile MIL drivers, and manage the Distributed MIL services). Note that you don't need to add the root user to the mil group. * During installation, MIL drivers will be compiled to match the version of the running kernel. After installation, any user in the mil group can recompile the drivers by accessing the &quot;Driver Status&quot; page of the MILConfig utility, and then clicking on the &quot;Compile Drivers&quot; button. Note : Ubuntu will silently keep the kernel up to date. When an update happens, the MIL drivers will need to be recompiled in order to be loaded by the new kernel. If the drivers do not load, check Drivers Status under Boards in MILConfig. * To uninstall MIL completely, execute the following command (as root): # /opt/matrox_imaging/tools/mil-uninstall.sh 4. Supported distributions On Intel Platforms Red Hat Enterprise 8.6, 9.0 64-bit Ubuntu LTS 20.04, 22.04 64-bit SUSE Enterprise 15 SP4 64-bit 5. Packages required Typically, MIL requires the following packages to run under each supported Linux distribution. You will not be able to install MIL if these packages are not installed: Ubuntu 20.04 and 22.04 Runtime: setserial, libgconf-2-4 Development or Drivers compilation : build-essential Optional: needed for some features, examples, etc: python3-pip libncurses5-dev, libwebkit2gtk-4.0-dev, python3-tk, libcanberra-gtk3-dev, qt5-qmake, elfutils, ibqt5x11extras5-dev, python3-matplotlibrary Installation command to use to install the packages: CLI: apt-get For example: apt-get install setserial GUI: synaptic (Menu System-&gt;Administration-&gt;Synaptic Package Manager) Red Hat Enterprise 8.0 Development or Drivers compilation : Choose &quot;Software Development&quot; during the installation Optional: needed for some features, examples, etc: cairo-devel elfutils-devel gtk3-devel.x86-64 gvfs-devel mesa-libGLU-9.0.0-15.el8.x86_64 ncurses-devel python3-matplotlib python3-pip python3-tkinter qt5-qtbase-devel qt5-qtx11extras-devel.x86_64 setserial webkit2gtk3-devel.x86_64 Red Hat Enterprise 9.0 Development or Drivers compilation : Choose &quot;Software Development&quot; during the installation Optional: needed for some features, examples, etc: gtk3-devel mesa-libGLU ncurses-devel python3-pip python3-tkinter qt5-qtx11extras-devel setserial webkit2gtk3-devel.x86_64 xcb-util-image xcb-util-keysyms xcb-util-renderutil xcb-util-wm Installation command to use to install the package: CLI : rpm For example: rpm -Uvh package_name.rpm SUSE Enterprise Development or Drivers compilation : Choose &quot;C/C++ Compiler and Tools &quot; during the installation Optional: needed for some features, examples, etc: elfutils gtk3-devel gvfs-backends kernel-devel Kernel-source libcanberra-gtk3-devel libelf-devel libqt5-qtbase-devel libqt5-qtx11extras-devel libXss1 lsb-release ncurses5-dev python3-matplotlib python3-tk setserial webkit2gtk3-devel Installation command to use to install the package: GUI : yast (Applications-&gt;System Tools-&gt;YaST-&gt;Software Management) If you want to recompile the Gtk and Qt examples, the following packages must be installed: * gtk3-devel * qt5-devel You might need to install additional packages, depending on the following: * The installed edition of Linux (Desktop Edition/Alternate Edition/ Server Edition). * The installed distribution of Linux is an unsupported distribution. 6. Recompiling examples * If you want to recompile the C++ examples in the installation directory, open a console window and type: $ cd $MILDIR/examples $ make clean; make * The first example that you should try running is: $ cd MappStart/C++ $ ./MappStart 7. Licensing * The Matrox Concord G-series cannot be used as a fingerprint for licensing. 8. Intellicam utility and the MIL Processing GUIs * The Intellicam utility and the MIL Processing GUIs are not supported under Linux. 9 Display * Buffers with the attributes M_DIB, M_DIRECTX, and/or M_VIDEO_MEMORY are not supported. * When using an exclusive display, if you obtain the message &quot;vcf exceeds monitor capabilities&quot; and you are using an old version of the Xorg server, make sure the &quot;Virtual&quot; option in the Display subsection of your xorg.conf file is set appropriately. This option sets the maximum size of the virtual desktop, and should be set to a size that is at least as large as the exclusive display size, established by the selected VCF. In the following example, the virtual desktop size is 2048x2048: SubSection &quot;Display&quot; Depth 24 Modes &quot;1600x1200&quot; &quot;1280x1024&quot; &quot;1024x768&quot; &quot;800x600&quot; &quot;640x480&quot; # ADD A VIRTUAL LINE TO PROVIDE FOR THE LARGEST SCREEN YOU WILL HOTPLUG Virtual 2048 2048 .... Note that the maximum size of the virtual desktop depends on the amount of display memory. 10. Boards and drivers * The XEN kernels are not supported. 10.1 Matrox Radient 10.1.1 Serial ports * Matrox Radient has 1, 2, or 4 serial interfaces (each controlled by a UART); the number of serial interfaces depends on the version of the board. * By default, the standard Linux serial port driver does not properly identify the Matrox Radient serial interfaces. They will therefore not be available as /dev/ttyS* as ordinary serial port. The Radient or Radient eV-CL driver will create /dev/RadientS* or /dev/RadienteVCLS* device which can be used like any ttyS* 10.2 Matrox GigE Vision 10.2.1 Bandwidth optimisation If you are using a high bandwith camera, you should raise the MTU (Ethernet packet size) value above the 1500 default. The optimal value is dependant on your machines and network configuration. You can change this in NetworkManager on RedHat or Ubuntu. You can also use either of these two commands: # ifconfig eth0 mtu 9000 # ip link set eth0 mtu 9000 Of course, you should change eth0 for whichever interface your camera is connected to and 9000 for the value you want for the MTU. When running in a debugger, the camera heartbeat will be disabled (if supported) or increased to 5 minutes. 10.2.2 Firewall If your firewall is enabled, you will need to allow UDP packets coming from port 3956 (gvcp) to pass or MIL will not be able to detect cameras on your network. To do so, you can issue this command: # iptables -I INPUT 1 -p udp --sport gvcp -j ACCEPT This command will need to be done at every reboot. You will need to consult your distro's documentation to make it permanent. 10.2.3 Multiple Interfaces If you have more than one interfaces on the same subnet, as is the case when using multiple cameras with auto-ip (a 169.254.X.X address), you will need to configure a bridge between those interfaces. 10.3.3.1 Ubuntu Under Ubuntu, to make the change permanent you need to change /etc/network/interfaces with these lines: iface eth3 inet manual iface eth4 inet manual auto br0 iface br0 inet static bridge_ports eth3 eth4 address 169.254.5.67 broadcast 169.254.255.255 netmask 255.255.0.0 bridge_fd 0 Of course, you can have more than two interfaces in a bridge and you should change eth3 and eth4 for whichever interfaces your cameras are connected to. Your bridge doesn't have to be named br0. To make those change active you will need to restart your networking or reboot. 10.2.3.2 RHEL Under RHEL, You will need to add the file /etc/sysconfig/network-scripts/ifcfg-br0 with the following content: DEVICE=br0 TYPE=Bridge IPADDR=169.254.5.67 NETMASK=255.255.0.0 ONBOOT=yes BOOTPROTO=static NM_CONTROLLED=no DELAY=0 In addition, for every interfaces (ex: eth3, eth4 ...) you want part of this bridge, you will need to modify its configuration file (ex: /etc/sysconfig/network-scripts/ifcfg-Auto-eth3 or /etc/sysconfig/network-scripts/ifcfg-eth3 ). You will need to modify or add the following lines to set these variables to those values. BOOTPROTO=none NM_CONTROLLED=no BRIDGE=br0 To make those changes active you will need to restart your networking or reboot. 10.2.4 Configuration Notes We noted that under SUSE the link-local (Zeroconf) configuration option doesn't seems to always optain an IP address. You might want to use a static IP configuration instead. 10.2.5 Camera Discovery The detection of newly connected or disconnected cameras may take up to 1 minute from the moment network connection is properly established or lost. 10.3 Matrox Clarity UHD Limitation: Matrox Clarity UHD support in Ubuntu 20.04 is only with kernel 5.4. The driver will not compile with newer kernel versions. 10.4 Video 4 Linux 2 (V4L2) MIL now supports compatible Video 4 Linux 2 devices. Limitation: Not all V4L2 image formats are supported by MIL Some cameras may not have ANY MIL-supported formats. Multiple cameras with autofocus/autolighting or similar features will require grabbing a few frames before obtaining a clear picture. Limitation: The MIL feature browser does not support V4L2. 10.5 USB3 Vision Due to some limitation only one process can use a USB3 Vision system at a time. It is also possible that some other programs, like camera manufacture software, interfere with the usage of USB3 Vision camera by MIL. 11. Security and permissions * To prevent permission access errors, two users should not be running MIL at the same time on the same computer. * Note that the MIL installer changes the sudo configuration file (/etc/sudoers) so that MIL can shutdown a user's computer after updating the firmware of their installed Matrox Imaging boards. Changing the configuration file is required because when you run a MIL example/application, MIL automatically detects whether the firmware of each installed Matrox Imaging board is up-to-date. If it is not, MIL will update the firmware of the board and then request to shutdown the computer. If the current user does not have sufficient privileges, they will not be able to proceed with the required shutdown and the current example/application will wait indefinitely. After uninstalling MIL, the sudo configuration file is restored. * If you get SELinux errors, execute the following command: # mil-selinux This will fix the SELinux context of the MIL *.lib files. 12. SecureBoot Kernel modules must be signed if Secure Boot is enabled in the UEFI BIOS in order for them to be loaded. You can check the status of MIL’s kernel modules (i.e., drivers) through MILConfig’s Drivers compilation page. The steps below are to self-sign the MIL kernel modules: * Generate a custom x509 key: &gt; openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -subj &quot;/CN=Owner/&quot; Keep it for reference in order to later sign the kernel modules. * Enroll the new key &gt; sudo mokutil --import MOK.der This will request the public key to be added to the MOK ( Machine Owner Key) - Sign the kernel modules &gt; for f in /opt/matrox_imaging/drivers/modules/custom/$(uname -r)/*.ko; do sudo /lib/modules/$(uname -r)/build/scripts/sign-file sha256 ~/MOK.priv ~/MOK.der $f;done * reboot After reboot, a dialog will appear to accept enrolling the new MOK key ( MokManager). (Use the password used to import the MOK key) Notes: - The kernel modules must be re-signed each time the Linux kernel is updated. Again, check MILConfig’s Drivers compilation for the status. For more information on how to sign kernel modules, see the man pages for mokutil or the web site for your Linux distribution. 13. Configuration * To establish the Linux ttyS port corresponding to a Matrox Solios or Morphis board's serial interface (UART), do the following: 1. Identify the address of the required board's serial interface. To do so, type 'lspci -v -d 102b:*' on a command line. This command lists all the Matrox PCI devices installed in your computer (Matrox vendor number is 102b): 05:04.0 Signal processing controller: Matrox Graphics, Inc. Device 47c1 (rev 03) Subsystem: Matrox Graphics, Inc. Device 4d80 Flags: bus master, medium devsel, latency 64, IRQ 16 Memory at d4000000 (64-bit, prefetchable) [size=1M] Memory at e0000000 (64-bit, prefetchable) [size=256M] Capabilities: &lt;access denied&gt; Kernel driver in use: Solios 05:04.1 Serial controller: Matrox Graphics, Inc. Device 47c2 (rev 02) (prog-if 02) Subsystem: Matrox Graphics, Inc. Device 47c8 Flags: medium devsel, IRQ 17 I/O ports at ccf0 [size=8] Capabilities: &lt;access denied&gt; Kernel driver in use: serial 05:04.2 Serial controller: Matrox Graphics, Inc. Device 47c2 (rev 02) (prog-if 02) Subsystem: Matrox Graphics, Inc. Device 47c9 Flags: medium devsel, IRQ 17 I/O ports at ccf8 [size=8] Capabilities: &lt;access denied&gt; Kernel driver in use: serial Except for Matrox Radient, the serial interfaces of Matrox boards are seen as separate PCI devices from the acquisition section of the board. Although only the acquisition section (&quot;Signal processing controller&quot;) of the board is listed with the board name, you can establish the board of a serial interface (&quot;Serial controller&quot;) by matching the first four digits of its &quot;Serial controller&quot; listing with those of a &quot;Signal processing controller&quot; listing. In the above example, both serial interfaces are on a Matrox Solios board. From the listing of the required serial interface, establish the interface's address. The address of the serial interface is listed on the line that starts with &quot;I/O ports&quot;. In the listing above, the address of the second serial interface is ccf8. 2. Execute the following command: # cat /proc/tty/driver/serial This will list the usable ttyS ports on your computer. For example: 0: uart:16550A port:000003F8 irq:4 tx:1772 rx:0 RTS|DTR|DSR 1: uart:16550A port:0000CCF0 irq:17 tx:24 rx:0 CTS|DSR|CD 2: uart:16550A port:0000CCF8 irq:17 tx:24 rx:0 CTS|DSR|CD 3: uart:unknown port:000002E8 irq:3 The first number indicates the ttyS port that the line describes (for example, the first line describes ttyS0). The number after &quot;port:&quot; indicates the address of the serial interface mapped to the ttyS port. In the listing above, ttyS1 and ttyS2 correspond to the first (0xCCF0) and second (0xCCF8) serial interfaces on the Matrox Solios board, respectively. If there are enough ttyS ports, the address of the required board's serial interface should be listed. Take note of the ttyS port to which this address is mapped and use this port to access the serial interface. 3. If all ttyS ports are mapped to devices other than the required board's serial interface, you can either: - Increase the limit on the number of serial interfaces that your Linux kernel can access, and recompile the kernel. - Free a ttyS port and then remap it to your Matrox board's serial interface. To increase the limit on the number of serial interfaces that your Linux kernel can access and then use the required board's serial interface: a) Confirm that your Linux kernel was compiled with too few usable ttyS ports (usually 4). Look for CONFIG_SERIAL_8250_RUNTIME_UARTS in the config file of your running kernel, usually found under /boot/config-`uname -r` or /boot/.config. b) If this limit is lower than the number of required serial ports, you must recompile your kernel with a higher limit. Refer to your Linux documentation for instructions on how to do so. c) List the usable ttyS ports on your computer as you did above. The address of the required board's serial interface should now be listed, if there are enough ttyS ports. Take note of the ttyS port to which this address is mapped and use this port to access the serial interface. To free a ttyS port and then use it to access the required board's serial interface: a) Disable the serial interface currently mapped to the required ttyS port. To do so, add 'reserve=0xXXXX,YY' to the vmlinux line of the grub bootloader configuration file. Replace 0xXXXX with the address of the serial interface to disable (for example, 0xCCF8) and replace YY with the size (in bytes) of the I/O address space of the UART controlling the serial interface (for example, for a normal 16550 UART, it is 8). For example: kernel (hd1,0)/vmlinuz root=/dev/hdb8 vga=0x317 selinux=0 splash=silent resume=/dev/hdb5 desktop elevator=as showopts reserve=0xCCF8,8 b) Reboot your computer. The serial interface at the specified address will be disabled and the ttyS port will be remapped to the next serial interface, which hopefully is the Matrox serial interface that you want to use. c) List the usable ttyS ports on your computer as you did above. The address of the required board's serial interface should now be listed, if it was mapped to ttyS port that was freed. Use this ttyS port to access the serial interface. 14. Firewall * Some MIL network services require changes to the firewall settings to function correctly. Unlike Windows, the Linux MIL installer doesn't change the firewall rules, therefore the user must to do it manually using the iptables utility or a system configuration tool. Here is a list of MIL services and default TCP/IP ports (to be opened): Distributed MIL Master/Slave 57010 Distributed MIL Slave (Multiple clusters) 57000 to 57009 MIL Monitoring 57020 MIL Cluster Manager 57030 15. Using MIL in a deamon/service MIL applications need some environment variables. These are normally provided by the mil.sh script installed by the MIL setup program. Services/deamons run in an environ with a minimal set of environment variables and it may not be possible to use MIL in that case by default. 15.1 Services started using initd The init script of the service must source the /etc/profile.d/mil.sh file. 15.2 Services started using systemd The following entry must be added to the [Service] section of the systemd config file of the service EnvironmentFile=/etc/environment 16. .NET 6.0 support MIL for Linux provides a MIL for .NET wrapper and C# examples for Microsoft .NET 6.0. 16.1 Installing MIL for .NET There are two cases 16.1.1 .NET is installed before MIL Because sudo restricts the PATH environment variable, make sure the dotnet executable is located in one of these paths: /usr/local/bin, /usr/bin Note: You can also make a link with sudo ln -s /PathToDotNetBin /usr/local/bin/dotnet Because RedHat clears /usr/local/bin path when using sudo, you have to use /usr/bin instead: sudo ln -s /PathToDotNetBin /usr/bin/dotnet Launch the MIL setup and select the &quot;.Net and Scripting&quot; component. The setup will then install the MIL for .NET wrapper 16.1.2 .NET is installed after MIL Make sure the &quot;.Net and Scripting&quot; component was selected when MIL was installed then, after installing dotnet, add the MIL for .NET wrapper with this command: dotnet nuget add source /opt/matrox_imaging/mil/mil.net/NuGet --name mil.net To check MIL.net is successfully installed do : dotnet nuget list source mil.net will be listed 16.2 Compiling C# examples Compiling the MIL C# examples requires that dotnet be installed in /usr/share/dotnet directory or that the DOTNET_ROOT environment variable be exported. To compile all C# examples do : cd $MILDIR/examples make all_dotnet 17. Arm support 17.1 Tested hardware and distributions Raspberry Pi 4 Model B (minimum 4GB of RAM) Ubuntu LTS 20.04 64-bit NVIDIA Jetson Orin Ubuntu LTS 20.04 64-bit 17.2 Licenses 17.2.1 Hardware fingerprints supported for run-time licenses: Zebra Concord PoE and Zebra Rapixo CXP frame grabbers Zebra ID USB dongle Raspberry 4 Model B 17.2.2 Evaluation license The evaluation license requires the date and time be always correctly set, which requires the NTP service to be enabled and requires access to the time server (typically on the internet) 17.3 Know limitations When Raspberry PI is configured in multi-monitor mode, a crash can occur in OpenGL which adversely affects MIL 3D displays. ",
      "wordCount": 3384,
      "subEntries": []
    },
    {
      "id": "Readme_linux_NetworkConfigurationForGigEVision_pdf_redirect",
      "title": "NetworkConfigurationForGigEVision_pdf_redirect",
      "location": "MIL Release Notes",
      "pageURL": "\\linux\\NetworkConfigurationForGigEVision_pdf_redirect.htm",
      "text": " Redirecting to PDF in another tab (NetworkConfigurationForGigEVision). ",
      "wordCount": 9,
      "subEntries": []
    }
  ]
}]