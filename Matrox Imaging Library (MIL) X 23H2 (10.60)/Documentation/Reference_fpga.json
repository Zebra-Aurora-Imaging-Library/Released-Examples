[{
  "id": "Reference_fpga",
  "version": "2024020714",
  "title": "fpga",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\fpga\\ModuleInformation.htm",
  "text": " Mfpga functions Synopsis The functions prefixed with Mfpga make up the FPGA module. The FPGA module allows you to perform custom processing operations using an on-board Processing FPGA. Performing processing operations on-board frees up the Host for other tasks. You can allocate one or more command contexts to carry out a required operation using a specific processing unit (PU) on a target Processing FPGA. You can configure, link, and queue multiple commands, as well as store necessary information in PU user-specific registers. This module assumes that the appropriate FPGA configuration with the required PUs has been loaded into the Processing FPGA. For information on configuring a Processing FPGA and using this module, see Chapter 66: Using MIL with a Processing FPGA. Functions MfpgaCommandAlloc MfpgaCommandControl MfpgaCommandFree MfpgaCommandInquire MfpgaCommandQueue MfpgaControl MfpgaGetHookInfo MfpgaGetRegister MfpgaHookFunction MfpgaInquire MfpgaLoad MfpgaSetDestination MfpgaSetLink MfpgaSetRegister MfpgaSetSource ",
  "wordCount": 139,
  "subEntries": [
    {
      "id": "Reference_fpga_MfpgaCommandAlloc",
      "version": null,
      "title": "MfpgaCommandAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaCommandAlloc.htm",
      "text": " MfpgaCommandAlloc Synopsis Allocate an FPGA command context for a PU in the FPGA configuration loaded in a Processing FPGA on a target system. Syntax MIL_INT MfpgaCommandAlloc( MIL_ID&nbsp;MilSysId, //in MIL_INT&nbsp;DeviceNumber, //in MIL_INT&nbsp;FunctionId, //in MIL_INT&nbsp;SubFunctionId, //in MIL_INT64&nbsp;FunctionNumber, //in MIL_INT&nbsp;ExecutionMode, //in MIL_INT64&nbsp;ControlFlag, //in MIL_FPGA_CONTEXT&nbsp;*FpgaCommandContextPtr //out ) Description This function allocates an FPGA command context. An FPGA command context is used to contain the necessary command information to perform the required operation using the specified PU in a Processing FPGA on a target system, without writing it immediately to the target hardware. Note that the FPGA command context is valid only for the thread on which the current command context is allocated. It cannot be referenced by any other thread. Note that the FPGA module is not supported with Distributed MIL. After calling this function, you should ensure that the context was successfully allocated by verifying that the context handle is not M_NULL. For example, the context will not be allocated if the specified Processing FPGA does not contain the specified PU. Parameters Parameters MilSysId Specifies the identifier of the system that has the required Processing FPGA. DeviceNumber Specifies the Processing FPGA for which to allocate the command context. This parameter must be set to the following value: For specifying the rank of the Processing FPGA Value Description MIL system-specifictooltip (‡) M_DEVn Specifies the rank of the Processing FPGA on the board, where n can be a value between 0 and the total number of Processing FPGAs-1. ‡ FunctionId Specifies the function identifier of the required PU. The function identifier is specified in the header of the required PU's FPGA register file. Instead of directly using the function identifiers for Matrox PUs, you should use their provided equivalent FPGA constant, specified in the PU's reference description in the Matrox FPGA Component Reference. Note that the range of custom PU function identifiers is between 0xFC00 and 0xFFFF, inclusive. SubFunctionId Specifies the subfunction identifier of the required PU. Several different variations of a Matrox PU can exist, each with slightly different optimizations, functionalities, or restrictions. Each variation is given a subfunction identifier that uniquely identifies the variation. The subfunction identifier is specified in the header of the required PU's FPGA register file. You can set this parameter to one of the following: For specifying the subfunction identifier Value Description MIL system-specifictooltip (‡) M_DEFAULT Indicates that the subfunction identifier is ignored. Use this setting if the instances of the PU with the specified function identifier in your FPGA configuration all have the same subfunction identifier. Note that you should also use this setting when using a custom PU. ‡ Value &gt; 0 Specifies the subfunction identifier of the required PU. Note that only Matrox PUs have subfunction identifiers. For their identifiers, see the Matrox FPGA Component Reference. ‡ FunctionNumber Specifies the PU to use when two or more instances, with the same function identifier and subfunction identifier, are present in a FPGA configuration loaded in a Processing FPGA. This parameter can be set to the following value: For specifying the PU to use Value Description MIL system-specifictooltip (‡) M_DEFAULT Same as M_ANY. ‡ M_ANY Specifies that any of the PUs with the specified function identifier and subfunction identifier can be used. ‡ M_DEVn Specifies the rank of the PU in the FPGA configuration loaded in the Processing FPGA, where n represents the specific PU instance starting from 0. The higher the instance's register base address, the higher the rank. ‡ ExecutionMode Specifies how the processing operation should be issued on the system command queue. This parameter should be set to one of the following values: For specifying whether the processing operation is asynchronous or synchronous Value Description MIL system-specifictooltip (‡) M_ASYNCHRONOUS Specifies that, after the command is queued, the thread continues executing without waiting for the operation to complete. ‡ M_SYNCHRONOUS Specifies that, after the command is queued, the thread waits for the processing operation to complete before continuing. ‡ ControlFlag Reserved for future expansion. Set this parameter to M_DEFAULT. FpgaCommandContextPtr Specifies the address of the variable in which to write the handle of the FPGA command context. The command context is valid only for the thread on which the command context is allocated. It cannot be referenced by any other thread. Return value The returned value is M_VALID if allocation is successful. If allocation fails, M_NULL is returned. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - MilSysId - DeviceNumber For specifying the rank of the Processing FPGA - FunctionId - SubFunctionId For specifying the subfunction identifier - FunctionNumber For specifying the PU to use - ExecutionMode For specifying whether the processing operation is asynchronous or synchronous - ControlFlag - FpgaCommandContextPtr Return value Compilation information M_DEVn ",
      "wordCount": 791,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaCommandControl",
      "version": null,
      "title": "MfpgaCommandControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaCommandControl.htm",
      "text": " MfpgaCommandControl Synopsis Control a specified FPGA command context setting. Syntax void MfpgaCommandControl( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_INT64&nbsp;ControlType, //in const void&nbsp;*ControlValuePtr //in ) Description This function controls the various settings of the specified FPGA command context. To inquire information about an FPGA command context setting, see MfpgaCommandInquire(). To control or inquire about a general Processing FPGA setting, refer to MfpgaControl() or MfpgaInquire(), respectively. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU. ControlType Specifies the FPGA command context setting to control. See the Parameter associations section for possible values that can be specified. ControlValuePtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_INT Specifies the address of the variable which contains the value to assign to the command context setting. See the Parameter associations section for possible values that can be specified. Parameter associations The table below lists possible values for the ControlType and ControlValuePtr parameters. For controlling FPGA Command Settings For controlling FPGA Command Settings ControlType Description MIL system-specifictooltip (‡) ControlValuePtr M_COMPLETION_MODE Specifies how the processing operation should be issued on the system command queue. Note that this parameter overrides the setting specified using MfpgaCommandAlloc() with the ExecutionMode parameter. ‡ ControlValuePtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEFAULT Specifies that the command is queued according to the thread synchronization mode. See MthrControl() with M_THREAD_MODE. ‡ M_ASYNCHRONOUS Specifies that, after the command is queued, the thread continues executing without waiting for the operation to complete. ‡ M_SYNCHRONOUS Specifies that, after the command is queued, the thread waits for the processing operation to complete before continuing. ‡ Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - ControlType - ControlValuePtr Parameter Associations For controlling FPGA Command Settings Compilation information ",
      "wordCount": 316,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaCommandFree",
      "version": null,
      "title": "MfpgaCommandFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaCommandFree.htm",
      "text": " MfpgaCommandFree Synopsis Free an FPGA command context. Syntax MIL_INT MfpgaCommandFree( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function deallocates a previously allocated FPGA command context. The FPGA command context should be freed after an MfpgaCommandQueue() is issued. The processing operation that is associated with the command context, will complete its operation even if MfpgaCommandFree() is executed before processing is finished. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context to deallocate. The command context must have been previously allocated on the system using MfpgaCommandAlloc(). ControlFlag Reserved for future expansion. Set this parameter to M_DEFAULT. Return value The returned value is M_VALID if deallocation is successful. If deallocation fails, M_NULL is returned. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - ControlFlag Return value Compilation information ",
      "wordCount": 140,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaCommandInquire",
      "version": null,
      "title": "MfpgaCommandInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaCommandInquire.htm",
      "text": " MfpgaCommandInquire Synopsis Inquire about a specified FPGA command context setting. Syntax void MfpgaCommandInquire( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires information about a specified FPGA command context setting. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU. InquireType Specifies the type of setting about which to inquire. These inquire types correspond to register fields of the PU associated with the specified FPGA command context. This parameter can be set to one of the following values: See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] MIL_INT Specifies the address in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The table below lists possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For specifying the type of setting For specifying the type of setting InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_COMPLETION_MODE Inquires how the processing operation is issued on the system command queue. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_ASYNCHRONOUS Specifies that, after the command is queued, the thread continues executing without waiting for the operation to complete. ‡ M_SYNCHRONOUS Specifies that, after the command is queued, the thread waits for the processing operation to complete before continuing. ‡ M_FUNCTION_ID Inquires the PU's function identifier. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the PU's function identifier. ‡ M_NUMBER_OF_EVENTS Inquires the total number of interrupts that the PU can generate. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of interrupts the PU can generate. ‡ M_NUMBER_OF_INPUTS Inquires the total number of stream input ports. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of stream input ports. ‡ M_NUMBER_OF_OUTPUTS Inquires the total number of stream output ports. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the total number of stream output ports. ‡ M_PORT_NAME Inquires the name of the nth stream input or output port. You must specify a combination value from the following table: To specify the index of the stream input or output port to inquire ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfpgaCommandInquire ( M_PORT_NAME + M_INPUTn + M_STRING_SIZE ) Note: For an input port Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfpgaCommandInquire ( M_PORT_NAME + M_OUTPUTn + M_STRING_SIZE ) Note: For an output port Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ Value Specifies the name of the nth stream input or output port. ‡ Combination values for M_PORT_NAME. You must add one of the following values to the above-mentioned value to specify the index of the stream input or output port to inquire. For specifying which stream input or output port to inquire Combination value Description MIL system-specifictooltip (‡) M_INPUTn Specifies the stream input port at index n, where n is a number between 0 and the value returned by M_NUMBER_OF_INPUTS. ‡ M_OUTPUTn Specifies the stream output port at index n, where n is a number between 0 and the value returned by M_NUMBER_OF_OUTPUTS. ‡ Combination value for M_PORT_NAME. You can add the following value to the above-mentioned value to get the string's length. To retrieve the string size of a port name, you must also specify the required port index. For example, M_PORT_NAME + M_INPUTn + M_STRING_SIZE. For getting the string size InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - InquireType - UserVarPtr Parameter Associations For specifying the type of setting + For specifying which stream input or output port to inquire + For getting the string size Compilation information M_INPUTn M_OUTPUTn ",
      "wordCount": 830,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaCommandQueue",
      "version": null,
      "title": "MfpgaCommandQueue",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaCommandQueue.htm",
      "text": " MfpgaCommandQueue Synopsis Put an FPGA command on the system command queue of the current thread. Syntax void MfpgaCommandQueue( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_INT64&nbsp;CompletionMode, //in MIL_INT64&nbsp;QueueType //in ) Description This function sends the command, defined by the specified FPGA command context, to the system command queue of the current thread. The command will be executed when the target Processing FPGA hardware resources are available. If you link multiple command contexts, their commands should be gathered in a complex command, using MfpgaCommandQueue() with M_WAIT. Add the last command to the complex command using M_DISPATCH. If multiple commands are being dispatched at the same time (as in cascaded or parallel scenarios), then MIL uses the synchronous/asynchronous setting and the completion mode of the last command (that is, the one with the call to MfpgaCommandQueue() with M_DISPATCH). Set the completion mode for all other commands in the complex command to M_DEFAULT. Note that two commands can typically run at the same time if they do not reference the same buffer and use different FPGA components that can access their buffers using different paths. When a command is sent asynchronously, you can use MthrWait() with M_THREAD_WAIT to force the current thread to wait for the completion of all commands in the thread's system command queue. Alternatively, you can use MbufHookFunction() with M_MODIFIED_BUFFER to notify your MIL application when the operation has finished processing the image. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU, which defines the command. The command context must have been previously allocated on the system using MfpgaCommandAlloc(). CompletionMode Specifies when the processing operation will be tagged as completed. This parameter can be set to one of the following values. For specifying when the command is completed Value Description MIL system-specifictooltip (‡) M_DEFAULT Specifies the default value. If any of the processing operations have destination buffers, the default value will be M_DESTINATION_WRITTEN. If none of the processing operations have a destination buffer but at least support interrupts, then the default value will be M_PROCESSING_COMPLETED. If none of the processing operations have a destination buffer and none of the processing operations support interrupts, then the default value will be M_SOURCE_READ. ‡ M_DESTINATION_WRITTEN Specifies that the command is complete when all destination buffers are written. You should select this completion mode rather than M_PROCESSING_COMPLETED if you want to ensure that all Processing FPGA operations have completed and that the results are available to the Host. ‡ M_PROCESSING_COMPLETED Specifies that the command is complete when the PU generates its end-of-processing interrupt (interrupt 0). The end-of-processing interrupt only indicates that the PU's processing operations are complete but supplies no information on the transfer of resulting data. The PU must support interrupts to use this mode, otherwise an error will be generated. ‡ M_SOURCE_READ Specifies that the command is complete when all source buffers have been read. ‡ QueueType Specifies whether MfpgaCommandQueue() should load the current command (or complex command) into hardware or store it into a complex command. This parameter can be set to one of the following: For specifying how to handle the current command Value Description MIL system-specifictooltip (‡) M_DEFAULT Same as M_DISPATCH. ‡ M_DISPATCH Informs the MIL driver that subsequent commands are not related to the current one. MfpgaCommandQueue() will send the current command to the system command queue. If multiple related commands are gathered in a complex command, then MfpgaCommandQueue() will add the current command to the complex command and then send the complex command to the system command queue. Processing will start immediately if the system command queue is empty and the required Processing FPGA resources are available. ‡ M_WAIT Informs the MIL driver to wait for other commands, using MfpgaCommandQueue(), before being queued in the system command queue. The current command is stored in a complex command. The driver expects to gather multiple commands into a complex command until a command is sent using MfpgaCommandQueue() with M_DISPATCH. ‡ Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - CompletionMode For specifying when the command is completed - QueueType For specifying how to handle the current command Compilation information ",
      "wordCount": 694,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaControl",
      "version": null,
      "title": "MfpgaControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaControl.htm",
      "text": " MfpgaControl Synopsis Controls a global setting of a specified Processing FPGA. Syntax MIL_INT MfpgaControl( MIL_ID&nbsp;MilSystemId, //in MIL_INT&nbsp;FpgaDeviceNumber, //in MIL_INT64&nbsp;ControlType, //in const void&nbsp;*ControlValuePtr //in ) Description This function controls global settings of a specified Processing FPGA. See MfpgaCommandControl() to retrieve information about a specific command context. Parameters Parameters MilSystemId Specifies the identifier of the system that has the required Processing FPGA. FpgaDeviceNumber Specifies the Processing FPGA on the system to control. This parameter must be set to the following value: For specifying the rank of the Processing FPGA Value Description MIL system-specifictooltip (‡) M_DEVn Specifies the rank of the Processing FPGA to control, where n can be a value between 0 and the total number of Processing FPGAs-1. ‡ ControlType Specifies the Processing FPGA setting to control. See the Parameter associations section for possible values that can be specified. ControlValuePtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_INT Specifies the value to assign to the Processing FPGA setting. See the Parameter associations section for possible values that can be specified. Parameter associations The table below lists possible values for the ControlType and ControlValuePtr parameters. For controlling Processing FPGA settings For controlling Processing FPGA settings ControlType Description MIL system-specifictooltip (‡) ControlValuePtr M_ERROR Sets whether basic parameter checking occurs. Note that, if enabled, this will also report errors when attempting to associate a command context to a PU not in the FPGA configuration, and when attempting to use an invalid interrupt. ‡ ControlValuePtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_DEFAULT Same as M_PRINT_ENABLE. ‡ M_PRINT_DISABLE Disables printing of error messages. ‡ M_PRINT_ENABLE Enables printing of error messages. ‡ Return value The returned value is M_VALID if successful. If the operation fails, M_NULL is returned. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - MilSystemId - FpgaDeviceNumber For specifying the rank of the Processing FPGA - ControlType - ControlValuePtr Parameter Associations For controlling Processing FPGA settings Return value Compilation information M_DEVn ",
      "wordCount": 352,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaGetHookInfo",
      "version": null,
      "title": "MfpgaGetHookInfo",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaGetHookInfo.htm",
      "text": " MfpgaGetHookInfo Synopsis Get information about a PU hook event. Syntax MIL_INT MfpgaGetHookInfo( MIL_ID&nbsp;EventId, //in MIL_INT64&nbsp;InfoType, //in void&nbsp;*UserVarPtr //out ) Description This function allows you to get information about the event that caused the hook-handler function to be called. The MfpgaGetHookInfo() function should only be called within the scope of a PU hook-handler function (see MfpgaHookFunction()). Parameters Parameters EventId Specifies the PU event identifier received by the hook-handler function (see MfpgaHookFunction()). InfoType Specifies the type of information to get. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_INT Specifies the address in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The table below lists possible values for the InfoType parameter and possible values returned to the UserVarPtr parameter. For inquiring information For inquiring information InfoType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_FPGA_DEVICE_NUMBER Retrieves the device number of the Processing FPGA that contains the PU that triggered the event. This value corresponds to the rank of the Processing FPGA on the board, starting from 0. If there is only one Processing FPGA on-board, then this value will be set to 0 by default. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_FUNCTION_ID Retrieves the function identifier of the PU that triggered the event. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_INSTANCE_ID Retrieves the rank of the instance of the PU that triggered the event, when two or more instances, with the same function and subfunction identifier, are present in the loaded FPGA configuration. This value starts at 0. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_SUB_FUNCTION_ID Retrieves the subfunction identifier of the PU that triggered the event. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ M_TIME_STAMP Retrieves the time stamp of the event. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE ‡ Return value The returned value is M_NULL if successful. If the operation fails, a non-null (!M_NULL) value is returned. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - EventId - InfoType - UserVarPtr Parameter Associations For inquiring information Return value Compilation information ",
      "wordCount": 444,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaGetRegister",
      "version": null,
      "title": "MfpgaGetRegister",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaGetRegister.htm",
      "text": " MfpgaGetRegister Synopsis Set up a request to read registers of a PU. Syntax void MfpgaGetRegister( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_INT64&nbsp;RegisterSection, //in MIL_INT&nbsp;Offset, //in MIL_INT&nbsp;Length, //in void&nbsp;*ValuePtr, //out MIL_INT64&nbsp;ReadAccessFlag //in ) Description This function sets up a request to read registers of the PU associated with the specified command context. A maximum of four MfpgaGetRegister() calls can be made with any FPGA command context, although you can return the contents of multiple registers with each call. For a Matrox PU, you should consult the register file of the PU in the Matrox FPGA Components Reference. You can specify whether read accesses will be collected and made before processing or after the PU issues its end-of-processing interrupt. For Matrox PUs and custom PUs created using the Matrox Processing Unit Designer, a C structure is created to represent each register of the PU. The structures are supplied in header files (fpga_*.h), located in the \\Matrox Imaging\\MIL\\Examples\\SoliosFDK\\Include directory for Matrox Solios and in the Matrox Imaging\\radient\\src\\headers\\local\\fpga_*.h directory for Matrox Radient. You must include the appropriate header file to use the structures. See the Setting and retrieving results from PU registers section of Chapter 66: Using MIL with a Processing FPGA for more information on the Matrox register structure. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU. The command context must have been previously allocated on the system using MfpgaCommandAlloc(). RegisterSection Specifies the section of the PU's register space to access. You must set this parameter to the following value: For register space access Value Description MIL system-specifictooltip (‡) M_USER Specifies to access the user-specific section of the PU's register space. ‡ Offset Specifies the offset from the start of the specified register section, from which to begin reading, in bytes. The offset must be a multiple of 4 bytes. Length Specifies how many bytes of the register to read. The length must be a multiple of 4 bytes. ValuePtr Specifies the address of the variable in which to write the value read from the register. This address must remain valid for the duration of the operation, otherwise a memory corruption will occur. ReadAccessFlag Specifies when the register read access must take place. This parameter must be set to one of the following values: For specifying when to read the register Value Description MIL system-specifictooltip (‡) M_WHEN_COMPLETED Accesses the registers after the PU finishes processing (according to MfpgaCommandQueue() completion mode). ‡ M_WHEN_DISPATCHED Accesses the registers during PU setup, prior to the start of processing. ‡ Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - RegisterSection For register space access - Offset - Length - ValuePtr - ReadAccessFlag For specifying when to read the register Compilation information ",
      "wordCount": 459,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaHookFunction",
      "version": null,
      "title": "MfpgaHookFunction",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaHookFunction.htm",
      "text": " MfpgaHookFunction Synopsis Hook a function to an event generated by a PU on a target system. Syntax void MfpgaHookFunction( MIL_ID&nbsp;MilSystemId, //in MIL_INT&nbsp;DeviceNumber, //in MIL_INT&nbsp;FunctionId, //in MIL_INT&nbsp;SubFunctionId, //in MIL_INT64&nbsp;FunctionNumber, //in MIL_INT&nbsp;HookType, //in MIL_FPGA_HOOK_FUNCTION_PTR&nbsp;HookHandlerPtr, //in void&nbsp;*UserDataPtr //in-out ) Description This function allows you to attach or detach a user-defined function to an event generated by a specified PU in the FPGA configuration loaded in a Processing FPGA on a target system. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. You can only hook one function to an event; additional hooks that are attached to the same event will not be handled. Parameters Parameters MilSystemId Specifies the identifier of the system that has the required Processing FPGA. DeviceNumber Specifies the Processing FPGA on the system which has the required PU. This parameter must be set to the following value: For specifying the rank of the Processing FPGA Value Description MIL system-specifictooltip (‡) M_DEVn Specifies the rank of the Processing FPGA on the board, where n can be a value between 0 and the total number of Processing FPGAs-1. ‡ FunctionId Specifies the function identifier of the PU. The function identifier is specified in the header of the target PU's FPGA register file. For the function identifiers of Matrox PUs, see the Matrox FPGA Component Reference. Note that the range of custom PU function identifiers is between 0xFC00 and 0xFDFF, inclusive. This parameter can be set to one of the following values: For specifying the function identifier Value Description MIL system-specifictooltip (‡) M_DEFAULT Specifies the default function identifier. You can specify M_DEFAULT if the HookType parameter is set to M_INTERRUPT_OVERRUN. ‡ Value &gt; 0 Specifies the function identifier of the required PU. ‡ SubFunctionId Specifies the subfunction identifier of the PU. Several different Matrox PUs can exist, each with slightly different optimizations, functionalities, or restrictions. Each variation is given a number called a subfunction identifier that uniquely identifies the variation. The subfunction identifier is specified in the header of the target PU's FPGA register file. You can set this parameter to one of the following: For specifying the subfunction identifier Value Description MIL system-specifictooltip (‡) M_DEFAULT Specifies the default subfunction identifier. Use this setting if the instances of the PU with the specified function identifier in your FPGA configuration all have the same subfunction identifier. You should also use this setting if you are using a custom PU. ‡ Value &gt; 0 Specifies the subfunction identifier of the required PU. For the subfunction identifiers of Matrox PUs, see the Matrox FPGA Component Reference. ‡ FunctionNumber Specifies the specific PU instance on which to hook a function if two or more instances are present in the FPGA configuration, loaded on the Processing FPGA. This parameter can be set to the following value: For specifying the rank of a PU Value Description MIL system-specifictooltip (‡) M_DEFAULT Specifies the default instance of a PU on which to hook a function. You can specify M_DEFAULT if you have selected M_INTERRUPT_OVERRUN as your HookType. ‡ M_DEVn Specifies the rank of the PU in the FPGA configuration loaded on the Processing FPGA, where n represents the specific PU instance and starts at 0. The higher the instance's base address, the higher the index. ‡ HookType Specifies the Processing FPGA event type. Note that the event type count starts at 0x1, whereas interrupts are numbered starting at 0. This parameter can be set to one of the following: For specifying the Processing FPGA event type Value Description MIL system-specifictooltip (‡) M_END_OF_PROCESSING Calls the hook-handler function whenever the specified PU generates an end-of-processing interrupt (or an interrupt on interrupt 0). ‡ M_INTERRUPT_OVERRUN Calls the hook-handler function if the end-of-processing interrupt is signaled before the previous one is serviced by the driver. ‡ 0x01 Calls the hook-handler function if the PU's interrupt 0 is raised. Same as M_END_OF_PROCESSING. ‡ 0x02 Calls the hook-handler function if the PU's interrupt 1 is raised. ‡ 0x04 Calls the hook-handler function if the PU's interrupt 2 is raised. ‡ 0x08 Calls the hook-handler function if the PU's interrupt 3 is raised. ‡ 0x10 Calls the hook-handler function if the PU's interrupt 4 is raised. ‡ 0x20 Calls the hook-handler function if the PU's interrupt 5 is raised. ‡ 0x40 Calls the hook-handler function if the PU's interrupt 6 is raised. ‡ Combination value for the values listed in For specifying the Processing FPGA event type. You can add the following value to the above-mentioned values to specify to unhook a function. For unhooking a function Combination value Description MIL system-specifictooltip (‡) M_UNHOOK Unhooks the specified function if hooked to the specified event. When you use M_UNHOOK, you must provide the same values for all the parameters as when you originally hooked the function. ‡ HookHandlerPtr Specifies the address of the function that should be called when an event occurs. The hook-handler function, pointed to by HookHandlerPtr, must be declared as follows: MIL_INT MFTYPE HookHandler( MIL_INT HookType, MIL_ID EventId, void *UserDataPtr ) Parameters HookType Type of event hooked. EventId Event identifier to pass to MfpgaGetHookInfo() when inquiring about the hooked event. UserDataPtr Data pointer that was passed to MfpgaHookFunction(). Note that the HookHandlerPtr function can have any name. Upon successful completion, the hook-handler function should return M_NULL. Note, MFTYPE and MFPGAHOOKFCTPTR are reserved MIL predefined types for functions and data pointers, respectively. UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if not used. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - MilSystemId - DeviceNumber For specifying the rank of the Processing FPGA - FunctionId For specifying the function identifier - SubFunctionId For specifying the subfunction identifier - FunctionNumber For specifying the rank of a PU - HookType For specifying the Processing FPGA event type + For unhooking a function - HookHandlerPtr - UserDataPtr Compilation information M_DEVn ",
      "wordCount": 1013,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaInquire",
      "version": null,
      "title": "MfpgaInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaInquire.htm",
      "text": " MfpgaInquire Synopsis Inquire global information about a specified Processing FPGA. Syntax MIL_INT MfpgaInquire( MIL_ID&nbsp;MilSystemId, //in MIL_INT&nbsp;FpgaDeviceNumber, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires global information about a Processing FPGA, including all loaded processing units (PUs) and transfer units (TUs). See MfpgaCommandInquire() to retrieve information about a specific command context. Parameters Parameters MilSystemId Specifies the identifier of the system that has the required Processing FPGA. FpgaDeviceNumber Specifies the Processing FPGA to inquire. This parameter must be set to the following value: For specifying the rank of the Processing FPGA Value Description MIL system-specifictooltip (‡) M_DEVn Specifies the rank of the Processing FPGA about which to inquire, where n can be a value between 0 and the total number of Processing FPGAs-1. ‡ InquireType Specifies the information about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] MIL_INT Specifies the address at which to write the requested information. Since the MfpgaInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The table below lists possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For FPGAs For FPGAs InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_FPGA_CONFIGURATION_FILENAME Inquires the string containing identifying information about the file name of the Processing FPGA configuration. The information consists of the location of the file (its path), followed by the name of the file (for example, \"C:\\mydirectory\\myfile\"). For a file on the remote computer (under Distributed MIL), the path and file name will be preceded by \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfpgaInquire ( M_FPGA_CONFIGURATION_FILENAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"String\") 1 Specifies the string containing information about the file name. ‡ M_FPGA_PACKAGE_NAME Inquires the string containing identifying information about the Processing FPGA on your board. The information consists of the specific package name, followed by an underscore, followed by the speed grade. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfpgaInquire ( M_FPGA_PACKAGE_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ MIL_TEXT(\"String\") 1 Specifies the string containing information about the Processing FPGA. ‡ M_NUMBER_OF_PU Inquires the number of processing units (PUs) currently loaded in the Processing FPGA. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of PUs. ‡ M_NUMBER_OF_TU Inquires the number of transfer units (TUs) currently loaded in the Processing FPGA. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the number of TUs. ‡ M_PU_FID + n Inquires the function identifier of the PU at index n, where n is a number between 0 and the value returned by M_NUMBER_OF_PU. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the function identifier. ‡ M_PU_LIST Inquires the list of function identifiers of all PUs currently loaded in the Processing FPGA. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: MfpgaInquire ( M_NUMBER_OF_PU ) ‡ Value Specifies the function identifier. ‡ M_PU_NAME + n Inquires the name of the PU at index n, where n is a number between 0 and the value returned by M_NUMBER_OF_PU. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfpgaInquire ( M_PU_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ String Specifies the name of the PU at index n. ‡ M_TU_FID + n Inquires the function identifier of the TU at index n, where n is a number between 0 and the value returned by M_NUMBER_OF_TU. ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Value Specifies the function identifier. ‡ M_TU_LIST Inquires the list of function identifiers of all TUs currently loaded in the Processing FPGA. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: MfpgaInquire ( M_NUMBER_OF_TU ) ‡ Value Specifies the function identifier. ‡ M_TU_NAME + n Inquires the name of the TU at index n, where n is a number between 0 and the value returned by M_NUMBER_OF_TU. ‡ UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfpgaInquire ( M_TU_NAME + n + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. ‡ String Specifies the name of the TU at index n. ‡ 1 If the value was passed in a variable, it won't be returned enclosed in MIL_TEXT(). Combination value for M_FPGA_CONFIGURATION_FILENAME , M_FPGA_PACKAGE_NAME , M_PU_NAME + n , M_TU_NAME + n. You can add the following value to the above-mentioned values to get the string's length. For getting the string size InquireType Description MIL system-specifictooltip (‡) UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). ‡ UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT ‡ Return value The returned value is M_VALID if successful. If the operation fails, M_NULL is returned. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - MilSystemId - FpgaDeviceNumber For specifying the rank of the Processing FPGA - InquireType - UserVarPtr Parameter Associations For FPGAs + For getting the string size Return value Compilation information M_DEVn ",
      "wordCount": 1194,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaLoad",
      "version": null,
      "title": "MfpgaLoad",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaLoad.htm",
      "text": " MfpgaLoad Synopsis Load a new FPGA configuration into a Processing FPGA on a target system. Syntax MIL_INT MfpgaLoad( MIL_ID&nbsp;MilSystemId, //in MIL_INT&nbsp;FpgaDeviceNumber, //in MIL_CONST_TEXT_PTR&nbsp;FirmwareFile, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function loads new configuration data into a Processing FPGA on the target system. This function allows you to avoid rebooting the Host and then using the MILConfig utility to specify and MsysAlloc() to load a different FPGA configuration into a Processing FPGA. Loading a new FPGA configuration can take longer to complete than other commands. It is recommended that MfpgaLoad() not be called during a time-critical section of your application. You must wait for all processing to finish executing before loading the new configuration into the Processing FPGA, otherwise data corruption might occur. Parameters Parameters MilSystemId Specifies the identifier of the system that has the required Processing FPGA. FpgaDeviceNumber Specifies the rank of the Processing FPGA into which to load the new FPGA configuration. This parameter must be set to the following value: For specifying the rank of the Processing FPGA Value Description MIL system-specifictooltip (‡) M_DEVn Specifies the rank of the Processing FPGA on the board, where n can be a value between 0 and the total number of Processing FPGAs-1. ‡ FirmwareFile Specifies the name and path of the file from which to load the FPGA configuration. For specifying the file name and path Value Description MIL system-specifictooltip (‡) MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file from which to load the FPGA configuration (for example, \"C:\\mydirectory\\myfile\"). Typically, FPGA configuration files have an MBF file extension. To retrieve the file on the remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). ‡ 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ControlFlag Reserved for future expansion. Set this parameter to M_DEFAULT. Return value The returned value is M_VALID if successful. If the operation fails, M_NULL is returned. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - MilSystemId - FpgaDeviceNumber For specifying the rank of the Processing FPGA - FirmwareFile For specifying the file name and path - ControlFlag Return value Compilation information M_DEVn ",
      "wordCount": 371,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaSetDestination",
      "version": null,
      "title": "MfpgaSetDestination",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaSetDestination.htm",
      "text": " MfpgaSetDestination Synopsis Specify a destination buffer for the FPGA processing operation. Syntax MIL_INT MfpgaSetDestination( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_BUFFER_INFO&nbsp;DstBuf, //in MIL_INT&nbsp;StreamOutputNumber, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function specifies a destination buffer for the FPGA processing operation. This buffer is used to save the data from the specified stream output port of the PU associated with the specified FPGA command context. To route the data to another PU, refer to MfpgaSetLink(). All PUs have documented limitations on the types of buffers to which their stream output port(s) can output data. You must keep these limitations in mind when allocating your destination MIL buffer(s). This function will not automatically convert the buffers so that they are appropriate for the operation. For more information, refer to the PU documentation available in the Matrox FPGA Component Reference Help file. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU. DstBuf Specifies the handle of the destination buffer. Use MfuncInquire() with M_BUFFER_INFO to get the handle. The destination buffer can reside in Host memory or in on-board memory, if supported by the FPGA configuration. If allocated in Host memory, the destination buffer must be in non-paged, Processing FPGA accessible memory (using MbufAlloc...() with M_FPGA_ACCESSIBLE + M_HOST_MEMORY). If allocated on-board, the destination buffer must be allocated in on-board, Processing FPGA accessible memory (using MbufAlloc...() with M_FPGA_ACCESSIBLE). StreamOutputNumber Specifies the stream output port whose data will be routed to the destination buffer. You must set this parameter to the following value: For specifying the rank of the stream output port Value Description MIL system-specifictooltip (‡) M_OUTPUTn Specifies the rank of the stream output port. You can set n to a value between 0 and 9, inclusive. ‡ ControlFlag Reserved for future expansion. Set this parameter to M_DEFAULT. Return value Returns the route number to program in to the source processing unit (PU) for the stream to be routed to its destination. This return value is only needed to manually program the appropriate control registers for PUs created with the Matrox Rapixo FDK using Vitis HLS. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - DstBuf - StreamOutputNumber For specifying the rank of the stream output port - ControlFlag Return value Compilation information M_OUTPUTn ",
      "wordCount": 383,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaSetLink",
      "version": null,
      "title": "MfpgaSetLink",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaSetLink.htm",
      "text": " MfpgaSetLink Synopsis Cascade the PUs of two commands, such that a stream output of one PU is routed to a stream input port of the other PU. Syntax MIL_INT MfpgaSetLink( MIL_FPGA_CONTEXT&nbsp;SrcFpgaCommandContext, //in MIL_INT&nbsp;SrcStreamPort, //in MIL_FPGA_CONTEXT&nbsp;DstFpgaCommandContext, //in MIL_INT&nbsp;DstStreamPort, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function cascades (links) the ports of two PUs that are interconnected in the FPGA configuration and loaded in a Processing FPGA. This function allows you to route data from one PU's stream output port to the specified stream input port of another PU. Parameters Parameters SrcFpgaCommandContext Specifies the handle of the FPGA command context to use in the link. SrcStreamPort Specifies the stream output port of the PU associated with the source command context. You must set this parameter to the following value: For specifying the rank of the stream output port Value Description MIL system-specifictooltip (‡) M_OUTPUTn Specifies the rank of the PU's stream output port to use in the link. You must set n to a value between 0 and 9, inclusive. ‡ DstFpgaCommandContext Specifies the handle of the destination command context to use in the link. DstStreamPort Specifies the stream input port of the PU associated with the destination command context. You must set this parameter to the following value: For specifying the rank of the stream input port Value Description MIL system-specifictooltip (‡) M_INPUTn Specifies the rank of the PU's stream input port to use as the destination stream port. You can set n to a value between 0 and 9, inclusive. ‡ ControlFlag Reserved for future expansion. Set this parameter to M_DEFAULT. Return value Returns the route number to program in to the source processing unit (PU) for the stream to be routed to its destination. This return value is only needed to manually program the appropriate control registers for PUs created with the Matrox Rapixo FDK using Vitis HLS. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - SrcFpgaCommandContext - SrcStreamPort For specifying the rank of the stream output port - DstFpgaCommandContext - DstStreamPort For specifying the rank of the stream input port - ControlFlag Return value Compilation information M_OUTPUTn M_INPUTn ",
      "wordCount": 361,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaSetRegister",
      "version": null,
      "title": "MfpgaSetRegister",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaSetRegister.htm",
      "text": " MfpgaSetRegister Synopsis Set the contents of one or more FPGA registers. Syntax void MfpgaSetRegister( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_INT64&nbsp;RegisterSection, //in MIL_INT&nbsp;Offset, //in MIL_INT&nbsp;Length, //in void&nbsp;*ValuePtr, //out MIL_INT64&nbsp;WriteAccessFlag //in ) Description This function writes values to FPGA registers of the PU associated with the specified command context. A maximum of four MfpgaSetRegister() calls can be made with any FPGA command context, although you can set the contents of multiple registers in each call. For a Matrox PU, you should consult the register file of the PU in the Matrox FPGA Components Reference. You can specify whether write accesses will be collected and made before processing. Note that for those PUs that have interrupts you can specify that write accesses will be collected after the PU issues its end-of-processing interrupt. For Matrox PUs and custom PUs created using the Matrox Processing Unit Designer, a C structure is created to represent each register of the PU. The structures are supplied in header files (fpga_*.h), located in the \\Matrox Imaging\\MIL\\Examples\\SoliosFDK\\Include directory for Matrox Solios and in the Matrox Imaging\\radient\\src\\headers\\local\\fpga_*.h directory for Matrox Radient. You must include the appropriate header file to use the structures. See the Setting and retrieving results from PU registers section of Chapter 66: Using MIL with a Processing FPGA for more information on the Matrox register structure. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU. RegisterSection Specifies the section of the PU's register space to access. You must set this parameter to the following value: For register space access Value Description MIL system-specifictooltip (‡) M_USER Specifies to access the user-specific section of the PU's register space. ‡ Offset Specifies the offset from the start of the specified register section, from which to begin writing, in bytes. The offset must be a multiple of 4 bytes. Length Specifies the number of bytes to write in the register. The length must be a multiple of 4 bytes. ValuePtr Specifies the address of the variable in which to write the value to be sent to the register. WriteAccessFlag Specifies when the register write access must take place. This parameter must be set to one of the following values: For specifying when to access the register Value Description MIL system-specifictooltip (‡) M_WHEN_COMPLETED Accesses the registers after the PU issues its end-of-processing interrupt. ‡ M_WHEN_DISPATCHED Accesses the registers during PU setup, prior to the start of processing. ‡ Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - RegisterSection For register space access - Offset - Length - ValuePtr - WriteAccessFlag For specifying when to access the register Compilation information ",
      "wordCount": 442,
      "subEntries": []
    },
    {
      "id": "Reference_fpga_MfpgaSetSource",
      "version": null,
      "title": "MfpgaSetSource",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\fpga\\MfpgaSetSource.htm",
      "text": " MfpgaSetSource Synopsis Specify a source buffer for the FPGA processing operation. Syntax void MfpgaSetSource( MIL_FPGA_CONTEXT&nbsp;FpgaCommandContext, //in MIL_BUFFER_INFO&nbsp;SrcBuf, //in MIL_INT&nbsp;StreamInputNumber, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function specifies a source buffer for the FPGA processing operation. Data from the specified buffer is routed to the specified stream input port of the PU associated with the specified FPGA command context. To obtain the data from another PU, refer to MfpgaSetLink(). All PUs have documented limitations on the types of buffers from which their stream input port(s) can receive data. You must keep these limitations in mind when allocating your source MIL buffer(s). This function will not automatically convert the buffers so that they are appropriate for the operation. For more information, refer to the PU documentation available in the Matrox FPGA Component Reference Help file. Note that in general, child buffers are not supported; only color-band child buffers are supported. Parameters Parameters FpgaCommandContext Specifies the handle of the FPGA command context associated with the PU. SrcBuf Specifies the handle of the source buffer. Use MfuncInquire() with M_BUFFER_INFO to get the handle. The source buffer can only reside in on-board memory. If allocated on-board, the source buffer must be allocated in on-board, Processing FPGA accessible memory (using MbufAlloc...() with M_FPGA_ACCESSIBLE). StreamInputNumber Specifies the stream input port to which to route data from the source buffer. You must set this parameter to the following value: For specifying the rank of the stream input port Value Description MIL system-specifictooltip (‡) M_INPUTn Specifies the rank of the stream input port. You can set n to a value between 0 and 9, inclusive. ‡ ControlFlag Reserved for future expansion. Set this parameter to M_DEFAULT. Compilation information Header Include mil.h; milfpga.h. Library Use mil.lib; milfpga.lib. DLL Requires mil.dll; milfpga.dll. Syntax Description Parameters - FpgaCommandContext - SrcBuf - StreamInputNumber For specifying the rank of the stream input port - ControlFlag Compilation information M_INPUTn ",
      "wordCount": 316,
      "subEntries": []
    }
  ]
}]