[{
  "id": "UG_3D_reconstruction_using_laser_line_profiling",
  "version": "2024020714",
  "title": "3D reconstruction using laser line profiling",
  "subTitles": null,
  "location": "MIL UG P06: 3D related information",
  "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\ChapterInformation.htm",
  "text": " Chapter 46: 3D reconstruction using laser line profiling This chapter explains how to perform laser line profiling, calibration, and reconstruction with the MIL 3D Reconstruction module. 3D reconstruction using laser line profiling overview Steps to creating a cloud of 3D points using laser line profiling Basic concepts for the MIL 3D Reconstruction module using laser line profiling Configuring the laser line profiling setup 3D reconstruction physical setup Camera angle requirement Sheet of light and conveyor requirements 3D reconstruction context setup - laser line characteristics Using a 3D camera capable of laser line extraction Inspecting laser line extraction Optimizing frame rate, throughput, and processing time using smaller images Calibrating your 3D reconstruction setup to create a point cloud Calibrating to create a point cloud Inspecting laser line calibration Specifying offsets when the 3D reconstruction calibration image is a subset of the grabbed image Runtime scanning settings 3D coordinate systems and the coordinates of a point cloud Understanding the laser line coordinate system Understanding the relative coordinate system in a 3D result buffer Retrieving the coordinates of the points in a point cloud Transforming the relative coordinate system Results displacement mode Using 3D cameras that output uncorrected depth maps Calibrating a 3D reconstruction setup that uses a 3D camera Laser data format Multiple camera-laser pairs Multiple camera-laser pair setup Two lasers one camera Calibrating the 3D reconstruction contexts in a multiple camera-laser pair setup Partially corrected depth maps Calibrating for a partially corrected depth map Generating a partially corrected depth map Inspecting the calibration state of a 3D reconstruction context MIL 3D reconstruction example ",
  "wordCount": 264,
  "subEntries": [
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_3D_reconstruction_using_laser_line_profiling_overview",
      "version": null,
      "title": "3D reconstruction using laser line profiling overview",
      "subTitles": null,
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\3D_reconstruction_using_laser_line_profiling_overview.htm",
      "text": " 3D reconstruction using laser line profiling overview The MIL 3D Reconstruction module allows you to extract 3D information from 2D images of an object taken using a 3D reconstruction setup built for laser line profiling. From the grabbed images of objects passing through a sheet of light or laser plane, the module can create a cloud of 3D points or a partially-corrected depth map. Some 3D sensors (including some laser profilers) perform all steps of 3D reconstruction on-board and transmit 3D data in the form of a precalibrated point cloud or depth map. If you have one of these devices, you do not need to use MIL to perform laser line profiling. This chapter only applies to laser line setups that use standard cameras, or cameras that perform laser-line extraction (but not calibration) on-board. For information on grabbing from 3D sensors that perform all steps of 3D reconstruction on-board, see the Grabbing from 3D sensors overview section of Chapter 42: Grabbing from 3D sensors. A basic laser line profiling setup consists of a device projecting a sheet of light (usually a laser diode), a camera, and a mechanism to move the object under the laser plane (for example, a conveyor belt). An object is then moved at a known speed and on a straight path perpendicular to the laser plane. As the object moves through the laser plane, the camera is used to grab images of the intersection of that laser plane with the object. As a result, multiple images are grabbed such that the laser line in each image represents a slice of the object being scanned. The incidence of the laser light on the object, at an angle from the optical axis of the camera, leads to an image whereby the line of laser light is deformed. From the position of the displaced laser line, the 3D reconstruction module can obtain height (depth) information for the slice of the object. The depth information is measured from the top of the image to the base laser line. If the laser line is not visible, the value of the cell is saturated with the maximum value. The following animation illustrates obtaining a depth map. When your laser line profiling setup is fully calibrated, including camera calibration, passing an object through a sheet of light or laser plane will result in a cloud of 3D points. The cloud of points is a 3D representation of the object's surface. You can process, analyze, and create a mesh from the 3D points using the other MIL 3D modules (M3d...()). You can display the point cloud using the MIL 3D display module (M3ddisp...()). With a fully calibrated setup, you can add additional cameras and/or lasers. The additional cameras could be used to increase the resolution of the sheet of light data or to overcome the occlusion of sections of the scanned object due to the camera angle and placement. Multiple cameras or multiple lasers creates multiple point clouds. If you are only interested in the depth of an object and not its shape, the 3D reconstruction module can generate a partially corrected depth map, which is corrected for depth, but not for camera distortion or shape. No camera calibration is used in the generation of the depth map. 3D reconstruction using laser line profiling overview ",
      "wordCount": 553,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Steps_to_extracting_a_depth_map",
      "version": null,
      "title": "Steps to creating a cloud of 3D points using laser line profiling",
      "subTitles": null,
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Steps_to_extracting_a_depth_map.htm",
      "text": " Steps to creating a cloud of 3D points using laser line profiling The following steps provide a basic methodology for using laser line profiling to create a point cloud using the MIL 3D Reconstruction module: Allocate a 3D reconstruction context to hold your laser line profiling settings, using M3dmapAlloc() with M_LASER and M_CALIBRATED_CAMERA_LINEAR_MOTION. Optionally, use M3dmapControl() to change the settings of the M_CALIBRATED_CAMERA_LINEAR_MOTION context. If you need to adjust settings for a 1D locate peak image processing context (which specifies how to find the laser line in the image), inquire the identifier of the internal peak intensity image processing context using M3dmapInquire() with M_LOCATE_PEAK_1D_CONTEXT_ID. Then, use MimControl() to adjust the settings of this internal image processing context. Fully calibrate your 3D reconstruction setup; this includes calibrating your camera. Calibrate your camera by allocating a camera calibration context using McalAlloc() with M_3D_ROBOTICS or M_TSAI_BASED; then, calibrate it using McalGrid() or McalList(). Allocate a 3D reconstruction calibration result buffer using M3dmapAllocResult() with M_LASER_CALIBRATION_DATA. Optionally, use M3dmapControl() to change the settings of the M_LASER_CALIBRATION_DATA result buffer. Accumulate required 3D reconstruction calibration information. This involves grabbing laser line images of planar objects with known heights. Extract the laser data from the images into the M_LASER_CALIBRATION_DATA result buffer using M3dmapAddScan(), while specifying the known height of the object using M3dmapControl() with M_CORRECTED_DEPTH. Complete the 3D reconstruction calibration using M3dmapCalibrate(). Free the M_LASER_CALIBRATION_DATA result buffer, once 3D reconstruction calibration is complete, using M3dmapFree(). Allocate a new 3D reconstruction result buffer to hold the point cloud, using M3dmapAllocResult() with M_POINT_CLOUD_RESULT. Grab a series of images of an object as it passes through the laser plane. For each image, extract the laser line information from the image and add the data to the M_POINT_CLOUD_RESULT result buffer, using M3dmapAddScan() and a point cloud label. Note that you should specify the same label for each image; specifying another label will create a new point cloud. The 3D reconstruction result buffer now has a point cloud that contains 3D points. To operate on the 3D points, copy the point cloud into a point cloud container using M3dmapCopyResult(). If required, obtain additional information about the 3D points in your point cloud using M3dmapGetResult(). Free all your allocated objects using M3dmapFree() and McalFree(), unless M_UNIQUE_ID was specified during allocation. Steps 1 to 5 are usually performed only once for a given 3D reconstruction setup. You can repeat steps 6 to 9 for every object that you want to reconstruct. Note that before every new object being scanned, you should clear the contents of the result buffer using M3dmapClear(). Most of this chapter describes how to generate point clouds (M_CALIBRATED_CAMERA_LINEAR_MOTION 3D reconstruction mode). To generate a partially corrected depth map, see the Partially corrected depth maps section later in this chapter. Steps to creating a cloud of 3D points using laser line profiling ",
      "wordCount": 471,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Basic_concepts",
      "version": null,
      "title": "Basic concepts for the MIL 3D Reconstruction module using laser line profiling",
      "subTitles": null,
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Basic_concepts.htm",
      "text": " Basic concepts for the MIL 3D Reconstruction module using laser line profiling The basic concepts and vocabulary conventions for the MIL 3D Reconstruction module using laser line or sheet of light profiling are: 3D camera capable of laser line extraction. A camera with integrated processing capabilities that extracts laser line or sheet of light information from sequential scans and generates an uncorrected depth map, and depending on the camera, a point cloud. 3D reconstruction context. A MIL object that stores information regarding the reconstruction setup, such as the 3D reconstruction calibration information, camera position, and object speed. 3D reconstruction setup. A physical setup used to extract 3D information from 2D images. Camera calibration context. A MIL object that stores the mapping between the pixel coordinate system and the absolute world coordinate system, as well as information about the camera calibration setup, including the initial locations of all associated world coordinate systems. Camera setup. The camera's position relative to the object in the physical setup used to acquire images. Depth. A measurement extending from the surface of the object to its base, in world units. Depth map. An image where the gray value of a pixel represents its depth in the world. Fully corrected depth map. A depth map that accurately represents the height and shape of objects; its pixels represent a constant size in X and Y in the world. If the size of the pixels is the same in X and Y, the fully corrected depth map is also considered a corrected image. Gap. A range of data which is missing in the depth map because the data could not be extracted from the image at this location. Intensity map. An image where the gray value of each pixel represents the luminous intensity of the laser line at this point. Laser line coordinate system. A static coordinate system with the X-axis along the laser line, the Y-axis along the conveyor movement, and the Z-axis perpendicular to the conveyor. While respecting these constraints, the direction of the axes and the position of the origin are as close as possible to the absolute coordinate system. Laser line profiling. A process which extracts 3D spatial information from the position and intensity of a laser line in an image. Partially corrected depth map. A depth map that accurately represents the height of objects, but not their shape. Uncorrected depth map. A depth map where the gray level and shape of the scanned object(s) are not corrected. An uncorrected depth map contains the raw accumulated laser line data from the different laser line images. If the laser line appears horizontally in the laser line images, the pixel values in a given row (m) of the uncorrected depth map equal the vertical distance of the laser line for each column in the corresponding laser line image m. If the laser line appears vertically in the laser line images, the pixel values in a given row (m) of the uncorrected depth map equal the horizontal distance of the laser line for each row in the corresponding laser line image m. XY-plane. The plane defined by the equation Z=0. This is typically the conveyor in the laser line coordinate system. XZ-plane. The plane defined by the equation Y=0. Basic concepts for the MIL 3D Reconstruction module using laser line profiling ",
      "wordCount": 555,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Configuring_the_laser_line_profiling_setup",
      "version": null,
      "title": " Configuring the laser line profiling setup",
      "subTitles": [
        "3D reconstruction physical setup",
        "Camera angle requirement",
        "Sheet of light and conveyor requirements",
        "3D reconstruction context setup - laser line characteristics",
        "Using a 3D camera capable of laser line extraction",
        "Inspecting laser line extraction",
        "Optimizing frame rate, throughput, and processing time using smaller images"
      ],
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Configuring_the_laser_line_profiling_setup.htm",
      "text": " Configuring the laser line profiling setup The main objective of laser line profiling is to establish real-world depth of an object by grabbing and processing sequential images of the object as it passes through a sheet of light or laser plane. If the camera setup has been calibrated, laser line profiling typically results in a cloud of 3D coordinates (cloud of points). To extract the highest quality 3D data, you need to create a proper physical 3D reconstruction setup and configure the 3D reconstruction context (and its internal peak detection image processing context) with the characteristics of the laser line. Once setup is done, you can further optimize your performance by only processing a subset of the entire grabbed image. To accelerate prototyping of your laser-based 3D reconstruction setup, you can use the Microsoft Excel file 3D Setup Helper.xls. This file helps you choose an adequate hardware configuration, including the camera, lens, camera angle, and distance from the camera to the object's surface. The file is located in your Matrox Imaging\\Tools directory. Once you have configured the 3D reconstruction physical setup and corresponding context(s), you must then calibrate the depth (height) that the laser line displacement represents. To perform the required 3D reconstruction calibration operations, see the Calibrating to create a point cloud subsection of the Calibrating your 3D reconstruction setup to create a point cloud section later in this chapter. 3D reconstruction physical setup The physical setup must consider camera placement, laser placement, and conveyor direction, to minimize object occlusion and maximize 3D resolution. Camera angle requirement Before starting the 3D reconstruction calibration process of your 3D reconstruction setup, ensure that the angle of the camera is sufficient with respect to the laser so that the camera captures the laser line for each slice of the object. The angle of the camera should be large enough so that small changes in height are enough to cause noticeable changes in the position of the laser lines in the grabbed images. The greater the change in position of the laser line in the grabbed image, the more accurate your results will be. To get very accurate results, you want the camera to be at an angle where the laser line, when located on the highest feature of your object, is located at the top of your laser line image buffer, and when located on the XY plane (Z=0) plane, it is located at the bottom of your laser line image buffer. In general, this means a large angle. However, when your camera angle is large, you potentially increase object occlusion. This is demonstrated in the image above. The orientation of the camera is also important. Depending on how you orient your camera, the resulting image could have a horizontal, vertical, or diagonal laser line. For optimal results, orient your camera to have a strongly horizontal or vertical laser line. Images with diagonal laser lines are processed sub-optimally. Sheet of light and conveyor requirements When scanning an object moving along a conveyor, the object must be moving in a linear motion under the sheet of light. There are a few additional requirements to consider when setting up your 3D reconstruction setup: The laser line, which is the intersection of the sheet of light (laser plane) and the conveyor, should be perpendicular to the object's motion, as in the image below. Note that the sheet of light does not have to be perpendicular to the conveyor. When it is not perpendicular to the conveyor, there are extra considerations during 3D reconstruction calibration later. The displacement of the object between each grab of the laser line must be specified. However, the distance between each displacement does not need to be the same; only the direction needs to be the same. 3D reconstruction context setup - laser line characteristics Before performing laser line extraction on an image using M3dmapAddScan(), you can set certain control types in the internal locate peak 1D image processing context of your 3D reconstruction context to specify the characteristics of the laser line. For more information on intensity thresholding, peak detection, and laser line orientation, see the Peak intensity detection and depth maps section of Chapter 5: Specialized image processing. To set the controls, you must first inquire the identifier of the internal image processing context using M3dmapInquire() with M_LOCATE_PEAK_1D_CONTEXT_ID; then, using MimControl(), you can set the following controls: Minimum contrast. This is the minimum increase in intensity between the local background and the prospective peak, to be considered a peak. This is set using MimControl() with M_MINIMUM_CONTRAST. If you set the minimum contrast too high, M3dmapAddScan() will not detect the laser line if it is not bright enough compared to its neighborhood. If you set the minimum contrast too low, M3dmapAddScan() might detect a laser line where there is none. Thickness of the laser line. This determines the range of acceptable pixel widths for a peak (laser line). This range is specified using two separate MimControl() control types, M_PEAK_WIDTH_NOMINAL and M_PEAK_WIDTH_DELTA. The former specifies the mean width of the laser line, in pixels; the latter specifies the expected variance. Any peaks that are found that are wider than M_PEAK_WIDTH_NOMINAL + M_PEAK_WIDTH_DELTA, or narrower than M_PEAK_WIDTH_NOMINAL- M_PEAK_WIDTH_DELTA, are rejected. Orientation of the laser line. This determines whether laser line detection is performed vertically or horizontally. If your laser line is horizontal across the image, set MimControl() with M_SCAN_LANE_DIRECTION to M_VERTICAL. If your laser line is vertical across the image, set M_SCAN_LANE_DIRECTION to M_HORIZONTAL. Images with diagonal laser lines are processed sub-optimally. Using a 3D camera capable of laser line extraction The 3D Reconstruction module also lets you use a 3D camera capable of performing laser line extraction directly on the camera. The 3D reconstruction module expects that, in this case, the camera outputs an uncorrected depth map. To pass the 3D camera's uncorrected depth map to the module, you must call M3dmapAddScan() with M_LINE_ALREADY_EXTRACTED and the uncorrected depth map; the function will load the data in the specified result buffer and skip the laser line extraction process. Note that M3dmapAddScan() with M_LINE_ALREADY_EXTRACTED must also be used when you want to pass manually extracted data to M3dmapAddScan() (for example, after processing the laser line image using MimLocatePeak1d()). For more information on performing laser line extraction without the 3D Reconstruction module, see the Using 3D cameras that output uncorrected depth maps section later in this chapter. For information on grabbing from 3D sensors that perform all steps of 3D reconstruction on-board, see the Grabbing from 3D sensors overview section of Chapter 42: Grabbing from 3D sensors. Inspecting laser line extraction Once your set up is appropriate and you have specified your laser line characteristics, you should test whether the line can be detected and identify any problems that were present during the extraction process. To test your physical setup and your software values, perform the following: Allocate a 3D reconstruction result buffer of type M_LASER_CALIBRATION_DATA using M3dmapAllocResult(). Grab an image of an object that displaces the laser line. You should choose a typical object that will be scanned under normal runtime conditions. This is especially true if the objects are reflective. It is also important that the environmental conditions, such as ambient lighting, during the test grab are similar to how they will be under typical runtime conditions. Extract the laser line data from the grabbed image using M3dmapAddScan(). Draw the extracted laser line using M3dmapDraw() with M_DRAW_PEAKS_LAST. Confirm that the extracted laser line, which is drawn on the grabbed image, overlaps with the actual laser line in the grabbed image. Additionally, inquire the number of missing data points in the most recently extracted laser line using M3dmapGetResult() with M_NUMBER_OF_MISSING_DATA_LAST_SCAN. You can clear the extracted line from the result buffer by calling M3dmapClear() with M_REMOVE_LAST_SCAN. If the extracted laser line, drawn with M3dmapDraw(), sufficiently overlaps the actual laser line, and/or the number of missing data points is tolerable, your setup is complete. You can now move on to 3D reconstruction calibration. If the drawn laser line does not sufficiently overlap the actual laser line, or the missing number of data points is intolerable, change the physical setup and/or your software values. Repeat this testing procedure again. Optimizing frame rate, throughput, and processing time using smaller images Once you have positioned your physical setup and inspected your laser line images, you can further refine your setup to increase the frame rate, increase throughput, and/or decrease processing time, by grabbing, transferring, and/or processing smaller images, respectively. To increase the frame rate, you can reduce the size of the image you are grabbing; this is typically done directly on the camera, when available. For GigE cameras, you can directly configure the camera's features using the MIL Feature Browser (accessible through Matrox Intellicam or MdigControl() with M_GC_FEATURE_BROWSER). To increase throughput, you can limit the size of the image your frame grabber saves to memory, using MdigControl() with M_SOURCE_OFFSET_... and M_SOURCE_SIZE_.... To reduce processing time, you can create a child buffer that limits the area of the image buffer that is processed using MbufChild2d(). You can also use a child buffer to split a grabbed image that includes two or more laser lines, so that each child buffer contains a single laser line. Note that in the case of source offsets and child buffers, you must use the same offset or child buffer for both the images supplied for 3D reconstruction calibration and runtime processing. Configuring the laser line profiling setup 3D reconstruction physical setup Camera angle requirement Sheet of light and conveyor requirements 3D reconstruction context setup - laser line characteristics Using a 3D camera capable of laser line extraction Inspecting laser line extraction Optimizing frame rate, throughput, and processing time using smaller images ",
      "wordCount": 1619,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Calibrating_your_reconstruction_setup",
      "version": null,
      "title": "Calibrating your 3D reconstruction setup to create a point cloud",
      "subTitles": [
        "Calibrating to create a point cloud",
        "Inspecting laser line calibration",
        "Specifying offsets when the 3D reconstruction calibration image is a subset of the grabbed image"
      ],
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Calibrating_your_reconstruction_setup.htm",
      "text": " Calibrating your 3D reconstruction setup to create a point cloud After ensuring that your 3D reconstruction setup meets the requirements described in the Configuring the laser line profiling setup section earlier in this chapter, you must calibrate the 3D reconstruction setup. The objective of 3D reconstruction calibration is to establish the relationship between the laser line's displacement when over an object and the real-world depth of the object. Calibrating your 3D reconstruction setup is mandatory before generating point clouds or partially corrected depth maps using the 3D Reconstruction module. 3D reconstruction calibration requires a specific type of 3D reconstruction result buffer, allocated using M3dmapAllocResult() with M_LASER_CALIBRATION_DATA. Note that there are slight differences when calibrating the 3D reconstruction context for a partial depth map. These differences are explained in the Partially corrected depth maps section later in this chapter. Calibrating to create a point cloud To create a point cloud, you must first perform two different calibrations: a camera calibration and a 3D reconstruction setup calibration. To calibrate a camera intended for a 3D reconstruction setup: Allocate a camera calibration context using McalAlloc() with M_TSAI_BASED or M_3D_ROBOTICS. Calibrate your camera setup using McalGrid() or McalList(). For more details, see Calibrating using calibration points from a grid and the Calibrating using calibration points from a list section of Chapter 28: Calibrating your camera setup. When calibrating your camera, the XY-plane (Z=0) of the absolute coordinate system must be parallel to the conveyor belt; ideally, the XY-plane lies on the same surface as the object being mapped. Note that the grid used during camera calibration might have a height itself, which can skew some calculations. In this case, specify the height (thickness) of the grid using McalGrid() with GridOffsetZ, so that the XY-plane of the absolute coordinate system is flush with the surface on which the grid is resting. For more information, see the Moving the relative coordinate system to account for height section of Chapter 34: 3D analysis using planar views of an object. Use McalInquire() with the camera calibration context and M_CALIBRATION_STATUS to ensure that the camera calibration of the camera setup has been successfully performed. Once your camera is calibrated, you must calibrate the 3D reconstruction setup. To do so: Allocate a 3D reconstruction context using M3dmapAlloc() with M_CALIBRATED_CAMERA_LINEAR_MOTION. Allocate a 3D reconstruction calibration result buffer using M3dmapAllocResult() with M_LASER_CALIBRATION_DATA. Grab an image of a laser line on a planar object that has a known height. The image of a laser line on an object at a known height is called a reference plane. Specify the Z-coordinate of that plane in the absolute coordinate system, using M3dmapControl() with M_CORRECTED_DEPTH. Since by default the Z-axis of the absolute coordinate system is pointing down, this value is often negative. Use M3dmapAddScan() to extract the laser line information from the grabbed image and add this information to the 3D reconstruction calibration result buffer. For other methods of providing the laser line data, see the Using 3D cameras that output uncorrected depth maps section later in this chapter. If, after calling M3dmapAddScan(), but before calling M3dmapCalibrate(), you need to discard the last scan added (for example, as the result of a diagnosis using M3dmapDraw() with M_DRAW_PEAKS_LAST), it is possible to do so by calling M3dmapClear() with M_REMOVE_LAST_SCAN. Repeat steps 3 to 5 for every reference plane that you want to use to calibrate your 3D reconstruction setup. If you are calibrating for a vertical laser plane (parallel to the XZ-plane), only one reference plane is required. If the laser plane is not vertical, as shown below, you must provide a minimum of 2 reference planes. However, even if you are using a vertical laser plane, your results will be more accurate if you calibrate using more plane heights. Note that you can use the surface on which the object is resting as a reference plane. The size and depth of the source image buffer containing the laser lines must not change when making multiple calls to M3dmapAddScan(), and you must use the same destination result buffer. Call M3dmapCalibrate() with the 3D reconstruction context, calibration result buffer, and camera calibration context. Use M3dmapInquire() with M_CALIBRATION_STATUS, while specifying the 3D reconstruction context, to ensure that the calibration of the 3D reconstruction setup has been successfully performed. Free the 3D reconstruction calibration result buffer using M3dmapFree(). The following code snippet is an example of the steps required to calibrate in M_CALIBRATED_CAMERA_LINEAR_MOTION 3D reconstruction mode, in the case of a vertical laser plane setup (which requires only one reference plane). /* Allocate 3dmap objects. */ M3dmapAlloc(MilSystemId, M_LASER, M_CALIBRATED_CAMERA_LINEAR_MOTION, &amp;LaserId); M3dmapAllocResult(MilSystemId, M_LASER_CALIBRATION_DATA, M_DEFAULT, &amp;ScanId); /* Inquire internal locate peak Mim context Id, if peak detection needs configuration. */ M3dmapInquire(LaserId, M_DEFAULT, M_LOCATE_PEAK_1D_CONTEXT_ID, &amp;MilPeakLocatorId); /* Set settings with M3dmapControl() and MimControl(), if needed. */ /* ... */ /* Get image of laser line on Z=0 reference plane. */ /* MbufLoad can also be used to load an image. */ MdigGrab(DigId, MilImageId); /* Calibrate 3D reconstruction context. */ /* MilCalibrationId is the identifier of the calibration context calibrated by McalGrid() or McalList() in a 3D mode. */ M3dmapAddScan(LaserId, ScanId, MilImageId, M_NULL, M_NULL, M_DEFAULT, M_DEFAULT); M3dmapCalibrate(LaserId, ScanId, MilCalibrationId, M_DEFAULT); When you are set up to create a point cloud (M3dmapAlloc() with M_CALIBRATED_CAMERA_LINEAR_MOTION), calibrating your 3D reconstruction setup also defines the laser line coordinate system, a real-world coordinate system with its X-axis on the intersection between the laser plane and the conveyor belt, and its Y-axis along the path of the conveyor's movement. Initially, the relative coordinate system of the 3D reconstruction result buffer has the same pose as the laser line coordinate system. The relative coordinate system is used to return all 3D points generated by the 3D Reconstruction module. For more information, see the Understanding the laser line coordinate system subsection of the 3D coordinate systems and the coordinates of a point cloud section later in this chapter. Inspecting laser line calibration After calibrating an M_CALIBRATED_CAMERA_LINEAR_MOTION 3D reconstruction context, it is possible to see how the laser lines detected at 3D reconstruction calibration were mathematically altered to best fit the equation of the laser plane; to do so, use M3dmapDraw() with M_DRAW_CALIBRATION_LINES and the 3D reconstruction context. You can draw all the extracted laser lines used to calibrate the 3D reconstruction context, using M3dmapDraw() with M_DRAW_CALIBRATION_PEAKS. You can inquire the root mean squared error of the fit, using M3dmapInquire() with M_FIT_RMS_ERROR. Specifying offsets when the 3D reconstruction calibration image is a subset of the grabbed image When calibrating the 3D reconstruction setup, and you have an M_CALIBRATED_CAMERA_LINEAR_MOTION 3D reconstruction context, it is important to note whether you are using a subset of the entire grabbed image during the runtime application. The subset of the grabbed image, whether through source offsets (MdigControl() with M_SOURCE_OFFSET_... and M_SOURCE_SIZE_...) or child buffers (MbufChild2d()), must be the same during 3D Reconstruction calibration as it is during the runtime application. If you are supplying a subset of the grabbed image, whether through source offsets or child buffers, to M3dmapAddScan(), the origin of the image buffer passed to McalGrid() must correspond to the origin of the image buffer passed to M3dmapAddScan(). If these two points do not correspond to the same real-world coordinate, you must specify the offset(s) of the image buffer used during 3D reconstruction calibration, before calling M3dmapAddScan() with M_LASER_CALIBRATION_DATA for the first time. Specify the offsets using M3dmapControl() with M_EXTRACTION_CHILD_OFFSET_X and M_EXTRACTION_CHILD_OFFSET_Y. In the case where the image buffer used in camera calibration is a subset of the entire grabbed image, and the image buffer used in 3D reconstruction calibration is a subset of the subset, you must specify the offset with respect to the subset used for camera calibration. Calibrating your 3D reconstruction setup to create a point cloud Calibrating to create a point cloud Inspecting laser line calibration Specifying offsets when the 3D reconstruction calibration image is a subset of the grabbed image ",
      "wordCount": 1311,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Runtime_scanning",
      "version": null,
      "title": "Runtime scanning settings",
      "subTitles": null,
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Runtime_scanning.htm",
      "text": " Runtime scanning settings After you have calibrated your 3D reconstruction setup and before starting runtime scanning, you must specify the conveyor speed, using M3dmapControl() with M_SCAN_SPEED. The value you give to M_SCAN_SPEED is the conveyor displacement, in world-units, between two successive camera images. To have the most accurate coordinates in your point cloud, this value should properly reflect both the speed at which the object is moving and the rate at which the camera captures a frame. If the conveyor speed changes while grabbing new images, or the rate at which you are grabbing images changes, you must specify a new value for M_SCAN_SPEED. As demonstrated in the image below, if the conveyor is moving in the direction of the Y-axis of the laser line coordinate system, you must specify a positive value for the scan speed. If the conveyor is moving in the opposite direction, you must specify a negative value for the scan speed. For information about the laser line coordinate system, see the 3D coordinate systems and the coordinates of a point cloud section later in this chapter. Runtime scanning settings ",
      "wordCount": 186,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_3D_coordinate_systems",
      "version": null,
      "title": "3D coordinate systems and the coordinates of a point cloud",
      "subTitles": [
        "Understanding the laser line coordinate system",
        "Understanding the relative coordinate system in a 3D result buffer",
        "Retrieving the coordinates of the points in a point cloud ",
        "Transforming the relative coordinate system",
        "Results displacement mode"
      ],
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\3D_coordinate_systems.htm",
      "text": " 3D coordinate systems and the coordinates of a point cloud Once a 3D reconstruction setup has been calibrated using M3dmapCalibrate() (or M3dmapCalibrateMultiple() in the case of multiple camera-laser pairs discussed later), a new coordinate system is created in the 3D reconstruction context: the laser line coordinate system. This coordinate system is a real-world coordinate system partially defined by the intersection of the laser plane with the conveyor (the laser line). Once you allocate a result buffer using M3dmapAllocResult() with M_POINT_CLOUD_RESULT, another new coordinate system is created in the 3D reconstruction result buffer: the relative coordinate system of the 3D result buffer. Once you add 3D data to the result buffer using M3dmapAddScan(), this relative coordinate system overlaps the laser line coordinate system. The relative coordinate system in the result buffer can be moved, while the laser line coordinate system in the context is always fixed. All results are returned with respect to the relative coordinate system. Understanding the laser line coordinate system The laser line coordinate system is the coordinate system used to represent 3D points generated by the 3D Reconstruction module. It is defined in the 3D reconstruction context upon calling M3dmapCalibrate() or M3dmapCalibrateMultiple(). The laser line coordinate system has the following characteristics: Its X-axis and origin are on the intersection of the laser plane and the conveyor (laser line). Its Y-axis is parallel to the object's motion. Its Z-axis is perpendicular to the plane of the conveyor and points in the direction of the absolute coordinate system's Z-axis. The XY-plane of the absolute coordinate system must be parallel to the conveyor as well. Note that if the Z-axis points down, the Z-coordinate decreases in the direction in which height of the objects increase. This leads to negative Z-coordinates for scanned objects. The origin and the direction of the X-axis and Y-axis are as close to the absolute coordinate system as possible, given the above constraints. In the image below, the absolute coordinate system, which was previously defined using the chessboard grid shown, is not aligned with the conveyor or the laser line. The laser line coordinate system, however, must be aligned with the direction of the conveyor and laser line. So in the laser line coordinate system, the direction of the Y-axis is close to the direction of the absolute coordinate system's Y-axis, but is still parallel with the movement of the conveyor. This direction is essential to understanding why the Y-coordinates of points of an object will increase or decrease as the object moves on the conveyor. By default, an object's coordinates are initially based on the position of the object in the laser line coordinate system at the moment of the first call to M3dmapAddScan(). Despite the object actually moving along the conveyor to pass under the laser line, the result buffer stores the object's coordinates as they were before the first scan. In the image below, the object is shown in its original position, just before the first scan. Note that the first few scans in the image below will not contain any data about the object; the first few scans are of the conveyor. All 3D coordinates are returned in the relative coordinate system of the 3D reconstruction result buffer, which is identical to the laser line coordinate system, by default. Understanding the relative coordinate system in a 3D result buffer The relative coordinate system in an M_POINT_CLOUD_RESULT 3D reconstruction result buffer is the coordinate system used by default when retrieving coordinates of the points in the point cloud. It is defined in an M_POINT_CLOUD_RESULT 3D reconstruction result buffer as soon as 3D data is added to a point cloud, using M3dmapAddScan(). While the coordinates of the points are created with respect to the laser line coordinate system, the coordinates are retrieved with respect to the relative coordinate system. When you create a point cloud using M3dmapAddScan(), the relative coordinate system overlaps with the laser line coordinate system. Retrieving the coordinates of the points in a point cloud To retrieve the coordinates of the points in a point cloud, copy the point cloud(s) to a container using M3dmapCopyResult(), then use MbufInquireContainer() to retrieve the identifier of the point cloud container's range component (M_COMPONENT_RANGE). Finally, use MbufGetColor() to place the coordinates into an array, either with three separate calls to MbufGetColor() with M_SINGLE_BAND, or with one call to MbufGetColor() with M_PACKED or M_PLANAR. Note that MbufGetColor() does not consider the container's confidence component; invalid point values are also returned. You can similarly retrieve the intensities associated with the points, if the source container has an intensity or reflectance component. Transforming the relative coordinate system The coordinates of the points are expressed with respect to the relative coordinate system of the M_POINT_CLOUD_RESULT result buffer. The relative coordinate system initially overlaps with the laser line coordinate system, but while the laser line coordinate system is fixed, the relative coordinate system can be transformed. If you transform the relative coordinate system (for example, using McalSetCoordinateSystem() or McalFixture()), the returned coordinates and any other result will reflect this transformed coordinate system. Note that this would affect M3dmapCopyResult(). Results displacement mode It can be useful to know the exact position of an object as it moves along a conveyor, for instance when generating a depth map that will be used in a pick and place application. To do this, you can use M3dmapControl() with M_RESULTS_DISPLACEMENT_MODE set to M_CURRENT. This adds the Y-axis displacement (ongoing conveyor movement) to all returned coordinates. This effectively returns the real-time position of the object, in the relative coordinate system of the result buffer, at the moment you call M3dmapCopyResult() with M_POINT_CLOUD. The results displacement mode determines whether an object's stored coordinates are returned fixed as they were before being scanned, or as they currently are after moving along the conveyor. For example in the image below, when M3dmapControl() with M_RESULTS_DISPLACEMENT_MODE is set to M_FIXED, the coordinates of the specified point on the box before being scanned at t0 are (3, 3, -2). Regardless of the ongoing movement of the object at t1 , all results are returned as though the object was fixed at its original position. The specified point still has the same coordinates, (3, 3, -2). When M_RESULTS_DISPLACEMENT_MODE is set to M_CURRENT, the specified point that started moving at t0 changes to (3, -8, -2) at t1 . The change in the Y-coordinate from 3 to -8 is because the conveyor moved 11 units in the direction of the negative Y-axis since the scanning began. You can determine the distance that the object traveled along the conveyor since scanning began (the change in the Y-coordinate) using M3dmapGetResult() set to M_TOTAL_DISPLACEMENT_Y. 3D coordinate systems and the coordinates of a point cloud Understanding the laser line coordinate system Understanding the relative coordinate system in a 3D result buffer Retrieving the coordinates of the points in a point cloud Transforming the relative coordinate system Results displacement mode ",
      "wordCount": 1153,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Using_3D_cameras_that_perform_laser_line_extraction",
      "version": null,
      "title": " Using 3D cameras that output uncorrected depth maps",
      "subTitles": [
        "Calibrating a 3D reconstruction setup that uses a 3D camera",
        "Laser data format"
      ],
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Using_3D_cameras_that_perform_laser_line_extraction.htm",
      "text": " Using 3D cameras that output uncorrected depth maps The 3D Reconstruction module provides support for 3D cameras that perform laser line extraction on-board and output an uncorrected depth map. You can use the 3D reconstruction module to convert this data into a point cloud. However, to use the 3D Reconstruction module, you must reformat the uncorrected depth map to the input format of M3dmapAddScan(). You must then call M3dmapAddScan() with M_LINE_ALREADY_EXTRACTED and the reformatted uncorrected depth map. You can find examples of how this can be accomplished by following the MIL Processing Examples link in the MIL Control Center and looking under the CameraLaser3d directory. Some 3D sensors (including some laser profilers) perform all steps of 3D reconstruction on-board and transmit 3D data in the form of a precalibrated point cloud or depth map. If you have one of these devices, you do not need to use MIL to perform laser line profiling. This section only applies to data grabbed from cameras that perform laser-line extraction (but not calibration) on-board. For information on grabbing from 3D sensors that perform all steps of 3D reconstruction on-board, see the Grabbing from 3D sensors overview section of Chapter 42: Grabbing from 3D sensors. M3dmapAddScan() with M_LINE_ALREADY_EXTRACTED also supports uncorrected depth maps obtained using other means, provided they are in a supported format. This might be useful if any preprocessing or postprocessing is necessary during laser line extraction. For example, you can use the MimLocatePeak1d() function to create the uncorrected depth map. This function has an output format compatible with the input format of M3dmapAddScan(), so no manipulation of the data is necessary. For information on how to use the MimLocatePeak1d() function to create an uncorrected depth map, see the Peak intensity detection and depth maps section of Chapter 5: Specialized image processing. Calibrating a 3D reconstruction setup that uses a 3D camera Even when using a 3D camera that performs laser line extraction, you must calibrate your 3D reconstruction setup as described in the Calibrating your 3D reconstruction setup to create a point cloud section earlier in this chapter. In this case, you should not pass an entire uncorrected depth map to M3dmapAddScan(). Instead, for each gray value/height to use for calibration, you should only pass the uncorrected depth map row that corresponds to the laser line at the specified height (M3dmapControl() with M_CORRECTED_DEPTH); you must pass the row in a 1D image buffer (created, for example, using MbufAlloc1d()). Laser data format If the laser line data is extracted without making use of the 3D Reconstruction module, you must specify the format of the uncorrected depth map using M3dmapControl() and MimControl(). You must specify the number of bits used for the fractional part of each pixel's gray value in the resulting uncorrected depth map, using M3dmapControl() with M_EXTRACTION_FIXED_POINT control type. For example, if the gray value 47 (101111 in binary) must be interpreted as 23.5 (10111.1), you will need to set M_EXTRACTION_FIXED_POINT to 1. You must also specify the scan lane direction of the laser line in the camera's field of view, using MimControl() with M_SCAN_LANE_DIRECTION. Essentially, you must specify the orientation of the laser line in the internal images that the camera takes to generate the depth map. You can select either M_VERTICAL, if the images contain a horizontal laser line, or M_HORIZONTAL, if the images contain a vertical laser line. If the M_SCAN_LANE_DIRECTION control type is set to M_VERTICAL, the uncorrected depth map must contain M rows and N columns, where: M is the number of internal images taken containing the laser line. One image generates one row of data, where image m corresponds to row m in the uncorrected depth map (0 &lt;= m &lt;= M - 1). N is the X-size, in pixels, of the laser line images. One pixel corresponds to one column of data, where the pixel distance of the laser line in column n of the laser line image, corresponds to the pixel value in column n in the uncorrected depth map (0 &lt;= n &lt;= N - 1). Each entry (m, n) in the uncorrected depth map must contain a value d, which is the vertical distance of the laser line in column n of the laser line image m. Note that the data d should be stored in the uncorrected depth map as a pixel with a gray level value bit-shifted left by the number of times equal to the value of M_EXTRACTION_FIXED_POINT. For example, if M_EXTRACTION_FIXED_POINT is set to 1, 23.5 (10111.1 in binary) should be stored as 47 (101111 in binary). If the M_SCAN_LANE_DIRECTION control type is set to M_HORIZONTAL, the uncorrected depth map must contain M rows and N columns, where: M is the number of internal images taken containing the laser line. One image generates one row of data, where image m corresponds to row m in the uncorrected depth map (0 &lt;= m &lt;= M - 1). N is the Y-size, in pixels, of the laser line images. One pixel corresponds to one row of data, where the pixel distance of the laser line in row n of the laser line image corresponds to the pixel in column n in the uncorrected depth map (0 &lt;= n &lt;= N - 1). Each entry (m, n) in the uncorrected depth map must contain a value d, which is the horizontal distance of the laser line at row n in the laser line image m. Note that while the orientation of the laser line in the image changes in this mode, the orientation of the uncorrected depth map does not. Consequently, row n of pixels in the laser line images actually corresponds to column n in the uncorrected depth map. This fact is illustrated in the following image. Using 3D cameras that output uncorrected depth maps Calibrating a 3D reconstruction setup that uses a 3D camera Laser data format ",
      "wordCount": 980,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Multiple_camera_laser_pairs",
      "version": null,
      "title": "Multiple camera-laser pairs",
      "subTitles": [
        "Multiple camera-laser pair setup",
        "Two lasers one camera",
        "Calibrating the 3D reconstruction contexts in a multiple camera-laser pair setup"
      ],
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Multiple_camera_laser_pairs.htm",
      "text": " Multiple camera-laser pairs When performing 3D reconstruction to create a point cloud, it is often useful to use multiple cameras and multiple laser planes to solve laser and camera occlusion problems. Using multiple cameras and multiple laser planes, you can create multiple point clouds of the same object(s), often revealing parts of the object(s) that would be occluded if using only one camera or laser plane. All the cameras and lasers are divided into camera-laser pairs, one pair for each camera and laser combination. A camera or a laser can be used in multiple camera-laser pairs, but each camera-laser pair must be unique. Before being able to use multiple cameras and/or lasers, you must consider nuances to the setup and 3D reconstruction calibration of the multiple camera-laser pairs. Multiple camera-laser pair setup In a multiple camera-laser pair setup, each camera and each laser can be used in one or more camera-laser pairs. Each camera-laser pair is defined by its own 3D reconstruction context. During allocation, you must specify a camera label (M_CAMERA_LABEL()) for the camera being used and a laser label (M_LASER_LABEL()) for the laser being used. A camera label can be any positive integer that is unique among the labels assigned to other cameras; the same applies for a laser label. The following example illustrates two cameras and two lasers organized into three camera-laser pairs. Note that camera label 1 is used in two contexts (context 1 and context 2) and laser label 2 is also used in two contexts (context 2 and context 3). 3D reconstruction context Camera label Laser label Context1 1 1 Context2 1 2 Context3 2 2 Note that multiple camera-laser pairs are only available in M_CALIBRATED_CAMERA_LINEAR_MOTION mode. Two lasers one camera In the case where you have a camera that is being used in two separate camera-laser pairs, images grabbed by the camera contain both laser lines, as shown in the image below. Passing an image with two distinct laser lines to M3dmapAddScan() will produce unpredictable results, so you must partition the image into two child image buffers (MbufChild2d()). Each child buffer must show only the laser line for a single laser. For the procedure to partition an image buffer into child buffers, see the Child buffers, regions of interest, and fixturing section of Chapter 2: Building an application. To ensure that the laser line of one laser does not cross over into the child image buffer intended for the other laser, you can setup your lasers such that their laser planes intersect above the tallest point of the objects that you are scanning; you must place your camera above the object looking down at it. The following image demonstrates such a setup. Remember that you must pass the identifier of the child buffer to M3dmapAddScan() and not the identifier of the original image buffer. Calibrating the 3D reconstruction contexts in a multiple camera-laser pair setup Calibrating a 3D reconstruction setup with multiple camera-laser pairs is similar to calibrating with a single camera-laser pair, which requires that you pass a 3D reconstruction context, a M_LASER_CALIBRATION_DATA result buffer with laser line data in it, and the camera calibration context to M3dmapCalibrate(). With multiple camera-laser pairs, you supply an array of 3D reconstruction contexts, an array of M_LASER_CALIBRATION_DATA result buffers with laser line data in them, and an array of camera calibration contexts to M3dmapCalibrateMultiple(). The most important thing to consider in the process of creating these arrays and filling them with all the data M3dmapCalibrateMultiple() needs to calibrate the setup, is the order of the contexts and result buffers in their respective arrays. The first 3D reconstruction context in its array, the first M_LASER_CALIBRATION_DATA result buffer in its array, and the first camera calibration context in its array all correspond to the first camera-laser pair. The second 3D reconstruction context, the second M_LASER_CALIBRATION_DATA result buffer, and the second camera calibration context correspond to the second camera-laser pair, and so on. Consequently, all three arrays must be the same size, which is the total number of camera-laser pairs in your setup. It is important to note that for the camera calibration context array to be the same size as the other two arrays, you might repeat the same camera calibration context identifier. You pass these three arrays to M3dmapCalibrateMultiple(), which calibrates each 3D reconstruction context/camera-laser pair. The following table shows the three arrays needed for the two camera/two laser setup used in the example found in the Multiple camera-laser pair setup subsection of this section. Camera-laser pair 3D reconstruction context array M3dmapAlloc() with M_LASER and M_CALIBRATED_CAMERA_LINEAR_MOTION 3D reconstruction calibration result buffer array M3dmapAllocResult() with M_LASER_CALIBRATION_DATA Camera calibration context array McalAlloc() with M_3D_ROBOTICS or M_TSAI_BASED Camera1/Laser1 (Array index 0) 3dmap context 1 3dmap result buffer 1 Camera calibration context 1 Camera1/Laser2 (Array index 1) 3dmap context 2 3dmap result buffer 2 Camera calibration context 1 Camera2/Laser2 (Array index 2) 3dmap context 3 3dmap result buffer 3 Camera calibration context 2 To calibrate the 3D reconstruction contexts in a multiple camera-laser pair setup, you need three arrays: an array of 3D contexts, an array of 3D result buffers, and an array of calibrated camera calibration contexts. To create and fill the arrays, perform the following: Create an array and fill it with the identifiers of 3D reconstruction contexts. Each camera-laser pair in your setup must have its own 3D reconstruction context, allocated using M3dmapAlloc(). Each context must be set to M_CALIBRATED_CAMERA_LINEAR_MOTION and must have a value for M_CAMERA_LABEL() and M_LASER_LABEL(). Create a second array and fill it with the identifiers of 3D reconstruction result buffers. Each camera-laser pair in your setup must have its own 3D reconstruction result buffer, allocated using M3dmapAllocResult(). Each result buffer must be of type M_LASER_CALIBRATION_DATA. Note that both the first and second array must be the same size, since they both require an index for each camera-laser pair. Create a third array the same size as the first two and fill it with the identifiers of camera calibration contexts. Each camera in your setup must have its own camera calibration context, allocated using McalAlloc() with M_TSAI_BASED or M_3D_ROBOTICS, and calibrated using McalGrid() or McalList(). For details, see Calibrating using calibration points from a grid and the Calibrating using calibration points from a list section of Chapter 28: Calibrating your camera setup. For each camera, use McalInquire() with M_CALIBRATION_STATUS to ensure that the camera calibration has been successfully performed. In the case of a camera being used in more than one camera-laser pair, the camera calibration context array must repeat the identifier for its camera calibration, as in the above example. When calibrating multiple cameras for a 3D reconstruction setup, there are three special considerations: Some cameras might have to specify an X and Y offset from the first camera, using McalGrid() with GridOffsetX and GridOffsetY, so that all cameras exist in the same absolute coordinate system. See the Several fixed cameras and fixed object: grid offset example subsection of the Calibrating a camera setup that analyzes large objects section of Chapter 28: Calibrating your camera setup. You might have to specify the orientation of the grid used to calibrate each camera, via a hint pixel. See the Determining the grid's reference calibration point subsection of the Calibrating using calibration points from a grid section of Chapter 28: Calibrating your camera setup. For greater accuracy, you might have to specify the thickness of your grid for each camera calibration using McalGrid() with GridOffsetZ. See the Moving the relative coordinate system to account for height section of Chapter 34: 3D analysis using planar views of an object. Once you have the three arrays, you must extract laser line information from images into the M_LASER_CALIBRATION_DATA result buffers. To extract the laser line information, perform the following: Grab an image of a laser line on a planar object that has a known height. Use the camera associated with the first 3D reconstruction context in the 3D reconstruction context array. Specify the Z-coordinate of the top of that planar object in the absolute coordinate system, using M3dmapControl() with the first 3D reconstruction context in the 3D reconstruction context array and with M_CORRECTED_DEPTH. Since by default the Z-axis of the absolute coordinate system is pointing down, this value is often negative. Use M3dmapAddScan() to extract the laser line information from the grabbed image and store it in the result buffer. When calling M3dmapAddScan(), the 3D reconstruction calibration result buffer and the 3D reconstruction context must be in the same array position in their respective arrays. For example, if you specify the 3D reconstruction context in the first array position of the context array, you must also specify the 3D reconstruction calibration result buffer in the first position in the result buffer array. For other methods of providing the laser line data, see the Using 3D cameras that output uncorrected depth maps section earlier in this chapter. Repeat this process for each camera-laser pair, ensuring the use of the correct result buffer and context in their respective arrays. Repeat steps 1 to 4 for every plane height that you want to use to calibrate your 3D reconstruction setup for that camera-laser pair. If you are calibrating for a vertical laser plane (parallel to the XZ-plane), only one reference plane is required. If the laser plane is not vertical (that is, the laser plane is at an angle from the XZ-plane), you must provide a minimum of 2 reference planes. However, even if you are using a vertical laser plane, your results will be more accurate if you calibrate using more plane heights. Note that you can use the surface on which the object is resting as a reference plane. The size and pixel depth of the source image buffer containing the laser lines must not change when making multiple calls to M3dmapAddScan() while using the same destination result buffer. Once you have provided the 3D reconstruction contexts and result buffers with depth information, perform the following: Call M3dmapCalibrateMultiple() with the 3D reconstruction context array, the 3D reconstruction result buffer array, and the camera calibration context array, and specify the size of the arrays. For each 3D reconstruction context, use M3dmapInquire() with M_CALIBRATION_STATUS to ensure that the calibration of the 3D reconstruction setup has been successfully performed. Free the 3D reconstruction calibration result buffers using M3dmapFree(). Multiple camera-laser pairs Multiple camera-laser pair setup Two lasers one camera Calibrating the 3D reconstruction contexts in a multiple camera-laser pair setup ",
      "wordCount": 1739,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_Partially_corrected_depth_maps",
      "version": null,
      "title": "Partially corrected depth maps",
      "subTitles": [
        "Calibrating for a partially corrected depth map",
        "Generating a partially corrected depth map",
        "Inspecting the calibration state of a 3D reconstruction context"
      ],
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\Partially_corrected_depth_maps.htm",
      "text": " Partially corrected depth maps Depth maps come in three types: uncorrected, partially corrected, and fully corrected. Partially corrected depth maps are corrected (calibrated) for depth, but not for camera distortion. Their pixel intensities correspond to the heights of the scanned objects, but their pixel coordinates do not correspond to the real-world coordinates of scanned objects. Generating a partially corrected depth map is similar to generating a fully corrected depth map, with a few exceptions. To generate a partially corrected depth map, you must allocate a M_DEPTH_CORRECTION 3D reconstruction context. Once this is done, you must calibrate your 3D reconstruction context for depth; however, to generate a partially corrected depth map, you don't need to calibrate the camera. Once the setup has been calibrated and tested, you must allocate a 3D reconstruction result buffer of type M_DEPTH_CORRECTED_DATA for runtime scanning. Note that a partially corrected depth map can only be generated from a single camera-laser pair. Calibrating for a partially corrected depth map To generate a partially corrected depth map, you must first have a properly configured 3D reconstruction setup, which includes the physical setup (such as camera placement and laser line setup) and can include adjusting MIL settings. For more information, see the Configuring the laser line profiling setup section earlier in this chapter. Once this is complete, you must calibrate the 3D reconstruction context for depth as follows. Note that the following procedure will calibrate the 3D setup for depth and does not calibrate the camera, which is unnecessary for partial depth maps. Allocate a 3D reconstruction context using M3dmapAlloc() with M_DEPTH_CORRECTION. Allocate a 3D reconstruction calibration result buffer using M3dmapAllocResult() with M_LASER_CALIBRATION_DATA. Grab an image of a laser line on a planar object that has a known height. The image of a laser line on an object at a known height is called a reference plane. Specify the gray value associated with the height of the reference plane, using M3dmapControl() with M_CORRECTED_DEPTH. Use M3dmapAddScan() to extract the laser line information from the grabbed image and add this information to the 3D reconstruction calibration result buffer. For other methods of providing the laser line data, see the Using 3D cameras that output uncorrected depth maps section earlier in this chapter. If, after calling M3dmapAddScan(), but before calling M3dmapCalibrate(), you need to discard the last scan added (for example, as the result of a diagnosis using M3dmapDraw() with M_DRAW_PEAKS_LAST), it is possible to do so by calling M3dmapClear() with M_REMOVE_LAST_SCAN. Repeat steps 3 to 5 for every reference plane that you want to use to calibrate your 3D reconstruction setup. You can calibrate using only a single reference plane; however, your results will be more accurate if you calibrate using more plane heights. Note that you can use the surface on which the object is resting as a reference plane. The size and depth of the source image buffer containing the laser lines must not change when making multiple calls to M3dmapAddScan() and you must use the same destination result buffer. Call M3dmapCalibrate() with the 3D reconstruction context, calibration result buffer, and camera calibration context. Use M3dmapInquire() with M_CALIBRATION_STATUS, while specifying the 3D reconstruction context, to ensure that the calibration of the 3D reconstruction setup has been successfully performed. Free the 3D reconstruction calibration result buffer using M3dmapFree(). For heights between those defined during 3D reconstruction calibration, the module will perform linear interpolation. You can inspect the 3D reconstruction calibration state of the pixels once the 3D context has been calibrated. See the Inspecting the calibration state of a 3D reconstruction context subsection of this section. The following code snippet is an example of the steps required to calibrate a 3D reconstruction setup that can generate a partially corrected depth map. /* Allocate 3dmap objects. */ M3dmapAlloc(MilSystemId, M_LASER, M_DEPTH_CORRECTION, &amp;LaserId); M3dmapAllocResult(MilSystemId, M_LASER_CALIBRATION_DATA, M_DEFAULT, &amp;ScanId); /* Inquire internal locate peak Mim context Id, if peak detection needs configuration. */ M3dmapInquire(LaserId, M_DEFAULT, M_LOCATE_PEAK_1D_CONTEXT_ID, &amp;MilPeakLocatorId); /* Set settings with M3dmapControl() and MimControl(), if needed. */ /* ... */ for (n = 0; n &lt; NB_CALIBRATION_IMAGES; n++) { /* Grab next image. */ /* MbufLoad() can also be used to load an image. */ MdigGrab(DigId, MilImageId); /* Set desired corrected depth of next reference plane. */ /* CorrectedDepths is an array which has been filled with known depths. */ M3dmapControl(LaserId, M_DEFAULT, M_CORRECTED_DEPTH, CorrectedDepths[n]); /* Analyze the image to extract laser line. */ M3dmapAddScan(LaserId, ScanId, MilImageId, M_NULL, M_NULL, M_DEFAULT, M_DEFAULT); } /* Calibrate the laser profiling context using reference planes of known heights. */ M3dmapCalibrate(LaserId, ScanId, M_NULL, M_DEFAULT); Generating a partially corrected depth map Once your M_DEPTH_CORRECTED_DATA 3D reconstruction context has been calibrated, you are ready for runtime scanning. The following steps provide a basic methodology for runtime scanning using the MIL 3D Reconstruction module. Allocate a new 3D reconstruction result buffer to hold the partially corrected depth map, using M3dmapAllocResult() with M_DEPTH_CORRECTED_DATA. Grab a series of images of an object as it passes through the laser plane. For each image, extract the laser line information from the image and add the data to the M_DEPTH_CORRECTED_DATA 3D reconstruction result buffer, using M3dmapAddScan(). The 3D reconstruction result buffer now contains a partially corrected depth map. Copy the depth map to an image buffer using M3dmapCopyResult() with M_PARTIALLY_CORRECTED_DEPTH_MAP. If required, obtain additional information about the depth map using M3dmapGetResult(). Free all your allocated objects using M3dmapFree() and McalFree(). In M_DEPTH_CORRECTION 3D reconstruction mode, M3dmapCopyResult() with M_PARTIALLY_CORRECTED_DEPTH_MAP generates a partially corrected depth map and tries to store the entire depth map in the specified image buffer. As such, there are restrictions on the dimensions of the image buffer used to store the generated depth map. The X-size of the depth map image buffer must be at least the X-size of the laser line images, if MimControl() with M_SCAN_LANE_DIRECTION is set to M_VERTICAL. If M_SCAN_LANE_DIRECTION is set to M_HORIZONTAL, the X-size of the depth map image buffer must be at least the Y-size of the laser line images. Note that to inquire the scan lane direction, you must first call M3dmapInquire() with M_LOCATE_PEAK_1D_CONTEXT_ID to acquire the internal image processing context, then use it on MimInquire() with M_SCAN_LANE_DIRECTION. The required Y-size of the depth map image buffer depends on the number of laser scan lines stored in the result buffer. As such, the Y-size of the depth map image buffer must be bigger than either the number of laser lines extracted or the value of M3dmapControl() with M_MAX_FRAMES, whichever is smaller. The depth map image buffer must be an 8-bit or 16-bit unsigned buffer. Note that you can call M3dmapGetResult() with M_PARTIALLY_CORRECTED_DEPTH_MAP_SIZE_X or M_PARTIALLY_CORRECTED_DEPTH_MAP_SIZE_Y to determine the minimum required X-size and Y-size of the depth map image buffer, respectively. The following code snippet shows how to generate a partially corrected depth map. /* Retrieve the expected SizeX and SizeY of the depth map and type of the intensity map.*/ M3dmapGetResult(ScanId, M_DEFAULT, M_PARTIALLY_CORRECTED_DEPTH_MAP_SIZE_X+M_TYPE_MIL_INT, &amp;SizeX); M3dmapGetResult(ScanId, M_DEFAULT, M_PARTIALLY_CORRECTED_DEPTH_MAP_SIZE_Y+M_TYPE_MIL_INT, &amp;SizeY); M3dmapGetResult(ScanId, M_DEFAULT, M_INTENSITY_MAP_BUFFER_TYPE+M_TYPE_MIL_INT, &amp;IntensityMapType); /* Allocate image buffers for the depth map and intensity map. */ MbufAlloc2d(MilSystemId, SizeX, SizeY, 16+M_UNSIGNED, M_IMAGE+M_PROC, &amp;DepthMapImageId); MbufAlloc2d(MilSystemId, SizeX, SizeY, IntensityMapType, M_IMAGE+M_PROC, &amp;IntensityMapImageId); /* Generate the depth map and intensity map. */ M3dmapCopyResult(ScanId, M_DEFAULT, DepthMapImageId, M_PARTIALLY_CORRECTED_DEPTH_MAP, M_DEFAULT); M3dmapCopyResult(ScanId, M_DEFAULT, IntensityMapImageId, M_INTENSITY_MAP, M_DEFAULT); Inspecting the calibration state of a 3D reconstruction context After calibrating a 3D reconstruction context in M_DEPTH_CORRECTION mode, it is possible to inspect the 3D reconstruction calibration state of each pixel in subsequent laser line images, using either M3dmapDraw() or M3dmapInquire(). By doing so, you can determine whether the pixels are well calibrated, or if they are interpolated, inverted, or left uncalibrated due to missing data. Unless otherwise specified, if you have regions with missing or invalid data, you should probably recalibrate your 3D reconstruction setup for depth. Using M3dmapDraw(), you can draw: The region(s) where the laser line can appear in subsequent laser line images (M_DRAW_REGION_VALID). This operation draws all pixels that have a valid height associated with them. The region(s) where the laser line cannot appear in subsequent laser line images, because the images are not calibrated in this region (M_DRAW_REGION_UNCALIBRATED). This operation draws all pixels which are not associated with a valid height, because they are found outside the region bounded by the calibration laser lines. The region(s) where the laser line can appear in subsequent laser line images, but where results are less accurate due to interpolation (M_DRAW_REGION_INTERPOLATED). This operation draws all pixels that are calibrated by interpolation, due to missing data (gaps) in the calibration laser lines. These pixels have a valid height associated with them, but the height is less accurate than if there had been no missing data in the calibration laser lines. The region(s) in subsequent laser line images where the laser line is interpreted incorrectly due to an inversion during 3D reconstruction calibration (M_DRAW_REGION_INVERTED). An inversion occurs when a calibration laser line specified to be at a lower height is found above a calibration laser line specified to be at a higher height. For example, if the laser line representing a height of 24 is found above the laser line representing a height of 36, the region between these laser lines is inverted. These pixels have a valid height associated with them; however, they will be incorrect. Within an inverted region, pixels that should be associated with a height greater than that of pixels on the previous row (or column, depending on the scan orientation) are instead associated with lower heights. The region(s) where the laser line cannot appear in subsequent laser line images because of missing data in the calibration laser lines, and where the pixels cannot be calibrated by interpolation (M_DRAW_REGION_MISSING_DATA). This operation draws all pixels that are not associated with a valid height because of missing data (gaps) in the calibration laser lines and that cannot be calibrated by interpolation. The following image illustrates how to use M_DRAW_REGION_... to diagnose your calibration of the laser line image. With M3dmapInquire(), it is possible to obtain this 3D reconstruction calibration information as statistics. Based on the number of laser line calibration planes grabbed during 3D reconstruction calibration, you can retrieve an array detailing the number of missing depth values (data points) or inversions per column (using M_NUMBER_OF_MISSING_DATA_PER_COLUMN or M_NUMBER_OF_INVERSIONS_PER_COLUMN, respectively). For example, in the image above, 5 depth maps planes were grabbed during 3D reconstructions calibration and therefore the number of missing data points or inversions can be any whole number from 0 to 5 for every column. Alternatively, you can retrieve the number of columns with missing data points or with inversions (using M_NUMBER_OF_COLUMNS_WITH_MISSING_DATA or M_NUMBER_OF_COLUMNS_WITH_INVERSIONS, respectively). Partially corrected depth maps Calibrating for a partially corrected depth map Generating a partially corrected depth map Inspecting the calibration state of a 3D reconstruction context ",
      "wordCount": 1780,
      "subEntries": []
    },
    {
      "id": "UG_3D_reconstruction_using_laser_line_profiling_MIL_3D_Reconstruction_example",
      "version": null,
      "title": "MIL 3D reconstruction example",
      "subTitles": null,
      "location": "MIL UG P06: 3D related information",
      "pageURL": "content\\UserGuide\\3D_reconstruction_using_laser_line_profiling\\MIL_3D_Reconstruction_example.htm",
      "text": " MIL 3D reconstruction example The 3D Reconstruction using laser line profiling example m3dmap.cpp creates a partially corrected depth map of a piece of wood's surface and a fully corrected depth map of a cookie. The partially corrected depth map of the wood's surface is then used by the Blob Analysis module to find any surface defects. The fully corrected depth map of the cookie is used to compute its volume. m3dmap.cpp MIL 3D reconstruction example ",
      "wordCount": 77,
      "subEntries": []
    }
  ]
}]