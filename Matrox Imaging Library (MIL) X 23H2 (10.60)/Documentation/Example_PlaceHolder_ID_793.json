[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_Mdlocr_CPP_mdlocr_cpp",
      "version": "2024020714",
      "title": "mdlocr.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /*******************************************************************************/ /* * File name: Mdlocr.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This program uses the Deep Learning Ocr module to read a product * expiry date. * First all strings are read, then a string model is defined based on the first * read to filter out the target string using its size and dimensions. * * Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved */ #include &lt;mil.h&gt; /* MIL image file specifications. */ #define IMAGE_FILE_TO_READ M_IMAGE_PATH MIL_TEXT(\"ExpiryDateAndLot2.mim\") /* Max string sizes. */ #define STRING_MAX_SIZE 256L /* Result number to define string model */ #define FIRST_READ_TARGET_INDEX 0L /*****************************************************************************/ /* Read. */ void Read(MIL_ID MilDisplay, MIL_ID MilDlocrContext, MIL_ID MilImage, MIL_ID MilOverlayImage, MIL_ID MilDlocrResult, MIL_INT StringMatchingMode) { MIL_INT NumberOfStringRead; /* Total number of strings to read. */ MIL_TEXT_CHAR StringResult[STRING_MAX_SIZE+1]; /* String of characters read. */ /* Perform the read operation on the specified target image. */ MdlocrRead(MilDlocrContext, MilImage, MilDlocrResult, StringMatchingMode); /* Get number of strings read and show the result. */ MdlocrGetResult(MilDlocrResult, M_GENERAL, M_GENERAL, M_STRING_NUMBER + M_TYPE_MIL_INT, &amp;NumberOfStringRead); /* Clear the display overlay. */ MdispControl(MilDisplay, M_OVERLAY_CLEAR, M_DEFAULT); if(NumberOfStringRead &gt;= 1) { MosPrintf( MIL_TEXT(\"The image was read successfully.\\n\\n\")); /* Draw read result. */ MgraControl(M_DEFAULT, M_COLOR, M_COLOR_CYAN); MdlocrDraw(M_DEFAULT, MilDlocrResult, MilOverlayImage, M_DRAW_STRING, M_ALL, M_DEFAULT, M_DEFAULT); MgraControl(M_DEFAULT, M_COLOR, M_COLOR_GREEN); MdlocrDraw(M_DEFAULT, MilDlocrResult, MilOverlayImage, M_DRAW_STRING_BOX, M_ALL, M_DEFAULT, M_DEFAULT); MgraControl(M_DEFAULT, M_COLOR, M_COLOR_RED); MdlocrDraw(M_DEFAULT, MilDlocrResult, MilOverlayImage, M_DRAW_STRING_INDEX, M_ALL, M_DEFAULT, M_DEFAULT); /* Print the read result. */ MosPrintf(MIL_TEXT(\" String\\n\") ); MosPrintf(MIL_TEXT(\" -----------------------------------\\n\") ); for(MIL_INT i = 0; i &lt; NumberOfStringRead; ++i) { MdlocrGetResult(MilDlocrResult, i, M_GENERAL, M_STRING, StringResult); MosPrintf(MIL_TEXT(\" %s\\n\"), StringResult); } MosPrintf(MIL_TEXT(\"\\n\")); } else { MosPrintf(MIL_TEXT(\"Error: no strings were read.\\n\")); } } /*****************************************************************************/ /* Main. */ int MosMain(void) { MIL_ID MilApplication; /* Application identifier. */ MIL_ID MilSystem; /* System identifier. */ MIL_ID MilDisplay; /* Display identifier. */ MIL_ID MilImage; /* Image buffer identifier. */ MIL_ID MilOverlayImage; /* Overlay image. */ MIL_ID MilDlocrContext; /* Dlocr context identifier. */ MIL_ID MilDlocrResult; /* Dlocr result buffer identifier. */ MIL_INT MaxSizeX; MIL_INT MaxSizeY; /* Print the example synopsis. */ MosPrintf(MIL_TEXT( \"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT( \"Mdlocr\\n\\n\")); MosPrintf(MIL_TEXT( \"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT( \"This program uses the Deep Learning Ocr module to read a product\\n\")); MosPrintf(MIL_TEXT( \"expiry date.\\n\")); MosPrintf(MIL_TEXT( \"First all strings are read, then a model is defined based on the first\\n\")); MosPrintf(MIL_TEXT( \"read to filter out the target string using its size and dimensions.\\n\\n\")); MosPrintf(MIL_TEXT( \"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT( \"Deep Learning OCR, Buffer, Display, Graphics.\\n\\n\")); /* Allocate defaults. */ MappAllocDefault(M_DEFAULT, &amp;MilApplication, &amp;MilSystem, &amp;MilDisplay, M_NULL, M_NULL); /* Restore the font definition image. */ MbufRestore(IMAGE_FILE_TO_READ, MilSystem, &amp;MilImage); /* Display the image and prepare for overlay annotations. */ MdispSelect(MilDisplay, MilImage); MdispControl(MilDisplay, M_OVERLAY, M_ENABLE); MdispInquire(MilDisplay, M_OVERLAY_ID, &amp;MilOverlayImage); /* Allocate a new empty dlocr context. */ MdlocrAlloc(MilSystem, M_OCR_NET1_BALANCED_V1, M_DEFAULT, &amp;MilDlocrContext); /* Allocate a new empty dlocr result buffer. */ MdlocrAllocResult(MilSystem, M_DLOCR_READ_RESULT, M_DEFAULT, &amp;MilDlocrResult); /* Set the context's target image max size X and Y Note that these dimensions can be superior to encompass several images. */ MbufInquire(MilImage, M_SIZE_X, &amp;MaxSizeX); MbufInquire(MilImage, M_SIZE_Y, &amp;MaxSizeY); MdlocrControl(MilDlocrContext, M_TARGET_MAX_SIZE_X, MaxSizeX); MdlocrControl(MilDlocrContext, M_TARGET_MAX_SIZE_Y, MaxSizeY); /* Preprocess the dlocr context. */ MdlocrPreprocess(MilDlocrContext, M_DEFAULT); /* First read. */ Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, M_READ_ALL); /* Pause to show results. */ MosPrintf(MIL_TEXT( \"First read without string model, the best before date was detected among\\n\")); MosPrintf(MIL_TEXT( \"others. We note the associated index (in red). It will be used in the next step\\n\")); MosPrintf(MIL_TEXT( \"to filter out the targeted string.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); /* Define string model from result. */ MdlocrDefineModelFromResult(MilDlocrContext, M_DEFAULT, MilDlocrResult, FIRST_READ_TARGET_INDEX, M_DEFAULT); /* This modification necessitates a new Preprocess. */ MdlocrPreprocess(MilDlocrContext, M_DEFAULT); /* Second read. */ Read(MilDisplay, MilDlocrContext, MilImage, MilOverlayImage, MilDlocrResult, M_MODEL_BASED); /* Pause to show results. */ MosPrintf(MIL_TEXT( \"We defined a string model from the result to filter out based on string size\\n\")); MosPrintf(MIL_TEXT( \"and character dimensions.\\n\")); MosPrintf(MIL_TEXT( \"Second read with the string model. Targeted string is detected.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); /* Free all allocations. */ MdlocrFree(MilDlocrContext); MdlocrFree(MilDlocrResult); MbufFree(MilImage); /* Free defaults. */ MappFreeDefault(MilApplication, MilSystem, MilDisplay, M_NULL, M_NULL); return 0; } ",
      "wordCount": 661
    }
  ]
}]