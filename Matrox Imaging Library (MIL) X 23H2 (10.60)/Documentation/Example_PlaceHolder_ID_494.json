[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_3dReconstruction_MultiCameraLaserCalibration_CPP_multicameralasercalibration_cpp",
      "version": "2024020714",
      "title": "multicameralasercalibration.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*****************************************************************************/ // // File name: MultiCameraLaserCalibration.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program calibrates a multi camera laser system. // It also diagnoses the calibration process to validate // the accuracy of the calibration result. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include &lt;vector&gt; #include &lt;map&gt; using std::vector; using std::map; #include \"LaserSystemConfiguration.h\" #include \"LaserSystemDiagnostic.h\" /**************************************************************************** Example description. ****************************************************************************/ void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"MultiCameraLaserCalibration\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This example demonstrates how to calibrate a multi camera laser\\n\") MIL_TEXT(\"system. For each step of the calibration, the application\\n\") MIL_TEXT(\"provides some diagnostics to validate the accuracy of the\\n\") MIL_TEXT(\"calibration result\\n\\n\") MIL_TEXT(\"Duplicate and change LaserSystemConfiguration.h to test your own \\n\") MIL_TEXT(\"configuration.\\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: 3D Map, Application, Buffer, Calibration, Display,\\n\") MIL_TEXT(\"Graphics, System, 3D Display, 3D Graphics and Image Processing.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } //***************************************************************************** // Constants. //***************************************************************************** static const MIL_INT LASER_PLANES_SLEEP = 250; // in ms static const MIL_INT MAX_PATH = 256; static const MIL_INT SINGLE_LABEL_OFFSET = 1000; //***************************************************************************** // Main. //***************************************************************************** int MosMain(void) { // Print Header. PrintHeader(); // Allocate the laser system configuration. CLaserSysConfig Cfg; // Allocate defaults. MIL_ID MilApplication = MappAlloc(M_DEFAULT, M_NULL); MIL_ID MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_NULL); // Allocate the visual diagnostic display. CLaserSysDiag* pDiagDisp = new CLaserSysDiag(MilSystem, NB_SYSTEMS); // Show the default scanning setup. MIL_ID MilSetupDisplay; MIL_ID MilSetupImage; if(IS_DEFAULT_SCANNING_SYSTEM) { MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_WINDOWED, &amp;MilSetupDisplay); MbufRestore(SETUP_IMAGE, MilSystem, &amp;MilSetupImage); MdispSelect(MilSetupDisplay, MilSetupImage); MosPrintf(MIL_TEXT(\"An illustration of the setup to calibrate is displayed.\\n\\n\") MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } // Allocate the camera calibration objects and calibrate them. vector&lt;MIL_ID&gt; MilCal(NB_CAMERAS); map&lt;MIL_INT, MIL_ID&gt; MilCalLabelMap; for(MIL_INT c = 0; c &lt; NB_CAMERAS; c++) { // Get a reference to the camera. const SCameraCal&amp; rCam = Cfg.CamCal(c); MosPrintf(MIL_TEXT(\"CAMERA%i CALIBRATION\\n\") MIL_TEXT(\"---------------------\\n\\n\"), rCam.CamLabel); // Allocate the camera. McalAlloc(MilSystem, M_TSAI_BASED, M_DEFAULT, &amp;MilCal[c]); MilCalLabelMap[rCam.CamLabel] = MilCal[c]; // Calibrate the intrinsic parameters of the camera. MIL_ID MilGridImage = MbufRestore(CAMERA_INT_PARAMS_IMAGE[c], MilSystem, M_NULL); rCam.CalibrateCameraInt(MilCal[c], MilGridImage); MosPrintf(MIL_TEXT(\"The camera was fully calibrated.\\n\\n\")); // Diagnose the camera calibration. pDiagDisp-&gt;DiagnoseCamCal(MilGridImage, MilCal[c]); pDiagDisp-&gt;UpdateDisplayAndWait(); MbufFree(MilGridImage); } // Calibrate the extrinsic parameters of the cameras, if necessary. for(MIL_INT c = 0; c &lt; NB_CAMERAS; c++) { // Get a reference to the camera. const SCameraCal&amp; rCam = Cfg.CamCal(c); if(rCam.pExtrinsicCal != NULL &amp;&amp; CAMERA_EXT_PARAMS_IMAGE[c] != NULL) { MosPrintf(MIL_TEXT(\"CAMERA%i EXTRINSIC PARAMETERS CALIBRATION\\n\") MIL_TEXT(\"-----------------------------------------\\n\\n\"), rCam.CamLabel); // Calibrate the extrinsic parameters of the camera. MIL_ID MilGridImage = MbufRestore(CAMERA_EXT_PARAMS_IMAGE[c], MilSystem, M_NULL); rCam.CalibrateCameraExt(MilCal[c], MilGridImage); MosPrintf(MIL_TEXT(\"The camera or grid was moved and the camera position was\\n\") MIL_TEXT(\"recalibrated.\\n\\n\")); // Diagnose the camera calibration. pDiagDisp-&gt;DiagnoseCamCal(MilGridImage, MilCal[c]); pDiagDisp-&gt;UpdateDisplayAndWait(); MbufFree(MilGridImage); } } // Allocate the 3D systems arrays. vector&lt;MIL_ID&gt; Mil3dmapContextSingle(NB_SYSTEMS); vector&lt;MIL_ID&gt; Mil3dmapContextMulti(NB_SYSTEMS); vector&lt;MIL_ID&gt; Mil3dmapCalData(NB_SYSTEMS); vector&lt;MIL_ID&gt; Mil3dmapCamCal(NB_SYSTEMS); vector&lt;MIL_ID&gt; MilAllPlanesImage(NB_SYSTEMS); MIL_INT64 DrawLabel = 0; // Extract the laser line calibration. for(MIL_INT s = 0; s &lt; NB_SYSTEMS; s++) { // Get a reference to the system. const SSingleSystemCal&amp; rSys = Cfg.System(s); MosPrintf(MIL_TEXT(\"SYSTEM CAMERA%i_LASER%i CALIBRATION\\n\") MIL_TEXT(\"-----------------------------------\\n\\n\"), rSys.CamCal.CamLabel, rSys.LaserCal.LaserLabel); // Allocate the 3dmap systems calibration objects. MIL_INT CLabel = M_CAMERA_LABEL(rSys.CamCal.CamLabel); MIL_INT LLabel = M_LASER_LABEL(rSys.LaserCal.LaserLabel); MIL_INT SingleLLabel = M_LASER_LABEL(SINGLE_LABEL_OFFSET + rSys.LaserCal.LaserLabel); M3dmapAlloc(MilSystem, M_LASER, M_CALIBRATED_CAMERA_LINEAR_MOTION + CLabel + SingleLLabel, &amp;Mil3dmapContextSingle[s]); M3dmapAlloc(MilSystem, M_LASER, M_CALIBRATED_CAMERA_LINEAR_MOTION + CLabel + LLabel, &amp;Mil3dmapContextMulti[s]); M3dmapAllocResult(MilSystem, M_LASER_CALIBRATION_DATA, M_DEFAULT, &amp;Mil3dmapCalData[s]); // Get the identifier of the camera calibration of the single system. Mil3dmapCamCal[s] = MilCalLabelMap[rSys.CamCal.CamLabel]; // Disable the display updates. pDiagDisp-&gt;Update(M_DISABLE); MIL_ID MilCameraImage; MIL_ID MilExtractionImage; for(MIL_INT p = 0; p &lt; rSys.LaserCal.NbPlanes; p++) { // Load the image and setup the extraction if extracting with the first plane. MIL_TEXT_CHAR ImageFile[MAX_PATH]; MosSprintf(ImageFile, MAX_PATH, SYS_LASER_CAL_IMAGES, s, p); if(p == 0) { MbufRestore(ImageFile, MilSystem, &amp;MilCameraImage); rSys.LaserLineExtraction.SetupLaserLineExtraction(Mil3dmapContextSingle[s]); rSys.ExtractionChild.SetupExtractionChild(Mil3dmapContextSingle[s]); rSys.ExtractionChild.SetupExtractionChild(Mil3dmapContextMulti[s]); rSys.ExtractionChild.AllocExtractionChild(MilCameraImage, &amp;MilExtractionImage); MbufClone(MilExtractionImage, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_COPY_SOURCE_DATA, &amp;MilAllPlanesImage[s]); } else { MbufLoad(ImageFile, MilCameraImage); MimArith(MilExtractionImage, MilAllPlanesImage[s], MilAllPlanesImage[s], M_MAX); } // Set the corrected depth. rSys.LaserCal.SetCalPlane(Mil3dmapContextSingle[s], p); // Extract the laser line. M3dmapAddScan(Mil3dmapContextSingle[s], Mil3dmapCalData[s], MilExtractionImage, M_NULL, M_NULL, M_DEFAULT, M_DEFAULT); pDiagDisp-&gt;DiagnoseLaserLineExtraction(MilExtractionImage, Mil3dmapCalData[s]); pDiagDisp-&gt;Update(M_ENABLE); if(p == 0) { MosPrintf(MIL_TEXT(\"The peaks extracted from the laser line are displayed.\\n\\n\") MIL_TEXT(\"Press any key to extract lines at other depths.\\n\\n\")); MosGetch(); } else MosSleep(LASER_PLANES_SLEEP); pDiagDisp-&gt;Update(M_DISABLE); } // Free the camera image. MbufFree(MilExtractionImage); MbufFree(MilCameraImage); // Calibrate the single laser system. M3dmapCalibrate(Mil3dmapContextSingle[s], Mil3dmapCalData[s], Mil3dmapCamCal[s], M_DEFAULT); // Diagnose the 3d calibration. MosPrintf(MIL_TEXT(\"The calibration of the single camera-laser system is displayed.\\n\\n\")); pDiagDisp-&gt;Update(M_DISABLE); DrawLabel = pDiagDisp-&gt;DiagnoseSingleCalibration(Mil3dmapContextSingle[s], MilAllPlanesImage[s]); pDiagDisp-&gt;UpdateDisplayAndWait(); // Hide the 3d display. pDiagDisp-&gt;Hide3dDisplay(); pDiagDisp-&gt;ClearAll(DrawLabel); } MosPrintf(MIL_TEXT(\"MULTI SYSTEM CALIBRATION\\n\") MIL_TEXT(\"--------------------------\\n\\n\")); // Calibrate the complete system. M3dmapCalibrateMultiple(&amp;Mil3dmapContextMulti[0], &amp;Mil3dmapCalData[0], &amp;Mil3dmapCamCal[0], NB_SYSTEMS, M_DEFAULT); MosPrintf(MIL_TEXT(\"The calibration of the complete camera-laser system is displayed.\\n\\n\")); // Diagnose the full calibration. pDiagDisp-&gt;DiagnoseFullCalibration(Mil3dmapContextMulti, MilAllPlanesImage); // Go interactive. pDiagDisp-&gt;StartInteractive(Cfg, Mil3dmapContextSingle, Mil3dmapContextMulti, MilAllPlanesImage); pDiagDisp-&gt;UpdateDisplayAndWait(); pDiagDisp-&gt;EndInteractive(); // Free camera calibrations. for(MIL_INT c = 0; c &lt; NB_CAMERAS; c++) McalFree(MilCal[c]); // Free systems data. for(MIL_INT s = 0; s &lt; NB_SYSTEMS; s++) { MbufFree(MilAllPlanesImage[s]); M3dmapFree(Mil3dmapContextSingle[s]); M3dmapFree(Mil3dmapContextMulti[s]); M3dmapFree(Mil3dmapCalData[s]); } if(IS_DEFAULT_SCANNING_SYSTEM) { MbufFree(MilSetupImage); MdispFree(MilSetupDisplay); } // Delete the diagnostic display. delete pDiagDisp; // Free allocations. MsysFree(MilSystem); MappFree(MilApplication); return 0; } ",
      "wordCount": 791
    }
  ]
}]