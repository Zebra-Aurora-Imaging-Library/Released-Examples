[{
  "id": "Readme_milUSB3Vision",
  "version": "2023100322",
  "title": "milUSB3Vision",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Readme_milUSB3Vision_MILUSB3Vision",
      "title": "MILUSB3Vision",
      "location": "MIL Release Notes",
      "pageURL": "\\milUSB3Vision\\MILUSB3Vision.htm",
      "text": " Matrox Imaging Library (MIL) X Update 108 Release Notes (USB3 Vision with MIL) April 2021 ?(c) Copyright Matrox Electronic Systems Ltd., 1992-2021. &nbsp; This document outlines what is new with MIL?s USB3 Vision system and explains the current limitations and particularities. It also presents last-minute information that did not make it into the manual or on-line help. Note that this help file serves to complement your manual. The information found in this file overrides your formally documented material. Contents 1.???? USB3 Vision with MIL 1.1???????? Differences between MIL X Update 108 and MIL 10 Update 64 1.2???????? What?s new in MIL X Update 108 1.2.1????? Standards Compliance 1.2.2????? Summary of new features 1.2.3????? Matrox Capture Works 1.2.4????? Additions to the command reference. 1.2.5????? Improvements 1.2.6????? Behavioral changes 1.2.7????? Bug fixes 1.3???????? Differences between MIL 10 Update 64 and MIL 10 Update 30 1.4???????? What's new in MIL 10 Update 64 1.4.1????? New features summary 1.4.2????? Additions to the command reference 1.4.3????? Bug Fixes 1.5???????? Differences between MIL 10 Update 30 and MIL 10 Update 19 1.6???????? What's new in MIL 10 Update 30 1.6.1????? New features summary 1.6.2????? Bug Fixes 1.6.3????? Additions to the command reference 1.6.4????? Behavior change 1.6.5????? Standard compliance 1.7???????? Differences between MIL 10 Update 19 and MIL 10 Update 1 1.8???????? What's new in MIL 10 Update 19 1.8.1????? New features summary 1.8.2????? Behavior change 1.8.3????? Bug Fixes 1.8.4????? Documentation 1.8.5????? Capture Assistant 2.???? Known Issues 3.???? Intellicam bug fixes 4.???? Location of examples (in the help file) 5.???? Troubleshooting &nbsp; 1.&nbsp;&nbsp; USB3 Vision with MIL 1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Differences between MIL X Update 108 and MIL 10 Update 64 New Matrox Capture Works utility. Support for grab containers. Support for M_DYNAMIC grab buffers. Various bug fixes and improvements. 1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; What?s new in MIL X Update 108 1.2.1&nbsp;&nbsp;&nbsp; Standards Compliance The MIL driver for USB3 Vision supports the following standards: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? GenAPI Standard Version 3.2. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? Standard Feature Naming Convention (SFNC) version 2.5. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenCP 1.1. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB3 Vision 1.1. 1.2.2&nbsp;&nbsp;&nbsp; Summary of new features Matrox Capture Works utility. Support for grab containers. Support for M_DYNAMIC buffers. Support for device enumeration API. Support for the redesigned Matrox Feature Browser. 1.2.3&nbsp;&nbsp;&nbsp; Matrox Capture Works Matrox Capture Works is a new interactive utility to configure and test devices that make use of a GenICam-based interface standard. The version included in MIL X Update 108 adds support for the MIL USB3 Vision interface standard. Matrox Capture Works will completely replace the Matrox Capture Assistant interactive utility in time and is available for Windows and eventually Linux. 1.2.4&nbsp;&nbsp;&nbsp; Additions to the command reference. Additions to MsysControl() / MsysInquire() Support for M_DISCOVER_DEVICE. MsysControl(): Performs a device discovery. The ControlValue must be set to M_DEFAULT. Note: executing this control can trigger an M_CAMERA_PRESENT hook. Support for M_DISCOVER_DEVICE_COUNT. MsysInquire(): Inquires the number of devices present. Inquire returns a MIL_INT. Support for M_DISCOVER_DEVICE_DIGITIZER_NUMBER + N. MsysInquire(): Inquires the MIL digitizer device number associated to the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_INT. Support for M_DISCOVER_DEVICE_MANUFACTURER_NAME + N. MsysInquire(): Inquires the device's manufacturer name, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_MODEL_NAME + N. MsysInquire(): Inquires the device's model name, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_MANUFACTURER_INFO + N. MsysInquire(): Inquires the device's manufacturer-specific information, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_USER_NAME + N. MsysInquire(): Inquires the device's user programmable device name, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_VERSION + N. MsysInquire(): Inquires the device version of the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_SERIAL_NUMBER + N. MsysInquire(): Inquires the device serial number of the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_INTERFACE_NAME + N. MsysInquire(): Inquires the name of the host interface associated to the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_ADDRESS + N. MsysInquire(): Inquires the address of the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Additions to MbufAlloc?(): Support for grab containers. See container support in the Mbuf module of the MIL Help for details. Support for M_IMAGE + M_GRAB + M_DYNAMIC buffer attribute. Additions to MbufInquire?() Support for M_PFNC_VALUE. Returns the buffer?s format as defined in the GenICam Pixel Format Naming Convention (PFNC). Support for M_PFNC_SUPPORT. Returns M_YES if the PFNC format is a native MIL format. Returns M_WITH_COMPENSATION if the PFNC format is not a native MIL format but can be converted to a MIL native format. A buffer of this type can only be used as a source buffer. Returns M_NO if MIL cannot handle the format type. In this case the user has to access the buffer?s memory directly. MbufInquire() with M_HOST_ADDRESS can be used to get a pointer to the buffer?s data. Support for M_GRAB_TIME_STAMP. MbufInquire(): Inquires the time when MIL finished grabbing into the buffer, expressed in seconds. Inquire returns a MIL_DOUBLE. Support for M_GRAB_TIME_STAMP_NS. MbufInquire(): Inquires the time when MIL finished grabbing into the buffer, expressed in nanoseconds. Inquire returns a MIL_INT64. Support for M_CAMERA_TIME_STAMP. MbufInquire(): Inquires the time at which the device generated the frame of data, expressed in seconds. Inquire returns a MIL_DOUBLE. Support for M_CAMERA_TIME_STAMP_NS. MbufInquire(): Inquires the time at which the device generated the frame of data expressed in nanoseconds. Inquire returns a MIL_INT64. Support for M_COMPONENT_TIME_STAMP. MbufInquire(), MbufInquireContainer(): When using MbufInquire(), the BufId must be that of a component. When using MbufInquireContainer(), the BufId must be that of a container and the Component parameter must not be set to M_CONTAINER. When grabbing into a container, from a device transmitting data in GenDC format, this inquire gets the time at which the device generated the data component expressed in seconds. Zero is returned if there is no component time stamp available. Inquire returns a MIL_DOUBLE. Note: components belonging to the same container can have different component time stamps. Support for M_COMPONENT_TIME_STAMP_NS. MbufInquire(), MbufInquireContainer(): When using MbufInquire(), the BufId must be that of a component. When using MbufInquireContainer(), the BufId must be that of a container and the Component parameter must not be set to M_CONTAINER. When grabbing into a container, from a device transmitting data in GenDC format, this inquire gets the time at which the device generated the data component expressed in nanoseconds. Zero is returned if there is no component time stamp available. Inquire returns a MIL_INT64. Note: components belonging to the same container can have different component time stamps. Support for M_COMPONENT_TIME_STAMP_IS_PTP. MbufInquire(), MbufInquireContainer(): When using MbufInquire(), the BufId must be that of a component. When using MbufInquireContainer(), the Component parameter must not be set to M_CONTAINER. If M_COMPONENT_TIME_STAMP_IS_PTP returns M_TRUE, then M_COMPONENT_TIME_STAMP_NS is relative to the epoch January 1st 1970 0:00:00. Support for M_LAYOUT_MODIFICATION_COUNT. MbufInquireContainer(): When using MbufInquireContainer(), the BufId must be that of a container and the Component parameter must be set to M_CONTAINER. This value is modified every time a component is added or removed from the container. Inquire returns a MIL_INT. 1.2.5&nbsp;&nbsp;&nbsp; Improvements M_CONTAINER grab buffer support was added to the MIL USB3 Vision driver. A container is a data object that stores related buffers, referred to as the container?s buffer components. Components are automatically added to a container, when you grab into it or use it as a destination of a supported function. The Matrox Feature Browser was completely redesigned and now supports both Windows and Linux. Values of unavailable features are now kept blank in the Feature Browser. Added support for loading camera XML through DCF parameter: XmlFile. 1.2.6&nbsp;&nbsp;&nbsp; Behavioral changes An error message is now generated if MdigControl() is executed with M_WHITE_BALANCE and M_CALCULATE while a grab is in progress. The call would fail without error in previous updates. The device?s stream will now be immediately stopped after a grab completes when M_GC_STREAMING_STOP_DELAY is set to 0. In previous updates, the stream would be stopped from the stream control thread during its next time slice which resulted in the stream continuing for a bit longer. The USB3 Vision driver now allocates 10 auxiliary buffers at digitizer allocation time (up from 5). 1.2.7&nbsp;&nbsp;&nbsp; Bug fixes Fixed issue with camera user-defined name in Capture Assistant. Fixed issue with certain devices related to the final transfer size of a frame. Fixed error message on first grab from some devices. Fixed potential memory leak at driver unload. Fixed fatal exception that occurred when host hibernates while grabbing. Fixed variable frame size issue. MdigGetHookInfo(M_GC_FRAME_SIZE_Y) did not return the correct information. 1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Differences between MIL 10 Update 64 and MIL 10 Update 30 Various bug fixes were applied to MIL's USB3 Vision system. Note that MIL 10 Update 64 is a cumulative update, including all content from MIL 10 Update 1, MIL 10 Update 19, and MIL 10 Update 30. 1.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; What's new in MIL 10 Update 64 1.4.1&nbsp;&nbsp;&nbsp; New features summary ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Capture Assistant statistics now include an Endpoint Halt count to help diagnose a cable problem. Endpoint Halt is equivalent to a USB reset. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MIL's USB3 Vision system does not require MIL?s non-paged memory for image acquisition. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Optimizations for very large image acquisition. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New set of inquires for GenICam feature enumeration. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now using GenICam version 3.1. 1.4.2&nbsp;&nbsp;&nbsp; Additions to the command reference Additions to MdigInquireFeature(): Support for M_FEATURE_ENUM_ENTRY_TOOLTIP + N MdigInquireFeature(). Returns the nth enum entry?s tooltip string. The string size can be inquired by adding the M_STRING_SIZE combination constant. Support for M_FEATURE_ENUM_ENTRY_DESCRIPTION + N MdigInquireFeature(). Returns the nth enum entry?s description string. The string size can be inquired by adding the M_STRING_SIZE combination constant. Support for M_FEATURE_ENUM_ENTRY_ACCESS_MODE + N MdigInquireFeature(). Returns the nth enum entry?s access mode. See M_FEATURE_ACCESS_MODE in the MIL documentation for details. Support for M_FEATURE_ENUM_ENTRY_VISIBILITY + N MdigInquireFeature(). Returns the nth enum entry?s visibility value. See M_FEATURE_VISIBILLITY in the MIL documentation for details. Support for M_FEATURE_ENUM_ENTRY_CACHING_MODE + N MdigInquireFeature(). Returns the nth enum entry?s caching mode. See M_FEATURE_CACHING_MODE in the MIL documentation for details. Support for M_FEATURE_ENUM_ENTRY_STREAMABLE + N MdigInquireFeature(). Returns the nth enum entry?s streamable value. See M_FEATURE_STREAMABLE in the MIL documentation for details. Support for M_FEATURE_SELECTOR_COUNT MdigInquireFeature(). Returns the number of features selected by the specified FeatureName parameter. Note that the FeatureName parameter must specify a selector type feature. Support for M_FEATURE_SELECTOR_NAME + N MdigInquireFeature(). Returns the nth feature name, as a string, selected by the specified feature. Note that the FeatureName parameter must specify a selector type feature. Support for M_FEATURE_VALID_VALUE_COUNT MdigInquireFeature(). Integer and floating point type features can support a fixed list of valid values instead of the traditional minimum, maximum and increment values. M_FEATURE_VALID_VALUE_COUNT returns the number of valid values supported. A value of 0 returned indicates the feature does not support a list of valid values; minimum, maximum and increment values must be used instead. Support for M_FEATURE_VALID_VALUE + N MdigInquireFeature(). Returns the nth valid value for an integer of floating point type feature. 1.4.3&nbsp;&nbsp;&nbsp; Bug Fixes ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; More graceful approach to MdigHalt() to avoid disconnecting some cameras. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acquisition using chunk mode with image-part disabled is now working. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The 34 camera limitation was removed. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed GenICam?s event parser that was broken in MIL 10 Update 30. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Communication errors will now retry 3 times in accordance with GenCP specification. 1.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Differences between MIL 10 Update 30 and MIL 10 Update 19 Various bug fixes were applied to MIL's USB3 Vision system. Note that MIL Update 30 is a cumulative update, including all content from MIL Update 1 and Update 19. 1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; What's new in MIL 10 Update 30 1.6.1&nbsp;&nbsp;&nbsp; New features summary ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No new Features. 1.6.2&nbsp;&nbsp;&nbsp; Bug Fixes ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed an error in MdigAlloc(M_GC_DEVICE_USER_NAME) caused when the name was programmed without power cycling. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed a synchronization lost event at the end of MdigProcess(). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Improved packed and YUV444 pixel format support. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed camera access errors in MdigHookFunction(M_CAMERA_PRESENT). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigInquire (M_SOURCE_SIZEX/Y) such that the camera Width/Height can be returned without a scaling factor. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed race condition when grabbing using multiple Host controllers. This previously caused a driver exception. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed acquisition using multiple cameras (n&gt;4) with an event enabled. This previously caused a driver exception. 1.6.3&nbsp;&nbsp;&nbsp; Additions to the command reference Additions to MdigInquireFeature()/MdigControlFeature() The FeatureType parameter has been changed to UserVarType. This was done to simplify writing code with MdigControl/InquireFeature(). UserVarType must always reflect the type of the pointer passed to the UserVarPtr parameter. Legacy code is transparently supported, but we recommend you update your code. Note that M_TYPE_REGISTER now becomes M_TYPE_UINT8, M_TYPE_ENUMERATION now becomes M_TYPE_INT64 or M_TYPE_STRING, and M_TYPE_COMMAND now becomes M_DEFAULT. Data type conversions are made, whenever possible, in cases where the feature?s ?native? data type is different than the UserVarType supplied. Regardless of a feature?s ?native? data type it can always be read as a string. See Board-specific examples for details. The following is a list of example calls using the new UserVatType: -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_INT64, &amp;Int64Var) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Gain?), M_TYPE_DOUBLE, &amp;DoubleVar) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?ReverseX?), M_TYPE_BOOLEAN, &amp;BoolVar) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?PixelFormat?), M_TYPE_STRING, MIL_TEXT(?Mono8?)) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?LUTValueAll?), M_TYPE_UINT8, Uint8Array) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?AcquisitionStart?), M_DEFAULT, M_NULL) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_INT64, &amp;Int64Var) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Gain?), M_TYPE_DOUBLE, &amp;DoubleVar) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?ReverseX?), M_TYPE_BOOLEAN, &amp;BoolVar) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE + M_STRING_SIZE, MIL_TEXT(?PixelFormat?), M_TYPE_MIL_INT, &amp;MilIntVar) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?PixelFormat?), M_TYPE_STRING, MilTextCharArray) -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?LUTValueAll?), M_TYPE_UINT8, Uint8Array) M_FEATURE_USER_ARRAY_SIZE() can now be used with MdigInquireFeature when the data type returned is a string or an array of bytes (register). The M_FEATURE_USER_ARRAY_SIZE() macro is used to pass the size of the user-allocated buffer passed to MdigInquireFeature's UserVarPtr parameter. M_FEATURE_USER_ARRAY_SIZE() is passed using the UserVarType parameter. See MilGige board specific example for sample usage. The following is a list of example calls using M_FEATURE_USER_ARRAY_SIZE(): -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?PixelFormat?), M_TYPE_STRING + M_FEATURE_USER_ARRAY_SIZE(N), MilTextCharArray); N being equal to the number of MIL_TEXT_CHAR in the MilTextCharArray. -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?LUTValueAll?), M_TYPE_UINT8 + M_FEATURE_USER_ARRAY_SIZE(N), Uint8Array); N being equal to the number of Uint8 in the Uint8Array. M_FEATURE_ENUM_ENTRY_DISPLAY_NAME can now be used to inquire possible enumeration string entry to use for display purposes. See M_FEATURE_ENUM_ENTRY_NAME in the MIL documentation. M_FEATURE_VALUE_AS_STRING is now deprecated. -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To read a feature?s value as a string and get the required string length use: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE + M_STRING_SIZE, MIL_TEXT(?Width?), M_TYPE_MIL_INT, &amp;MilIntVar); -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To read a feature?s value as a string use: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_STRING+M_FEATURE_USER_ARRAY_SIZE(ArraySize), MilTextCharArray); -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To write a feature?s value from a string use: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_STRING, MIL_TEXT(?1024?)); M_FEATURE_CHANGE_HOOK. Identifies the specified FeatureName to trigger the M_FEATURE_CHANGE hook callback. You must be hooked to the M_FEATURE_CHANGE hook type using MdigHookFunction(). Additions to MdigHookFunction() When hooking to a GenICam feature change event (see enumfeatures.cpp board-specific example): -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE can be used as a hook type. The hook triggers when a GenICam feature is invalidated. This usually occurs when a feature or a dependent feature is written. Additions to MdigGetHookInfo() When hooking to a GenICam feature change event (see enumfeatures.cpp board-specific example): -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME can be used from a M_GC_FEATURE_CHANGE hook function. The function returns the name of the GenICam feature that triggered the hook. UserVarPtr must point to a user allocated array of type MIL_TEXT_CHAR. -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME_SIZE can be used from a M_GC_FEATURE_CHANGE hook function. The function returns the number of characters in the string returned by M_GC_FEATURE_CHANGE_NAME. UserVarPtr must point to a MIL_INT. 1.6.4&nbsp;&nbsp;&nbsp; Behavior change ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Default color buffer type changed from RGB24 to BGR32 for an optimal display performance. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the case where a synchronization lost occurs, the driver automatically attempts to resynchronize the image stream with the camera.? This resets the BlockID to 0. 1.6.5&nbsp;&nbsp;&nbsp; Standard compliance ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenCP 1.1. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB3Vision 1.0.1. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam 3.0. 1.7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Differences between MIL 10 Update 19 and MIL 10 Update 1 ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Camera Assistant can now be used to manipulate USB3 Vision devices and to diagnose some setup problems. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The MIL Help now has information about MIL?s USB3 Vision system. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New features and bug fixes to MIL's USB3 Vision system. 1.8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; What's new in MIL 10 Update 19 1.8.1&nbsp;&nbsp;&nbsp; New features summary ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MIL?s USB3 Vision system in Capture Assistant. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for streaming Monochrome and Bayer data of 10- and 12 bit packed pixel format. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MdigAlloc(M_GC_DEVICE_USER_NAME). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MdigAlloc(M_GC_MANIFEST_ENTRY()). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MdigAlloc(M_GC_XML_DOWNLOAD_SKIP and M_GC_XML_FORCE_DOWNLOAD). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MdigInquire(M_CAMERA_PRESENT). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MsysHookFunction(M_CAMERA_PRESENT). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MdigHookFunction(M_CAMERA_PRESENT). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for MdigInquire/MsysGetHookInfo(M_GC_UNIQUE_ID_STRING). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added MultiCamera hardware-specific example. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added acquisition statistics to be displayed in Camera Assistant. 1.8.2&nbsp;&nbsp;&nbsp; Behavior change ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If two cameras are used and M_DEV0 camera is removed from the PC, M_DEV1 camera will be remapped as M_DEV0, as if M_DEV1 and M_DEV0 were not allocated on their associated cameras. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MdigGetHookInfo(M_GC_FRAME_BLOCK_ID) Called from within MdigProcess callback is now reporting the data trailer packet?s BlockId instead of the data leader packet?s BlockId. 1.8.3&nbsp;&nbsp;&nbsp; Bug Fixes ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigInquire(M_PROCESS_FRAME_MISSED) which previously always returned 0. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigAlloc() failure with certain cameras. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed issue regarding cameras sometimes not being detected after falling into hibernate/sleep mode. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed the USB3 Vision Diagnostic Tool. Previously, the tool would enter an endless loop when dealing with certain cameras. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigAlloc() operation that failed when one or more features listed in the specified DCF (Digitizer Configuration File) was not writeable in the camera. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed YUV 411 and 444 pixel formats that previously caused corrupted images. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigGrab() with triggers enabled. Previously, this needed two triggers to grab one frame. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed a driver exception that was caused when starting a grab with certain cameras under Windows 7. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigGrab() failure with an error message that was caused by an unaligned image size. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed MdigGetHookInfo(M_CORRUPTED_FRAME, M_GC_FRAME_BYTES_RECEIVED, M_GC_FRAME_LINE_COUNT, M_GC_FRAME_STATUS_CODE) which previously did not return the appropriate value. 1.8.4&nbsp;&nbsp;&nbsp; Documentation Added USB3 Vision-specific information to the MIL Help Reference and MIL Help Hardware-specific Notes. 1.8.5&nbsp;&nbsp;&nbsp; Capture Assistant ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added USB3 Vision support. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added support for DCF selection. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added a detailed Tree View; displays entire Ethernet and USB ecosystems. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added a Statistics Report module. Generated Statistics reports are automatically included in a SysInfo. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added command-line dump mode. Used when generating a SysInfo. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added various diagnostics. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device triggers can now be controlled by the Feature Browser or by the triggers section of the Acquisition Properties tab. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added GigE Vision multicast monitor support. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Added network adapter configuration parameters (Jumbo Packets, Receive Buffers, Interrupt Moderation) when selecting a network adapter from the Acquisition Device's tab. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Network Adapter statistics are now generated using Windows performance counters. 2.&nbsp;&nbsp; Known Issues ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Matrox Inspector needs an image width that is a multiple of 4 pixels. Not following this rule will make Inspector crash or report errors. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BGR or RGB, packed (10 or 12 bits) pixel formats are not supported. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If you are experiencing synchronization lost errors or image corruption under Windows 7 with Renesas USB 3.0 Host Controller, make sure you are using the Host controller driver version 2.1.39.0 or later for the 2.x series, and 3.0.23.0 or later for the 3.x series. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When using events, if a camera disconnects (M_CAMERA_PRESENT hook gets called), in sequence MdigHook(M_UNHOOK), MdigFree()/MdigAlloc() MdigHook() must be called instead of only MdigProcess(M_START/M_STOP), as shown in the Hardware specific example, MultiCamera.cpp. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FLIR (Point Grey) cameras with old firmware on Windows 10 need to be unplugged before uninstalling MIL. Failure to do so can cause a variety of post uninstall USB problems. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Building the MIL examples using Visual Studio 2015 or 2017 also requires the presence of Windows SDK version 8.1, which is installed from the Visual Studio setup. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows' automatic 8.3 file name creation needs to be enabled in order for the MIL installer to access the temp folder when the user name contains a space. This option allows Windows to create short file/folder name aliases for ones with long names for programs, such as the MIL installer, that don't support spaces in the file/folder names. Alternatively, the MIL installer needs to run from a user account that belongs to the administrators group and has no spaces in it. Note that the same applies for uninstalling MIL. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The required Visual C++ 2017 Redistributable needs the presence of KB2919442 and KB2919355. These will need to be obtained and applied before installing this update. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The MIL update requires a Windows installation that supports device drivers with SHA-2 digital certificates. Consequently, some Windows 7 installations will require that a Windows Monthly Rollup be applied before the MIL update can be installed. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; During driver installation under Windows 7, you might continue to be asked to trust Matrox software after selecting the option to ?Always trust software from MATROX ELECTRONIC SYSTEMS, LTD?. To avoid being asked mutliple times, refer to Microsoft KB2921916. 3.&nbsp;&nbsp; Intellicam bug fixes ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With Intellicam, you can now modify a DCF while the feature browser is open, when working with a Camera Link camera, accessed using the GenICam CLProtocol. However, the feature browser will no longer work with Teledyne DALSA Camera Link cameras using the GenICam CLProtocol with Sapera software version 7.3 or lower. In these cases, we recommend updating the Sapera software to version 7.4 or higher. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed possible Intellicam crash when clicking on &quot;Dump state to DCF&quot; in the camera configuration tab, when the camera contains a LUT. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed an issue where error messages would not be displayed when starting the feature browser. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed possible Intellicam crash when aborting a grab from a triggered camera that is not receiving any triggers. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed non-GenICam systems that could not grab after MIL 10 Update 1 was installed. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fixed Intellicam failure to load a DCF that was saved with the &quot;Dump state to DCF&quot; button. 4.&nbsp;&nbsp; Location of examples (in the help file) In the help file, the location information written at the top of examples might not be up-to-date. Use MIL Example Launcher to find an example on disk. 5.&nbsp;&nbsp; Troubleshooting ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Your camera must be USB3 Vision compliant for it to work with the Matrox USB3 Vision driver. For more information, refer to http://www.visiononline.org/vision-standards.cfm. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Note that a diagnostic tool is available from MilConfig to troubleshoot the connection to USB3 Vision cameras. Capture Assistant can also be used to diagnose USB issues and generate a usage statistic report. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; While acquisition is in progress with any software, start Capture Assistant, and choose the desired camera. In the Acquisition Statistics tab, if the Total Endpoint Halt increments while the acquisition is in progress, make sure the camera does not share USB bandwidth with another device, or try changing the USB 3.0 cable. &nbsp; ",
      "wordCount": 3833,
      "subEntries": []
    }
  ]
}]