[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_PatternMatching_MagmMagnitude_CPP_magmmagnitude_cpp",
      "version": "2024020714",
      "title": "magmmagnitude.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //************************************************************************************* // // File name: MagmMagnitude.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This example shows how to match a CAD model on a target image // by using the gradient magnitude as an alternative to a specific // edge threshold using the Advanced Geometric Matcher. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved // #include &lt;mil.h&gt; // Example function declaration. void MagmFindUsingMagnitudeExample(MIL_ID MilSystem); #define EXAMPLE_IMAGE_PATH M_IMAGE_PATH MIL_TEXT(\"MagmMagnitude/\") // DXF file used to define the AGM model. #define DXF_FILE_MODEL_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Model.dxf\") // Target image. #define TARGET_IMAGE_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Target.mim\") //**************************************************************************** // Example description. //***************************************************************************** void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT(\"MagmMagnitude\\n\\n\")); MosPrintf(MIL_TEXT(\"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT(\"This example shows how to match a CAD model on a target image\\n\")); MosPrintf(MIL_TEXT(\"by using the gradient magnitude as an alternative to a specific\\n\")); MosPrintf(MIL_TEXT(\"edge threshold using the Advanced Geometric Matcher.\\n\")); MosPrintf(MIL_TEXT(\"The use of gradient magnitude mode is recommended with challenging\\n\")); MosPrintf(MIL_TEXT(\"target images, such cluttered images with non-uniform illumination.\\n\\n\")); MosPrintf(MIL_TEXT(\"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT(\"Advanced Geometric Matcher, Display, Graphics.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } //**************************************************************************** // Main. //**************************************************************************** int MosMain(void) { // Print example information in console. PrintHeader(); // Allocate MIL objects. auto MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); auto MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); // Run the example. MagmFindUsingMagnitudeExample(MilSystem); return 0; } //**************************************************************************** // Utility function to draw occurrences. //**************************************************************************** void DrawFoundOccurrences(MIL_ID MilSearchResult, MIL_ID MilGraphicList) { // Get the number of occurrences found. MIL_INT NumOccurrences = 0; MagmGetResult(MilSearchResult, M_DEFAULT, M_NUMBER + M_TYPE_MIL_INT, &amp;NumOccurrences); if(NumOccurrences &gt; 0) { std::vector&lt;MIL_DOUBLE&gt; XPositions; std::vector&lt;MIL_DOUBLE&gt; YPositions; std::vector&lt;MIL_DOUBLE&gt; DetectionScores; std::vector&lt;MIL_DOUBLE&gt; FitScores; std::vector&lt;MIL_DOUBLE&gt; CoverageScores; MagmGetResult(MilSearchResult, M_ALL, M_POSITION_X, XPositions); MagmGetResult(MilSearchResult, M_ALL, M_POSITION_Y, YPositions); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_DETECTION, DetectionScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_FIT, FitScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_COVERAGE, CoverageScores); // Print the results for each found occurrence. MosPrintf(MIL_TEXT(\"The model was found in the target image:\\n\\n\")); MosPrintf(MIL_TEXT(\"Result X Position Y Position \") MIL_TEXT(\"DetectionScore FitScore CoverageScore\\n\\n\")); for(MIL_INT i = 0; i &lt; NumOccurrences; ++i) { MosPrintf(MIL_TEXT(\"%-9i%-13.2f%-13.2f%-17.2f%-11.2f%-11.2f\\n\"), i, XPositions[i], YPositions[i], DetectionScores[i], FitScores[i], CoverageScores[i]); } MosPrintf(MIL_TEXT(\"\\nTotal number of occurrences found in the target image: %i\\n\"), NumOccurrences); // Draw green edges and bounding boxes over the occurrences that were found. MgraColor(M_DEFAULT, M_COLOR_GREEN); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_BOX, M_ALL, M_DEFAULT); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_EDGES, M_ALL, M_DEFAULT); // Draw red positions over the occurrences that were found. MgraColor(M_DEFAULT, M_COLOR_RED); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_POSITION, M_ALL, M_DEFAULT); } else { MosPrintf(MIL_TEXT(\"The model was not found in the target image.\\n\")); } } //**************************************************************************** // Example: AGM Model defined using a DXF, finding occurrences using the gradient // magnitude of the target image. //**************************************************************************** void MagmFindUsingMagnitudeExample(MIL_ID MilSystem) { MIL_UNIQUE_DISP_ID MilModelDisplay; // Model Display identifier. MIL_UNIQUE_DISP_ID MilTargetDisplay; // Target Display identifier. MIL_UNIQUE_GRA_ID MilGraphicList; // Graphic list identifier. MIL_UNIQUE_AGM_ID MilFindContext; // Find AGM context identifier. MIL_UNIQUE_AGM_ID MilSearchResult; // Find AGM result buffer identifier. MIL_UNIQUE_BUF_ID MilTargetImage; // Image buffer identifier. MIL_UNIQUE_BUF_ID MilDrawModelImage; // Draw Image buffer identifier. // Allocate the model and target displays. MilModelDisplay = MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); MilTargetDisplay = MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); // Set the model and target display's titles. MdispControl(MilModelDisplay , M_TITLE, MIL_TEXT(\"Model\")); MdispControl(MilTargetDisplay, M_TITLE, MIL_TEXT(\"Target\")); // Allocate a graphic list to hold the subpixel annotations to draw. MilGraphicList = MgraAllocList(MilSystem, M_DEFAULT, M_UNIQUE_ID); // Associate the graphic list to the display for annotations. MdispControl(MilTargetDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, MilGraphicList); // Allocate a find AGM context. MilFindContext = MagmAlloc(MilSystem, M_GLOBAL_EDGE_BASED_FIND, M_DEFAULT, M_UNIQUE_ID); // Allocate a find AGM result buffer. MilSearchResult = MagmAllocResult(MilSystem, M_GLOBAL_EDGE_BASED_FIND_RESULT, M_DEFAULT, M_UNIQUE_ID); // Define the single-definition model. MagmDefine(MilFindContext, M_ADD, M_DXF_FILE, M_SINGLE, DXF_FILE_MODEL_PATH, M_DEFAULT); // Inquire the model size. MIL_INT SizeX = MagmInquire(MilFindContext, M_AGM_MODEL_INDEX(0), M_SIZE_X + M_TYPE_MIL_INT, M_NULL); MIL_INT SizeY = MagmInquire(MilFindContext, M_AGM_MODEL_INDEX(0), M_SIZE_Y + M_TYPE_MIL_INT, M_NULL); // Allocate the draw model image. MilDrawModelImage = MbufAlloc2d(MilSystem, SizeX, SizeY, 8 + M_UNSIGNED, M_IMAGE + M_PROC + M_DISP, M_UNIQUE_ID); // Draw the model image. MagmDraw(M_DEFAULT, MilFindContext, MilDrawModelImage, M_DRAW_IMAGE, M_AGM_MODEL_INDEX(0), M_DEFAULT); // Display the model image. MosPrintf(MIL_TEXT(\"A single-definition model was defined \")); MosPrintf(MIL_TEXT(\"from the displayed model image.\\n\")); MdispSelect(MilModelDisplay, MilDrawModelImage); // Make the model display a little bigger since the image is small. MIL_INT ModelWindowSizeX = SizeX + 100; MIL_INT ModelWindowSizeY = SizeY + 100; MdispControl(MilModelDisplay, M_WINDOW_INITIAL_SIZE_X, ModelWindowSizeX); MdispControl(MilModelDisplay, M_WINDOW_INITIAL_SIZE_Y, ModelWindowSizeY); // Sets the initial, left-most, X-coordinate of the model disaplay and target display. MdispControl(MilModelDisplay, M_WINDOW_INITIAL_POSITION_X, 10); MdispControl(MilModelDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); MdispControl(MilTargetDisplay, M_WINDOW_INITIAL_POSITION_X, ModelWindowSizeX + 90); MdispControl(MilTargetDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); // Control the AGM find context. MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_USE_MAGNITUDE_TARGET , M_ENABLE); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_DETECTION_DELTA_POS_ANGLE , 360.0); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_EMPTY_REGIONS_MODE , M_AUTO); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_PERSEVERANCE_DETECTION , 95.0); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_STEP_X , 3); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_STEP_Y , 3); // Preprocess the find AGM context. MagmPreprocess(MilFindContext, M_DEFAULT); // Restore the target image. MilTargetImage = MbufRestore(TARGET_IMAGE_PATH, MilSystem, M_UNIQUE_ID); // Find the model. MagmFind(MilFindContext, MilTargetImage, MilSearchResult, M_DEFAULT); DrawFoundOccurrences(MilSearchResult, MilGraphicList); // Display the target image. MdispSelect(MilTargetDisplay, MilTargetImage); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } ",
      "wordCount": 777
    }
  ]
}]