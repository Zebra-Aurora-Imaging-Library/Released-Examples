[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_Preprocessing_MimMorphicIterationOverscan_CPP_mimmorphiciterationoverscan_cpp",
      "version": "2024020714",
      "title": "mimmorphiciterationoverscan.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /*******************************************************************************/ /* * File name: MimMorphicIterationOverscan.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This program shows the use of MimMorphic with M_ITER_COMBINED, * as well as MbufControl with M_ITER_OVERSCAN, M_GLOBAL. * The ancestor image has been chosen to illustrate the differences * in behavior of each mode with MimMorphic, M_DILATE. * * Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved */ #include &lt;mil.h&gt; #include &lt;math.h&gt; /* Source image files. */ #define IMAGE_FILE M_IMAGE_PATH MIL_TEXT(\"Board.mim\") /* Structuring elements information. */ const MIL_INT STRUCT_ELEM_SIZE = 7, /* Size of the custom structuring element.*/ STRUCT_ELEM_CENTER = 3, /* Center of the custom structuring element.*/ STRUCT_ELEM_DEPTH = 32; /* Depth of the structuring elements.*/ /* Custom structuring element data. */ const MIL_INT32 WEIGHTED_STRUCT_ELEM_ARR[STRUCT_ELEM_SIZE][STRUCT_ELEM_SIZE] = {{ M_DONT_CARE, 0, 0, 0, 0, 0, M_DONT_CARE }, { 0, 0, 1, 2, 1, 0, 0 }, { 0, 1, 2, 3, 2, 1, 0 }, { 0, 2, 3, 5, 3, 2, 0 }, { 0, 1, 2, 3, 2, 1, 0 }, { 0, 0, 1, 2, 1, 0, 0 }, { M_DONT_CARE, 0, 0, 0, 0, 0, M_DONT_CARE } }; /* Number of morphological iterations. */ const MIL_INT ITERATIONS = 3; /**********************************/ /* Header function */ /**********************************/ void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"MimMorphicIterationOverscan\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This program shows the use of MimMorphic with M_ITER_COMBINED,\\n\") MIL_TEXT(\"as well as MbufControl with M_ITER_OVERSCAN, M_GLOBAL.\\n\") MIL_TEXT(\"The ancestor image has been chosen to illustrate the differences\\n\") MIL_TEXT(\"in behavior of each mode with MimMorphic, M_DILATE.\\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: application, system, display, buffer,\\n\") MIL_TEXT(\"image processing.\\n\\n\")); } /*********************************************/ /* Structuring elements allocation functions */ /*********************************************/ MIL_UNIQUE_BUF_ID AllocateCustomSourceImage(MIL_ID MilSystem, MIL_ID MilDisplay, MIL_UNIQUE_BUF_ID* MilSrcAncestor, MIL_INT SizeX, MIL_INT SizeY, MIL_INT Type); MIL_UNIQUE_BUF_ID AllocateCustomStructElem(MIL_ID MilSystem); int MosMain(void) { /* Allocate defaults. */ MIL_UNIQUE_APP_ID MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); MIL_UNIQUE_SYS_ID MilSystem = MsysAlloc(MilApplication, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); MIL_UNIQUE_DISP_ID MilDisplay = MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_WINDOWED, M_UNIQUE_ID); /* Print Header. */ PrintHeader(); MIL_INT SizeX, SizeY, Type; /* Dimensions and Type of the source image.*/ MbufDiskInquire(IMAGE_FILE, M_SIZE_X, &amp;SizeX); MbufDiskInquire(IMAGE_FILE, M_SIZE_Y, &amp;SizeY); MbufDiskInquire(IMAGE_FILE, M_TYPE, &amp;Type); /* Allocate source buffer. */ MIL_UNIQUE_BUF_ID MilSrcAncestor; auto MilSrcImage = AllocateCustomSourceImage(MilSystem, MilDisplay, &amp;MilSrcAncestor, SizeX, SizeY, Type); /* Allocate a destination so it could display 4 images. */ auto MilDstAncestor = MbufAlloc2d(MilSystem, SizeX*2, SizeY*2, Type, M_IMAGE+M_PROC+M_DISP, M_UNIQUE_ID); MbufClear(MilDstAncestor, 0); /* Allocate 4 children to display the results. */ auto MilDispSrcImage = MbufChild2d(MilDstAncestor, STRUCT_ELEM_CENTER , STRUCT_ELEM_CENTER , SizeX-STRUCT_ELEM_CENTER, SizeY-STRUCT_ELEM_CENTER, M_UNIQUE_ID); auto MilDstDefault = MbufChild2d(MilDstAncestor, SizeX+STRUCT_ELEM_CENTER, STRUCT_ELEM_CENTER , SizeX-STRUCT_ELEM_CENTER, SizeY-STRUCT_ELEM_CENTER, M_UNIQUE_ID); auto MilDstCombined = MbufChild2d(MilDstAncestor, STRUCT_ELEM_CENTER , SizeY+STRUCT_ELEM_CENTER, SizeX-STRUCT_ELEM_CENTER, SizeY-STRUCT_ELEM_CENTER, M_UNIQUE_ID); auto MilDstGlobal = MbufChild2d(MilDstAncestor, SizeX+STRUCT_ELEM_CENTER, SizeY+STRUCT_ELEM_CENTER, SizeX-STRUCT_ELEM_CENTER, SizeY-STRUCT_ELEM_CENTER, M_UNIQUE_ID); MbufCopy(MilSrcImage, MilDispSrcImage); /* Display result buffer. */ MdispSelect(MilDisplay, MilDstAncestor); /* Get destination image overlay. */ MIL_ID MilOverlayId; MdispInquire(MilDisplay, M_OVERLAY_ID, &amp;MilOverlayId); MgraText(M_DEFAULT, MilOverlayId, 0, 0, MIL_TEXT(\"Source image\")); /* Pause to show the source ancestor image. */ MosPrintf(MIL_TEXT(\"Display source image.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); /*----------------Grayscale Dilation Using Custom Structuring Element------------------*/ /* Allocate a custom structuring element. */ auto MilCustomStructElem = AllocateCustomStructElem(MilSystem); MimMorphic(MilSrcImage, MilDstDefault, MilCustomStructElem, M_DILATE, ITERATIONS, M_GRAYSCALE); MgraText(M_DEFAULT, MilOverlayId, SizeX, 0, MIL_TEXT(\"Default overscan\")); /* Pause to show the default MIL overscan result image. */ MosPrintf(MIL_TEXT(\"Result with default MIL overscan for iterations.\\n\")); MosPrintf(MIL_TEXT(\"The result contains no white border since the ancestor is used only for the first iteration.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); /* Do the same operation with M_ITER_COMBINED. */ MimMorphic(MilSrcImage, MilDstCombined, MilCustomStructElem, M_DILATE+M_ITER_COMBINED, ITERATIONS, M_GRAYSCALE); MgraText(M_DEFAULT, MilOverlayId, 0, SizeY, MIL_TEXT(\"M_ITER_COMBINED\")); /* Pause to show the result with M_ITER_COMBINED image. */ MosPrintf(MIL_TEXT(\"Result with M_ITER_COMBINED.\\n\")); MosPrintf(MIL_TEXT(\"The result contains a white border since the iterations are replaced by a single larger\\n\")); MosPrintf(MIL_TEXT(\"structuring element applied once.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); /* Do the same operation with MbufControl, M_ITER_OVERSCAN, M_GLOBAL. */ MbufControl(MilCustomStructElem, M_ITER_OVERSCAN, M_GLOBAL); MimMorphic(MilSrcImage, MilDstGlobal, MilCustomStructElem, M_DILATE, ITERATIONS, M_GRAYSCALE); MgraText(M_DEFAULT, MilOverlayId, SizeX, SizeY, MIL_TEXT(\"M_ITER_OVERSCAN, M_GLOBAL\")); /* Pause to show the result with MbufControl, M_ITER_OVERSCAN, M_GLOBAL. */ MosPrintf(MIL_TEXT(\"Result with MbufControl, M_ITER_OVERSCAN, M_GLOBAL.\\n\")); MosPrintf(MIL_TEXT(\"The result contains a white border since we make sure to use a larger overscan that covers\\n\")); MosPrintf(MIL_TEXT(\"all iterations, but iterations are still done one at a time.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); MosPrintf(MIL_TEXT(\"As shown, the default mode gives a different result than the 2 others.\\n\")); MosPrintf(MIL_TEXT(\"The execution time is relative to the structuring element size and number of\\n\")); MosPrintf(MIL_TEXT(\"iterations; depending of each of these factors, one mode could be faster\\n\")); MosPrintf(MIL_TEXT(\"than another, as shown next.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); MdispSelect(MilDisplay, M_NULL); /*********************************************/ /* In this section, we make some benchmarks. */ /*********************************************/ MIL_DOUBLE DefaultTime, CombinedTime, GlobalTime; MbufControl(MilCustomStructElem, M_ITER_OVERSCAN, M_DEFAULT); /* Reset the timer. */ MappTimer(M_DEFAULT, M_TIMER_RESET+M_SYNCHRONOUS, M_NULL); /* Find the model. */ MimMorphic(MilSrcImage, MilDstDefault, MilCustomStructElem, M_DILATE, ITERATIONS, M_GRAYSCALE); /* Read the find time. */ MappTimer(M_DEFAULT, M_TIMER_READ+M_SYNCHRONOUS, &amp;DefaultTime); /* Bench with M_ITER_COMBINED */ MappTimer(M_DEFAULT, M_TIMER_RESET+M_SYNCHRONOUS, M_NULL); MimMorphic(MilSrcImage, MilDstCombined, MilCustomStructElem, M_DILATE+M_ITER_COMBINED, ITERATIONS, M_GRAYSCALE); MappTimer(M_DEFAULT, M_TIMER_READ+M_SYNCHRONOUS, &amp;CombinedTime); /* Bench with MbufControl, M_ITER_OVERSCAN, M_GLOBAL */ MimMorphic(MilSrcImage, MilDstGlobal, MilCustomStructElem, M_DILATE, ITERATIONS, M_GRAYSCALE); MappTimer(M_DEFAULT, M_TIMER_RESET+M_SYNCHRONOUS, M_NULL); MimMorphic(MilSrcImage, MilDstGlobal, MilCustomStructElem, M_DILATE, ITERATIONS, M_GRAYSCALE); MappTimer(M_DEFAULT, M_TIMER_READ+M_SYNCHRONOUS, &amp;GlobalTime); MosPrintf(MIL_TEXT(\"\\nHere is the execution time for each mode in us.\\n\")); MosPrintf(MIL_TEXT(\"Default : %.1f\\n\"), DefaultTime * 1E6); MosPrintf(MIL_TEXT(\"M_ITER_COMBINED : %.1f\\n\"), CombinedTime * 1E6); MosPrintf(MIL_TEXT(\"M_GLOBAL : %.1f\\n\"), GlobalTime * 1E6); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); /* No free needed. */ return 0; } /***************************************************************************************** * * Name : AllocateCustomStructElem * * Synopsis : Allocate source buffer with data in the ancestor that illustrate * the differences in behavior. * * Parameters : - MilSystem System on which to allocate the image. * - MilDisplay Display used to show the ancestor image. * - MilSrcAncestor Source image ancestor, returned so it can be freed. * - SizeX Source image size in X. * - SizeY Source image size in Y. * - Type Source image type. * * Return : Weighted structurig element (Type: MIL_UNIQUE_BUF_ID) ******************************************************************************************/ MIL_UNIQUE_BUF_ID AllocateCustomSourceImage(MIL_ID MilSystem, MIL_ID MilDisplay, MIL_UNIQUE_BUF_ID* MilSrcAncestor, MIL_INT SizeX, MIL_INT SizeY, MIL_INT Type) { /* Here we will allocate a border of ITERATION x STRUCT_ELEM_CENTER around the source */ /* We will load the image in a child, so that we have a border of STRUCT_ELEM_CENTER */ /* that will be in the overscan */ MIL_INT SrcAncestorSizeX = SizeX + (ITERATIONS - 1) * STRUCT_ELEM_CENTER * 2; MIL_INT SrcAncestorSizeY = SizeY + (ITERATIONS - 1) * STRUCT_ELEM_CENTER * 2; *MilSrcAncestor = MbufAlloc2d(MilSystem, SrcAncestorSizeX, SrcAncestorSizeY, Type, M_IMAGE+M_PROC+M_DISP, M_UNIQUE_ID); /* We clear the ancestor to -1, which will give the maximum value in an unsigned buffer. */ MbufClear(*MilSrcAncestor, -1); /* Allocate the load source child */ auto MilSrcLoadChild = MbufChild2d(*MilSrcAncestor, STRUCT_ELEM_CENTER * 2, STRUCT_ELEM_CENTER * 2, SizeX, SizeY, M_UNIQUE_ID); /* Load the source image and display the ancestor. */ MbufLoad(IMAGE_FILE, MilSrcLoadChild); MdispSelect(MilDisplay, *MilSrcAncestor); /* Pause to show the source ancestor image. */ MosPrintf(MIL_TEXT(\"Source ancestor image, with white borders.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); /* Allocate a new source child, that will be used in the operation. */ MIL_INT SrcOffsetX = STRUCT_ELEM_CENTER * 3; MIL_INT SrcOffsetY = STRUCT_ELEM_CENTER * 3; SizeX -= STRUCT_ELEM_CENTER * 2; SizeY -= STRUCT_ELEM_CENTER * 2; auto MilSrcImage = MbufChild2d(*MilSrcAncestor, SrcOffsetX, SrcOffsetY, SizeX, SizeY, M_UNIQUE_ID); return MilSrcImage; } /***************************************************************************************** * * Name : AllocateCustomStructElem * * Synopsis : Creates a custom weighted structuring element from an array * * Parameters : - MilSystem System on which to allocate the structuring element * * Return : Weighted structurig element (Type: MIL_UNIQUE_BUF_ID) ******************************************************************************************/ MIL_UNIQUE_BUF_ID AllocateCustomStructElem(MIL_ID MilSystem) { /* Allocate a structuring element. */ auto MilCustomStructElem = MbufAlloc2d(MilSystem, STRUCT_ELEM_SIZE, STRUCT_ELEM_SIZE, STRUCT_ELEM_DEPTH + M_SIGNED, M_STRUCT_ELEMENT, M_UNIQUE_ID); /* Load buffer with data. */ MbufPut2d(MilCustomStructElem, 0L, 0L, STRUCT_ELEM_SIZE, STRUCT_ELEM_SIZE, WEIGHTED_STRUCT_ELEM_ARR); MbufControl(MilCustomStructElem, M_OVERSCAN, M_TRANSPARENT); return MilCustomStructElem; } ",
      "wordCount": 1243
    }
  ]
}]