[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_3dMatching_CylinderFinder_CPP_cylinderfinder_cpp",
      "version": "2024020714",
      "title": "cylinderfinder.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: CylinderFinder.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This example uses cylinder finder to define cylinder models and search for // cylinders in 3D point clouds. A simple cylinder finder example is presented first // (multiple occurrencesin a simple scene), followed by more complex example(multiple // occurrences in a complex scene with more advanced controls). // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved //**************************************************************************** #include &lt;mil.h&gt; #include &lt;cstdlib&gt; //***************************************************************************** // Constants. //***************************************************************************** static const MIL_STRING FILENAMES[2] = {M_IMAGE_PATH MIL_TEXT(\"CylinderFinder/Cylinders.mbufc\"), M_IMAGE_PATH MIL_TEXT(\"CylinderFinder/CylindersWithClutter.ply\")}; static const MIL_DOUBLE FIT_DISTANCE = 0.3; //**************************************************************************** // Function Declaration. //**************************************************************************** MIL_UNIQUE_3DDISP_ID Alloc3dDisplayId(MIL_ID MilSystem); void SimpleSceneCylinderFinder (MIL_ID MilSystem, MIL_ID MilDisplay); void ComplexSceneCylinderFinder (MIL_ID MilSystem, MIL_ID MilDisplay); bool CheckForRequiredMILFile (MIL_STRING FileName); void AddComponentNormalsIfMissing(MIL_ID MilContainer); void ShowCylinderResults (MIL_ID MilResult, MIL_DOUBLE ComputationTime); //**************************************************************************** // Example description. //**************************************************************************** void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT(\"Cylinder Finder\\n\\n\")); MosPrintf(MIL_TEXT(\"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT(\"This example demonstrates how to use cylinder finder to define cylinder\\n\") MIL_TEXT(\"models and search for cylinders in 3D point clouds. A simple cylinder\\n\") MIL_TEXT(\"finder example is presented first (multiple occurrences in a simple scene),\\n\") MIL_TEXT(\"followed by a more complex example (multiple occurrences in a complex\\n\") MIL_TEXT(\"scene with advanced search conditions).\\n\\n\")); MosPrintf(MIL_TEXT(\"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT(\"Modules used: Application, System, 3D Model Finder, \\n\") MIL_TEXT(\"3D Display, and 3D Graphics. \\n\\n\")); } //***************************************************************************** // Main. //***************************************************************************** int MosMain() { // Print Header. PrintHeader(); MIL_UNIQUE_APP_ID MilApplication; MIL_UNIQUE_SYS_ID MilSystem; // System identifier. MIL_UNIQUE_3DDISP_ID MilDisplay; // 3D Mil Display. MIL_UNIQUE_BUF_ID MilContainer; // Allocate MIL objects. MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); // Check for the required example files. if(!CheckForRequiredMILFile(FILENAMES[0])) { return EXIT_FAILURE; } MilDisplay = Alloc3dDisplayId(MilSystem); if(!MilDisplay) return EXIT_FAILURE; SimpleSceneCylinderFinder(MilSystem, MilDisplay); ComplexSceneCylinderFinder(MilSystem, MilDisplay); } //***************************************************************************** // Simple scene cylinder Model finder //***************************************************************************** void SimpleSceneCylinderFinder(MIL_ID MilSystem, MIL_ID MilDisplay) { MosPrintf(MIL_TEXT(\"\\nUsing cylinder finder in a simple situation:\\n\")); MosPrintf(MIL_TEXT(\"------------------------------------------\\n\\n\")); // Inquire 3D graphics list MIL_ID MilGraphicsList = (MIL_ID)M3ddispInquire(MilDisplay, M_3D_GRAPHIC_LIST_ID, M_NULL); MosPrintf(MIL_TEXT(\"A 3D point cloud is restored from a file and displayed.\\n\\n\")); // Restore the point cloud. auto MilContainer = MbufRestore(FILENAMES[0], MilSystem, M_UNIQUE_ID); // Display the point cloud. M3ddispSetView(MilDisplay, M_AUTO, M_TOP_TILTED, M_DEFAULT, M_DEFAULT, M_DEFAULT); MIL_INT64 Label = M3ddispSelect(MilDisplay, MilContainer, M_ADD, M_DEFAULT); M3dgraControl(MilGraphicsList, Label, M_COLOR_USE_LUT, M_TRUE); M3dgraControl(MilGraphicsList, Label, M_COLOR_COMPONENT_BAND, 2); M3dgraControl(MilGraphicsList, Label, M_COLOR_COMPONENT, M_COMPONENT_RANGE); M3ddispSelect(MilDisplay, M_NULL, M_OPEN, M_DEFAULT); // Set the display's rotation axis center. This will keep the // behaviour of auto rotate consistent as we move its interest point. M3ddispCopy(M_VIEW_INTEREST_POINT, MilDisplay, M_ROTATION_AXIS_CENTER, M_DEFAULT); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); MosPrintf(MIL_TEXT(\"The point cloud is subsampled to have faster processing.\\n\")); MosPrintf(MIL_TEXT(\"The subsampling is done while preserving enough points for\\n\") MIL_TEXT(\"the smallest occurrence.\\n\\n\")); auto MilSubsampleContext = M3dimAlloc(MilSystem, M_SUBSAMPLE_CONTEXT, M_DEFAULT, M_UNIQUE_ID); M3dimControl(MilSubsampleContext, M_SUBSAMPLE_MODE, M_SUBSAMPLE_DECIMATE); M3dimControl(MilSubsampleContext, M_STEP_SIZE_X, 4); M3dimControl(MilSubsampleContext, M_STEP_SIZE_Y, 4); M3dimSample(MilSubsampleContext, MilContainer, MilContainer, M_DEFAULT); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); // Allocate a cylinder Finder context. auto MilContext = M3dmodAlloc(MilSystem, M_FIND_CYLINDER_CONTEXT, M_DEFAULT, M_UNIQUE_ID); // Allocate a Cylinder Finder result. auto MilResult = M3dmodAllocResult(MilSystem, M_FIND_CYLINDER_RESULT, M_DEFAULT, M_UNIQUE_ID); // Define the cylinder model. MIL_DOUBLE MinRadius = 2; MIL_DOUBLE MaxRadius = 10; MIL_DOUBLE MinLength = 3; MIL_DOUBLE MaxLength = 50; M3dmodDefine(MilContext, M_ADD, M_CYLINDER_RANGE, MinRadius, MinLength, MaxRadius, MaxLength, M_WITHOUT_BASES, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"A cylinder finder is defined with radii range of (%.1f, %.1f) \\n\"), MinRadius, MaxRadius); MosPrintf(MIL_TEXT(\"and lengths range of (%.1f, %.1f).\\n\\n\"), MinLength, MaxLength); // Find all ocurrences M3dmodControl(MilContext, 0, M_NUMBER, M_ALL); // Preprocess the context. M3dmodPreprocess(MilContext, M_DEFAULT); MosPrintf(MIL_TEXT(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if not present.\\n\\n\")); // The cylinder finder requires the existence of M_COMPONENT_NORMALS_MIL in the point cloud. AddComponentNormalsIfMissing(MilContainer); MosPrintf(MIL_TEXT(\"3D cylinder finder is running..\\n\")); // Reset the timer. MIL_DOUBLE ComputationTime = 0.0; MappTimer(M_TIMER_RESET, M_NULL); // Find the model. M3dmodFind(MilContext, MilContainer, MilResult, M_DEFAULT); MappTimer(M_TIMER_READ, &amp;ComputationTime); MIL_INT Status; M3dmodGetResult(MilResult, M_DEFAULT, M_STATUS, &amp;Status); switch(Status) { case M_NOT_INITIALIZED: MosPrintf(MIL_TEXT(\"Cylinder finding failed: the result is not initialized.\\n\\n\")); break; case M_NOT_ENOUGH_MEMORY: MosPrintf(MIL_TEXT(\"Cylinder finding failed: not enough memory.\\n\\n\")); break; case M_NOT_ENOUGH_VALID_DATA: MosPrintf(MIL_TEXT(\"Cylinder finding failed: not enough valid points in the point cloud.\\n\\n\")); break; case M_MISSING_COMPONENT_NORMALS_MIL: MosPrintf(MIL_TEXT(\"Cylinder finding failed: M_COMPONENT_NORMALS_MIL is not found\\n\") MIL_TEXT(\"in the point cloud.\\n\\n\")); break; case M_COMPLETE: {ShowCylinderResults(MilResult, ComputationTime); // Draw all occurrences. M3dmodDraw3d(M_DEFAULT, MilResult, M_ALL, MilGraphicsList, M_DEFAULT, M_DEFAULT); }break; default: break; } MosPrintf(MIL_TEXT(\"Press any key for the next example.\\n\\n\")); MosGetch(); } //***************************************************************************** // Complex scene Cylinder Model finder //***************************************************************************** void ComplexSceneCylinderFinder(MIL_ID MilSystem, MIL_ID MilDisplay) { MosPrintf(MIL_TEXT(\"\\nUsing cylinder finder in a complex situation:\\n\")); MosPrintf(MIL_TEXT(\"------------------------------------------\\n\\n\")); MosPrintf(MIL_TEXT(\"A 3D point cloud is restored from a file and displayed.\\n\\n\")); auto MilContainer = MbufRestore(FILENAMES[1], MilSystem, M_UNIQUE_ID); MIL_ID MilGraphicsList = (MIL_ID)M3ddispInquire(MilDisplay, M_3D_GRAPHIC_LIST_ID, M_NULL); M3dgraRemove(MilGraphicsList, M_ALL, M_DEFAULT); M3ddispSetView(MilDisplay, M_AZIM_ELEV_ROLL, 4.15, -75, 275, M_DEFAULT); M3ddispSelect(MilDisplay, MilContainer, M_SELECT, M_DEFAULT); M3ddispSetView(MilDisplay, M_AUTO, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); // Set the display's rotation axis center. This will keep the // behaviour of auto rotate consistent as we move its interest point. M3ddispCopy(M_VIEW_INTEREST_POINT, MilDisplay, M_ROTATION_AXIS_CENTER, M_DEFAULT); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); auto MilContext = M3dmodAlloc (MilSystem, M_FIND_CYLINDER_CONTEXT, M_DEFAULT, M_UNIQUE_ID); auto MilResult = M3dmodAllocResult(MilSystem, M_FIND_CYLINDER_RESULT, M_DEFAULT, M_UNIQUE_ID); auto MilDrawContext = M3dmodAlloc(MilSystem, M_DRAW_3D_GEOMETRIC_CONTEXT, M_DEFAULT, M_UNIQUE_ID); MIL_DOUBLE Radius = 40; MIL_DOUBLE RadiusTolerance = 5; MIL_DOUBLE Length = 60; MIL_DOUBLE LengthTolerance = 20; M3dmodDefine(MilContext, M_ADD, M_CYLINDER, Radius, Length, RadiusTolerance, LengthTolerance, M_WITHOUT_BASES, M_DEFAULT, M_DEFAULT); MIL_INT ModelIndex = 0; MIL_INT MaxNumber = M_ALL; MIL_DOUBLE Certainty = 80; MIL_DOUBLE MaxCoverage = 40; M3dmodControl(MilContext, ModelIndex, M_NUMBER, MaxNumber); M3dmodControl(MilContext, ModelIndex, M_CERTAINTY, Certainty); M3dmodControl(MilContext, M_DEFAULT, M_FIT_NORMALS_DISTANCE, 5); M3dmodControl(MilContext, ModelIndex, M_RESERVED_POINTS_DISTANCE, 10); M3dmodControl(MilContext, ModelIndex, M_COVERAGE_MAX, MaxCoverage); MosPrintf(MIL_TEXT(\"Key Controls \\n\")); MosPrintf(MIL_TEXT(\"----------------------------\\n\")); MosPrintf(MIL_TEXT(\" M_NUMBER: M_ALL\\n\")); MosPrintf(MIL_TEXT(\" M_COVERAGE_MAX: %.2f \\n\"), MaxCoverage); MosPrintf(MIL_TEXT(\" M_RADIUS: %.2f \\n\"), Radius); MosPrintf(MIL_TEXT(\" M_LENGTH: %.2f \\n\"), Length); MosPrintf(MIL_TEXT(\" M_TOLERANCE_RADIUS: %.2f \\n\"), RadiusTolerance); MosPrintf(MIL_TEXT(\" M_TOLERANCE_LENGTH: %.2f \\n\\n\"), LengthTolerance); M3dmodPreprocess(MilContext, M_DEFAULT); AddComponentNormalsIfMissing(MilContainer); MosPrintf(MIL_TEXT(\"3D cylinder finder is running..\\n\")); MIL_DOUBLE ComputationTime = 0.0; MappTimer(M_TIMER_RESET, M_NULL); M3dmodFind(MilContext, MilContainer, MilResult, M_DEFAULT); MappTimer(M_TIMER_READ, &amp;ComputationTime); ShowCylinderResults(MilResult, ComputationTime); // Redraw all occurrences and remove the single drawn ones auto Label = M3dmodDraw3d(MilDrawContext, MilResult, M_ALL, MilGraphicsList, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"Reserved points will be drawn as well.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); M3dgraRemove(MilGraphicsList, Label, M_DEFAULT); M3dmodControlDraw(MilDrawContext, M_DRAW_RESERVED_POINTS, M_ACTIVE, M_ENABLE); Label = M3dmodDraw3d(MilDrawContext, MilResult, M_ALL, MilGraphicsList, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"Cylinder finder is run to find complete length cylinders only.\\n\")); MosPrintf(MIL_TEXT(\"The nominal length and tolerance are further restricted.\\n\") MIL_TEXT(\"To avoid choosing the partial cylinders, M_FIT_DISTANCE\\n\")); MosPrintf(MIL_TEXT(\"is decreased further.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); M3dgraRemove(MilGraphicsList, Label, M_DEFAULT); M3dmodControlDraw(MilDrawContext, M_DRAW_RESERVED_POINTS, M_ACTIVE, M_DISABLE); LengthTolerance = 2; Length = 77; MosPrintf(MIL_TEXT(\"Key Controls \\n\")); MosPrintf(MIL_TEXT(\"----------------------------\\n\")); MosPrintf(MIL_TEXT(\"M_LENGTH: %.2f \\n\"), Length); MosPrintf(MIL_TEXT(\"M_TOLERANCE_LENGTH: %.2f \\n\"), LengthTolerance); MosPrintf(MIL_TEXT(\"M_FIT_DISTANCE: %.2f \\n\\n\"), FIT_DISTANCE); M3dmodControl(MilContext, 0, M_TOLERANCE_LENGTH, LengthTolerance); M3dmodControl(MilContext, 0, M_LENGTH, Length); M3dmodControl(MilContext, M_DEFAULT, M_FIT_DISTANCE_MODE, M_USER_DEFINED); M3dmodControl(MilContext, M_DEFAULT, M_FIT_DISTANCE, FIT_DISTANCE); M3dmodPreprocess(MilContext, M_DEFAULT); MosPrintf(MIL_TEXT(\"3D cylinder finder is running..\\n\")); MappTimer(M_TIMER_RESET, M_NULL); M3dmodFind(MilContext, MilContainer, MilResult, M_DEFAULT); MappTimer(M_TIMER_READ, &amp;ComputationTime); ShowCylinderResults(MilResult, ComputationTime); // Draw all occurrences. M3dmodDraw3d(MilDrawContext, MilResult, M_ALL, MilGraphicsList, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } //***************************************************************************** // Show the cylinder finder results. //***************************************************************************** void ShowCylinderResults(MIL_ID MilResult, MIL_DOUBLE ComputationTime) { MIL_INT NbOcc = 0; M3dmodGetResult(MilResult, M_DEFAULT, M_NUMBER, &amp;NbOcc); MosPrintf(MIL_TEXT(\"Found %i occurrences in %.2f s.\\n\\n\"), NbOcc, ComputationTime); if(NbOcc == 0) return; MosPrintf(MIL_TEXT(\"Index Error Score Radius Length \\n \")); MosPrintf(MIL_TEXT(\"------------------------------------------------------\\n\")); for(MIL_INT i = 0; i &lt; NbOcc; ++i) { MIL_DOUBLE Error = M3dmodGetResult(MilResult, i, M_RMS_ERROR, M_NULL); MIL_DOUBLE Score = M3dmodGetResult(MilResult, i, M_SCORE, M_NULL); MIL_DOUBLE Radius = M3dmodGetResult(MilResult, i, M_RADIUS, M_NULL); MIL_DOUBLE Length = M3dmodGetResult(MilResult, i, M_LENGTH, M_NULL); MosPrintf(MIL_TEXT(\" %i %.4f %6.2f %5.2f %.2f \\n\"), i, Error, Score, Radius, Length); } MosPrintf(MIL_TEXT(\"\\n\")); } //***************************************************************************** // Adds the component M_COMPONENT_NORMALS_MIL if it's not found. //***************************************************************************** void AddComponentNormalsIfMissing(MIL_ID MilContainer) { MIL_ID MilNormals = MbufInquireContainer(MilContainer, M_COMPONENT_NORMALS_MIL, M_COMPONENT_ID, M_NULL); if(MilNormals != M_NULL) return; MIL_INT SizeX = MbufInquireContainer(MilContainer, M_COMPONENT_RANGE, M_SIZE_X, M_NULL); MIL_INT SizeY = MbufInquireContainer(MilContainer, M_COMPONENT_RANGE, M_SIZE_Y, M_NULL); if(SizeX &lt; 50 || SizeY &lt; 50) M3dimNormals(M_NORMALS_CONTEXT_TREE, MilContainer, MilContainer, M_DEFAULT); else M3dimNormals(M_NORMALS_CONTEXT_ORGANIZED, MilContainer, MilContainer, M_DEFAULT); } //***************************************************************************** // Allocates a 3D display and returns its MIL identifier. //***************************************************************************** MIL_UNIQUE_3DDISP_ID Alloc3dDisplayId(MIL_ID MilSystem) { MappControl(M_DEFAULT, M_ERROR, M_PRINT_DISABLE); auto MilDisplay3D = M3ddispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); MappControl(M_DEFAULT, M_ERROR, M_PRINT_ENABLE); if(!MilDisplay3D) { MosPrintf(MIL_TEXT(\"\\n\") MIL_TEXT(\"The current system does not support the 3D display.\\n\") MIL_TEXT(\"Press any key to end.\\n\")); MosGetch(); } return MilDisplay3D; } //******************************************************************************* // Checks the required files exist. //***************************************************************************** bool CheckForRequiredMILFile(MIL_STRING FileName) { MIL_INT FilePresent; MappFileOperation(M_DEFAULT, FileName, M_NULL, M_NULL, M_FILE_EXISTS, M_DEFAULT, &amp;FilePresent); if(FilePresent == M_NO) { MosPrintf(MIL_TEXT(\"\\n\") MIL_TEXT(\"The footage needed to run this example is missing. You need \\n\") MIL_TEXT(\"to obtain and apply a separate specific update to have it.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } return (FilePresent == M_YES); } ",
      "wordCount": 1339
    }
  ]
}]