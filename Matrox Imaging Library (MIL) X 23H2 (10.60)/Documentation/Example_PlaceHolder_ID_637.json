[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_M3dgraInteractive_CS_m3dgrainteractive_cs",
      "version": "2024020714",
      "title": "m3dgrainteractive.cs",
      "location": "Sample Code from MIL Examples",
      "text": " Top //---------------------------------------------------------------------------- // // File name: M3dgraInteractive.cs // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program contains an example on how to interactively edit a // 3D box geometry and control its individual handlers. It also // shows a brief usage of LOD (level of detail) settings. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved //---------------------------------------------------------------------------- using System; using System.Threading; using System.Collections.Generic; using System.Text; using System.Runtime.InteropServices; using Matrox.MatroxImagingLibrary; using System.Data; namespace M3dgraInteractive { class Program { // Constants. private static readonly MIL_INT DEFAULT_EDITABLE_OPACITY = 30; private static readonly string PT_CLD_FILE = MIL.M_IMAGE_PATH + \"M3dgra/MaskOrganized.mbufc\"; private static readonly string SAVE_PATH = \"\"; private static readonly string OUTPUT_PC_NAME = SAVE_PATH + \"CroppedPointCloud.ply\"; //---------------------------------------------------------------------------- public class SPickStruct { public MIL_INT BoxLabel; public MIL_ID Box; public MIL_ID Gralist; public MIL_ID OriginalContainer; public MIL_ID CroppedContainer; }; public class SKeyStruct { public MIL_ID Disp; }; enum EParentControl { Translatable, Rotatable, Scalable }; //----------------------------------------------------------------------------* // Main. //----------------------------------------------------------------------------* static void Main(string[] args) { Console.Write(\"[EXAMPLE NAME]\\n\"); Console.Write(\"M3dgraInteractive\\n\\n\"); Console.Write(\"[SYNOPSIS]\\n\"); Console.Write(\"This example demonstrates how to interactively edit a 3D box \\n\"); Console.Write(\"geometry as well as setting up and using the LOD settings \\n\"); Console.Write(\"(level of detail) and changing the editable controls to enable \\n\"); Console.Write(\"and disable individual editable handles.\\n\\n\"); Console.Write(\"[MODULES USED]\\n\"); Console.Write(\"Modules used: application, system, buffer, 3D display, \"); Console.Write(\"3D graphics, 3D image processing.\\n\\n\"); MIL_ID MilApplication = MIL.M_NULL; // Application identifier. MIL_ID MilSystem = MIL.M_NULL; // System identifier. // Allocate defaults. MIL.MappAllocDefault( MIL.M_DEFAULT, ref MilApplication, ref MilSystem, MIL.M_NULL, MIL.M_NULL, MIL.M_NULL); // Check for required example files. if (!CheckForRequiredMILFile(PT_CLD_FILE)) { MIL.MappFreeDefault( MilApplication, MilSystem, MIL.M_NULL, MIL.M_NULL, MIL.M_NULL); return; } // Allocate the display. MIL_ID Mil3dDisplay = Alloc3dDisplayId(MilSystem); if (Mil3dDisplay == MIL.M_NULL) { MIL.MappFreeDefault( MilApplication, MilSystem, MIL.M_NULL, MIL.M_NULL, MIL.M_NULL); return; } MIL_ID Mil3dGraList = MIL.M3ddispInquire( Mil3dDisplay, MIL.M_3D_GRAPHIC_LIST_ID, MIL.M_NULL); // Allocate and restore a point cloud. string PointCloudFile = \"\"; MIL_ID PointCloud = ObtainPointCloud(PointCloudFile); MIL_ID OriginalContainer = MIL.MbufAllocContainer(MilSystem, MIL.M_PROC + MIL.M_DISP, MIL.M_DEFAULT, MIL.M_NULL); MIL.MbufConvert3d(PointCloud, OriginalContainer, MIL.M_NULL, MIL.M_REMOVE_NON_FINITE, MIL.M_COMPENSATE); if (OriginalContainer == MIL.M_NULL) { return; } // Create a cropped copy of the point cloud and add it to the graphics list. MIL_ID CroppedContainer = MIL.MbufAllocContainer( MilSystem, MIL.M_PROC + MIL.M_DISP, MIL.M_DEFAULT, MIL.M_NULL); MIL_ID PtCldLabel = MIL.M3dgraAdd( Mil3dGraList, MIL.M_ROOT_NODE, CroppedContainer, MIL.M_DEFAULT); // Create an editable box in the graphics list. MIL_ID BoundingBox = MIL.M3dgeoAlloc( MilSystem, MIL.M_GEOMETRY, MIL.M_DEFAULT, MIL.M_NULL); // Initialize the size of the box to a fraction of the original point cloud's size. MIL.M3dimStat( MIL.M_STAT_CONTEXT_BOUNDING_BOX, OriginalContainer, BoundingBox, MIL.M_DEFAULT); MIL.M3dgeoBox(BoundingBox, MIL.M_CENTER_AND_DIMENSION, MIL.M_UNCHANGED, MIL.M_UNCHANGED, MIL.M_UNCHANGED, MIL.M3dgeoInquire(BoundingBox, MIL.M_SIZE_X, MIL.M_NULL) * 0.5, MIL.M3dgeoInquire(BoundingBox, MIL.M_SIZE_Y, MIL.M_NULL) * 0.5, MIL.M_UNCHANGED, MIL.M_DEFAULT); MIL_ID BoxLabel = MIL.M3dgeoDraw3d( MIL.M_DEFAULT, BoundingBox, Mil3dGraList, MIL.M_ROOT_NODE, MIL.M_DEFAULT); MIL.M3dgraControl(Mil3dGraList, BoxLabel, MIL.M_EDITABLE, MIL.M_ENABLE); // This sets the boxes properties to be the same as editable. MIL.M3dgraControl(Mil3dGraList, BoxLabel, MIL.M_OPACITY, DEFAULT_EDITABLE_OPACITY); // This enables the LOD on the pointclod. MIL.M3dgraControl(Mil3dGraList, PtCldLabel, MIL.M_VIEW_BASED_LOD, MIL.M_ENABLE); MIL_ID CroppingBox = MIL.M3dgeoAlloc(MilSystem, MIL.M_GEOMETRY, MIL.M_DEFAULT, MIL.M_NULL); // Create a hook to crop the container when the box is modified // in the graphics list. SPickStruct PickStruct = new SPickStruct(); PickStruct.Box = CroppingBox; PickStruct.BoxLabel = BoxLabel; PickStruct.Gralist = Mil3dGraList; PickStruct.OriginalContainer = OriginalContainer; PickStruct.CroppedContainer = CroppedContainer; GCHandle hUserData = GCHandle.Alloc(PickStruct); MIL_3DGRA_HOOK_FUNCTION_PTR HandlerFunctionPtr = new MIL_3DGRA_HOOK_FUNCTION_PTR(BoxModifiedHandler); MIL.M3dgraHookFunction(Mil3dGraList, MIL.M_EDITABLE_GRAPHIC_MODIFIED, HandlerFunctionPtr, GCHandle.ToIntPtr(hUserData)); // Crop a first time before starting the interactivity. RetrieveBoxAndCrop(ref PickStruct); // Open the 3d display. MIL.M3ddispSelect(Mil3dDisplay, MIL.M_NULL, MIL.M_OPEN, MIL.M_DEFAULT); Console.Write(\"A 3D point cloud is restored from a ply file and displayed.\\n\"); Console.Write(\"The box is editable.\\n\"); Console.Write(\"Only the points inside the interactive box are shown.\\n\\n\"); Console.Write(\"- Use side box handles to resize.\\n\"); Console.Write(\"- Use axis arrow tips to translate.\\n\"); Console.Write(\"- Use axis arcs to rotate.\\n\\n\"); Console.Write(\"Press any key to continue.\\n\\n\"); Console.ReadKey(); // Enable LOD degradation on action. MIL.M3ddispControl(Mil3dDisplay, MIL.M_LOD_DEGRADE_ON_ACTION, MIL.M_ENABLE); SKeyStruct KeyStruct = new SKeyStruct(); KeyStruct.Disp = Mil3dDisplay; GCHandle hDispPointer = GCHandle.Alloc(KeyStruct); MIL_3DDISP_HOOK_FUNCTION_PTR KeyHandlerFunctionPtr = new MIL_3DDISP_HOOK_FUNCTION_PTR(DispKeyHandler); MIL.M3ddispHookFunction(Mil3dDisplay, MIL.M_KEY_DOWN, KeyHandlerFunctionPtr, GCHandle.ToIntPtr(hDispPointer)); MIL.M3ddispControl(Mil3dDisplay, MIL.M_AUTO_ROTATE, MIL.M_ENABLE); Console.Write(\"You can control the LOD (level of detail) of a point cloud\\n\"); Console.Write(\"and have this be shown when interacting with the display. This\\n\"); Console.Write(\"is used to speedup rendering during movement at the cost of\\n\"); Console.Write(\"temporarily hidding points and needing to calculate these LODs.\\n\"); Console.Write(\"The degradation on movement can be toggled using the \\\"L\\\" key\\n\"); Console.Write(\"in the display window. The usage of LODs must be enabled on the\\n\"); Console.Write(\"point cloud to see a change in the display movements.\\n\\n\"); Console.Write(\"Press any key to continue.\\n\\n\"); Console.Write(\"Level of Detail (lod) degrade on action : Enabled \\r\"); for (int i = 0; (i &lt;= 100) &amp;&amp; !Console.KeyAvailable; i++) { Thread.Sleep(50); } MIL.M3ddispControl(Mil3dDisplay, MIL.M_AUTO_ROTATE, MIL.M_DISABLE); Console.ReadKey(); MIL.M3ddispHookFunction(Mil3dDisplay, MIL.M_KEY_DOWN + MIL.M_UNHOOK, KeyHandlerFunctionPtr, GCHandle.ToIntPtr(hDispPointer)); Console.Write(\"\\n\\n\"); ChangeEditability(Mil3dGraList, BoxLabel, EParentControl.Translatable); ChangeEditability(Mil3dGraList, BoxLabel, EParentControl.Rotatable); ChangeEditability(Mil3dGraList, BoxLabel, EParentControl.Scalable); if (AskYesNo(\"Do you want to save the point cloud?\")) { MIL.MbufSave(OUTPUT_PC_NAME, CroppedContainer); } Console.Write(\"Press any key to end.\\n\\n\"); Console.ReadKey(); MIL.M3dgeoFree(CroppingBox); MIL.M3dgeoFree(BoundingBox); MIL.MbufFree(PointCloud); MIL.MbufFree(CroppedContainer); MIL.MbufFree(OriginalContainer); MIL.M3ddispFree(Mil3dDisplay); MIL.MappFreeDefault(MilApplication, MilSystem, MIL.M_NULL, MIL.M_NULL, MIL.M_NULL); } //---------------------------------------------------------------------------- // Handler call for modifying the editable box. //---------------------------------------------------------------------------- static public MIL_INT BoxModifiedHandler(MIL_INT HookType, MIL_ID EventId, IntPtr UserDataPtr) { GCHandle hUserData = GCHandle.FromIntPtr(UserDataPtr); SPickStruct PickStruct = hUserData.Target as SPickStruct; RetrieveBoxAndCrop(ref PickStruct); return 0; } //----------------------------------------------------------------------------- // Handler call when key hit in disp. //----------------------------------------------------------------------------- static public MIL_INT DispKeyHandler(MIL_INT HookType, MIL_ID EventId, IntPtr UserDataPtr) { // Not LOD key (M_KEY_L) so we ignore it. MIL_INT HitKey = MIL.M_NULL; MIL.M3ddispGetHookInfo(EventId, MIL.M_MIL_KEY_VALUE, ref HitKey); if (HitKey != MIL.M_KEY_L) { return 0; } GCHandle UserDataHandle = GCHandle.FromIntPtr(UserDataPtr); SKeyStruct KeyStruct = UserDataHandle.Target as SKeyStruct; MIL_INT LodDegrade = MIL.M3ddispInquire(KeyStruct.Disp, MIL.M_LOD_DEGRADE_ON_ACTION, MIL.M_NULL); // The hook is called before the setting is changed, // therefore we write what it will be. Console.Write(\"Level of Detail (lod) degrade on action : {0} \\r\", LodDegrade == MIL.M_DISABLE ? \"Enabled\" : \"Disabled\"); return 0; } //---------------------------------------------------------------------------- // Crops container based on associated box. //---------------------------------------------------------------------------- static public void RetrieveBoxAndCrop(ref SPickStruct PickStruct) { // Retrieve the edited box from the graphics list. MIL.M3dgraCopy(PickStruct.Gralist, PickStruct.BoxLabel, PickStruct.Box, MIL.M_DEFAULT, MIL.M_GEOMETRY, MIL.M_DEFAULT); // Crop the point cloud using the retrieved box. MIL.M3dimCrop(PickStruct.OriginalContainer, PickStruct.CroppedContainer, PickStruct.Box, MIL.M_NULL, MIL.M_SAME, MIL.M_DEFAULT); } //---------------------------------------------------------------------------- // Check for required files to run the example. //---------------------------------------------------------------------------- static bool CheckForRequiredMILFile(string FileName) { MIL_INT FilePresent = MIL.M_NO; MIL.MappFileOperation(MIL.M_DEFAULT, FileName, MIL.M_NULL, MIL.M_NULL, MIL.M_FILE_EXISTS, MIL.M_DEFAULT, ref FilePresent); if (FilePresent == MIL.M_NO) { Console.Write(\"The footage needed to run this example is missing. You need\\n\"); Console.Write(\"to obtain and apply a separate specific update \" + \"to have it.\\n\\n\"); Console.Write(\"Press any key to end.\\n\\n\"); Console.ReadKey(); } return (FilePresent == MIL.M_YES); } //---------------------------------------------------------------------------- // Allocates a 3D display and returns its MIL identifier. //---------------------------------------------------------------------------- static MIL_ID Alloc3dDisplayId(MIL_ID MilSystem) { MIL.MappControl(MIL.M_DEFAULT, MIL.M_ERROR, MIL.M_PRINT_DISABLE); MIL_ID MilDisplay3D = MIL.M3ddispAlloc(MilSystem, MIL.M_DEFAULT, \"M_DEFAULT\", MIL.M_DEFAULT, MIL.M_NULL); MIL.MappControl(MIL.M_DEFAULT, MIL.M_ERROR, MIL.M_PRINT_ENABLE); if (MilDisplay3D == MIL.M_NULL) { Console.Write(\"\\n\"); Console.Write(\"The current system does not support the 3D display.\\n\"); Console.Write(\"Press any key to exit.\\n\"); Console.ReadKey(); } return MilDisplay3D; } //---------------------------------------------------------------------------- // Modify editable settings. //---------------------------------------------------------------------------- static void ChangeEditability(MIL_ID Mil3dGraList, MIL_ID BoxLabel, EParentControl ParentControl) { List&lt;MIL_INT&gt; Controls; List&lt;string&gt; Choices; List&lt;bool&gt; Values = new List&lt;bool&gt;(); switch (ParentControl) { case EParentControl.Translatable: Controls = new List&lt;MIL_INT&gt; { MIL.M_EDITABLE, MIL.M_TRANSLATABLE, MIL.M_TRANSLATABLE_X, MIL.M_TRANSLATABLE_Y, MIL.M_TRANSLATABLE_Z }; Choices = new List&lt;string&gt; { \"M_EDITABLE\", \"M_TRANSLATABLE\", \"M_TRANSLATABLE_X\", \"M_TRANSLATABLE_Y\", \"M_TRANSLATABLE_Z\", \"continue\"}; break; case EParentControl.Rotatable: Controls = new List&lt;MIL_INT&gt; { MIL.M_EDITABLE, MIL.M_ROTATABLE, MIL.M_ROTATABLE_X, MIL.M_ROTATABLE_Y, MIL.M_ROTATABLE_Z }; Choices = new List&lt;string&gt; { \"M_EDITABLE\", \"M_ROTATABLE\", \"M_ROTATABLE_X\", \"M_ROTATABLE_Y\", \"M_ROTATABLE_Z\", \"continue\" }; break; case EParentControl.Scalable: Controls = new List&lt;MIL_INT&gt; { MIL.M_EDITABLE, MIL.M_SCALABLE, MIL.M_SCALABLE_X, MIL.M_SCALABLE_Y, MIL.M_SCALABLE_Z, MIL.M_SCALABLE_X0, MIL.M_SCALABLE_X1 }; Choices = new List&lt;string&gt; { \"M_EDITABLE\", \"M_SCALABLE\", \"M_SCALABLE_X\", \"M_SCALABLE_Y\", \"M_SCALABLE_Z\", \"M_SCALABLE_X0\", \"M_SCALABLE_X1\", \"continue\" }; break; default: Controls = new List&lt;MIL_INT&gt;(); Choices = new List&lt;string&gt;(); break; } for (int c = 0; c &lt; Controls.Count; c++) { Values.Add(MIL.M3dgraInquire(Mil3dGraList, BoxLabel, Controls[c], MIL.M_NULL) == MIL.M_ENABLE); } // Get user choice Console.Write(\"Please select a control to swap (between M_ENABLE and \" + \"M_DISABLE)\\n\"); Console.Write(\"by pressing its respective key in the console.\\n\"); Console.Write(\"{0} takes highest precedence when disabled followed by {1} and {2}\", Choices[0], Choices[1], Choices[2]); if (ParentControl == EParentControl.Scalable) { Console.Write(\" and {0}\", Choices[5]); } Console.Write(\".\\n\"); int Choice = AskMakeChoice(Choices, Values); MIL_INT Control = MIL.M_NULL; if (Choice &gt;= 0) { Control = Controls[Choice]; } while (Control != MIL.M_NULL) { // Swap control value. MIL_INT OldValue = MIL.M3dgraInquire(Mil3dGraList, BoxLabel, Control, MIL.M_NULL); MIL.M3dgraControl(Mil3dGraList, BoxLabel, Control, OldValue == MIL.M_ENABLE ? MIL.M_DISABLE : MIL.M_ENABLE); Values[Choice] = !Values[Choice]; // Get user choice. Choice = AskMakeChoice(Choices, Values, false); Control = MIL.M_NULL; if (Choice &gt;= 0) { Control = Controls[Choice]; } } Console.Write(\"\\n\\n\"); } //---------------------------------------------------------------------------- // Helper function for getting user choices. //---------------------------------------------------------------------------- static int AskMakeChoice(List&lt;string&gt; Choices, List&lt;bool&gt; Values, bool Print = true) { int Choice; // Print the choices. if (Print) { for (int c = 0; c &lt; Choices.Count - 1; c++) { Console.Write(\"\\t{0}. {1}\\n\", c, Choices[c]); } Console.Write(\"\\tPress \\\"Enter\\\" to {0}. \\n\\n\", Choices[Choices.Count - 1]); } // Print the choice values. for (int c = 0; c &lt; Values.Count; c++) { if (c != 0) { Console.Write(\", \"); } Console.Write(\"{0}: {1}\", c, Values[c] ? \"Enabled\" : \"Disabled\"); } Console.Write(\" \\r\"); // Get the choice. do { Choice = Console.ReadKey(true).KeyChar; if (Choice == '\\r') { return -1; } Choice -= ('0' + 0); } while (Choice &lt; 0 || Choice &gt;= (MIL_INT)Choices.Count - 1); return Choice; } //---------------------------------------------------------------------------- // Prompts user for yes/no. //---------------------------------------------------------------------------- static bool AskYesNo(string QuestionString) { Console.Write(\"{0} (y/n)?\\n\", QuestionString); while (true) { switch (Console.ReadKey(true).KeyChar) { case 'y': case 'Y': return true; case 'n': case 'N': case '\\r': return false; } } } //---------------------------------------------------------------------------- // Obtains a point cloud either from file or by calculating with example data. //---------------------------------------------------------------------------- static MIL_ID ObtainPointCloud(string PointCloudFile) { MIL_ID MilPointCloud; do { if (PointCloudFile != \"\") { MilPointCloud = RestorePointCloud(PointCloudFile); } else if (AskYesNo(\"Do you want to load a user point cloud\")) { Console.Write(\"Please select a .mbufc or .ply point cloud file.\\n\\n\"); MilPointCloud = RestorePointCloud(\"\"); } else { Console.Write(\"The example will run using a point cloud from \" + \"example source data.\\n\\n\"); if (!CheckForRequiredMILFile(PT_CLD_FILE)) { return MIL.M_NULL; } MilPointCloud = RestorePointCloud(PT_CLD_FILE); } } while (MilPointCloud == MIL.M_NULL); return MilPointCloud; } //---------------------------------------------------------------------------- // Restores the registration result from file. //---------------------------------------------------------------------------- static MIL_ID RestorePointCloud(string PointCloudFilename) { // Restore the 3dreg result. MIL.MappControl(MIL.M_DEFAULT, MIL.M_ERROR, MIL.M_PRINT_DISABLE); MIL_ID MilPointCloud = MIL.M_NULL; if (PointCloudFilename == String.Empty) { MilPointCloud = MIL.MbufImport(MIL.M_NULL, MIL.M_DEFAULT, MIL.M_RESTORE, MIL.M_DEFAULT_HOST, MIL.M_NULL); } else { MilPointCloud = MIL.MbufImport(PointCloudFilename, MIL.M_DEFAULT, MIL.M_RESTORE, MIL.M_DEFAULT_HOST, MIL.M_NULL); } MIL.MappControl(MIL.M_DEFAULT, MIL.M_ERROR, MIL.M_PRINT_ENABLE); // The restored file must be a convertible container. if (MilPointCloud != MIL.M_NULL &amp;&amp; (MIL.MobjInquire(MilPointCloud, MIL.M_OBJECT_TYPE, MIL.M_NULL) != MIL.M_CONTAINER || MIL.MbufInquireContainer(MilPointCloud, MIL.M_CONTAINER, MIL.M_3D_CONVERTIBLE, MIL.M_NULL) == MIL.M_NOT_CONVERTIBLE)) { MIL.MbufFree(MilPointCloud); MilPointCloud = MIL.M_NULL; } // Verify that the result is valid. if (MilPointCloud == MIL.M_NULL) { Console.Write(\"No valid .mbufc file restored.\\n\\n\"); } return MilPointCloud; } } } ",
      "wordCount": 1709
    }
  ]
}]