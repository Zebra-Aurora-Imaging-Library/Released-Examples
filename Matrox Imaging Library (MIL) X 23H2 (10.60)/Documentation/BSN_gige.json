[{
  "id": "BSN_gige",
  "version": "2024020714",
  "title": "Matrox GigE Vision driver",
  "subTitles": null,
  "location": "MIL Hardware-specific Notes",
  "pageURL": "content\\BoardSpecificNotes\\gige\\ChapterInformation.htm",
  "text": " Matrox GigE Vision driver This chapter discusses features of MIL that are particular to the Matrox GigE Vision driver, and ways that optimize its performance. Information regarding using this driver with specific functions is integrated into the functions' reference topics. Refer to the Matrox GigE Vision driver release notes for any additions/modifications to this chapter or the MIL Reference. Matrox GigE Vision driver overview Using GigE Vision with MIL Working with more than one Gigabit Ethernet network adapter Working with one or more GigE Vision-compliant cameras Working without a Matrox board as your Gigabit Ethernet network adapter Matrox GigE Vision tools Matrox Capture Assistant Matrox GigE Vision discovery service Matrox Capture Works Configuring your GigE Vision camera and Gigabit Ethernet network adapter Automatic format switching Gigabit Ethernet network adapter settings Optimizing further Configuring IP addresses Link aggregation Using IP multicast Configuring a multicast master Configuring one or more multicast slaves Configuring one or more multicast monitors Ethernet switches, routers, IGMP, and IP multicast Internet Group Management Protocol (IGMP) Ethernet switches and multicast IGMP snooping and Ethernet switches Using IP multicast without a router Using a Gbit Ethernet switch with GigE Vision-compliant cameras Troubleshooting acquisition reliability issues Triggering simultaneous actions in multiple GigE Vision cameras Introducing action commands Establish if your camera supports action commands Acknowledgment of reception of an action command Masking out one or more cameras Scheduling time Examples of action commands Example of sending a single action command Example of sending multiple action commands Example of using group masks to ignore an action command on one camera Example distributed with MIL ",
  "wordCount": 265,
  "subEntries": [
    {
      "id": "BSN_gige_Matrox_GigE_Vision_specific_features",
      "version": null,
      "title": "Matrox GigE Vision driver overview",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Matrox_GigE_Vision_specific_features.htm",
      "text": " Matrox GigE Vision driver overview The Matrox GigE Vision driver allows you to use a Gigabit Ethernet (1000 BaseT or faster) network adapter to grab from GigE Vision-compliant cameras with MIL. The Gigabit Ethernet network adapter can be a third-party device, or a Matrox Imaging product (such as the Matrox Concord PoE). Refer to the Matrox GigE Vision driver release notes for any additions/modifications to this chapter or the MIL Reference. Matrox GigE Vision driver overview ",
      "wordCount": 78,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Using_Matrox_GigE_Vision_with_MIL",
      "version": null,
      "title": "Using GigE Vision with MIL",
      "subTitles": [
        "Working with more than one Gigabit Ethernet network adapter",
        "Working with one or more GigE Vision-compliant cameras",
        "Working without a Matrox board as your Gigabit Ethernet network adapter"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Using_Matrox_GigE_Vision_with_MIL.htm",
      "text": " Using GigE Vision with MIL To use your Matrox GigE Vision driver with MIL, you must allocate a MIL GigE Vision system (M_SYSTEM_GIGE_VISION), using MsysAlloc(). This allocation opens general communication with (allows you to discover) all GigE Vision-compliant cameras (or other devices) found on your network(s) (through all Gigabit Ethernet, or faster, network adapters in your computer). You must then allocate a digitizer for each camera that you want to use to grab images and/or access directly, using MdigAlloc(). In the case where you have only one GigE Vision-compliant grabberless interface camera, use MdigAlloc() with M_DEV0. If, however, you have multiple GigE Vision-compliant grabberless interface cameras, you should use the M_GC_CAMERA_ID() macro and specify the device's name; this will make for more portable code. You can use the Matrox Capture Assistant utility to view a list of available GigE Vision-compliant cameras and their user-defined name. For information on this utility, refer to the Matrox GigE Vision tools section later in this chapter. For information regarding working with multiple GigE Vision-compliant devices, refer to the Working with one or more GigE Vision-compliant cameras subsection of this section. Each process (executable) can allocate only one MIL GigE Vision system; an error will occur if you try to allocate more than one. Multiple processes can allocate a MIL GigE Vision system. Typically, multiple processes cannot allocate a digitizer for the same GigE vision-compliant camera simultaneously. However, this is not a restriction when using IP multicasting, as long as only one digitizer is allocated as a multicast master digitizer (by using MdigAlloc() with M_GC_MULTICAST_MASTER). For information regarding IP multicasting, refer to the Using IP multicast section later in this chapter. All GigE Vision-compliant devices support configuration using the GenICam standard. To learn the list of GenICam-standard features available, refer to GenICam's standard feature naming convention (SFNC), available on the GenICam website at: http://www.genicam.org. Your camera might support additional GenICam features that do not appear in the GenICam SFNC; check your camera's manual and Matrox Capture Assistant's Feature Browser for details. Matrox Camera Assistant's Feature Browser accesses the GigE Vision-compliant camera's device description file (XML), providing an interface to view and change the camera's information. In most cases you should control and inquire GigE Vision devices features using the conventional MIL functions MdigInquire() and MdigControl(). However, some GigE Vision-compliant device have features that can only be accessed using MdigInquireFeature() and MdigControlFeature() functions. For more information about accessing the features of your GigE Vision-compliant device, refer to the Using MIL with GenICam section of Chapter 27: Grabbing with your digitizer. GigE Vision information in the MIL Reference can be found in the paragraphs and values marked as being supported by the Matrox GigE Vision driver. Refer to the Matrox GigE Vision driver release notes for any additions/modifications to this chapter. Working with more than one Gigabit Ethernet network adapter When your computer has more than one Gigabit Ethernet network adapter installed, you can use each network adapter to access cameras on different networks. Alternatively, multiple network adapters can simply be used to increase the number of cameras to which you have access. Unless otherwise specified, this documentation uses the model of one network adapter connected to a local network on which one or more GigE Vision-compliant cameras exist. When dealing with more than one Gigabit Ethernet network adapter, the list of your GigE Vision-compliant devices in the Matrox Capture Assistant utility is subdivided by the network adapter to which they are visible. Both the network adapters and their associated GigE Vision-compliant devices are listed in the order of their MAC addresses. For more detailed information regarding network configurations and GigE Vision-compliant camera setup, refer to the Matrox Capture Assistant white paper (located in your Matrox Imaging\\Tools folder). Working with one or more GigE Vision-compliant cameras When there is more than one GigE Vision-compliant network camera available, the network discovery process (in the Matrox Discovery Service) ranks the GigE Vision-compliant cameras according to their MAC address. For example, the camera having the lowest MAC address is ranked as device zero; the rank increments by one for each camera having a subsequently greater MAC address. MIL uses the camera's rank when you allocate a digitizer with a device number (using MdigAlloc() with M_DEVn); so the rank 0 camera becomes M_DEV0. When you replace a GigE Vision-compliant camera on your network, its rank might not be the same as the camera you are replacing. This means that the rank of all the GigE Vision-compliant cameras could shift to allow the new camera into the sequence the next time you stop and restart your application. When you try to allocate a digitizer for the new camera (to replace the old camera), if the rank is different, the allocation might fail or worse, it might succeed, but the images captured by the camera actually allocated will not be of what you expect. To avoid this problem, assign the camera a user-defined name or IP address, using Matrox Capture Assistant (on the Device information tab), and then use this name when you allocate a digitizer for this camera. To allocate a digitizer for a camera with a user-defined name, use MdigAlloc() with M_GC_DEVICE_NAME and specify your camera's name. Then, when a camera needs to be replaced, set the user-defined name of the new camera to match the name of the camera that it replaced. Allocating your GigE Vision-compliant camera using the camera's name allows your application to work with the new camera without modifying either your application or your application's configuration. Alternatively, if your camera uses a persistent (static) IP address, you can use that IP address to identify your camera (using M_GC_DEVICE_IP_ADDRESS). A new GigE Vision-compliant camera (added to the network as a new camera or a replacement) is not allocated by default and, although it is present, it is not available to your application until you allocate it using MdigAlloc(). If an allocated camera is removed from your network, free it using MdigFree(). To watch for new cameras on your network, use MsysHookFunction() with M_CAMERA_PRESENT. Note that verifying the camera's state (through the hooked function) should be done before your application relies on information from the camera. Use MsysInquire() with M_DIGITIZER_NUM to determine the number of cameras available. This number is updated when you allocate your system, and again if called by a function hooked to a M_CAMERA_PRESENT event. Note that this number is not affected by the number of digitizers allocated for the cameras. Working without a Matrox board as your Gigabit Ethernet network adapter To successfully allocate a MIL GigE Vision system without a Matrox board as your Gigabit Ethernet network adapter, you must already have purchased the Matrox GigE Vision driver license (regardless if you have a license for MIL development, MIL runtime, or MIL-Lite). To determine whether you have a Matrox GigE Vision driver license, use MappInquire() with M_LICENSE_MODULES; it should return M_LICENSE_INTERFACE. Using GigE Vision with MIL Working with more than one Gigabit Ethernet network adapter Working with one or more GigE Vision-compliant cameras Working without a Matrox board as your Gigabit Ethernet network adapter ",
      "wordCount": 1182,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Matrox_GigE_Vision_utilities",
      "version": null,
      "title": "Matrox GigE Vision tools",
      "subTitles": [
        "Matrox Capture Assistant",
        "Matrox GigE Vision discovery service",
        "Matrox Capture Works"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Matrox_GigE_Vision_utilities.htm",
      "text": " Matrox GigE Vision tools Besides general utilities (such as Matrox Intellicam and the MILConfig utility), the Matrox GigE Vision driver comes with the Matrox Capture Assistant utility and the Matrox GigE Vision discovery service. Matrox Capture Assistant Matrox Capture Assistant is a utility that allows you to rapidly test and evaluate the performance of virtually any GigE Vision-compliant camera (or other device) using the Matrox GigE Vision driver. You can also use the utility to configure Gigabit Ethernet network adapter settings and specific MIL GigE Vision configuration settings. You can launch the Matrox Capture Assistant utility from the MIL Control Center. Note that, for the Matrox Capture Assistant utility to function, the Matrox GigE Vision discovery service must be running. This utility has four tabs: Acquisition Devices. Lists all detected GigE Vision-compliant cameras connected to all the network adapters installed in your computer. It also provides the starting point for you to select each of these cameras, allocate/free a digitizer for the selected camera, start or stop capturing images, browse the selected camera's features, send a software trigger, control the default display, save the last grabbed image, and list the camera's capabilities. You can view and change camera and network adapter information (such as, setting the IP address, packet size, inter-packet delay, and the user-defined name of your camera), view and change acquisition properties, and view acquisition statistics. Network Connections. Lists all functioning network adapters installed in your computer and allows you to configure the multiple network adapters in your computer to static IP mode (or point-to-point connection mode) or DHCP mode (or corporate network mode). Note that if your GigE Vision-compliant cameras are connected to a network with a DHCP server, you must set your network adapters connected to these cameras to corporate network mode. Whereas, if your GigE Vision-compliant cameras do not obtain their IP addresses from a DHCP server, you must set your network adapters to point-to-point connection mode. System Configuration. Allows you to control specific connection settings for a MIL GigE Vision system. Troubleshooting. Allows you to find your camera using its MAC address, and then set the camera's IP address, subnet mask, and default gateway. Matrox GigE Vision discovery service The Matrox GigE Vision discovery service allows your MIL application and the Matrox Capture Assistant utility to automatically detect when GigE Vision-compliant cameras are added to or removed from your network. The service is enabled by default when you install the Matrox GigE Vision driver. To disable or re-enable the service, launch the MILConfig utility. Then, select the Boards GigE Vision item from the tree structure in the presented interface, click on the Use Camera Discovery Service check box in the presented page, and click on the Apply button. You cannot launch the Matrox Capture Assistant utility unless the service is running. While the service is running, your MIL application can execute a hook-handler function whenever a GigE Vision-compliant camera is added to or removed from your network (using MsysHookFunction() with M_CAMERA_PRESENT). While the service is not running, your MIL application will only detect which GigE Vision-compliant cameras are on your network at the moment you allocate a MIL GigE Vision system. To detect the addition of GigE Vision-compliant cameras on your network, you must deallocate and reallocate the MIL GigE Vision system. To detect the removal of a GigE Vision-compliant camera without reallocating the MIL GigE Vision system, you must have already allocated a digitizer for the camera and attached a hook-handler function to the camera presence event (using MdigHookFunction() with M_CAMERA_PRESENT). Matrox Capture Works Matrox Capture Works is an interactive utility that allows you to rapidly evaluate the performance and functionality of virtually any GenICam-compliant camera, 3D sensor, or other device that is compatible with GigE Vision, USB3 Vision, CXP, or GenTL. Matrox Capture Works will list all detected GigE Vision-compliant devices connected to each allocated board. It can start or stop capturing images, display acquired images, save the last grabbed image, send a software trigger, as well as browse and control the selected device's features. Matrox Capture Works adds, in particular, support for container payload types from the GenICam GenDC and multi-part additions to interface standards,and support for 3D display. You can view and change acquisition properties, and view acquisition statistics. Matrox Capture Works is distributed with MIL and Matrox Design Assistant; it is also available with MIL-Lite. Matrox GigE Vision tools Matrox Capture Assistant Matrox GigE Vision discovery service Matrox Capture Works ",
      "wordCount": 743,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Configuring_your_Matrox_GigE_Vision_device",
      "version": null,
      "title": "Configuring your GigE Vision camera and Gigabit Ethernet network adapter",
      "subTitles": [
        "Automatic format switching",
        "Gigabit Ethernet network adapter settings",
        "Optimizing further"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Configuring_your_Matrox_GigE_Vision_device.htm",
      "text": " Configuring your GigE Vision camera and Gigabit Ethernet network adapter There are several features that can improve the performance of your Matrox GigE Vision driver and associated GigE Vision-compliant camera. Note that, some GigE Vision-compliant cameras include libraries that, when installed, might install network filter drivers or override your network adapter's native driver. While these third-party libraries have their own benefits, we cannot guarantee their compatibility with MIL. For best results, the computer being used to communicate with your GigE Vision-compliant camera should always use MIL for image capture, as well as your network adapter's native driver (for example, an Intel driver for an Intel network adapter). Automatic format switching By default, the Matrox GigE Vision driver will tell the camera to transmit images in the same format as the grab buffer; this is called automatic format switching. If the grab buffer is allocated in a format that is not compliant with the camera's current pixel format, the Matrox GigE Vision driver changes the camera's pixel format to a format more compliant with the grab buffer before performing the copy operation. Automatic format switching prevents color space conversion, which can cause additional processing and delays in delivering the image from the camera to your computer. Unfortunately, there are cases where automatic format switching cannot occur (such as when the operation requires grabbing into internal buffers, as is the case when performing Bayer conversion in the camera or when the camera is in chunk mode). When automatic format switching cannot be performed, the image is copied (in the camera's current pixel format) into a compatible automatically-allocated internal buffer. The Host will then copy the internal buffer to the specified grab buffer to force the conversion to the format of the specified grab buffer. Ideally, you should try to avoid automatic format switching, by inquiring the camera's current pixel format using MdigInquire() with M_SOURCE_DATA_FORMAT before allocating your grab buffers (that is, using MbufAlloc...() with M_IMAGE and the returned value from MdigInquire() with M_SOURCE_DATA_FORMAT. Note that, the camera's current format typically varies from camera to camera. Gigabit Ethernet network adapter settings Adjust the following network adapter settings for more reliable acquisition performance: Receive buffers. Gigabit Ethernet network adapters use receive buffers, also known as receive descriptors, to store received packets. If the number of packets sent by your camera exceeds the number of available receive buffers, the additional packets will be dropped. The number of receive buffers assigned to your network adapter therefore impacts the reliability of your camera's image transmission. Typical bandwidth usage of GigE Vision cameras requires that a large number of receive buffers be assigned to your network adapter. Matrox recommends adjusting this setting to its maximum value (typically 2048 for Intel Gigabit Ethernet network adapters). Packet size. Traffic across the network travels in packets. The maximum packet size is preset (typically at 1.5 Kbytes). When packets larger than 1.5 Kbytes make up the majority of the network traffic, as is the case with typical GigE Vision image streams, increasing the packet size can reduce CPU utilization and improve efficiency. In these cases, enabling jumbo packets (typically 9014 bytes) is recommended. Note that, if you want to use jumbo packets and you use an Ethernet switch in your network, you should also enable jumbo packets on your switch, since jumbo packet support is typically disabled by default. Ethernet flow control. Ethernet flow control can pause and restart the flow of packets from your camera. This reduces the chance of on-board memory becoming too full to properly deal with the flow of packets, and reduces the chance of data loss (dropped packets). A number of network adapters support Ethernet flow control. Enabling your network adapter's Ethernet flow control settings is recommended. Interrupt moderation. Interrupt moderation controls the rate at which interrupts are received and processed. Typically, setting the interrupt moderation to a low value is best when dealing with light traffic, while constant heavy traffic requires a higher interrupt moderation value. Controlling the rate at which interrupts are received and processed introduces latency in the communication between your camera and your network adapter, but can improve CPU utilization. You must determine the best tradeoff between these for your application's specific needs. To configure your network adapter with this information under Microsoft Windows, refer to the Microsoft Windows documentation. Also refer to the Matrox Capture Assistant white paper (located in your Matrox Imaging\\Tools folder). To configure your network adapter with this information under a supported Linux distribution, refer to the Linux release notes. Optimizing further If your Gigabit Ethernet network adapter requires further optimization (that is, its performance is still not adequate after modifying the network adapter settings), try changing the inter-packet delay. Situations can occur that cause delays in the reception of packets by your network adapter. Inter-packet delays help by spreading packet transmission over time, giving the receiving network adapter enough time to deal with incoming packets and reduces the chance of an overworked receiving network adapter dropping packets. You can program your network adapter's inter-packet delay from the GigE Vision Devices tab of the Matrox Capture Assistant utility; use the inter-packet delay calculator to determine the optimal inter-packet delay. Configuring your GigE Vision camera and Gigabit Ethernet network adapter Automatic format switching Gigabit Ethernet network adapter settings Optimizing further ",
      "wordCount": 882,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Matrox_GigE_Vision_network_adapters",
      "version": null,
      "title": "Configuring IP addresses",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Matrox_GigE_Vision_network_adapters.htm",
      "text": " Configuring IP addresses There are three ways to configure the IP address of your Gbit Ethernet network adapter(s): Using DHCP (corporate network). DHCP relies on a network server to automatically assign a unique IP address to each network device. If using DHCP, you do not need to configure your network devices. Using a point-to-point connection. A point-to-point connection (link-local addressing or LLA, or AutoIP) relies on your computer to generate a unique IP address for your computer's network adapter and connected GigE Vision cameras on the 169.254 subnet (that is, an IP address starting with 169.254.X.X). If using multiple network adapters in the same computer with Microsoft Windows, each network adapter must have a unique IP address. The greater the number of devices on your network (that is, cameras, network adapters, or other computers), the greater the amount of time required to negotiate unique IP addresses for each device. Using a static (or persistent) IP address. A static IP address is used when there is no DHCP available, and you want control over the IP address used. You can also use a static IP address to reduce the time it takes to assign all the associated devices' IP addresses. If your computer uses a static IP address, other connected devices on your network should also use a static IP address. If you change the IP address for your GigE Vision camera, reset your camera using the Matrox Capture Assistant utility, if your camera supports a device reset. The Matrox Capture Assistant utility can force the camera to save changes to non-volatile memory and then reboot. In this case, resetting your camera after you change its IP address, forces the camera to use the newly assigned IP address. To perform the device reset, launch the Matrox Capture Assistant utility. Then, select your camera in the GigE Vision Devices pane of the presented interface. On the Device Information tab, select the Reset Device option and then click on the Apply Changes button. If your camera does not support a device reset, you must manually turn the power off and then back on. Once the camera reboots, the newly assigned IP settings will take effect. Configuring IP addresses ",
      "wordCount": 367,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Link_aggregation",
      "version": null,
      "title": "Link aggregation",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Link_aggregation.htm",
      "text": " Link aggregation Some GigE Vision cameras have more than one network interface because the total bandwidth required exceeds 1 Gbit/sec. In this case, they transmit their images over both interfaces and expect the receiving computer to have two network adapters that are configured for link aggregation to receive the video stream. Link aggregation is a method of combining multiple network connections in parallel, to increase the throughput beyond what a single connection can sustain. Note that, while some cameras automatically support link aggregation (determined by the number of connections made from the camera to the network), the settings of your Gigabit Ethernet network adapter must be updated to allow link aggregation. The Matrox GigE Vision driver deduces that a GigE Vision camera is transmitting across multiple network interfaces, and that the network adapter is using link-aggregation, when the reported link speed is greater than 1 Gbit/sec but less than 10 Gbit/sec. Detecting this type of connection between the GigE Vision camera and network adapter allows the Matrox GigE Vision driver to automatically adjust its packet resend engine to fit the requirements of the connection between your camera and network adapter, since they tend to stream packets out of order. Link aggregation has been incorporated into version 2.0 of the GigE Vision specification; this has formalized its use with GigE Vision cameras and Gbit Ethernet network adapters. Link aggregation ",
      "wordCount": 230,
      "subEntries": []
    },
    {
      "id": "BSN_gige_IP_multicast",
      "version": null,
      "title": "Using IP multicast",
      "subTitles": [
        "Configuring a multicast master",
        "Configuring one or more multicast slaves",
        "Configuring one or more multicast monitors"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\IP_multicast.htm",
      "text": " Using IP multicast When sending images from your GigE Vision camera to multiple computers, the overall bandwidth requirements can be significant; this can lead to significantly reduced network performance for other computers on your network. One way to reduce the bandwidth requirements, without reducing the overall frame rate or image size, is to use IP multicast between your GigE Vision camera and your computers' Gigabit Ethernet network adapter. IP multicast is a method of sending data from one computer to a group of computers (on the Internet or on local networks) in a single transmission. Streaming media applications often use multicasting on the Internet or on private networks. Using IP multicast, a GigE Vision-compliant camera can stream data to multiple destinations without having to send multiple copies of the data; in this case, the network routers and Ethernet switches perform the data replication instead. On a local network, the Internet Group Management Protocol (IGMP) typically controls multicast delivery. In a typical network, IGMP resides on a router. With IP multicasting, beside the camera having its own IP address, the camera is also assigned a multicast IP address. The camera sends its multicast stream to the multicast IP address. Each computer that waits to receive this multicast stream, joins the group associated with the multicast IP address (called a multicast group). Each computer must either know the multicast IP address used by the camera or have the camera's IP address and access to read the camera's settings to establish the multicast address. Each computer communicates with its networks' multicast service (typically implemented in a router) to join the list of destinations for the particular multicast group through the Matrox GigE Vision driver. This list of destinations that a multicast stream is sent to is known as a distribution tree. When the camera sends its multicast stream to the multicast address, the stream is forwarded through your network, according to the distribution tree stored on each router or switch, until it reaches the Ethernet switch closest to one or more destination computers. Once there, the image stream is sent directly to the destination computer and not to all computers attached to the Ethernet switch (as would be the case with an IP broadcast). The Ethernet routers on your network manage additions and deletions to the multicast group and its associated distribution tree; and translate the multicast IP address into multiple IP addresses using IGMP. A multicast address is an IP address within a predetermined range from 224.0.0.0 to 239.255.255.255. This predetermined range and its subnets have been established by the Internet Engineering Task Force (IETF) best current practice document and are defined in RFC 5771 and RFC 2365. If you allocate a digitizer for a GigE Vision camera and specify the camera should use IP multicast (that is, be in multicast mode), the Matrox GigE Vision driver selects a multicast address in the 239.0.0.0 to 239.255.255.255 range; this is a range of IP addresses that is not used on the Internet. If you use an IP address outside this range (but inside the predetermined multicast IP range), conflicts are more likely to occur. If your IGMP-aware device (that is, a router, switch, or server) uses a different range of IP addresses, you can reset MIL's multicast IP addresses using MdigControl() with M_GC_STREAM_CHANNEL_MULTICAST_ADDRESS_STRING (for the image stream) and M_GC_MESSAGE_CHANNEL_MULTICAST_ADDRESS_STRING (for the message stream). Note, when using IP multicast to stream images from the camera to several computers, you must allocate a multicast master digitizer on one computer for the GigE Vision-compliant camera, and allocate a multicast slave digitizer or a monitor digitizer on one or more different computers for the same camera. The MIL application that allocates the multicast master digitizer is the only one that can modify the camera's settings. The MIL application that allocates the multicast slave digitizer can only inquire the camera's settings, receive the image stream and GigE Vision messages (events), and request packets be resent. The MIL application that allocates a multicast monitor digitizer can do everything that the multicast slave digitizer can do, except inquire the camera's settings. To use IP multicast with your cameras, the following considerations should be taken: You need a network consisting of a GigE Vision-compliant camera, an Ethernet switch (with IGMP enabled), and at least two computers (each with their own Gigabit Ethernet network adapter). Only one computer can have a MIL application that allocates a multicast master digitizer. This application is the only one that can control, read from, write to, and receive the image stream from the camera. One or more computers can have a MIL application that allocates a multicast slave or monitor digitizer. These applications can read settings and information from (multicast slave digitizer only) and receive the image stream from the camera. There are two streams available from your camera: an image stream and a message stream. This section predominantly focuses on the image stream. The message stream is similarly configured as the image stream (in that it also has a multicast IP address and port address). The message stream carries GigE Vision messages from the camera and is available only if the camera manufacturer has enabled the feature. GigE Vision messages are camera-specific. Refer to your camera's documentation for more information. Configuring a multicast master The multicast master digitizer behaves like a standard MIL digitizer. A multicast master digitizer assigns the multicast address of the cameras's destination stream and the multicast address of the message channel (if supported). Once configured, the multicast master digitizer receives images and GigE Vision messages from the camera through its multicast address. By default, if the digitizer was allocated using M_DEVn, the multicast master digitizer sets the IP multicast address to be 239.255.0.(n +1). For example, if you allocate a multicast master digitizer using M_DEV0, the multicast addresses used will be: 239.255.0.1 for the stream channel, and 239.255.1.1 for the message channel. For a multicast master digitizer allocated using M_DEV15 (provided you have 16 or more cameras connected to your computer), the addresses used will be 239.255.0.16 for the stream channel, and 239.255.1.16 for the message channel. To allocate and use a multicast master digitizer, perform the following: Allocate the multicast master digitizer using MdigAlloc() with M_GC_MULTICAST_MASTER. In the case of an IP conflict between the MIL-determined multicast IP address and a multicast IP address already in use on your network, you can change the multicast IP address and its associated port number using MdigControl() with M_GC_STREAM_CHANNEL_MULTICAST_ADDRESS_STRING and M_GC_LOCAL_STREAM_PORT (for the image stream) or M_GC_MESSAGE_CHANNEL_MULTICAST_ADDRESS_STRING and M_GC_LOCAL_MESSAGE_PORT (for the message stream). Configure your grab and any required processing, according to your specifications. Use either MdigGrab(), MdigGrabContinuous(), or MdigProcess() to grab the image with the multicast master digitizer; the network switches and routers will direct the image stream from the GigE Vision camera to all the members of the multicast group (that is, the multicast master, and any multicast slaves and monitor digitizers in your network). The following example illustrates how to use a multicast master digitizer and a camera: multicastmaster.cpp Configuring one or more multicast slaves The multicast slave is restricted in what it can do. A slave digitizer can get information (using MdigInquireFeature() or MdigInquire()) and GigE Vision messages (using hooked-functions and MdigGetHookInfo()), from a camera, but it cannot set values on the camera (using MdigControlFeature() or MdigControl()). In addition, it can receive the images that the camera is transmitting to the master computer; to do so, the multicast slave must call MdigGrab(), MdigGrabContinuous(), or MdigProcess(). A multicast slave digitizer is typically used to view images on a secondary station and as such, data integrity is not typically critical. A slave digitizer can issue packet resend requests (if supported by your camera). Packet resend requests are issued when missing packets are detected. Due to the nature of multicast, resent packets will be forwarded to all members of the multicast group (the master, slave, and monitor digitizers). Disable packet resend on the slave digitizer; this eliminates the possibility that packet resend requests, issued by the slave, affect acquisition reliability on the master. To prevent a slave digitizer from issuing packet resend requests, you can use MdigControl() on the slave digitizer with M_GC_PACKET_RESEND set to M_DISABLE. You must set this control type before calling MdigGrab(), MdigGrabContinuous(), or MdigProcess(). Disabling packet resends on the slave digitizer does not prevent packet resends on the master digitizer. The multicast slave digitizer's DCF (passed to MdigAlloc()) is not used. A multicast slave digitizer can receive events, and acquire images from the camera. However, the slave digitizer can perform image acquisition only after another computer (with the master digitizer) initiates a grab and the camera is streaming data. If the master digitizer has not initiated image acquisition, the slave digitizer will not receive an image when issuing a grab command (using MdigGrab(), MdigGrabContinuous() or MdigProcess()); instead it will wait. To avoid waiting indefinitely, set a slave digitizer's M_GRAB_TIMEOUT to an appropriate amount of time. To allocate and use a multicast slave digitizer, perform the following: Allocate the multicast slave digitizer using MdigAlloc() with M_GC_MULTICAST_SLAVE. Verify that the multicast master is still connected to the camera, using MdigInquire() with M_GC_MULTICAST_MASTER_CONNECTED. If the multicast master digitizer disconnects, use M_GC_MULTICAST_MASTER_CONNECTED periodically to establish when it reconnects; then, update the multicast slave digitizer's information using MdigControl() with M_GC_UPDATE_MULTICAST_INFO. While the multicast master is grabbing, use either MdigGrab(), MdigGrabContinuous(), or MdigProcess() with the multicast slave digitizer to grab the image from the image stream. The following example illustrates how to use a multicast slave digitizer and a camera: multicastslave.cpp Configuring one or more multicast monitors A multicast monitor is more restricted than a multicast slave, since it is allocated without the right to read or modify the camera's settings. Multicast monitor digitizers can still send packet resend requests (if supported by your GigE Vision camera), receive image streams and GigE Vision messages, just like a multicast slave, but it cannot query the camera to get its multicast IP address, port address, or query the image size or pixel format before the first frame is grabbed. Due to this, you must set some information manually for the multicast monitor digitizer. Use a multicast monitor in situations where your MIL system cannot query the multicast IP address from the GigE Vision camera due to security restrictions on your network. Note that, if your GigE Vision camera is in chunk mode, it cannot be used with a multicast monitor. To allocate and use a multicast monitor digitizer, perform the following: Allocate the multicast monitor digitizer using MdigAlloc() with M_GC_MULTICAST_MONITOR. Note that you cannot allocate a monitor digitizer if your camera is in chunk-mode. Specify the multicast IP address that the multicast master digitizer has assigned to the camera to carry messages (events). To do so, use MdigControl() with M_GC_MESSAGE_CHANNEL_MULTICAST_ADDRESS_STRING. Specify the multicast UDP port that the multicast master digitizer has assigned to the camera to carry messages. To do so, use MdigControl() with M_GC_LOCAL_MESSAGE_PORT. Specify the multicast IP address that the multicast master digitizer has assigned to the camera to carry images. To do so, use MdigControl() with M_GC_STREAM_CHANNEL_MULTICAST_ADDRESS_STRING. Specify the multicast UDP port that the multicast master digitizer has assigned to the camera to carry images. To do so, use MdigControl() with M_GC_LOCAL_STREAM_PORT. Update the multicast information for the multicast monitor digitizer, using MdigControl() with M_GC_UPDATE_MULTICAST_INFO. Note that with a multicast monitor digitizer, you cannot detect when the master digitizer disconnects. Set the X-size, Y-size, and pixel format of the grab image for the digitizer, using MdigControl() with M_SOURCE_SIZE_X, M_SOURCE_SIZE_Y, and M_GC_PIXEL_FORMAT, respectively. Alternatively, you can set these values in the DCF (for an example, see the gigevision_multicast_monitor.dcf). While the multicast master is grabbing, use either MdigGrab(), MdigGrabContinuous() or MdigProcess() with the multicast monitor digitizer to grab the image from the image stream. The following example illustrates how to use a multicast monitor digitizer and a camera: multicastmonitor.cpp Using IP multicast Configuring a multicast master Configuring one or more multicast slaves Configuring one or more multicast monitors ",
      "wordCount": 1995,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Ethernet_switches_routers_IGMP_and_IP_multicast",
      "version": null,
      "title": "Ethernet switches, routers, IGMP, and IP multicast",
      "subTitles": [
        "Internet Group Management Protocol (IGMP)",
        "Ethernet switches and multicast",
        "IGMP snooping and Ethernet switches",
        "Using IP multicast without a router"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Ethernet_switches_routers_IGMP_and_IP_multicast.htm",
      "text": " Ethernet switches, routers, IGMP, and IP multicast When configuring your GigE Vision camera and Gbit Ethernet network adapter for multicasting, there are a few networking concepts with which you should be familiar. This section provides some background information for the requirements of a network designed to deliver a multicast service. A network designed to deliver a multicast service can include the following hardware components: A multicast transmitter (for example, your GigE Vision camera). Ethernet routers. Ethernet switches. Host multicast receivers (for example, your MIL GigE Vision applications with a master, slave, or monitor multicast digitizer). Each component fills a role. To deliver a multicast service, the Internet Group Management Protocol (IGMP) is used your local network. Internet Group Management Protocol (IGMP) IGMP is a standard that specifies how a Host can register with a router to receive specific multicast traffic. IGMP operates between the client computer (such as, the computers running your MIL GigE Vision applications using a master, slave, or monitor multicast digitizer) and a local multicast router. A MIL digitizer allocated with M_GC_MULTICAST_MASTER, M_GC_MULTICAST_SLAVE, or M_GC_MULTICAST_MONITOR will automatically send IGMP requests to a network router asking for membership to a multicast group. The network router will then issue periodic membership queries to the registered members of a multicast group. Upon reception of these queries, MIL will respond with IGMP report messages. IGMP allows a router to correctly forward multicast traffic. Ethernet switches and multicast To correctly establish packet forwarding, an Ethernet switch uses and maintains an address table. Each packet that enters an Ethernet switch is added to this table; the incoming packet's source MAC address is put in the address table along with the port from which the packet came. To know on which port to output the packet, the switch will lookup the packet's destination MAC address in the address table. If the address is found, the packet will be output on the appropriate port. If the destination MAC address is not found, the packet is flooded on all ports. Eventually the address table will allow the switch to avoid flooding ports because almost every packet received can be looked up in the table. Unfortunately this mechanism causes Ethernet switches to flood the broadcast domain with multicast traffic. This is because a switch usually learns MAC addresses by looking into the source address field of all the Ethernet packets it receives. A multicast MAC address is never used as source address for a packet. Such addresses do not appear in the MAC address table, and the switch has no method for learning them. This consumes a lot of bandwidth since all multicast packets received on one port of the switch are output to all other ports of the switch. The diagram below illustrates multicast datagrams transmitted over a network. The GigE Vision camera (A) is sending multicast IP data to clients B and C. The router correctly forwards the data to the networks of B and C because of the IGMP messages gathered. While the router correctly forwards the data to the client's networks, because of the IGMP messages gathered, the LAN switches flood the data to all PCs connected to them. IGMP snooping and Ethernet switches To eliminate the flooding problem discussed previously, some Ethernet switches support IGMP snooping. With IGMP snooping, the switch intercepts IGMP packets and uses the information it gathers to establish appropriate forwarding rules for the multicast traffic. IGMP snooping is disabled by default in LAN switches. To avoid your Ethernet switch causing issues with IP multicast flooding, you must enable IGMP snooping in your Ethernet switch using the managed (or other) interface of your switch. Using IP multicast without a router IGMP operates between a computer and a local router. If your network does not have a multicast router, IGMP will fail since there is no source for IGMP membership queries. Some Ethernet switches support being the source for IGMP membership queries (IGMP querying). If you do not have a multicast router in your network, you must use an Ethernet switch that supports IGMP querying and IGMP snooping (typically, if one is supported, then they both are). If both IGMP snooping and IGMP querying are supported by your Ethernet switch, IP multicast becomes possible without the need of a router. Make sure both IGMP snooping and IGMP querying are enabled in your switch since these features are typically disabled by default; enable them using the managed (or other) interface of your Ethernet switch. When IGMP querying is enabled, it sends out periodic IGMP queries that trigger IGMP report messages from computers that want to receive multicast traffic. IGMP querying works with IGMP snooping since your Ethernet switch listens to these IGMP queries to establish appropriate forwarding. Ethernet switches, routers, IGMP, and IP multicast Internet Group Management Protocol (IGMP) Ethernet switches and multicast IGMP snooping and Ethernet switches Using IP multicast without a router ",
      "wordCount": 815,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Using_an_Ethernet_switch_with_GigE_vision_complaint_cameras",
      "version": null,
      "title": "Using a Gbit Ethernet switch with GigE Vision-compliant cameras",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Using_an_Ethernet_switch_with_GigE_vision_complaint_cameras.htm",
      "text": " Using a Gbit Ethernet switch with GigE Vision-compliant cameras If you need to connect to more cameras than you have network adapters (or network ports if using a multi-port network adapter) in your computer, a switch can provide the required expansion capabilities without increasing the complexity of your network (as would be the case with adding a router) while optimizing network throughput. When using a Gbit Ethernet switch, you must ensure that your Gbit Ethernet switch's performance metrics are adequate for your application's needs, particularly with regard to the bandwidth requirements of your applications. For more information, refer to your Gbit Ethernet switch's documentation for the switching capacity and packets per second capacity of your switch. In addition, your Gbit Ethernet switch should support the following: jumbo packets, Ethernet (IEEE 802.3x) flow control, and port grouping (if using link-aggregated GigE Vision-compliant cameras through a switch). Jumbo packets and Ethernet flow control are typically disabled by default and must be enabled if needed. If port grouping (link aggregation) is required, it must be manually configured using the switch's configuration utility. Finally, if you need to use IP multicast, make sure your switch supports the following: IGMP snooping and IGMP querying (unless your network has a multicast router to handle IGMP). IGMP snooping and IGMP querying are typically disabled by default and must be enabled if needed. Using a Gbit Ethernet switch with GigE Vision-compliant cameras ",
      "wordCount": 236,
      "subEntries": []
    },
    {
      "id": "BSN_gige_Troubleshooting_acquisition_reliability_issues",
      "version": null,
      "title": "Troubleshooting acquisition reliability issues",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\Troubleshooting_acquisition_reliability_issues.htm",
      "text": " Troubleshooting acquisition reliability issues A number of factors can cause acquisition reliability issues. You can use the Matrox Capture assistant utility to determine if you are having reliability issues. In this utility, select a camera; then, on the GigE Vision Devices tab, in the right pane, select the Acquisition Statistics tab. This tab will show whether any acquired frames (images) are corrupt as a result of missing packets. You can produce statistics either by starting a grab using your GigE Vision application or with the Matrox Capture Assistant utility's built-in acquisition interface. For more information, refer the Matrox Capture assistant white paper (located in your Matrox Imaging\\Tools folder). The following is a list of the common causes of corrupted frames: Your Gigabit Ethernet network adapter is not well-suited to your GigE Vision camera's bandwidth requirements. Matrox recommends using a Matrox Concord GE/GX or an Intel Gigabit Ethernet network adapter. Your network adapter settings have not been adjusted for GigE Vision acquisition. You need to adjust your adapter with recommended settings. Your firewall is preventing automatic packet size negotiation between Matrox's GigE Vision driver and your GigE Vision camera. Improper packet size can result in poor acquisition performance, as well as corrupt frames. You should adjust your firewall settings for optimal GigE Vision performance. A network device between your GigE Vision camera and your network adapter, such as an Ethernet switch, is dropping packets. See the Using an Ethernet switch with GigE Vision cameras section. The total bandwidth of all GigE Vision cameras streaming image data to the same network adapter exceeds its link speed. An insufficient inter-packet delay. Your camera does not have the packet resend capability. Your Ethernet cables are not rated Category 5e (Cat 5e) or better. Troubleshooting acquisition reliability issues ",
      "wordCount": 295,
      "subEntries": []
    },
    {
      "id": "BSN_gige_GigE_Vision_20_changes",
      "version": null,
      "title": "Triggering simultaneous actions in multiple GigE Vision cameras",
      "subTitles": [
        "Introducing action commands",
        "Establish if your camera supports action commands",
        "Acknowledgment of reception of an action command",
        "Masking out one or more cameras",
        "Scheduling time",
        "Examples of action commands",
        "Example of sending a single action command",
        "Example of sending multiple action commands",
        "Example of using group masks to ignore an action command on one camera",
        "Example distributed with MIL"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\gige\\GigE_Vision_20_changes.htm",
      "text": " Triggering simultaneous actions in multiple GigE Vision cameras Triggering simultaneous actions across multiple GigE Vision devices (such as, cameras) on your network is a difficult and time-consuming process that, when dealing with unicast packets across a network, involves unavoidable delays and difficulties. The GigE Vision specification allows for synchronizing actions using broadcast packets that can trigger actions (such as, acquisitions) on all the cameras programmed to receive these broadcast packets; to trigger actions, these packets contain an action command. Introducing action commands A broadcast packet that contains an action command contains the information to identify the cameras, on your network, that should receive and accept the broadcast packet and the information to trigger an associated action on the cameras. To configure and send out the broadcast packet from your MIL application, use MsysControl() with M_GC_ACTION... + M_GC_ACTIONn where n is the number of the action command in MIL. Your GigE Vision cameras must be configured to receive and act upon an action command sent by your MIL application. To receive the action command, the action device key of the camera (ActionDeviceKey feature) must match that of the action command. To act upon the action command, you must select the internal action signal that should be generated upon reception of the command. The internal action signal will then trigger any associated action (such as, triggering acquisition). To associate an action (feature) with the reception of an action command, set the internal action signal as the trigger source of the action using either MdigControlFeature() or Matrox Feature Browser, with the associated SNFC trigger source feature name (for example, setting the TriggerSource feature of the Acquisition control category to Actionn , where n is the action number). Note that all references in this section to GenICam SFNC feature names assume your camera is compliant with GenICam SFNC 2.0; check your camera's documentation or a listing of your camera's device description file to establish whether your camera uses a feature with a different name (or range of values) than those mentioned in this section. The following table provides a quick overview of the steps required to use MIL to send action commands to your GigE Vision cameras. What to do In your MIL application (using MsysControl() and adding M_GC_ACTIONn to the control type) On each of your GigE Vision cameras Definition 1. Specify the group of cameras on which to perform the action. Set your MIL device key (using M_GC_ACTION_DEVICE_KEY). Set each camera's action device key (using the ActionDeviceKey feature). The camera's action device key is a 32-bit integer value that identifies the group of cameras on which the synchronized actions should occur. The MIL device key and the camera's action device key must match; otherwise, the camera ignores the action command. 2. Select the internal action signal to generate upon reception of a specific action command. Select the internal action signal that you want to associate with an action group key (using the ActionSelector feature). The action selector establishes which action signal to generate. 3. Specify whether to include or exclude cameras already in the group. Specify your action group mask (using M_GC_ACTION_GROUP_MASK). For the selected action signal, set the action group mask (using the ActionGroupMask feature). The action group mask is a bit-encoded 32-bit integer value that allows you to exclude (mask out) cameras so they will not generate the selected action signal. See the Masking out one or more cameras subsection of this section. 4. Specify the key corresponding to the action signal on the camera. Set your MIL action group key (using M_GC_ACTION_GROUP_KEY). For the selected action signal, set the camera's action group key (using the ActionGroupKey feature). The action group key is a 32-bit integer value that identifies the MIL action command to your GigE Vision camera. It associates the action command with the selected action signal. 5. Set the internal action signal as the trigger source of an action(s) on your camera. Set the trigger source of an action (feature) to the internal action signal (for example, set the TriggerSource feature of the acquisition control category to Action0). The internal action signal is generated when your camera receives the associated MIL action command. For something to happen (such as image acquisition), set the trigger source of an action (feature) on your camera to the internal action signal. 6. Specify to perform the action at a predetermined time (scheduling) using a time offset. Set your MIL action time (using M_GC_ACTION_TIME). Set the camera to accept scheduled action commands (using the GevIEEE1588 feature). The scheduled action command uses a time offset that identifies when the action should occur on the camera. This optional value specifies when the action command should execute on your camera. See the Scheduling time subsection of this section. 7. Add your GigE Vision camera(s) to your action command, in MIL. Identify the cameras to associate with the action command by specifying their MIL digitizer identifier (using M_GC_ACTION_ADD_DEVICE). For MIL to track and make use of the camera's action results, you must also add each camera explicitly to the action command using M_GC_ACTION_ADD_DEVICE + M_GC_ACTIONn. This is described later in Acknowledgment of reception of an action command. 8. Send the action command from your MIL application to your GigE Vision camera. Use M_GC_ACTION_EXECUTE. MIL sends the broadcast packet containing the action command. Typically, this control type is specified during the time-critical loop of your application. The following image illustrates the steps (above). The numbers refer to the steps on which they are set. Establish if your camera supports action commands To send action commands to your GigE Vision cameras, each camera must support the following: Action commands. To verify that your camera supports action commands, use MdigInquire() with M_GC_CONTROL_PROTOCOL_CAPABILITY. It should return M_GC_ACTION_SUPPORT, M_GC_UNCONDITIONAL_ACTION_SUPPORT, or M_GC_SCHEDULED_ACTION_SUPPORT. The feature on your camera supports action signals as a trigger source. The feature that you need to trigger (such as, acquisition) must support action signals as a trigger source. To verify this, refer to your camera's device description file. For example, the TriggerSource feature of the Acquisition control category should support the internal signal named Action n, where n is the internal action signal number. Note that some cameras might only support a single action signal, while others might support several. The action command number (M_GC_ACTIONn) is an index specific to MIL and does not necessarily match the number of the internal action signal set as the trigger source for the action on your camera. The association between MIL and your camera's specific action signal is made using the action group key. Acknowledgment of reception of an action command When an action command is sent to a camera, the camera will respond with an acknowledgment of reception (a special type of packet). This packet signifies that your camera successfully received MIL's action command. When an action command is sent to several cameras, MIL expects the number of acknowledgments to equal the number of cameras added to the action command using M_GC_ACTION_ADD_DEVICE (minus those removed using M_GC_ACTION_REMOVE_DEVICE). For example, on a network of four cameras all added using M_GC_ACTION_ADD_DEVICE and with the same action device key, if one action command is sent but is only received by two cameras, MIL expects the number of acknowledgments to be 4, but only 2 would be returned. This generates a MIL error. Masking out one or more cameras In the case where you need one (or more) camera(s) to temporarily ignore an action command, you can mask out the action command by changing the action group mask of the command either in MIL or on the camera. For the camera to accept and generate an internal action signal, the action group mask of the action command in MIL and that on the camera, when combined in a bitwise AND operation, must result in a non-zero value. If the result is a zero, the camera ignores the action command. Action command 1 The action group mask's 32-bit value Action group mask in MIL 00000000 00000000 00000000 00000001 Action group mask on camera 1 00000000 00000000 00000000 00000001 Result: Camera 1 triggers the feature 00000000 00000000 00000000 00000001 The best way to use the action group mask is to treat each bit as an identifier of the camera on which the action command should be accepted. Set the action group mask of all action commands on each camera to a value where all bits are set to 0 except the identifier bit. Then, in MIL, set the action group mask such that only the bits identifying the cameras to receive the command are set to 1. For example: Action command 1 The action group mask's 32-bit value Action group mask in MIL 00000000 00000000 00000000 00001110 Action group mask on camera 1 00000000 00000000 00000000 00000001 Action group mask on camera 2 00000000 00000000 00000000 00000010 Action group mask on camera 3 00000000 00000000 00000000 00000100 Action group mask on camera 4 00000000 00000000 00000000 00001000 Action group mask on camera 5 Only camera 2, 3, and 4 trigger the action. 00000000 00000000 00000000 00010000 For a further example, refer to the Example of using group masks to ignore an action command on one camera subsection of this section. When masking out one or more action commands on one or more cameras, you must also modify the number of acknowledgments that MIL expects to receive, using MsysControl() with M_GC_ACTION_ACKNOWLEDGE_NUMBER + M_GC_ACTIONn, where n is the number of the action command in MIL. Scheduling time To schedule an action command so that it will execute at the same time across multiple cameras, the following features must be available on your camera: Scheduled actions. To verify that scheduled actions are available on your camera, use MdigInquire() with M_GC_CONTROL_PROTOCOL_CAPABILITY. It should return M_GC_SCHEDULED_ACTION_SUPPORT. IEEE 1588. IEEE 1588 is a standard that defines the use of PTP (the precision time protocol). PTP synchronizes clocks across multiple network devices (such as, multiple GigE Vision cameras). To verify that IEEE 1588 is available on your camera, use MdigInquire() with M_GC_CONTROL_PROTOCOL_CAPABILITY. It should return M_GC_IEEE_1588_SUPPORT. If the above are available, you must then enable IEEE 1588 on each of your cameras, for example, using GevIEEE1588 with Matrox Intellicam's Feature Browser (or using MdigControlFeature()). Once enabled, IEEE 1588 will synchronize the clocks of all of your cameras. Note that this can take some time. When the synchronization is complete, querying the Gev1588status feature for each camera should return one camera as master, and all the rest as slaves. You can then set up the action command in your MIL application to generate the internal action signal at a specific time and know that the action will occur at the exact moment on all cameras receiving the command at the required time. With all your cameras clocks synchronized, you only have to account for the longest network delay possible between sending a packet to your camera, and the camera receiving it, when selecting a time. Note that, when you enable IEEE1588, the timestamp frequency of the camera will change. Therefore, your application should read the timestamp after you enable IEEE1588. In addition, all the 1588 devices must be connected to the same switch on your network. The switch must have a multicast service and it must be enabled to use 1588. To select a time and provide that time to the action command, use MsysControl() with M_GC_ACTION_TIME. To determine the required time, perform the following: After 1588 is enabled, read the timestamp from any target camera using MdigInquire() with M_GC_CAMERA_TIME_STAMP. If you want your action to occur relative to the timing of another action (for example, an exposure start), especially when the action should reoccur periodically, read the timestamp from within the callback function hooked to the other action. In this case, use MdigGetHookInfo() with M_GC_CAMERA_TIME_STAMP to read the time at which the event occurred on the camera. Determine the longest possible transmission and processing latency of sending a packet from your computer to your camera. Add this amount of time (in seconds) to the timestamp retrieved previously. Experimentation is required to accurately determine how long it takes for your action command to reach the camera and the action to occur. If the action command reaches the camera after the scheduled time, an error is returned, but the action will still occur. Examples of action commands This subsection details a set of examples showing how action commands trigger actions (features) on the camera, based on the configuration of the action command in your MIL application. Example of sending a single action command In the following example, three GigE Vision cameras on the network are configured to receive action commands from a MIL application. When you send an action command (using M_GC_ACTION_EXECUTE + M_GC_ACTION0), MIL sends a broadcast packet containing the action command. In this case, action command 0 generates internal action signal 1 so it triggers the feature whose trigger source is set to action 1 on Cameras 1 and 2. Camera 3 ignores action command 0 because Camera 3 has a different action device key than the other cameras. This configuration is designed so that Camera 3 will always ignore action command 0. Example of sending multiple action commands In the following example, three GigE Vision cameras on the network are set up with the same action device keys (Cameras 1, 2, and 4). When you send the two action commands to your cameras (using M_GC_ACTION_EXECUTE + M_GC_ACTIONn, where n is the number of the action command in MIL), MIL sends two broadcast packets (one per action command). The network copies the packets to all four GigE Vision cameras. On the cameras that accept the broadcast packets, the camera generates an internal action signal (either action signal 1 or action signal 2) that will trigger one or more features (depending on their trigger source). In this case, action command 0 triggers the feature whose trigger source is set to action signal 1 on Cameras 1 and 2. Camera 4 ignores action command 0 because no action signal is associated with the action group of action command 0. To allow MIL's action command 0 to trigger a feature on Camera 4, the action group key (0x24) would have to be associated with an action signal on Camera 4. Action command 1 triggers the feature whose trigger source is set to action signal 2 only on Camera 3, since it is the only camera with both an action device key and action group key associated with action command 1. To allow MIL's action command 1 to trigger a feature on Camera 4, the action device key of Camera 4 would have to be set to 0x45670123. Example of using group masks to ignore an action command on one camera In the following example, an action group mask is used to have Camera 2 temporarily ignore action command 0. It sets the group mask in MIL's action command 0 so that the bit representing Camera 2 is 0. When ANDed in a bitwise fashion with the camera's group mask for action signal 0, the result is a 0 instead of a 1. Action command 0 The action group mask's 32-bit value Action group mask in MIL 00000000 00000000 00000000 00000001 Action group mask on Camera 2 00000000 00000000 00000000 00000010 Result: Camera 2 ignores the action. 00000000 00000000 00000000 00000000 This forces Camera 2 to ignore action command 0, even though the device key and group key match between action command 0 in your MIL application and the associated action signal on your camera. Example distributed with MIL The MIL hardware system specific example ActionTrigger.CPP illustrates how to send an action command to multiple cameras, configuring both the action command in MIL and on each of the GigE Vision cameras on your network. In addition, the example tries to use scheduled actions, testing first that IEEE 1588 (Precision Time Protocol) is available and then enabling it on the cameras. If IEEE 1588 is not available, the example reverts to sending the action command without scheduling. actiontrigger.cpp Triggering simultaneous actions in multiple GigE Vision cameras Introducing action commands Establish if your camera supports action commands Acknowledgment of reception of an action command Masking out one or more cameras Scheduling time Examples of action commands Example of sending a single action command Example of sending multiple action commands Example of using group masks to ignore an action command on one camera Example distributed with MIL ",
      "wordCount": 2738,
      "subEntries": []
    }
  ]
}]