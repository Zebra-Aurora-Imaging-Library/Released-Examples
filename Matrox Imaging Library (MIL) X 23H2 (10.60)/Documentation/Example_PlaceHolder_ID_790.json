[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_3dMatching_SurfaceReuseResult_CPP_surfacereuseresult_cpp",
      "version": "2024020714",
      "title": "surfacereuseresult.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //***************************************************************************************/ // // File name: SurfaceReuseResult.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This example demonstrates how to reuse a surface 3D Model Finder result // to find new occurrences in an object picking application for both stationary // and mobile scenes. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved //*************************************************************************************/ #include \"SurfaceReuseResult.h\" /************************************************************************************/ /* Constants. */ /************************************************************************************/ static const MIL_INT DISP_SIZE_X = 580; static const MIL_INT DISP_SIZE_Y = 420; static const MIL_INT DISP_FLOOR_SIZE_X = DISP_SIZE_X / 2; static const MIL_INT DISP_FLOOR_SIZE_Y = DISP_SIZE_Y / 2; static const MIL_DOUBLE DISP_FLOOR_OFFSET_Y = 1.16 * DISP_FLOOR_SIZE_Y; static const MIL_DOUBLE DISP_SCENE_OFFSET_X = 0.51 * DISP_SIZE_X; static const MIL_DOUBLE DISP_TX_STATIC = 0.0; static const MIL_DOUBLE DISP_ZOOM_STATIC = 1.6; static const MIL_DOUBLE DISP_TX_MOBILE = 35.0; static const MIL_DOUBLE DISP_ZOOM_MOBILE = 1.4; static const MIL_DOUBLE FLOOR_OFFSET = 2.0; static const MIL_DOUBLE COVERAGE_MAX = 85.0; static const MIL_DOUBLE TRANSLATION_X = 24.0; static const MIL_DOUBLE TRANSLATION_Y = 0.7; static const MIL_DOUBLE TRANSLATION_Z = 6.5; static const MIL_INT NUM_SCENES_STATIC = 8; static const MIL_STRING FLOOR_FILE = M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/floor.ply\"); static const MIL_STRING MODEL_FILE_STATIC = M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Model.ply\"); static const MIL_STRING SCENE_FILES_STATIC[NUM_SCENES_STATIC] = {M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static1.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static2.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static3.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static4.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static5.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static6.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static7.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Static8.ply\")}; static const MIL_INT NUM_SCENES_MOBILE = 4; static const MIL_STRING MODEL_FILE_MOBILE = M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/ModelMove.ply\"); static const MIL_STRING SCENE_FILES_MOBILE[NUM_SCENES_MOBILE] = {M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Move1.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Move2.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Move3.ply\"), M_IMAGE_PATH MIL_TEXT(\"SurfaceReuseResult/Move4.ply\")}; //*******************************************************************/ /* Function declarations. */ //*******************************************************************/ bool CheckForRequiredMILFile (MIL_STRING FileName); MIL_UNIQUE_3DDISP_ID Alloc3dDisplayId (MIL_ID MilSystem); void AddComponentNormalsIfMissing (MIL_ID MilContainer); void ReuseResultsInStationaryScene(MIL_ID MilSystem, CSurfaceFinder&amp; Finder); void ReuseResultsInMobileScene (MIL_ID MilSystem, CSurfaceFinder&amp; Finder); void ShowAndFindFloorPlane (MIL_ID MilSystem, MIL_ID MilDisplayFloor, MIL_ID MilContainer, MIL_ID MilPlane); //*****************************************************/ /* Example description. */ //*****************************************************/ void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT(\"SurfaceReuseResult\\n\\n\")); MosPrintf(MIL_TEXT(\"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT(\"This example demonstrates how to reuse a surface 3D Model Finder \\n\" \"result to find new occurrences in an object picking application\\n\" \"for both stationary and mobile scenes.\\n\\n\")); MosPrintf(MIL_TEXT(\"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT(\"Modules used: Application, System, 3D Model Finder, \\n\") MIL_TEXT(\"3D Image Processing, 3D Metrology, 3D Display, and 3D Graphics. \\n\\n\")); } /****************************************************************************/ /* Main. */ /****************************************************************************/ int MosMain() { /* Print Header. */ PrintHeader(); /* Allocate MIL objects.*/ auto MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); auto MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); /* Check for the required example files.*/ if(!CheckForRequiredMILFile(MODEL_FILE_STATIC)) { return EXIT_FAILURE; } CSurfaceFinder Finder(MilSystem); if(!Finder.AllocateDisplays()) return EXIT_FAILURE; /* Reuse result in a stationary scene with a fixed floor. */ ReuseResultsInStationaryScene(MilSystem, Finder); /* Reuse result in a mobile scene. */ ReuseResultsInMobileScene(MilSystem, Finder); } /*********************************************************************************/ /* Stationary scene with a fixed floor. */ /*********************************************************************************/ void ReuseResultsInStationaryScene(MIL_ID MilSystem, CSurfaceFinder&amp; Finder) { MosPrintf(MIL_TEXT(\"------------------------------------------------------------------------\\n\")); MosPrintf(MIL_TEXT(\"Surface 3D Model Finder in a stationary scene and a fixed floor. \\n\")); MosPrintf(MIL_TEXT(\"------------------------------------------------------------------------\\n\\n\")); /* Restore the model and scene containers and display them. */ auto MilModelContainer = MbufRestore(MODEL_FILE_STATIC , MilSystem, M_UNIQUE_ID); auto MilSceneContainer = MbufRestore(SCENE_FILES_STATIC[0], MilSystem, M_UNIQUE_ID); Finder.ShowContainers(MilModelContainer, MilSceneContainer, M_BOTTOM_TILTED, DISP_TX_STATIC, DISP_ZOOM_STATIC); /* Allocate a surface 3D Model Finder context. */ auto MilContext = M3dmodAlloc(MilSystem, M_FIND_SURFACE_CONTEXT, M_DEFAULT, M_UNIQUE_ID); MosPrintf(MIL_TEXT(\"The model is defined using the given model point cloud.\\n\\n\")); /* Define the surface model. */ M3dmodDefine(MilContext, M_ADD_FROM_POINT_CLOUD, M_SURFACE, (MIL_DOUBLE)MilModelContainer, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"A floor plane is fit from the point cloud and is shown in cyan.\\n\")); /* Find the floor in the scene using M3dmetFit. */ auto MilSceneFloor = MbufRestore(FLOOR_FILE, MilSystem, M_UNIQUE_ID); auto MilPlane = M3dgeoAlloc(MilSystem, M_GEOMETRY, M_DEFAULT, M_UNIQUE_ID); auto MilDisplayFloor = Alloc3dDisplayId(MilSystem); ShowAndFindFloorPlane(MilSystem, MilDisplayFloor, MilSceneFloor, MilPlane); MosPrintf(MIL_TEXT(\"The floor plane is copied to the surface context.\\n\\n\")); M3dmodCopy(MilPlane, M_DEFAULT, MilContext, M_DEFAULT, M_FLOOR, M_DEFAULT); /* Enable removing the existing floor before doing the find. */ M3dmodControl(MilContext, M_DEFAULT, M_REMOVE_FLOOR , M_ENABLE); M3dmodControl(MilContext, M_DEFAULT, M_REMOVE_FLOOR_OFFSET , FLOOR_OFFSET); M3dmodControl(MilContext, M_DEFAULT, M_REMOVE_FLOOR_DIRECTION, M_ABOVE); /* Sort results based on the robot picking application. */ M3dmodControl(MilContext, M_DEFAULT, M_SORT, M_CENTER_X); M3dmodControl(MilContext, M_DEFAULT, M_SORT_DIRECTION, M_SORT_UP); /* Find all occurrences. */ M3dmodControl(MilContext, 0, M_NUMBER, M_ALL); /* The occurrences can be slightly occcluded. */ M3dmodControl(MilContext, 0, M_COVERAGE_MAX, COVERAGE_MAX); MosPrintf(MIL_TEXT(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if not present.\\n\\n\")); /* The surface 3D Model Finder requires the existence of M_COMPONENT_NORMALS_MIL in the point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); /* Enable reusing result for subsequent find. */ M3dmodControl(MilContext, M_DEFAULT, M_REUSE_RESULT, M_ENABLE); /* Preprocess the context. */ M3dmodPreprocess(MilContext, M_DEFAULT); /* Find all occurrences. */ Finder.Find(MilContext, MilSceneContainer); /* Show the removed floor points in dark cyan. */ auto MilDrawContext = M3dmodAlloc(MilSystem, M_DRAW_3D_SURFACE_CONTEXT, M_DEFAULT, M_UNIQUE_ID); M3dmodControlDraw(MilDrawContext, M_DRAW_FLOOR_POINTS, M_ACTIVE, M_ENABLE); M3dmodControlDraw(MilDrawContext, M_DRAW_FLOOR_POINTS, M_COLOR , M_COLOR_DARK_CYAN); /* Show the 3D Model Finder results. */ auto Label = Finder.ShowResults(MilDrawContext); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); for(MIL_INT Num = 1; Num &lt; NUM_SCENES_STATIC; ++Num) { Finder.ClearScene(Label); /* Load the new scene's point cloud. */ MbufImport(SCENE_FILES_STATIC[Num], M_DEFAULT, M_LOAD, MilSystem, &amp;MilSceneContainer); MosPrintf(MIL_TEXT(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if not present.\\n\\n\")); /* The surface 3D Model Finder requires the existence of M_COMPONENT_NORMALS_MIL in the point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); MosPrintf(MIL_TEXT(\"The next set of occurrences is found given the previous results.\\n\\n\")); /* Find the remaining occurrences. */ M3dmodControl(MilContext, 0, M_NUMBER, NUM_SCENES_STATIC - Num); /* Find the next set of occurrences, given the previous found results. */ Finder.Find(MilContext, MilSceneContainer); Label = Finder.ShowResults(MilDrawContext); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } /* Remove the old drawing.*/ Finder.ClearScene(Label); } /*********************************************************************************/ /* Reuses result with tracking of the scene motion. */ /*********************************************************************************/ void ReuseResultsInMobileScene(MIL_ID MilSystem, CSurfaceFinder&amp; Finder) { MosPrintf(MIL_TEXT(\"-----------------------------------------------------------------------\\n\")); MosPrintf(MIL_TEXT(\"Surface 3D Model Finder in a mobile scene with known movements. \\n\")); MosPrintf(MIL_TEXT(\"-----------------------------------------------------------------------\\n\\n\")); /* Restore the model and scene containers and display them. */ auto MilModelContainer = MbufRestore(MODEL_FILE_MOBILE , MilSystem, M_UNIQUE_ID); auto MilSceneContainer = MbufRestore(SCENE_FILES_MOBILE[0], MilSystem, M_UNIQUE_ID); Finder.ShowContainers(MilModelContainer, MilSceneContainer, M_BOTTOM_VIEW, DISP_TX_MOBILE, DISP_ZOOM_MOBILE); /* Draw the scene bounding box. */ auto MilBoundingBox = M3dgeoAlloc(MilSystem, M_GEOMETRY, M_DEFAULT, M_UNIQUE_ID); M3dimStat(M_STAT_CONTEXT_BOUNDING_BOX, MilSceneContainer, MilBoundingBox, M_DEFAULT); auto BoxLabel = Finder.DrawBox(MilBoundingBox); /* Allocate a surface 3D Model Finder context. */ auto MilContext = M3dmodAlloc(MilSystem, M_FIND_SURFACE_CONTEXT, M_DEFAULT, M_UNIQUE_ID); /* Define the surface model. */ M3dmodDefine(MilContext, M_ADD_FROM_POINT_CLOUD, M_SURFACE, (MIL_DOUBLE)MilModelContainer, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"The model is defined using the given model point cloud.\\n\\n\")); /* Find all occurrences. */ M3dmodControl(MilContext, 0, M_NUMBER, M_ALL); /* The occurrences can be slightly occcluded. */ M3dmodControl(MilContext, 0, M_COVERAGE_MAX, COVERAGE_MAX); /* The surface 3D Model Finder requires the existence of M_COMPONENT_NORMALS_MIL in the point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); /* Enable reusing result for subsequent find. */ M3dmodControl(MilContext, M_DEFAULT, M_REUSE_RESULT, M_ENABLE); /* Sort results based on the robot picking application. */ M3dmodControl(MilContext, M_DEFAULT, M_SORT, M_MIN_X); /* Preprocess the context. */ M3dmodPreprocess(MilContext, M_DEFAULT); /* Find all occurrences. */ Finder.Find(MilContext, MilSceneContainer); /* Show the 3D Model Finder results. */ auto ResultLabel = Finder.ShowResults(M_DEFAULT); /* Set the matrix with the known motion step. */ auto MilMatrix = M3dgeoAlloc(MilSystem, M_TRANSFORMATION_MATRIX, M_DEFAULT, M_UNIQUE_ID); M3dgeoMatrixSetTransform(MilMatrix, M_TRANSLATION, TRANSLATION_X, TRANSLATION_Y, TRANSLATION_Z, M_DEFAULT, M_DEFAULT); for(MIL_INT Num = 1; Num &lt; NUM_SCENES_MOBILE; ++Num) { MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); /* Transform the results based on the motion of the scene. */ Finder.TransformResult(MilMatrix); /* Load the new scene. */ Finder.ClearScene(BoxLabel); Finder.ClearScene(ResultLabel); MbufImport(SCENE_FILES_MOBILE[Num], M_DEFAULT, M_LOAD, MilSystem, &amp;MilSceneContainer); /* Show the transformed scene bounding box.*/ M3dimMatrixTransform(MilBoundingBox, MilBoundingBox, MilMatrix, M_DEFAULT); BoxLabel = Finder.DrawBox(MilBoundingBox); MosPrintf(MIL_TEXT(\"The next set of occurrences is found, given the previous results and\\n\") MIL_TEXT(\"scene motion.\\n\\n\")); /* The surface 3D Model Finder requires the existence of M_COMPONENT_NORMALS_MIL in the point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); /* Find the remaining occurrences. */ M3dmodControl(MilContext, 0, M_NUMBER, NUM_SCENES_MOBILE - Num); /* Find the next occurrences, given the previous found results. */ Finder.Find(MilContext, MilSceneContainer); /* Show the 3D Model Finder results. */ ResultLabel = Finder.ShowResults(M_DEFAULT); } MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } /*********************************************************************************/ /* Allocates the 3D Model Finder result. */ /*********************************************************************************/ CSurfaceFinder::CSurfaceFinder(MIL_ID MilSystem):m_MilSystem(MilSystem) { /* Allocates a surface 3D Model Finder result. */ m_MilResult = M3dmodAllocResult(MilSystem, M_FIND_SURFACE_RESULT, M_DEFAULT, M_UNIQUE_ID); } /*********************************************************************************/ /* Clears a given graphics label from the scene. */ /*********************************************************************************/ void CSurfaceFinder::ClearScene(MIL_INT64 Label) { M3dgraRemove(m_SceneGraphicsList, Label, M_DEFAULT); } /*********************************************************************************/ /* Transforms the occurrences found in a 3D Model Finder result. */ /*********************************************************************************/ void CSurfaceFinder::TransformResult(MIL_ID MilMatrix) { M3dmodModifyResult(m_MilResult, M_ALL, m_MilResult, M_DEFAULT, M_TRANSFORM, (MIL_DOUBLE)MilMatrix, M_DEFAULT); } /*********************************************************************************/ /* Finds the floor plane from a floor point cloud using 3D Metrology. */ /*********************************************************************************/ void ShowAndFindFloorPlane(MIL_ID MilSystem, MIL_ID MilDisplayFloor, MIL_ID MilContainer, MIL_ID MilPlane) { /* Show the floor point cloud. */ auto MilGraphicsList = (MIL_ID)M3ddispInquire(MilDisplayFloor, M_3D_GRAPHIC_LIST_ID, M_NULL); M3ddispControl(MilDisplayFloor, M_SIZE_X, DISP_FLOOR_SIZE_X); M3ddispControl(MilDisplayFloor, M_SIZE_Y, DISP_FLOOR_SIZE_Y); M3ddispControl(MilDisplayFloor, M_WINDOW_INITIAL_POSITION_Y, DISP_FLOOR_OFFSET_Y); M3ddispControl(MilDisplayFloor, M_TITLE, MIL_TEXT(\"Floor Cloud\")); M3ddispSelect(MilDisplayFloor, MilContainer, M_SELECT, M_DEFAULT); /* Find the floor plane. */ auto MilFitResult = M3dmetAllocResult(MilSystem, M_FIT_RESULT, M_DEFAULT, M_UNIQUE_ID); M3dmetFit(M_DEFAULT, MilContainer, M_PLANE, MilFitResult, M_AUTO_VALUE, M_DEFAULT); M3dmetCopyResult(MilFitResult, MilPlane, M_FITTED_GEOMETRY, M_DEFAULT); /* Draw the floor plane. */ auto FloorLabel = M3dgeoDraw3d(M_DEFAULT, MilPlane, MilGraphicsList, M_DEFAULT, M_DEFAULT); M3dgraControl(MilGraphicsList, FloorLabel, M_COLOR, M_COLOR_CYAN); } /*********************************************************************************/ /* Displays the model and scene containers. */ /*********************************************************************************/ void CSurfaceFinder::ShowContainers(MIL_ID MilModelContainer, MIL_ID MilSceneContainer, MIL_INT View, MIL_DOUBLE TranslationX /*= 0.0*/, MIL_DOUBLE Zoom /*= 1*/) { /* Remove previous graphics. */ MIL_ID MilGraphicsList = (MIL_ID)M3ddispInquire(m_MilDisplayModel, M_3D_GRAPHIC_LIST_ID, M_NULL); M3dgraRemove(MilGraphicsList, M_ALL, M_DEFAULT); MilGraphicsList = (MIL_ID)M3ddispInquire(m_MilDisplayScene, M_3D_GRAPHIC_LIST_ID, M_NULL); M3dgraRemove(MilGraphicsList, M_ALL, M_DEFAULT); M3ddispSelect(m_MilDisplayModel, MilModelContainer, M_ADD, M_DEFAULT); M3ddispSelect(m_MilDisplayScene, MilSceneContainer, M_ADD, M_DEFAULT); M3ddispSetView(m_MilDisplayModel, M_AUTO, View, M_DEFAULT, M_DEFAULT, M_DEFAULT); M3ddispSetView(m_MilDisplayScene, M_AUTO, View, M_DEFAULT, M_DEFAULT, M_DEFAULT); M3ddispCopy(M_VIEW_INTEREST_POINT, m_MilDisplayModel, M_ROTATION_AXIS_CENTER, M_DEFAULT); M3ddispCopy(M_VIEW_INTEREST_POINT, m_MilDisplayScene, M_ROTATION_AXIS_CENTER, M_DEFAULT); if(TranslationX) M3ddispSetView(m_MilDisplayScene, M_TRANSLATE, TranslationX, 0.0, 0.0, M_DEFAULT); M3ddispSetView(m_MilDisplayScene, M_ZOOM, Zoom, M_DEFAULT, M_DEFAULT, M_DEFAULT); M3ddispSelect(m_MilDisplayModel, M_NULL, M_OPEN, M_DEFAULT); M3ddispSelect(m_MilDisplayScene, M_NULL, M_OPEN, M_DEFAULT); } /*************************************************/ /* Finds the occurrences in the scene. */ /*************************************************/ void CSurfaceFinder::Find(MIL_ID MilContext, MIL_ID MilContainer) { MosPrintf(MIL_TEXT(\"Surface 3D Model Finder is running...\\n\\n\")); /* Reset the timer. */ MappTimer(M_TIMER_RESET, M_NULL); /* Find the model. */ M3dmodFind(MilContext, MilContainer, m_MilResult, M_DEFAULT); /* Read the find time. */ MappTimer(M_TIMER_READ, &amp;m_ComputationTime); } /*****************************************************************************/ /* Draws the scene's bounding box. */ /*****************************************************************************/ MIL_INT64 CSurfaceFinder::DrawBox(MIL_ID MilBoundingBox) { auto BoxLabel = M3dgeoDraw3d(M_DEFAULT, MilBoundingBox, m_SceneGraphicsList, M_DEFAULT, M_DEFAULT); M3dgraControl(m_SceneGraphicsList, BoxLabel, M_APPEARANCE, M_WIREFRAME); M3dgraControl(m_SceneGraphicsList, BoxLabel, M_COLOR , M_COLOR_GREEN); return BoxLabel; } /*****************************************************************************/ /* Shows the surface 3D Model Finder results. */ /*****************************************************************************/ MIL_INT64 CSurfaceFinder::ShowResults(MIL_ID MilDrawContext) { MIL_INT NbOcc = 0; MIL_INT Status; M3dmodGetResult(m_MilResult, M_DEFAULT, M_STATUS, &amp;Status); switch(Status) { case M_NOT_INITIALIZED: MosPrintf(MIL_TEXT(\"Surface finding failed: the result is not initialized.\\n\\n\")); break; case M_NOT_ENOUGH_MEMORY: MosPrintf(MIL_TEXT(\"Surface finding failed: not enough memory.\\n\\n\")); break; case M_NOT_ENOUGH_VALID_DATA: MosPrintf(MIL_TEXT(\"Surface finding failed: not enough valid points in the point\" \" cloud.\\n\\n\")); break; case M_MISSING_COMPONENT_NORMALS_MIL: MosPrintf(MIL_TEXT(\"Surface finding failed: M_COMPONENT_NORMALS_MIL is not found in\\n\") MIL_TEXT(\"the point cloud.\\n\\n\")); break; case M_COMPLETE: M3dmodGetResult(m_MilResult, M_DEFAULT, M_NUMBER, &amp;NbOcc); MosPrintf(MIL_TEXT(\"Found %i occurrence(s) in %.2fs.\\n\\n\"), NbOcc, m_ComputationTime); break; default: MosPrintf(MIL_TEXT(\"Unknown status.\\n\\n\")); break; } if(NbOcc == 0) return 0; MosPrintf(MIL_TEXT(\"Index Score Score_Target \\n\")); MosPrintf(MIL_TEXT(\"---------------------------------------\\n\")); for(MIL_INT i = 0; i &lt; NbOcc; ++i) { MIL_DOUBLE ScoreTarget = M3dmodGetResult(m_MilResult, i, M_SCORE_TARGET, M_NULL); MIL_DOUBLE Score = M3dmodGetResult(m_MilResult, i, M_SCORE, M_NULL); MosPrintf(MIL_TEXT(\" %i %.4f %6.2f \\n\"), i, Score, ScoreTarget); } MosPrintf(MIL_TEXT(\"\\n\")); /* Draw all occurrences. */ return M3dmodDraw3d(MilDrawContext, m_MilResult, M_ALL, m_SceneGraphicsList, M_DEFAULT, M_DEFAULT); } /******************************************************************/ /* Allocates the 3D displays. */ /******************************************************************/ bool CSurfaceFinder::AllocateDisplays() { m_MilDisplayModel = Alloc3dDisplayId(m_MilSystem); if(!m_MilDisplayModel) return false; M3ddispControl(m_MilDisplayModel, M_SIZE_X, DISP_SIZE_X / 2); M3ddispControl(m_MilDisplayModel, M_SIZE_Y, DISP_SIZE_Y / 2); M3ddispControl(m_MilDisplayModel, M_TITLE, MIL_TEXT(\"Model Cloud\")); m_MilDisplayScene = Alloc3dDisplayId(m_MilSystem); if(!m_MilDisplayScene) return false; M3ddispControl(m_MilDisplayScene, M_SIZE_X, DISP_SIZE_X); M3ddispControl(m_MilDisplayScene, M_SIZE_Y, DISP_SIZE_Y); M3ddispControl(m_MilDisplayScene, M_WINDOW_INITIAL_POSITION_X, DISP_SCENE_OFFSET_X); M3ddispControl(m_MilDisplayScene, M_TITLE, MIL_TEXT(\"Scene Cloud\")); m_SceneGraphicsList = M3ddispInquire(m_MilDisplayScene, M_3D_GRAPHIC_LIST_ID, M_NULL); return true; } /******************************************************************/ /* Adds the component M_COMPONENT_NORMALS_MIL if it's not found. */ /******************************************************************/ void AddComponentNormalsIfMissing(MIL_ID MilContainer) { MIL_ID MilNormals = MbufInquireContainer(MilContainer, M_COMPONENT_NORMALS_MIL, M_COMPONENT_ID, M_NULL); if(MilNormals != M_NULL) return; MIL_INT SizeX = MbufInquireContainer(MilContainer, M_COMPONENT_RANGE, M_SIZE_X, M_NULL); MIL_INT SizeY = MbufInquireContainer(MilContainer, M_COMPONENT_RANGE, M_SIZE_Y, M_NULL); if(SizeX &lt; 50 || SizeY &lt; 50) M3dimNormals(M_NORMALS_CONTEXT_TREE, MilContainer, MilContainer, M_DEFAULT); else M3dimNormals(M_NORMALS_CONTEXT_ORGANIZED, MilContainer, MilContainer, M_DEFAULT); } /*****************************************************************************/ /* Allocates a 3D display and returns its MIL identifier. */ /*****************************************************************************/ MIL_UNIQUE_3DDISP_ID Alloc3dDisplayId(MIL_ID MilSystem) { MappControl(M_DEFAULT, M_ERROR, M_PRINT_DISABLE); auto MilDisplay3D = M3ddispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); MappControl(M_DEFAULT, M_ERROR, M_PRINT_ENABLE); if(!MilDisplay3D) { MosPrintf(MIL_TEXT(\"\\n\") MIL_TEXT(\"The current system does not support the 3D display.\\n\") MIL_TEXT(\"Press any key to end.\\n\")); MosGetch(); } return MilDisplay3D; } /****************************************************************************/ /* Checks the required files exist. */ /****************************************************************************/ bool CheckForRequiredMILFile(MIL_STRING FileName) { MIL_INT FilePresent; MappFileOperation(M_DEFAULT, FileName, M_NULL, M_NULL, M_FILE_EXISTS, M_DEFAULT, &amp;FilePresent); if(FilePresent == M_NO) { MosPrintf(MIL_TEXT(\"\\n\") MIL_TEXT(\"The footage needed to run this example is missing. You need \\n\") MIL_TEXT(\"to obtain and apply a separate specific update to have it.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } return (FilePresent == M_YES); } ",
      "wordCount": 1944
    }
  ]
}]