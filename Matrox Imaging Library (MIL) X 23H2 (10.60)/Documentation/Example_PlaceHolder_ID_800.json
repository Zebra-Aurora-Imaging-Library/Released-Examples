[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_PatternMatching_MagmEdgeFiltering_CPP_magmedgefiltering_cpp",
      "version": "2024020714",
      "title": "magmedgefiltering.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //************************************************************************************* // // File name: MagmEdgeFiltering.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This example shows how to define an AGM model // using the result of an Edge Finder result buffer. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved // #include &lt;mil.h&gt; // Example function declaration. void EdgeResultModelInputExample(MIL_ID MilSystem); #define EXAMPLE_IMAGE_PATH M_IMAGE_PATH MIL_TEXT(\"MagmEdgeFiltering/\") // Image used to define the AGM model from the Edge Finder result. #define MODEL_IMAGE_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Model.mim\") // Target image. #define TARGET_IMAGE_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Target.mim\") //***************************************************************************** // Example description. //***************************************************************************** void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT(\"MagmEdgeFiltering\\n\\n\")); MosPrintf(MIL_TEXT(\"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT(\"This example shows how to define an AGM model\\n\")); MosPrintf(MIL_TEXT(\"using the result of an Edge Finder result buffer.\\n\\n\")); MosPrintf(MIL_TEXT(\"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT(\"Advanced Geometric Matcher, Edge Finder, Display, Graphics.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } //**************************************************************************** // Main. //**************************************************************************** int MosMain(void) { // Print example information in console. PrintHeader(); // Allocate MIL objects. auto MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); auto MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); // Run example. EdgeResultModelInputExample(MilSystem); return 0; } //**************************************************************************** // Utility function to draw occurrences. //***************************************************************************** void DrawFoundOccurrences(MIL_ID MilSearchResult, MIL_ID MilGraphicList) { // Get the number of occurrences found. MIL_INT NumOccurrences = 0; MagmGetResult(MilSearchResult, M_DEFAULT, M_NUMBER + M_TYPE_MIL_INT, &amp;NumOccurrences); if(NumOccurrences &gt; 0) { std::vector&lt;MIL_DOUBLE&gt; XPositions; std::vector&lt;MIL_DOUBLE&gt; YPositions; std::vector&lt;MIL_DOUBLE&gt; DetectionScores; std::vector&lt;MIL_DOUBLE&gt; FitScores; std::vector&lt;MIL_DOUBLE&gt; CoverageScores; MagmGetResult(MilSearchResult, M_ALL, M_POSITION_X, XPositions); MagmGetResult(MilSearchResult, M_ALL, M_POSITION_Y, YPositions); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_DETECTION, DetectionScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_FIT, FitScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_COVERAGE, CoverageScores); // Print the results for each occurrence found. MosPrintf(MIL_TEXT(\"The model was found in the target image:\\n\\n\")); MosPrintf(MIL_TEXT(\"Result X Position Y Position \") MIL_TEXT(\"DetectionScore FitScore CoverageScore\\n\\n\")); for(MIL_INT i = 0; i &lt; NumOccurrences; ++i) { MosPrintf(MIL_TEXT(\"%-9i%-13.2f%-13.2f%-17.2f%-11.2f%-11.2f\\n\"), i, XPositions[i], YPositions[i], DetectionScores[i], FitScores[i], CoverageScores[i]); } MosPrintf(MIL_TEXT(\"\\nTotal number of occurrences found in the target image: %i\\n\"), NumOccurrences); // Draw green edges and bounding boxes over the occurrences that were found. MgraColor(M_DEFAULT, M_COLOR_GREEN); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_BOX, M_ALL, M_DEFAULT); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_EDGES, M_ALL, M_DEFAULT); // Draw red positions over the occurrences that were found. MgraColor(M_DEFAULT, M_COLOR_RED); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_POSITION, M_ALL, M_DEFAULT); } else { MosPrintf(MIL_TEXT(\"The model was not found in the target image.\\n\")); } } //**************************************************************************** // Example: AGM model defined using an Edge Finder result buffer. //***************************************************************************** void EdgeResultModelInputExample(MIL_ID MilSystem) { MIL_UNIQUE_DISP_ID MilAllEdgesDisplay; // Model display identifier. MIL_UNIQUE_DISP_ID MilSelectedEdgesDisplay; // Model display identifier. MIL_UNIQUE_GRA_ID MilAllEdgesGraphicList; // Graphic list identifier. MIL_UNIQUE_GRA_ID MilSelectedEdgesGraphicList; // Graphic list identifier. MIL_UNIQUE_DISP_ID MilTargetDisplay; // Target display identifier. MIL_UNIQUE_GRA_ID MilGraphicList; // Graphic list identifier. MIL_UNIQUE_AGM_ID MilFindContext; // Find AGM context identifier. MIL_UNIQUE_AGM_ID MilSearchResult; // Find AGM result buffer identifier. MIL_UNIQUE_BUF_ID MilTargetImage; // Image buffer identifier. MIL_UNIQUE_BUF_ID MilModelImage; // Draw image buffer identifier. // Allocate the model and target displays. MilAllEdgesDisplay = MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); MilSelectedEdgesDisplay = MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); MilTargetDisplay = MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_UNIQUE_ID); // Set the model and target display's titles. MdispControl(MilAllEdgesDisplay , M_TITLE, MIL_TEXT(\"All Edges\")); MdispControl(MilSelectedEdgesDisplay , M_TITLE, MIL_TEXT(\"Selected Edges\")); MdispControl(MilTargetDisplay , M_TITLE, MIL_TEXT(\"Target\")); // Allocate graphic lists to hold the subpixel annotations to draw. MilAllEdgesGraphicList = MgraAllocList(MilSystem, M_DEFAULT, M_UNIQUE_ID); MilSelectedEdgesGraphicList = MgraAllocList(MilSystem, M_DEFAULT, M_UNIQUE_ID); MilGraphicList = MgraAllocList(MilSystem, M_DEFAULT, M_UNIQUE_ID); // Associate the graphic list to the display for annotations. MdispControl(MilAllEdgesDisplay , M_ASSOCIATED_GRAPHIC_LIST_ID, MilAllEdgesGraphicList); MdispControl(MilSelectedEdgesDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, MilSelectedEdgesGraphicList); MdispControl(MilTargetDisplay , M_ASSOCIATED_GRAPHIC_LIST_ID, MilGraphicList); // Restore the model image. MilModelImage = MbufRestore(MODEL_IMAGE_PATH, MilSystem, M_UNIQUE_ID); // Calculate the Edge Finder result. auto EdgeContext = MedgeAlloc(MilSystem, M_CONTOUR, M_DEFAULT, M_UNIQUE_ID); auto EdgeResult = MedgeAllocResult(MilSystem, M_DEFAULT, M_UNIQUE_ID); MedgeControl(EdgeContext, M_LENGTH , M_ENABLE); MedgeControl(EdgeResult , M_AGM_COMPATIBLE, M_ENABLE); MedgeCalculate(EdgeContext, MilModelImage, M_NULL, M_NULL, M_NULL, EdgeResult, M_DEFAULT); MgraColor(M_DEFAULT, M_COLOR_BLUE); // Draw all edges. MedgeDraw(M_DEFAULT, EdgeResult, MilAllEdgesGraphicList, M_DRAW_EDGE, M_INCLUDED_EDGES, M_DEFAULT); // Select the model edges. MedgeSelect(EdgeResult, M_INCLUDE_ONLY, M_LENGTH, M_GREATER_OR_EQUAL, 120, M_NULL); // Draw selected edges. MgraColor(M_DEFAULT, M_COLOR_GREEN); MedgeDraw(M_DEFAULT, EdgeResult, MilSelectedEdgesGraphicList, M_DRAW_EDGE, M_INCLUDED_EDGES, M_DEFAULT); MosPrintf(MIL_TEXT(\"All image edges are marked in blue.\\n\")); MosPrintf(MIL_TEXT(\"Edges selected to construct the AGM model are highlighted in green.\\n\\n\")); // Make the model display a little bigger since the image is small. MIL_INT ModelWindowSizeX = MbufInquire(MilModelImage, M_SIZE_X, M_NULL) + 150; MIL_INT ModelWindowSizeY = MbufInquire(MilModelImage, M_SIZE_Y, M_NULL) + 150; MdispControl(MilAllEdgesDisplay, M_WINDOW_INITIAL_SIZE_X, ModelWindowSizeX); MdispControl(MilAllEdgesDisplay, M_WINDOW_INITIAL_SIZE_Y, ModelWindowSizeY); MdispControl(MilSelectedEdgesDisplay, M_WINDOW_INITIAL_SIZE_X, ModelWindowSizeX); MdispControl(MilSelectedEdgesDisplay, M_WINDOW_INITIAL_SIZE_Y, ModelWindowSizeY); // Set the initial, left-most, X-coordinate of the model display and target display. MdispControl(MilAllEdgesDisplay, M_WINDOW_INITIAL_POSITION_X, 10); MdispControl(MilAllEdgesDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); MdispControl(MilSelectedEdgesDisplay, M_WINDOW_INITIAL_POSITION_X, ModelWindowSizeX + 20); MdispControl(MilSelectedEdgesDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); MdispControl(MilTargetDisplay, M_WINDOW_INITIAL_POSITION_X, 2 * ModelWindowSizeX + 40); MdispControl(MilTargetDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); // Display the model image. MosPrintf(MIL_TEXT(\"A single-definition model was defined \")); MosPrintf(MIL_TEXT(\"from the displayed model image.\\n\")); MdispSelect(MilAllEdgesDisplay , MilModelImage); MdispSelect(MilSelectedEdgesDisplay, MilModelImage); // Allocate a find AGM context. MilFindContext = MagmAlloc(MilSystem, M_GLOBAL_EDGE_BASED_FIND, M_DEFAULT, M_UNIQUE_ID); // Allocate a find AGM result buffer. MilSearchResult = MagmAllocResult(MilSystem, M_GLOBAL_EDGE_BASED_FIND_RESULT, M_DEFAULT, M_UNIQUE_ID); // Define the single-definition model. MagmDefine(MilFindContext, M_ADD, M_EDGE_RESULT, M_SINGLE, EdgeResult, M_DEFAULT); // Control the find AGM context. MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_DETECTION_DELTA_POS_ANGLE, 360.0); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_STEP_X , 2); MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_STEP_Y , 2); // Preprocess the find AGM context. MagmPreprocess(MilFindContext, M_DEFAULT); // Restore the target image. MilTargetImage = MbufRestore(TARGET_IMAGE_PATH, MilSystem, M_UNIQUE_ID); // Find the model. MagmFind(MilFindContext, MilTargetImage, MilSearchResult, M_DEFAULT); DrawFoundOccurrences(MilSearchResult, MilGraphicList); // Display the target image. MdispSelect(MilTargetDisplay, MilTargetImage); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } ",
      "wordCount": 828
    }
  ]
}]