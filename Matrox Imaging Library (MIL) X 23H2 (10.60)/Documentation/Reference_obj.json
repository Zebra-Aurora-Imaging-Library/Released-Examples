[{
  "id": "Reference_obj",
  "version": "2024020714",
  "title": "obj",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\obj\\ModuleInformation.htm",
  "text": " Mobj functions Synopsis The functions prefixed with Mobj make up the Object module. The Object module allows you to create MIL utility objects, as well as to control and inquire MIL utility objects and other MIL objects, for a Distributed MIL publishing application. Functions MobjAlloc MobjControl MobjFree MobjGetHookInfo MobjHookFunction MobjInquire MobjMessageRead MobjMessageWrite ",
  "wordCount": 54,
  "subEntries": [
    {
      "id": "Reference_obj_MobjAlloc",
      "version": null,
      "title": "MobjAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjAlloc.htm",
      "text": " MobjAlloc Synopsis Allocate a MIL utility object for network communications using DMIL, MILweb, or HTTP. Syntax MIL_ID MobjAlloc( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ObjectType, //in MIL_INT64&nbsp;InitFlag, //in MIL_ID&nbsp;*ObjIdPtr //out ) Description This function allocates a MIL utility object (for example, a message mailbox or HTTP server) for network communication with remote computers using DMIL, MILweb, or HTTP. You can control and inquire a MIL utility object using MobjControl() and MobjInquire(), respectively. Note, to allocate all other MIL objects that this module can manipulate, use the allocation function of the object's corresponding MIL module (for example, to allocate an image buffer, use MbufAlloc...()). After allocating the MIL utility object, you should check if the operation was successful, using MappGetError() or by verifying that the MIL utility object identifier returned is not M_NULL (or nullptr if M_UNIQUE_ID was specified). When the MIL utility object is no longer required, release it using MobjFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the MIL utility object's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the system on which to allocate the MIL utility object. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ObjectType Specifies the type of MIL utility object to allocate. See the Parameter associations section for possible values that can be specified. InitFlag Specifies the initialization of the MIL utility object. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ObjIdPtr Specifies the address of the variable in which to write the MIL utility object identifier or specifies the data type that the function should use to return the MIL utility object identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated MIL utility object ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated MIL utility object ; in this case, a MIL smart identifier of type MIL_UNIQUE_OBJ_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the MIL utility object (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the HTTP server identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated HTTP server. If allocation fails, M_NULL is written as the identifier. Address in which to write the message mailbox identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated message mailbox. If allocation fails, M_NULL is written as the identifier. Parameter associations The table below lists possible values for the ObjectType and InitFlag parameters. For specifying the type of MIL utility object to allocate For specifying the type of MIL utility object to allocate ObjectType Description InitFlag M_HTTP_SERVER Creates an HTTP server. Once configured, the HTTP server hosts files on the local computer, for read-only access by remote computers. You configure the server using MobjControl(). You must set the directory on the local computer that contains the files to host (using M_HTTP_ROOT_DIRECTORY) and enable the HTTP server (using M_HTTP_START). This setting requires MIL driver update 47 (or later). M_MESSAGE_MAILBOX Creates a message mailbox. You can read from a message mailbox using MobjMessageRead() and write to a message mailbox using MobjMessageWrite(). M_DEFAULT Same as M_QUEUE. M_OVERWRITE Specifies that only one message can be kept in the mailbox and is replaced at each write. The message is kept after a read operation. M_QUEUE Specifies that multiple messages can be queued in the mailbox. Messages are read on a FIFO basis. Upon a read operation, a message is removed from the queued message mailbox by default. To keep a message in the queued message mailbox after a read operation, call MobjMessageRead() with M_KEEP_IN_QUEUE. Return value The returned value is the MIL utility object identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_OBJ_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - SysId For specifying the system - ObjectType - InitFlag - ObjIdPtr For retrieving the identifier or specifying how to return it Parameter Associations For specifying the type of MIL utility object to allocate Return value Compilation information ",
      "wordCount": 841,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjControl",
      "version": null,
      "title": "MobjControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjControl.htm",
      "text": " MobjControl Synopsis Control a MIL object's settings and associate information with a MIL object. Syntax void MobjControl( MIL_ID&nbsp;ObjectId, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls the settings of a MIL object. You can control the read/write properties of a remote MIL object and associate information with a MIL object. You can also control MIL message mailboxes and HTTP servers. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, MobjControl() internally calls the MIL_DOUBLE version of this function (MobjControlDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (MobjControlInt64()). Parameters Parameters ObjectId Specifies the identifier of the MIL object to control. The MIL object can be a MIL utility object (allocated using MobjAlloc()) or any other MIL object, except for MIL objects allocated using MfuncAlloc(). ControlType Specifies the type of MIL object setting to control. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the MIL object setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ControlType and ControlValue parameters. For controlling the access of remote MIL objects For controlling the access of MILweb objects For associating a MIL object with information For controlling message mailboxes For controlling HTTP servers The following ControlType and corresponding ControlValue parameter settings are used to control the access of remote MIL objects. For controlling the access of remote MIL objects ControlType Description ControlValue M_DMIL_PUBLISH Controls a MIL object's remote access rights. If you set a MIL object to M_READ_ONLY or M_READ_WRITE, a monitoring application will be able to access that MIL object once a connection has been established MappOpenConnection() between the monitoring and publishing applications. Note that the access rights of all MIL objects in a given publishing application cannot be greater than that application's permission level specified in MappControl() with M_DMIL_CONNECTION. M_NO Specifies that the MIL object will not be visible. This is the default value. M_READ_ONLY Specifies that the MIL object can only be used as a source or to be inquired. A MIL object can only be set to M_READ_ONLY if M_DMIL_CONNECTION is set to either M_DMIL_CONTROL or M_DMIL_MONITOR. M_READ_WRITE Specifies that the MIL object can be used as a destination or can be controlled by MIL functions. A MIL object can only be set to M_READ_WRITE if M_DMIL_CONNECTION is set to M_DMIL_CONTROL. The following ControlType and corresponding ControlValue parameter settings are used to control whether the object is accessible using MILweb. For controlling the access of MILweb objects ControlType Description ControlValue M_WEB_PUBLISH Sets whether the object is accessible using MILweb. This setting is only supported for message mailboxes and MILweb displays (allocated using MdispAlloc() with M_WEB). It is not supported for objects allocated on a DMIL remote system. This setting requires MIL driver update 47 (or later). M_NO Specifies that the object is not accessible using MILweb. This is the default value. M_READ_ONLY Specifies that the object can be read from by a MILweb client application. A MIL object can only be set to M_READ_ONLY if M_WEB_CONNECTION is set to M_ENABLE. M_READ_WRITE Specifies that the object can be read from and written to by a MILweb client application. A MIL object can only be set to M_READ_WRITE if M_WEB_CONNECTION is set to M_ENABLE. The following ControlType and corresponding ControlValue parameter settings are used to associate information to a MIL object. For associating a MIL object with information ControlType Description ControlValue M_OBJECT_NAME Sets the name to associate with a MIL object. MIL_TEXT(\"ObjectName\") 1 Specifies the name to associate with the MIL object. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"ObjectName\")). M_OBJECT_USER_DATA_PTR Sets the address of the user data to associate with a MIL object. This is useful, for example, to associate specific data to the different buffers passed to MdigProcess(). When used with DMIL, the user data pointer is stored locally in the process doing MobjControl. void **ptr Specifies the address of the user data. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(ptr). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). The following ControlType and corresponding ControlValue parameter settings are used to control message mailbox objects allocated using MobjAlloc() with M_MESSAGE_MAILBOX. For controlling message mailboxes ControlType Description ControlValue M_QUEUE_FULL_MODE Sets the behavior of the queue when the message limit is attained. M_DEFAULT Same as M_WRITE_TIMEOUT. M_ERROR Specifies that a MIL error is generated when the message limit is attained. M_WRITE_TIMEOUT Specifies to wait for the write timeout to elapse. M_QUEUE_SIZE Sets the number of messages the queue can hold. M_DEFAULT Specifies the default value; the default value is 100 messages. Value &gt; 0 Specifies the number of messages the queue can hold. M_READ_TIMEOUT Sets the amount of time to wait for a read operation. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the read operation waits indefinitely. Value &gt; 0 Specifies the amount of time to wait, in msecs. M_RESET Resets the message mailbox by removing all messages. M_DEFAULT Specifies the default behavior. M_WRITE_TIMEOUT Sets the amount of time to wait for a write operation. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the write operation waits indefinitely. Value &gt; 0 Specifies the amount of time to wait, in msecs. The following ControlType and corresponding ControlValue parameter settings are used to control MIL HTTP server objects allocated using MobjAlloc() with M_HTTP_SERVER. For controlling HTTP servers ControlType Description ControlValue M_HTTP_ADDRESS Sets the web address (URL) with which the MIL HTTP server can be accessed in a web browser. This setting requires MIL driver update 47 (or later). MIL_TEXT(\"http://server:port\") 1 Specifies the web address (URL). This must consist of http://, followed by the domain name or local static IP address of the local computer (for example, http://192.168.1.58 or http://VisionController42). Optionally, you can specify the port number in the address; this must be the same as the port specified by M_HTTP_PORT. Typically, specifying the port is only useful if you have multiple HTTP server processes running on the same computer. Note that this includes third-party HTTP server software. The default URL is \"http://localhost\". This web address is only accessible from a web browser running on the local computer. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"http://server:port\")). M_HTTP_PORT Sets the port on which the MIL HTTP server listens for incoming connections. If you specified a port number using M_HTTP_ADDRESS, this must be the same port. For increased security, you should ensure that remote computers on the internet cannot access this port of the local computer. This setting requires MIL driver update 47 (or later). 0 &lt;= Value &lt;=65535 Specifies the port number. This port must not be used by any other application (including third-party applications) running on the local computer. The default value is 8080. M_HTTP_ROOT_DIRECTORY Sets the path of the folder on the local computer in which the files hosted by the MIL HTTP server are stored (for example, HTML and JavaScript files). All files in this folder (and its subfolders) are made available to connected computers when the HTTP server is enabled (using M_HTTP_START). You should typically ensure that there are no sensitive files in this folder (or its subfolders). There is no default directory; you must manually set a directory before enabling the HTTP server. This setting requires MIL driver update 47 (or later). MIL_TEXT(\"DirectoryName\") 1 Specifies the drive and path of the folder (for example, \"C:\\mydirectory\"). Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"DirectoryName\")). M_HTTP_START Enables the MIL HTTP server. MIL HTTP servers are intended to be run on a segmented LAN that has no internet/WAN access; MIL HTTP servers offer no internal security mechanisms. When a MIL HTTP server is enabled, you should typically ensure that your network administrator configures your network to prevent incoming connections from the internet to the computer running your MIL application (and from any other devices on your network that do not need access). If this is not possible, at a minimum, you should block incoming connections from the internet to the listening port of the HTTP server. You can inquire which port is used for this purpose, using MobjInquire() with M_HTTP_PORT. This setting requires MIL driver update 47 (or later). M_HTTP_STOP Disables the MIL HTTP server. This setting requires MIL driver update 47 (or later). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Type-specific versions of the function when using a C compiler under 64-bit void MobjControlDouble (MIL_ID ObjectId, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters ObjectId See ObjectId of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void MobjControlInt64 (MIL_ID ObjectId, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters ObjectId See ObjectId of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ObjectId - ControlType - ControlValue Parameter Associations For controlling the access of remote MIL objects For controlling the access of MILweb objects For associating a MIL object with information For controlling message mailboxes For controlling HTTP servers Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 1579,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjFree",
      "version": null,
      "title": "MobjFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjFree.htm",
      "text": " MobjFree Synopsis Free an object. Syntax void MobjFree( MIL_ID&nbsp;ObjId //in ) Description This function frees an object previously allocated using MobjAlloc(). All objects allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter ObjId Specifies the identifier of the object. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ObjId Compilation information ",
      "wordCount": 72,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjGetHookInfo",
      "version": null,
      "title": "MobjGetHookInfo",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjGetHookInfo.htm",
      "text": " MobjGetHookInfo Synopsis Get information about a hook event. Syntax MIL_INT MobjGetHookInfo( MIL_ID&nbsp;EventId, //in MIL_INT64&nbsp;InfoType, //in void&nbsp;*UserVarPtr //out ) Description This function allows you to get information about the event that caused the hook function to be called. MobjGetHookInfo() should only be called within the scope of an object hook-handler function (see MobjHookFunction()). Parameters Parameters EventId Specifies the object-related event identifier received by the hook-handler function (see MobjHookFunction()). InfoType Specifies the type of information about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_ID Specifies the address in which to write the requested information. See the Parameter associations section for possible values that can be returned. Parameter associations The table below lists possible values for the InfoType parameter and possible values returned to the UserVarPtr parameter. For inquiring information For inquiring information InfoType Description UserVarPtr - Possible values returned M_OBJECT_ID Inquires the object identifier that called the hook-handler function. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID Object identifier Specifies the object identifier that called the hook-handler function. Return value The returned value is M_NULL if successful. If the operation fails, a non-null (!M_NULL) value is returned. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - EventId - InfoType - UserVarPtr Parameter Associations For inquiring information Return value Compilation information ",
      "wordCount": 254,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjHookFunction",
      "version": null,
      "title": "MobjHookFunction",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjHookFunction.htm",
      "text": " MobjHookFunction Synopsis Hook a function to an object-related event. Syntax void MobjHookFunction( MIL_ID&nbsp;ObjectId, //in MIL_INT&nbsp;HookType, //in MIL_OBJ_HOOK_FUNCTION_PTR&nbsp;HookHandlerPtr, //in void&nbsp;*UserDataPtr //in-out ) Description This function allows you to attach or detach a user-defined function to a specified object-related event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. You can hook more than one function to an event by making separate calls to MobjHookFunction() for each function that you want to hook. MIL automatically chains and keeps an internal list of all these hooked functions. When a function is hooked, this new function is added to the end of the list. When the event happens, all user-defined functions in the list will be executed in the same order that they were hooked to the event. You can also remove any function from the list; in this case, MIL preserves the order of the remaining functions in the list. You can obtain more information about the event from within the hook-handler function using MobjGetHookInfo(). Parameters Parameters ObjectId Specifies the identifier of the object on which to hook a function. HookType Specifies the object-related event on which to hook the function. This parameter can be set to one of the following values. For all objects. For specifying the object-related event to hook Value Description M_OBJECT_FREE Hooks the function to the event that occurs when an object is freed. For message mailbox. For specifying the message mailbox event to hook Value Description M_MESSAGE_RECEIVED Hooks the function to the event that occurs when a message is received by the message mailbox. M_READ_TIMEOUT Hooks the function to the event that occurs when a read operation times out. M_WRITE_TIMEOUT Hooks the function to the event that occurs when a write operation times out. Combination value for the values listed in For specifying the object-related event to hook, For specifying the message mailbox event to hook. You can add the following value to the above-mentioned values to specify that the function should be unhooked. For specifying that the function should be unhooked Combination value Description M_UNHOOK Unhooks the specified function if hooked to the specified event. When you use M_UNHOOK, you must provide the same values for all the parameters as when you originally hooked the function. HookHandlerPtr Specifies the address of the function that should be called when the specified event occurs. The hook-handler function must be declared as follows: MIL_INT MFTYPE HookHandler( MIL_INT HookType, MIL_ID EventId, void *UserDataPtr ) Parameters HookType Type of event hooked. EventId Event identifier to pass to MobjGetHookInfo() when inquiring about the hooked event. UserDataPtr Specifies the user data pointer passed to MobjHookFunction(). Upon successful completion, the hook-handler function should return M_NULL. Note, MIL_OBJ_HOOK_FUNCTION_PTR and MFTYPE are reserved MIL predefined types for functions and data pointers. UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if not used. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ObjectId - HookType For specifying the object-related event to hook For specifying the message mailbox event to hook + For specifying that the function should be unhooked - HookHandlerPtr - UserDataPtr Compilation information ",
      "wordCount": 557,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjInquire",
      "version": null,
      "title": "MobjInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjInquire.htm",
      "text": " MobjInquire Synopsis Inquire about a MIL object setting or information associated with the MIL object. Syntax MIL_INT MobjInquire( MIL_ID&nbsp;ObjectId, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about general settings of a MIL object. You can inquire about read/write properties of a remote MIL object and about information associated with a MIL object. You can also inquire about message mailboxes. Parameters Parameters ObjectId Specifies the identifier of the MIL object about which to inquire. The MIL object can be a MIL utility object (allocated using MobjAlloc()) or any other MIL object, except for MIL objects allocated using MfuncAlloc(). InquireType Specifies the MIL object setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] MIL_ID MIL_INT MIL_INT64 Specifies the address in which to write the requested information. Since the MobjInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For inquiring about MIL object settings For inquiring message mailbox settings For inquiring HTTP server settings The following InquireType parameter settings can be specified for any MIL objects allocated using an M...Alloc() function. For inquiring about MIL object settings InquireType Description UserVarPtr - Possible values returned M_DMIL_PUBLISH Inquires the MIL object's remote access rights. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_NO Specifies that the MIL object will not be visible. M_READ_ONLY Specifies that the MIL object can only be used as a source or to be inquired. M_READ_WRITE Specifies that the MIL object can be used as a destination or can be controlled by MIL functions. M_OBJECT_FILE_EXTENSION Inquires the extension of the file from which the object was loaded or restored. For example, if a file is taken from the file path \"C:\\Images\\Board.mim\", this inquire type would return \".mim\". Note that this inquire type returns an empty string if the object was not loaded or restored from a file. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_OBJECT_FILE_EXTENSION + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_OBJECT_FILE_FOLDER Inquires the folder of the file from which the object was loaded or restored. For example, if a file is taken from the file path \"C:\\Images\\Board.mim\", this inquire type would return \"C:\\Images\". Note that this inquire type returns an empty string if the object was not loaded or restored from a file. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_OBJECT_FILE_FOLDER + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_OBJECT_FILE_NAME Inquires the file name (including the extension) of the file from which the object was loaded or restored. For example, if a file is taken from the file path \"C:\\Images\\Board.mim\", this inquire type would return \"Board.mim\". Note that this inquire type returns an empty string if the object was not loaded or restored from a file. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_OBJECT_FILE_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_OBJECT_FILE_NAME_NO_EXTENSION Inquires the file name (excluding the extension) of the file from which the object was loaded or restored. For example, if a file is taken from the file path \"C:\\Images\\Board.mim\", this inquire type would return \"Board\". Note that this inquire type returns an empty string if the object was not loaded or restored from a file. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_OBJECT_FILE_NAME_NO_EXTENSION + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_OBJECT_FILE_PATH Inquires the whole path of the file from which the object was loaded or restored. For example, if a file is taken from the file path \"C:\\Images\\Board.mim\", this inquire type would return \"C:\\Images\\Board.mim\". Note that this inquire type returns an empty string if the object was not loaded or restored from a file. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_OBJECT_FILE_PATH + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_OBJECT_NAME Inquires the MIL object's user-defined name. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_OBJECT_NAME + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_OBJECT_TYPE Inquires the type of the specified MIL object. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_3D_DISPLAY Specifies a MIL 3D display allocated using M3ddispAlloc(). M_3D_DISPLAY_PICKING_CONTEXT Specifies a MIL picking context allocated using M3ddispAlloc() with M_PICKING_CONTEXT. M_3D_DISPLAY_PICKING_RESULT Specifies a MIL picking result buffer allocated using M3ddispAllocResult() with M_PICKING_RESULT. M_3D_GRAPHIC_LIST Specifies a MIL 3D graphics list allocated using M3dgraAlloc(). M_3DBLOB_CALCULATE_CONTEXT Specifies a MIL 3D blob context that can be used with M3dblobCalculate(), allocated using M3dblobAlloc() with M_CALCULATE_CONTEXT. M_3DBLOB_DRAW_3D_CONTEXT Specifies a MIL 3D blob context that can be used with M3dblobDraw3d(), allocated using M3dblobAlloc() with M_DRAW_3D_CONTEXT. M_3DBLOB_SEGMENTATION_CONTEXT Specifies a MIL 3D blob context that can be used with M3dblobSegment(), allocated using M3dblobAlloc() with M_SEGMENTATION_CONTEXT. M_3DBLOB_SEGMENTATION_RESULT Specifies a MIL 3D blob result buffer for segmentation results, allocated using M3dblobAllocResult() with M_SEGMENTATION_RESULT. M_3DGEO_GEOMETRY Specifies a MIL 3D geometry object allocated using M3dgeoAlloc() with M_GEOMETRY. M_3DGEO_TRANSFORMATION_MATRIX Specifies a MIL 3D transformation matrix object allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_3DIM_CALCULATE_MAP_SIZE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimCalculateMapSize(), allocated using M3dimAlloc() with M_CALCULATE_MAP_SIZE_CONTEXT. M_3DIM_FILL_GAPS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimFillGaps(), allocated using M3dimAlloc() with M_FILL_GAPS_CONTEXT. M_3DIM_FILTER_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimFilter(), allocated using M3dimAlloc() with M_FILTER_CONTEXT. M_3DIM_FIND_TRANSFORMATION_RESULT Specifies a MIL 3D image processing result buffer for find transformation results, allocated using M3dimAllocResult() with M_FIND_TRANSFORMATION_RESULT. M_3DIM_LATTICE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimLattice(), allocated using M3dimAlloc() with M_LATTICE_CONTEXT. M_3DIM_LATTICE_RESULT Specifies a MIL 3D image processing result buffer for lattice results, allocated using M3dimAllocResult() with M_LATTICE_RESULT. M_3DIM_MESH_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimMesh(), allocated using M3dimAlloc() with M_MESH_CONTEXT. M_3DIM_NORMALS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimNormals(), allocated using M3dimAlloc() with M_NORMALS_CONTEXT. M_3DIM_OUTLIERS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimOutliers(), allocated using M3dimAlloc() with M_OUTLIERS_CONTEXT. M_3DIM_PROFILE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimProfileEx(), allocated using M3dimAlloc() with M_PROFILE_CONTEXT. M_3DIM_PROFILE_RESULT Specifies a MIL 3D image processing result buffer for profile results, allocated using M3dimAllocResult() with M_PROFILE_RESULT. M_3DIM_REMAP_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimRemapDepthMap(), allocated using M3dimAlloc() with M_REMAP_CONTEXT. M_3DIM_STATISTICS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimStat(), allocated using M3dimAlloc() with M_STATISTICS_CONTEXT. M_3DIM_STATISTICS_RESULT Specifies a MIL 3D image processing result buffer used to store M3dimStat() results, and is allocated using M3dimAllocResult() with M_STATISTICS_RESULT. M_3DIM_STITCH_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimMerge(), allocated using M3dimAlloc() with M_STITCH_CONTEXT. M_3DIM_SUBSAMPLE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimSample(), allocated using M3dimAlloc() with M_SUBSAMPLE_CONTEXT. M_3DIM_SURFACE_SAMPLE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimSample(), allocated using M3dimAlloc() with M_SURFACE_SAMPLE_CONTEXT. M_3DMAP_ALIGN_CONTEXT Specifies a MIL 3D align context allocated using M3dmapAlloc() with M_ALIGN_CONTEXT. M_3DMAP_ALIGN_RESULT Specifies a MIL 3D align result buffer allocated using M3dmapAllocResult() with M_ALIGN_RESULT. M_3DMAP_DEPTH_CORRECTED_DATA Specifies a MIL 3D reconstruction result buffer allocated using M3dmapAllocResult() with M_DEPTH_CORRECTED_DATA. M_3DMAP_DRAW_3D_CONTEXT Specifies a MIL 3D draw context allocated using M3dmapAlloc() with M_DRAW_3D_CONTEXT. M_3DMAP_LASER_CALIBRATION_DATA Specifies a MIL 3D reconstruction result buffer allocated using M3dmapAllocResult() with M_LASER_CALIBRATION_DATA. M_3DMAP_LASER_CONTEXT Specifies a MIL 3D reconstruction context allocated using M3dmapAlloc() with M_LASER. M_3DMAP_POINT_CLOUD_RESULT Specifies a MIL 3D reconstruction result buffer allocated using M3dmapAllocResult() with M_POINT_CLOUD_RESULT. M_3DMEAS_DRAW_3D_PATH_CONTEXT Specifies a MIL draw path 3D measurement context allocated using M3dmeasAlloc() with M_DRAW_3D_PATH_CONTEXT. M_3DMEAS_DRAW_3D_PROFILE_CONTEXT Specifies a MIL draw profile 3D measurement context allocated using M3dmeasAlloc() with M_DRAW_3D_PROFILE_CONTEXT. M_3DMEAS_DRAW_3D_TEMPLATE_CONTEXT Specifies a MIL draw template 3D measurement context allocated using M3dmeasAlloc() with M_DRAW_3D_TEMPLATE_CONTEXT. M_3DMEAS_FIND_MARKER_PATH_CONTEXT Specifies a MIL path 3D measurement context allocated using M3dmeasAlloc() with M_FIND_MARKER_PATH_CONTEXT. M_3DMEAS_FIND_MARKER_PATH_RESULT Specifies a MIL path 3D measurement result allocated using M3dmeasAllocResult() with M_FIND_MARKER_PATH_RESULT. M_3DMEAS_FIND_MARKER_PROFILE_CONTEXT Specifies a MIL profile 3D measurement context allocated using M3dmeasAlloc() with M_FIND_MARKER_PROFILE_CONTEXT. M_3DMEAS_FIND_MARKER_PROFILE_RESULT Specifies a MIL profile 3D measurement result allocated using M3dmeasAllocResult() with M_FIND_MARKER_PROFILE_RESULT. M_3DMEAS_FIND_MARKER_TEMPLATE_CONTEXT Specifies a MIL template 3D measurement context allocated using M3dmeasAlloc() with M_FIND_MARKER_TEMPLATE_CONTEXT. M_3DMEAS_FIND_MARKER_TEMPLATE_RESULT Specifies a MIL template 3D measurement result allocated using M3dmeasAllocResult() with M_FIND_MARKER_TEMPLATE_RESULT. M_3DMEAS_FIT_CONTEXT Specifies a MIL fit 3D measurement context allocated using M3dmeasAlloc() with M_FIT_CONTEXT. M_3DMET_CALCULATE_RESULT Specifies a MIL calculate 3D metrology result buffer allocated using M3dmetAllocResult() with M_CALCULATE_RESULT. M_3DMET_DISTANCE_CONTEXT Specifies a MIL distance 3D metrology context allocated using M3dmetAlloc() with M_DISTANCE_CONTEXT. M_3DMET_DRAW_3D_CONTEXT Specifies a MIL draw 3D metrology context allocated using M3dmetAlloc() with M_DRAW_3D_CONTEXT. M_3DMET_FIT_CONTEXT Specifies a MIL fit 3D metrology context allocated using M3dmetAlloc() with M_FIT_CONTEXT. M_3DMET_FIT_RESULT Specifies a MIL fit 3D metrology result buffer allocated using M3dmetAllocResult() with M_FIT_RESULT. M_3DMET_STATISTICS_CONTEXT Specifies a MIL statistics 3D metrology context allocated using M3dmetAlloc() with M_STATISTICS_CONTEXT. M_3DMET_STATISTICS_RESULT Specifies a MIL statistics 3D metrology result buffer allocated using M3dmetAllocResult() with M_STATISTICS_RESULT. M_3DMET_VOLUME_CONTEXT Specifies a MIL calculate volume 3D metrology context allocated using M3dmetAlloc() with M_VOLUME_CONTEXT. M_3DMOD_DRAW_3D_CONTEXT Specifies a MIL draw 3D model finder context that can be allocated using M3dmodAlloc() with M_DRAW_3D_GEOMETRIC_CONTEXT (to draw occurrences of geometric models). M_3DMOD_DRAW_3D_SURFACE_CONTEXT Specifies a MIL draw 3D model finder context that can be allocated using M3dmodAlloc() with M_DRAW_3D_SURFACE_CONTEXT (to draw occurrences of surface models). M_3DMOD_FIND_BOX_CONTEXT Specifies a MIL box 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT. M_3DMOD_FIND_BOX_RESULT Specifies a MIL box 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_BOX_RESULT. M_3DMOD_FIND_CYLINDER_CONTEXT Specifies a MIL cylinder 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_CYLINDER_CONTEXT. M_3DMOD_FIND_CYLINDER_RESULT Specifies a MIL cylinder 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_CYLINDER_RESULT. M_3DMOD_FIND_RECTANGULAR_PLANE_CONTEXT Specifies a MIL rectangular plane 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_RECTANGULAR_PLANE_CONTEXT. M_3DMOD_FIND_RECTANGULAR_PLANE_RESULT Specifies a MIL rectangular plane 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_RECTANGULAR_PLANE_RESULT. M_3DMOD_FIND_SPHERE_CONTEXT Specifies a MIL sphere 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_SPHERE_CONTEXT. M_3DMOD_FIND_SPHERE_RESULT Specifies a MIL sphere 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_SPHERE_RESULT. M_3DMOD_FIND_SURFACE_CONTEXT Specifies a MIL surface 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT. M_3DMOD_FIND_SURFACE_RESULT Specifies a MIL surface 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_SURFACE_RESULT. M_3DREG_DRAW_3D_CONTEXT Specifies a MIL draw 3D registration context that can be used with M3dregDraw3d(), allocated using M3dregAlloc() with M_DRAW_3D_CONTEXT. M_3DREG_PAIRWISE_REGISTRATION_CONTEXT Specifies a MIL pairwise 3D registration context allocated using M3dregAlloc() with M_PAIRWISE_REGISTRATION_CONTEXT. M_3DREG_PAIRWISE_REGISTRATION_RESULT Specifies a MIL pairwise 3D registration result buffer allocated using M3dregAllocResult() with M_PAIRWISE_REGISTRATION_RESULT. M_AGM_EDGE_BASED_FIND_CONTEXT Specifies a MIL Advanced Geometric Matching context allocated using MagmAlloc() with M_GLOBAL_EDGE_BASED_FIND. M_AGM_EDGE_BASED_FIND_RESULT Specifies a MIL Advanced Geometric Matching result buffer allocated using MagmAllocResult() with M_GLOBAL_EDGE_BASED_FIND_RESULT. M_AGM_EDGE_BASED_TRAIN_CONTEXT Specifies a MIL Advanced Geometric Matching context allocated using MagmAlloc() with M_GLOBAL_EDGE_BASED_TRAIN. M_AGM_EDGE_BASED_TRAIN_RESULT Specifies a MIL Advanced Geometric Matching result buffer allocated using MagmAllocResult() with M_GLOBAL_EDGE_BASED_TRAIN_RESULT. M_APPLICATION Specifies a MIL application context allocated using MappAlloc(). M_ARRAY Specifies a MIL array buffer allocated using MbufAlloc2d() with M_ARRAY. M_AUGMENTATION_RESULT Specifies a MIL augmentation result buffer allocated using MimAllocResult() with M_AUGMENTATION_RESULT. M_BEAD_CONTEXT Specifies a MIL bead context allocated using MbeadAlloc(). M_BEAD_RESULT Specifies a MIL bead result buffer allocated using MbeadAllocResult(). M_BLOB_CONTEXT Specifies a MIL blob analysis context allocated using MblobAlloc(). M_BLOB_RESULT Specifies a MIL blob analysis result buffer allocated using MblobAllocResult(). M_CAL_CALCULATE_HAND_EYE_CONTEXT Specifies a MIL calculate hand-eye context (hand-eye calibration) allocated using McalAlloc() with M_CALCULATE_HAND_EYE_CONTEXT. M_CAL_CALCULATE_HAND_EYE_RESULT Specifies a MIL calculate hand-eye result buffer allocated using McalAllocResult() with M_CALCULATE_HAND_EYE_RESULT. M_CAL_CONTEXT Specifies a MIL camera calibration context allocated using McalAlloc(). M_CAL_DRAW_3D_CONTEXT Specifies a MIL 3D draw calibration context allocated using McalAlloc() with M_DRAW_3D_CONTEXT. M_CAL_FIXTURING_OFFSET Specifies a MIL fixturing offset object allocated using McalAlloc() with M_FIXTURING_OFFSET. M_CALL_CONTEXT Specifies a MIL function context for a current user-defined function. M_CLASS_CLASSIFIER_ANO_PREDEFINED_CONTEXT Specifies a MIL predefined anomaly detection classifier context, allocated using MclassAlloc() with M_CLASSIFIER_ANO_PREDEFINED. M_CLASS_CLASSIFIER_CNN_PREDEFINED_CONTEXT Specifies a MIL predefined CNN classifier context, allocated using MclassAlloc() with M_CLASSIFIER_CNN_PREDEFINED. M_CLASS_CLASSIFIER_DET_PREDEFINED_CONTEXT Specifies a MIL predefined object detection classifier context, allocated using MclassAlloc() with M_CLASSIFIER_DET_PREDEFINED. M_CLASS_CLASSIFIER_ONNX_CONTEXT Specifies a MIL ONNX classifier context, allocated using MclassAlloc() with M_CLASSIFIER_ONNX. M_CLASS_CLASSIFIER_SEG_PREDEFINED_CONTEXT Specifies a MIL predefined segmentation classifier context, allocated using MclassAlloc() with M_CLASSIFIER_SEG_PREDEFINED. M_CLASS_CLASSIFIER_TREE_ENSEMBLE_CONTEXT Specifies a MIL tree ensemble classifier context, allocated using MclassAlloc() with M_CLASSIFIER_TREE_ENSEMBLE. M_CLASS_DATASET_FEATURES Specifies a MIL features dataset context, allocated using MclassAlloc() with M_DATASET_FEATURES. M_CLASS_DATASET_IMAGES Specifies a MIL images dataset context, allocated using MclassAlloc() with M_DATASET_IMAGES. M_CLASS_PREDICT_ANO_RESULT Specifies a MIL anomaly detection prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_ANO_RESULT. M_CLASS_PREDICT_CNN_RESULT Specifies a MIL CNN prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_CNN_RESULT. M_CLASS_PREDICT_DET_RESULT Specifies a MIL object detection prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_DET_RESULT. M_CLASS_PREDICT_ONNX_RESULT Specifies an ONNX prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_ONNX_RESULT. M_CLASS_PREDICT_SEG_RESULT Specifies a MIL segmentation prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_SEG_RESULT. M_CLASS_PREDICT_TREE_ENSEMBLE_RESULT Specifies a MIL tree ensemble prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_TREE_ENSEMBLE_RESULT. M_CLASS_PREPARE_IMAGES_CNN Specifies a MIL CNN data preparation context, allocated using MclassAlloc() with M_PREPARE_IMAGES_CNN. M_CLASS_PREPARE_IMAGES_DET Specifies a MIL object detection data preparation context, allocated using MclassAlloc() with M_PREPARE_IMAGES_DET. M_CLASS_PREPARE_IMAGES_SEG Specifies a MIL segmentation data preparation context, allocated using MclassAlloc() with M_PREPARE_IMAGES_SEG. M_CLASS_STAT_ANO_CONTEXT Specifies a MIL statistics classification context for anomaly detection, allocated using MclassAlloc() with M_STAT_ANO. M_CLASS_STAT_ANO_RESULT Specifies a MIL statistics classification result buffer for anomaly detection, allocated using MclassAllocResult() with M_STAT_ANO_RESULT. M_CLASS_STAT_CNN_CONTEXT Specifies a MIL statistics classification context for image classification, allocated using MclassAlloc() with M_STAT_CNN. M_CLASS_STAT_CNN_RESULT Specifies a MIL statistics classification result buffer for image classification, allocated using MclassAllocResult() with M_STAT_CNN_RESULT. M_CLASS_STAT_DET_CONTEXT Specifies a MIL statistics classification context for object detection, allocated using MclassAlloc() with M_STAT_DET. M_CLASS_STAT_DET_RESULT Specifies a MIL statistics classification result buffer for object detection, allocated using MclassAllocResult() with M_STAT_DET_RESULT. M_CLASS_STAT_SEG_CONTEXT Specifies a MIL statistics classification context for segmentation, allocated using MclassAlloc() with M_STAT_SEG. M_CLASS_STAT_SEG_RESULT Specifies a MIL statistics classification result buffer for segmentation, allocated using MclassAllocResult() with M_STAT_SEG_RESULT. M_CLASS_STAT_TREE_ENSEMBLE_CONTEXT Specifies a MIL statistics classification context for feature classification, allocated using MclassAlloc() with M_STAT_TREE_ENSEMBLE. M_CLASS_STAT_TREE_ENSEMBLE_RESULT Specifies a MIL statistics classification result buffer for feature classification, allocated using MclassAllocResult() with M_STAT_TREE_ENSEMBLE_RESULT. M_CLASS_TRAIN_ANO_CONTEXT Specifies a MIL anomaly detection training context, allocated using MclassAlloc() with M_TRAIN_ANO. M_CLASS_TRAIN_ANO_RESULT Specifies a MIL anomaly detection training result buffer, allocated using MclassAllocResult() with M_TRAIN_ANO_RESULT. M_CLASS_TRAIN_CNN_CONTEXT Specifies a MIL CNN training context, allocated using MclassAlloc() with M_TRAIN_CNN. M_CLASS_TRAIN_CNN_RESULT Specifies a MIL CNN training result buffer, allocated using MclassAllocResult() with M_TRAIN_CNN_RESULT. M_CLASS_TRAIN_DET_CONTEXT Specifies a MIL object detection training context, allocated using MclassAlloc() with M_TRAIN_DET. M_CLASS_TRAIN_DET_RESULT Specifies a MIL object detection training result buffer, allocated using MclassAllocResult() with M_TRAIN_DET_RESULT. M_CLASS_TRAIN_SEG_CONTEXT Specifies a MIL segmentation training context, allocated using MclassAlloc() with M_TRAIN_SEG. M_CLASS_TRAIN_SEG_RESULT Specifies a MIL segmentation training result buffer, allocated using MclassAllocResult() with M_TRAIN_CNN_RESULT. M_CLASS_TRAIN_TREE_ENSEMBLE_CONTEXT Specifies a MIL tree ensemble training context, allocated using MclassAlloc() with M_TRAIN_TREE_ENSEMBLE. M_CLASS_TRAIN_TREE_ENSEMBLE_RESULT Specifies a MIL tree ensemble training result buffer, allocated using MclassAllocResult() with M_TRAIN_TREE_ENSEMBLE_RESULT. M_CODE_CONTEXT Specifies a MIL code context allocated using McolAlloc(). M_CODE_DETECT_RESULT Specifies a MIL code detect result buffer allocated using McodeAllocResult(). M_CODE_GRADE_RESULT Specifies a MIL code grade result buffer allocated using McodeAllocResult(). M_CODE_MODEL Specifies a MIL code model allocated using McodeModel() with M_ADD. M_CODE_READ_RESULT Specifies a MIL code read result buffer allocated using McodeAllocResult(). M_CODE_TRAIN_RESULT Specifies a MIL code train result buffer allocated using McodeAllocResult(). M_CODE_WRITE_RESULT Specifies a MIL code write result buffer allocated using McodeAllocResult(). M_COL_MATCH_CONTEXT Specifies a MIL color analysis context (for matching) allocated using McolAlloc() with M_COLOR_MATCHING. M_COL_MATCH_RESULT Specifies a MIL color analysis result buffer (for matching) allocated using McolAllocResult() with M_COLOR_MATCHING_RESULT. M_COL_RELATIVE_CALIBRATION_CONTEXT Specifies a MIL relative color calibration context allocated using McolAlloc() with M_COLOR_CALIBRATION_RELATIVE. M_COM_CONTEXT Specifies a MIL industrial communication context allocated using McomAlloc(). M_CONTAINER Specifies a MIL container buffer allocated using MbufAllocContainer(). M_COUNT_LIST Specifies a MIL count list result buffer allocated using MimAllocResult() with M_COUNT_LIST. M_DIGITIZER Specifies a MIL digitizer allocated using MdigAlloc(). M_DISPLAY Specifies a MIL display allocated using MdispAlloc(). M_DLOCR_READ_CONTEXT Specifies a MIL Deep Learning OCR context allocated using MdlocrAlloc(). M_DLOCR_READ_RESULT Specifies a MIL Deep Learning OCR result buffer allocated using MdlocrAllocResult(). M_DMR_CONTEXT Specifies a MIL SureDotOCR context allocated using MdmrAlloc(). M_DMR_RESULT Specifies a MIL SureDotOCR result buffer allocated using MdmrAllocResult(). M_EDGE_CONTOUR Specifies a MIL edge contour context allocated using MedgeAlloc() with M_CONTOUR. M_EDGE_CREST Specifies a MIL edge crest context allocated using MedgeAlloc() with M_CREST. M_EDGE_RESULT Specifies a MIL edge result buffer allocated using MedgeAllocResult(). M_EVENT Specifies a MIL event allocated using MthrAlloc() with M_EVENT. M_EVENT_LIST Specifies a MIL event list result buffer allocated using MimAllocResult() with M_EVENT_LIST. M_EXTREME_LIST Specifies a MIL extreme list result buffer allocated using MimAllocResult() with M_EXTREME_LIST. M_FIND_ORIENTATION_LIST Specifies a MIL find orientation list result buffer allocated using MimAllocResult() with M_FIND_ORIENTATION_LIST. M_GRAPHIC_CONTEXT Specifies a MIL 2D graphics context allocated using MgraAlloc(). M_GRAPHIC_LIST Specifies a MIL 2D graphics list allocated using MgraAllocList(). M_HIST_LIST Specifies a MIL histogram list result buffer allocated using MimAllocResult() with M_HIST_LIST. M_HTTP_SERVER Specifies an HTTP server allocated using MobjAlloc() with M_HTTP_SERVER. M_IM_CONTEXT Specifies a MIL image processing context allocated using MimAlloc(). M_IMAGE Specifies a MIL image buffer allocated using MbufAllocColor() with M_IMAGE. M_KERNEL Specifies a MIL kernel buffer allocated using MbufAlloc2d() with M_KERNEL. M_LOCATE_PEAK_1D_RESULT Specifies a MIL locate 1D peak result buffer allocated using MimAllocResult() with M_LOCATE_PEAK_1D_RESULT. M_LUT Specifies a MIL LUT buffer allocated using MbufAlloc2d() with M_LUT. M_MEAS_CONTEXT Specifies a MIL measurement context allocated using MmeasAllocContext(). M_MEAS_MARKER Specifies a MIL measurement marker allocated using MmeasAllocMarker(). M_MEAS_RESULT Specifies a MIL measurement result buffer allocated using MmeasAllocResult(). M_MESSAGE_MAILBOX Specifies a MIL message mailbox allocated using MobjAlloc(). M_MET_CONTEXT Specifies a MIL metrology context allocated using MmetAlloc() with M_CONTEXT. M_MET_DERIVED_GEOMETRY_REGION Specifies a MIL metrology derived geometry region object allocated using MmetAlloc() with M_DERIVED_GEOMETRY_REGION. M_MET_RESULT Specifies a MIL metrology result buffer allocated using MmetAllocResult(). M_MOD_GEOMETRIC Specifies a MIL Model Finder context allocated using MmodAlloc() with M_GEOMETRIC. M_MOD_GEOMETRIC_CONTROLLED Specifies a MIL Model Finder context allocated using MmodAlloc() with M_GEOMETRIC_CONTROLLED. M_MOD_RESULT Specifies a MIL Model Finder result buffer allocated using MmodAllocResult() with M_DEFAULT. M_MOD_SHAPE_CIRCLE_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_CIRCLE. M_MOD_SHAPE_ELLIPSE_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_ELLIPSE. M_MOD_SHAPE_RECTANGLE_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_RECTANGLE. M_MOD_SHAPE_RESULT Specifies a MIL Model Finder result buffer allocated using MmodAllocResult() with M_SHAPE_.... M_MOD_SHAPE_SEGMENT_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_SEGMENT. M_MUTEX Specifies a MIL mutex allocated using MthrAlloc() with M_MUTEX. M_OCR_FONT Specifies a MIL character recognition font context allocated using MocrAllocFont(). M_OCR_RESULT Specifies a MIL character recognition result buffer allocated using MocrAllocResult(). M_PAT_CONTEXT Specifies a MIL pattern matching context allocated using MpatAlloc(). M_PAT_RESULT Specifies a MIL pattern matching result buffer allocated using MpatAllocResult(). M_PROJ_LIST Specifies a MIL project list result buffer allocated using MimAllocResult() with M_PROJ_LIST. M_REG_DFF_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_DEPTH_FROM_FOCUS. M_REG_DFF_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_DEPTH_FROM_FOCUS_RESULT. M_REG_EDOF_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_EXTENDED_DEPTH_OF_FIELD. M_REG_EDOF_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_EXTENDED_DEPTH_OF_FIELD_RESULT. M_REG_HDR_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_HIGH_DYNAMIC_RANGE. M_REG_HDR_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_HIGH_DYNAMIC_RANGE_RESULT. M_REG_PHOTOMETRIC_STEREO_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_PHOTOMETRIC_STEREO. M_REG_PHOTOMETRIC_STEREO_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_PHOTOMETRIC_STEREO_RESULT. M_REG_STITCHING_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_STITCHING. M_REG_STITCHING_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_STITCHING_RESULT. M_SELECTABLE_THREAD Specifies a MIL selectable thread allocated using MthrAlloc() with M_SELECTABLE_THREAD. M_SEQUENCE_CONTEXT Specifies a MIL sequence context allocated using MseqAlloc(). M_STATISTICS_RESULT Specifies a MIL MimStatCalculate() result buffer allocated using MimAllocResult() with M_STATISTICS_RESULT. M_STR_CONTEXT Specifies a MIL string context allocated using MstrAlloc(). M_STR_RESULT Specifies a MIL string result buffer allocated using MstrAllocResult(). M_STRUCT_ELEMENT Specifies a MIL structuring element buffer allocated using MbufAlloc2d() with M_STRUCT_ELEMENT. M_SYS_IO_CONTEXT Specifies a MIL system I/O context allocated using MsysIoAlloc(). M_SYSTEM Specifies a MIL system context allocated using MsysAlloc(). M_SYSTEM_THREAD Specifies a MIL thread allocated using MthrAlloc() with M_THREAD. M_THREAD Specifies a MIL thread context object allocated using MthrAlloc() with M_THREAD. M_USER_OBJECT_1 Specifies a MIL object from group one of the user-defined object types allocated using MfuncAllocId() with M_USER_OBJECT_1. This value is combined with a value from the following table: To set the offset M_USER_OBJECT_2 Specifies a MIL object from group two of the user-defined object types allocated using MfuncAllocId() with M_USER_OBJECT_2. This value is combined with a value from the following table: To set the offset M_WAVELET_TRANSFORM_RESULT Specifies a MIL wavelet transform result buffer allocated using MimAllocResult() with M_WAVELET_TRANSFORM_RESULT. M_OBJECT_USER_DATA_PTR Inquires the address of the user data to associate with the specified MIL object. This is useful, for example, to associate specific data with the different buffers passed to MdigProcess(). Note that when developing a Distributed MIL controlling application, the address of the user data must be local. In addition, you can only access this data from the local computer. For example, consider a Distributed MIL cluster that consists of two computers (A and B). If on computer A, you associate user data with a remote MIL object, calling MobjInquire with M_OBJECT_USER_DATA_PTR on computer B will return NULL; whereas, on computer A, it will return the address of the user data. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_OWNER_SYSTEM Inquires the MIL identifier of the system on which the object has been allocated. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). M_SYSTEM_LOCATION Inquires whether the object is allocated on a local system or a DMIL remote system. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_LOCAL Specifies that the object is allocated on a local system. M_REMOTE Specifies that the object is allocated on a remote system. Combination value for [when InquireType=M_OBJECT_TYPE and UserVarPtr=M_USER_OBJECT_1: M_USER_OBJECT_1 ], [when InquireType=M_OBJECT_TYPE and UserVarPtr=M_USER_OBJECT_2: M_USER_OBJECT_2]. The following value is combined with the above-mentioned values to set the offset. The offset allows you to distinguish between the different object types of the same group (for example, M_USER_OBJECT_1 + 0x0001). For distinguishing between the different object types Combination value Description Value Specifies the offset within the selected object type group. The value must have only one of its 16 least significant bits set. The following InquireType parameter settings can be specified for a MIL message mailbox object allocated using MobjAlloc() with M_MESSAGE_MAILBOX. For inquiring message mailbox settings InquireType Description UserVarPtr - Possible values returned M_INIT_FLAG Inquires the initialization of the allocated object. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_OVERWRITE //For message mailbox objects Specifies that only one message can be kept in the mailbox and is replaced at each write. M_QUEUE //For message mailbox objects Specifies that multiple messages can be queued in the mailbox. M_MESSAGE_COUNT Inquires the number of messages in the message mailbox. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the number of messages in the message mailbox. M_MESSAGE_LENGTH Inquires the length of the next message in the message mailbox. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the length of the next message in the message mailbox. M_QUEUE_FULL_MODE Inquires the behavior of the queue when the message limit is attained. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_WRITE_TIMEOUT. M_ERROR Specifies that a MIL error is generated when the message limit is attained. M_WRITE_TIMEOUT Specifies to wait for the write timeout to elapse. M_QUEUE_SIZE Inquires the number of messages the queue can hold. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Specifies the default value; the default value is 100 messages. Value &gt; 0 Specifies the number of messages the queue can hold. M_READ_TIMEOUT Inquires the amount of time to wait for a read operation. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the read operation waits indefinitely. Value &gt; 0 Specifies the amount of time to wait, in msecs. M_WRITE_TIMEOUT Inquires the amount of time to wait for a write operation. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the write operation waits indefinitely. Value &gt; 0 Specifies the amount of time to wait, in msecs. The following InquireType parameter settings are used to inquire MIL HTTP server objects allocated using MobjAlloc() with M_HTTP_SERVER. For inquiring HTTP server settings InquireType Description UserVarPtr - Possible values returned M_HTTP_ADDRESS Inquires the web address (URL) with which the MIL HTTP server can be accessed in a web browser. This setting requires MIL driver update 47 (or later). UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_HTTP_ADDRESS + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_HTTP_PORT Inquires the port on which the MIL HTTP server listens for incoming connections. For increased security, you should ensure that remote computers cannot access this port from the internet/WAN. This setting requires MIL driver update 47 (or later). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;=65535 Specifies the port number. M_HTTP_ROOT_DIRECTORY Inquires the path to the folder on the local computer in which the files hosted by the MIL HTTP server are stored. This setting requires MIL driver update 47 (or later). UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MobjInquire ( M_HTTP_ROOT_DIRECTORY + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_HTTP_STATE Inquires whether the MIL HTTP server is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_HTTP_START Specifies that the MIL HTTP server is enabled. M_HTTP_STOP Specifies that the MIL HTTP server is disabled. Combination value for M_OBJECT_FILE_EXTENSION , M_OBJECT_FILE_FOLDER , M_OBJECT_FILE_NAME , M_OBJECT_FILE_NAME_NO_EXTENSION , M_OBJECT_FILE_PATH , M_OBJECT_NAME , M_HTTP_ADDRESS , M_HTTP_ROOT_DIRECTORY. You can add the following value to the above-mentioned values to get the string's length. For getting the string size InquireType Description UserVarPtr - Possible values returned M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Return value The returned value is the requested information, cast to a MIL_INT. If the requested information does not fit into a MIL_INT, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ObjectId - InquireType - UserVarPtr Parameter Associations For inquiring about MIL object settings + For distinguishing between the different object types For inquiring message mailbox settings For inquiring HTTP server settings + For getting the string size Return value Compilation information ",
      "wordCount": 4900,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjMessageRead",
      "version": null,
      "title": "MobjMessageRead",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjMessageRead.htm",
      "text": " MobjMessageRead Synopsis Reads data from a message sent to the message mailbox. Syntax MIL_INT64 MobjMessageRead( MIL_ID&nbsp;MessageId, //in void&nbsp;*MessagePtr, //out MIL_INT64&nbsp;MessageInSize, //in MIL_INT64&nbsp;*MessageOutSizePtr, //out MIL_INT64&nbsp;*MessageTagPtr, //out MIL_INT64&nbsp;*StatusPtr, //out MIL_INT64&nbsp;OperationFlag //in ) Description This function reads the data from a message sent to the message mailbox. Parameters Parameters MessageId Specifies the identifier of the message mailbox. MessagePtr Accepts the following address: Data type: array of type MIL_UINT8 [optionally, in C++: a reference to a std::vector&lt;MIL_UINT8&gt; ] Required array size:(MessageInSize) Specifies the address of the variable in which the message is to be written. If M_NULL is specified, this function will return the length of the message. MessageInSize Specifies the size of the array pointed to by MessagePtr, in bytes. You must set this value to 0 if MessagePtr is set to M_NULL. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the parameter. MessageOutSizePtr Specifies the address of the variable in which the size of the message to be read will be written. If unused, set to M_NULL. MessageTagPtr Specifies the address of the variable in which the message tag associated with the message will be written. If unused, set to M_NULL. StatusPtr Specifies the address of the variable in which the status of the read operation will be written. For specifying the status of the operation Value Description M_BUFFER_TOO_SMALL Specifies the current message is not copied or deleted. The returned message length will be the required length in bytes. M_READ_TIMEOUT Specifies the read timeout has been attained. The returned message length will be 0. M_SUCCESS Specifies the message is copied to MessagePtr. OperationFlag Specifies additional options for the read operation. For specifying the operation Value Description M_DEFAULT Specifies the default behavior. M_KEEP_IN_QUEUE Specifies that if the mailbox is of type M_QUEUE, the message will not be deleted after the read operation. M_NO_TIMEOUT Specifies to not use the read operation timeout. This will return a status of M_SUCCESS and return 0 if no messages are ready to be read. M_REMOVE Specifies to remove the current message without reading it. Return value The returned value is the same as the value written in MessageOutSizePtr. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - MessageId - MessagePtr - MessageInSize - MessageOutSizePtr - MessageTagPtr - StatusPtr For specifying the status of the operation - OperationFlag For specifying the operation Return value Compilation information ",
      "wordCount": 422,
      "subEntries": []
    },
    {
      "id": "Reference_obj_MobjMessageWrite",
      "version": null,
      "title": "MobjMessageWrite",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\obj\\MobjMessageWrite.htm",
      "text": " MobjMessageWrite Synopsis Writes a message to the message mailbox. Syntax void MobjMessageWrite( MIL_ID&nbsp;MessageId, //in const void&nbsp;*MessagePtr, //in MIL_INT64&nbsp;MessageSize, //in MIL_INT64&nbsp;MessageTag, //in MIL_INT64&nbsp;OperationFlag //in ) Description This function writes a message that will be added to the message mailbox. Parameters Parameters MessageId Specifies the identifier of the message mailbox. MessagePtr Accepts the following address: Data type: array of type MIL_UINT8 [optionally, in C++: a reference to a constant std::vector&lt;MIL_UINT8&gt; ] Required array size:(MessageSize) Specifies the address of the variable of the user message to write. An error will be generated if this parameter is set to M_NULL. MessageSize Specifies the length of the message to write, in Bytes. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the parameter. MessageTag Specifies a user-defined tag to send with the message. OperationFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - MessageId - MessagePtr - MessageSize - MessageTag - OperationFlag Compilation information ",
      "wordCount": 193,
      "subEntries": []
    }
  ]
}]