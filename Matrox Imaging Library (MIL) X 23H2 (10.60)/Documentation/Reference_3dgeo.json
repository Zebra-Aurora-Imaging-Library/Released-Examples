[{
  "id": "Reference_3dgeo",
  "version": "2024020714",
  "title": "3dgeo",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\3dgeo\\ModuleInformation.htm",
  "text": " M3dgeo functions Synopsis The functions prefixed with M3dgeo are responsible for the generation of 3D geometries such as 3D axis-aligned box, 3D sphere, and 3D plane. You can also generate transformation matrices (used to describe 3D transformations such as translation and rotation). Functions M3dgeoAlloc M3dgeoBox M3dgeoConstruct M3dgeoCopy M3dgeoCylinder M3dgeoDraw3d M3dgeoEvalCurve M3dgeoEvalSurface M3dgeoFree M3dgeoInquire M3dgeoLine M3dgeoMatrixGet M3dgeoMatrixGetTransform M3dgeoMatrixPut M3dgeoMatrixSetTransform M3dgeoMatrixSetWithAxes M3dgeoPlane M3dgeoPoint M3dgeoRestore M3dgeoSave M3dgeoSphere M3dgeoStream ",
  "wordCount": 67,
  "subEntries": [
    {
      "id": "Reference_3dgeo_M3dgeoAlloc",
      "version": null,
      "title": "M3dgeoAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoAlloc.htm",
      "text": " M3dgeoAlloc Synopsis Allocate a 3D geometry object or transformation matrix object. Syntax MIL_ID M3dgeoAlloc( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ObjectType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*GeometryOrMatrix3dgeoIdPtr //out ) Description This function allocates a 3D geometry object or transformation matrix object on the specified system. Note that 3D geometry objects or transformation matrix objects allocated with M3dgeoAlloc() can be saved using either M3dgeoStream() or M3dgeoSave() and restored using M3dgeoRestore(). When the 3D geometry object or transformation matrix object is no longer required, release it using M3dgeoFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D geometry object or transformation matrix object's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the identifier of the system on which to allocate the 3D geometry object or transformation matrix object. For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ObjectType Specifies to allocate a 3D geometry object or transformation matrix object. This parameter must be set to one of the following: For specifying the object type Value Description M_GEOMETRY Allocates a 3D geometry object on the specified system. M_TRANSFORMATION_MATRIX Allocates a transformation matrix object on the specified system. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable in which to write the 3D geometry object or transformation matrix object identifier or specifies the data type that the function should use to return the 3D geometry object or transformation matrix object identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D geometry object or transformation matrix object ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D geometry object or transformation matrix object ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DGEO_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D geometry object or transformation matrix object (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the 3D geometry object identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated 3D geometry object identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the transformation matrix object identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated transformation matrix object identifier. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D geometry object or transformation matrix object identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DGEO_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - SysId For specifying the system identifier - ObjectType For specifying the object type - ControlFlag - GeometryOrMatrix3dgeoIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 610,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoBox",
      "version": null,
      "title": "M3dgeoBox",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoBox.htm",
      "text": " M3dgeoBox Synopsis Define a 3D box geometry object. Syntax void M3dgeoBox( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;XPos1, //in MIL_DOUBLE&nbsp;YPos1, //in MIL_DOUBLE&nbsp;ZPos1, //in MIL_DOUBLE&nbsp;XPos2OrLength, //in MIL_DOUBLE&nbsp;YPos2OrLength, //in MIL_DOUBLE&nbsp;ZPos2OrLength, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines an axis-aligned, 3D box geometry object. You can get or set the 3D box orientation using M3dgeoCopy(). You can translate, rotate, scale, or transform the resulting box, using the 3D image processing module. You can use the resulting box to, for example, crop a point cloud or perform an arithmetic operation on a depth map using the 3D image processing module, or calculate its distance from each point in a point cloud using the 3D metrology module. If you want to define a box geometry object from results obtained in a different module, you can use the copy function of that module. All coordinates are expressed in world units in the working coordinate system. Note that if Geometry3dgeoId specifies a previously-defined box, and CreationMode is set to M_CENTER_AND_DIMENSION, you can leave some of the box's attributes unchanged, even if that attribute was set using a different creation mode or was modified using the 3D image processing module. Unless you specify M_ORIENTATION_UNCHANGED, its orientation will be reset to the identity matrix. Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object, previously allocated on the required system using M3dgeoAlloc() with M_GEOMETRY. CreationMode Specifies how the box is defined. See the Parameter associations section for possible values that can be specified. XPos1 Specifies the X-coordinate of the first point used to define the box. See the Parameter associations section for possible values that can be specified. YPos1 Specifies the Y-coordinate of the first point used to define the box. See the Parameter associations section for possible values that can be specified. ZPos1 Specifies the Z-coordinate of the first point used to define the box. See the Parameter associations section for possible values that can be specified. XPos2OrLength Specifies the X-coordinate of the second point used to define the box, or the length of the box along the X-axis. See the Parameter associations section for possible values that can be specified. YPos2OrLength Specifies the Y-coordinate of the second point used to define the box, or the length of the box along the Y-axis. See the Parameter associations section for possible values that can be specified. ZPos2OrLength Specifies the Z-coordinate of the second point used to define the box, or the length of the box along the Z-axis. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, XPos1, YPos1, ZPos1, XPos2OrLength, YPos2OrLength, and ZPos2OrLength parameters. For specifying the box For specifying the box CreationMode Description XPos1 YPos1 ZPos1 XPos2OrLength YPos2OrLength ZPos2OrLength M_BOTH_CORNERS Defines the box using any two opposite corners. XPos1 Specifies the X-coordinate of the first corner of the box. YPos1 Specifies the Y-coordinate of the first corner of the box. ZPos1 Specifies the Z-coordinate of the first corner of the box. XPos2OrLength Specifies the X-coordinate of the second corner of the box, opposite to the first corner. YPos2OrLength Specifies the Y-coordinate of the second corner of the box, opposite to the first corner. ZPos2OrLength Specifies the Z-coordinate of the second corner of the box, opposite to the first corner. M_CENTER_AND_DIMENSION Defines the box by its center point and its length along each axis. You can determine the coordinates of the corners of the box by taking a coordinate from the center point and adding or subtracting half the box's length, along the coordinate's axis. For example, the Y-coordinates of the corners of the box are YPos1 ± (YPos2OrLength /2). You can also use M3dgeoInquire() with M_CORNER_.... Note that the box's size along each axis, M_SIZE_X, M_SIZE_Y, and M_SIZE_Z, will be the absolute values of the corresponding lengths specified by XPos2OrLength, YPos2OrLength, and ZPos2OrLength. Note that if Geometry3dgeoId specifies a previously-defined box, you can leave some of its attributes unchanged, even if that attribute was set using a different creation mode or was modified using the 3D image processing module. To do so, set the corresponding parameter to M_UNCHANGED. XPos1 Specifies the X-coordinate of the center of the box. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the box center's X-coordinate. YPos1 Specifies the Y-coordinate of the center of the box. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the box center's Y-coordinate. ZPos1 Specifies the Z-coordinate of the center of the box. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the box center's Z-coordinate. XPos2OrLength Specifies the length of the box along the X-axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the box's length along the X-axis. YPos2OrLength Specifies the length of the box along the Y-axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the box's length along the Y-axis. ZPos2OrLength Specifies the length of the box along the Z-axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the box's length along the Z-axis. M_CORNER_AND_DIMENSION Defines the box by one of its corners and its length (or negative length) along each axis. A positive value for length extends the box in the direction of the positive axis, starting from the specified corner point. A negative value extends the box in the direction of the negative axis, starting at the specified corner point. For example, if the specified corner is (1, 1, 1) and the value of the X, Y, and Z lengths are all positive 3 (a cube), the coordinates of the corner opposite the specified corner would be (4, 4, 4). If the X length was -3, while the other two lengths remained positive 3 (still a cube), the coordinates of the corner opposite the specified corner would be (-2, 4, 4). Note that the box's size along each axis, M_SIZE_X, M_SIZE_Y, and M_SIZE_Z, will be the absolute values of the corresponding lengths specified by XPos2OrLength, YPos2OrLength, and ZPos2OrLength. XPos1 Specifies the X-coordinate of one corner of the box. YPos1 Specifies the Y-coordinate of one corner of the box. ZPos1 Specifies the Z-coordinate of one corner of the box. XPos2OrLength Specifies the length of the box along the X-axis. YPos2OrLength Specifies the length of the box along the Y-axis. ZPos2OrLength Specifies the length of the box along the Z-axis. Combination value for M_CENTER_AND_DIMENSION. You can add the following value to the above-mentioned value to specify to leave the orientation of the previously-defined box unchanged. For specifying to leave the orientation unchanged Combination value Description M_ORIENTATION_UNCHANGED Specifies to leave the orientation of the previously-defined box unchanged. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - CreationMode - XPos1 - YPos1 - ZPos1 - XPos2OrLength - YPos2OrLength - ZPos2OrLength - ControlFlag Parameter Associations For specifying the box + For specifying to leave the orientation unchanged Compilation information ",
      "wordCount": 1154,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoConstruct",
      "version": null,
      "title": "M3dgeoConstruct",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoConstruct.htm",
      "text": " M3dgeoConstruct Synopsis Construct a 3D geometry from other geometries. Syntax void M3dgeoConstruct( MIL_ID&nbsp;Src1Geometry3dgeoId, //in MIL_ID&nbsp;Src2Geometry3dgeoId, //in MIL_ID&nbsp;DstGeometry3dgeoId, //in MIL_INT&nbsp;GeometryType, //in MIL_INT64&nbsp;Operation, //in MIL_DOUBLE&nbsp;Param, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function constructs a new 3D geometry using the geometry from one or two source 3D geometries. You can construct a box, a cylinder, a line, a plane, a point, or a sphere. Parameters Parameters Src1Geometry3dgeoId Specifies the first source 3D geometry object. For specifying the first source 3D geometry Value Description M_XY_PLANE Specifies the XY (Z=0) plane. 3D geometry object identifier Specifies the identifier of a 3D geometry object. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and must have been successfully defined. Src2Geometry3dgeoId Specifies the second source 3D geometry object. If a second source is not required, set this parameter to M_NULL. For specifying the second source 3D geometry Value Description M_XY_PLANE Specifies the XY (Z=0) plane. 3D geometry object identifier Specifies the identifier of a 3D geometry object. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and must have been successfully defined. DstGeometry3dgeoId Specifies the identifier of the destination 3D geometry object, previously allocated using M3dgeoAlloc() with M_GEOMETRY. GeometryType Specifies the type of 3D geometry to construct. See the Parameter associations section for possible values that can be specified. Operation Specifies how to construct the 3D geometry. See the Parameter associations section for possible values that can be specified. Param Specifies a scalar value for certain operations, where required. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the GeometryType, Operation, and Param parameters. For specifying the type of geometry to construct Set unused parameters to M_DEFAULT. For specifying the type of geometry to construct GeometryType Description Operation Param M_BOX Specifies to construct a box. Operation Specifies how the box is defined. M_BOTH_CORNERS Constructs the box using two opposite corners. Src1Geometry3dgeoId and Src2Geometry3dgeoId must be defined as points. M_CYLINDER Specifies to construct a cylinder. Operation Specifies how the cylinder is defined. M_AXIS Constructs a cylinder using a central axis and a radius. Src1Geometry3dgeoId determines the central axis and must be defined as a line. M_FLIP Constructs a cylinder by flipping the specified cylinder in on itself by swapping its start and end points. Src1Geometry3dgeoId must be defined as a cylinder. M_TWO_POINTS Constructs a cylinder using two points and a radius. Src1Geometry3dgeoId and Src2Geometry3dgeoId must be defined as points. Param Specifies the cylinder's radius, for an M_AXIS or an M_TWO_POINTS operation. M_DEFAULT Specifies that this parameter is not used. Value &gt;= 0.0 Sets the radius of the cylinder. M_LINE Specifies to construct a line. Operation Specifies how the line is defined. M_AXIS Constructs a line on the specified cylinder's central axis; the line will have the same length as the cylinder. Src1Geometry3dgeoId must be defined as a cylinder. M_EDGE Constructs a line on the specified edge of the source box geometry. The line will have the same length as the edge. Src1Geometry3dgeoId must be defined as a box. M_FLIP Constructs a line by flipping the specified line in on itself by swapping its start and end points. Src1Geometry3dgeoId must be defined as a line. M_NORMAL Constructs a unit line parallel to the plane's normal. Src1Geometry3dgeoId must be defined as a plane, and Src2Geometry3dgeoId must be defined as a point or M_NULL. If Src2Geometry3dgeoId is M_NULL, the line passes through the closest point to the origin; otherwise, it passes through Src2Geometry3dgeoId. M_TWO_POINTS Constructs a finite line from two points. Src1Geometry3dgeoId and Src2Geometry3dgeoId must be defined as points. Param Specifies the box's edge, for an M_EDGE operation. M_DEFAULT Specifies that this parameter is not used. 0 &lt;= Value &lt;= 11 Sets the edge along which to construct the line. The edges are assigned the following indices upon initially defining the box, based on the edge's position with respect to the axes of the working coordinate system. The index of an edge does not change based on the orientation of the box. M_PLANE Specifies to construct a plane. Operation Specifies how the plane is defined. M_FACE Constructs a plane passing through the face of a box or cylinder. The plane's normal always points outside the geometry. Src1Geometry3dgeoId must be defined as a box or cylinder. Use Param to specify the box's face or cylinder's base. For infinite cylinders, set Param to 0, which constructs the plane at the cylinder's start point, perpendicular to its central axis. M_FLIP Constructs a plane by flipping the specified plane in on itself by inverting its normal vector. Src1Geometry3dgeoId must be defined as a plane. M_LINE_AND_POINT Constructs a plane passing through the specified line and point. Src1Geometry3dgeoId must be defined as a line, and Src2Geometry3dgeoId must be defined as a point. You can use M_LINE_AND_POINT to construct a plane from 3 points if you first construct a line using two of the points (M_TWO_POINTS). M_NORMAL Constructs a plane with a normal vector that coincides with the specified line. Src1Geometry3dgeoId must be defined as a line, and Src2Geometry3dgeoId must be defined as a point or M_NULL. The plane passes through the specified point (Src2Geometry3dgeoId); otherwise, the plane passes through the line's start point. Param Specifies the plane's position, for an M_FACE operation. M_DEFAULT Specifies that this parameter is not used. 0 Specifies that the plane passes through the start point of the infinite cylinder. 0 &lt;= Value &lt;= 1 Specifies either the first (0) or the second (1) circular base of the cylinder. 0 &lt;= Value &lt;= 5 Specifies the face of the box. The faces are assigned the following indices upon initially defining the box, based on the face's position with respect to the axes of the working coordinate system. The index of a face does not change based on the orientation of the box. To inquire the box's minimum and maximum coordinates, use M3dgeoInquire() with M_UNROTATED_.... M_POINT Specifies to construct a point. Operation Specifies how the point is defined. M_CENTER Constructs a point at the center of the specified 3D geometry. Src1Geometry3dgeoId must be defined as a box, finite cylinder, finite line, point, or sphere. M_CLOSEST_TO_ORIGIN Constructs a point on the plane such that the point is closest to the origin. Src1Geometry3dgeoId must be defined as a plane. M_CORNER Constructs a point at the specified corner of the box. Src1Geometry3dgeoId must be defined as a box. M_END_POINT Constructs a point at the end point of a finite line or a finite cylinder. Src1Geometry3dgeoId must be defined as a finite line or finite cylinder. M_START_POINT Constructs a point at the start point of a line or cylinder. Src1Geometry3dgeoId must be defined as a line or cylinder. Param Specifies a corner on the box, for an M_CORNER operation. M_DEFAULT Specifies that this parameter is not used. 0 &lt;= Value &lt;= 7 Specifies the box corner. M_SPHERE Specifies to construct a sphere. Operation Specifies how the sphere is defined. M_CENTER_AND_RADIUS Constructs a sphere using a center point and a radius. Src1Geometry3dgeoId must be defined as a point. M_DIAMETER Constructs a sphere using two antipodal points. Src1Geometry3dgeoId and Src2Geometry3dgeoId must be defined as points. Param Specifies the sphere's radius, for an M_CENTER_AND_RADIUS operation. M_DEFAULT Specifies that this parameter is not used. Value &gt;= 0.0 Sets the radius of the sphere. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Src1Geometry3dgeoId For specifying the first source 3D geometry - Src2Geometry3dgeoId For specifying the second source 3D geometry - DstGeometry3dgeoId - GeometryType - Operation - Param - ControlFlag Parameter Associations For specifying the type of geometry to construct Compilation information ",
      "wordCount": 1288,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoCopy",
      "version": null,
      "title": "M3dgeoCopy",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoCopy.htm",
      "text": " M3dgeoCopy Synopsis Copy attributes or settings to or from a 3D geometry object or transformation matrix object. Syntax void M3dgeoCopy( MIL_ID&nbsp;SrcMilObjectId, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies attributes or settings to or from a 3D geometry object or transformation matrix object. You can copy the entire object or some attributes or settings of the object (for example, box orientation), depending on the source and destination objects and the specified copy type. Parameters Parameters SrcMilObjectId Specifies the identifier of the source object. Note that if the source object is not a predefined or user-defined 3D geometry object or transformation matrix object, the destination object must be. See the Parameter associations section for possible values that can be specified. DstMilObjectId Specifies the identifier of the destination object. Note that if the destination object is not a predefined or user-defined 3D geometry object or transformation matrix object, the source object must be. See the Parameter associations section for possible values that can be specified. CopyType Specifies the type of copy operation. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the SrcMilObjectId, DstMilObjectId, and CopyType parameters. For specifying the copy type For specifying the copy type CopyType Description SrcMilObjectId DstMilObjectId M_BOX_ORIENTATION Specifies to set the orientation of a 3D box geometry object, or copy the orientation of a 3D box geometry object. Note that changing the box orientation will not affect its center or its dimensions (that is, the box rotates around its center). M_IDENTITY_MATRIX Specifies to set the 3D box geometry object's box orientation to the identity matrix. This can be used to reset the box's orientation. 3D geometry object ID Specifies the identifier of the 3D box geometry object whose orientation to set. The 3D box geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and defined as a box. 3D box geometry object ID from which to copy Specifies the identifier of a 3D box geometry object from which to copy the box orientation. The 3D box geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and defined as a box. 3D box geometry object ID in which to copy Specifies the identifier of the 3D box geometry object whose orientation to set. The 3D box geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and defined as a box. Transformation matrix object ID in which to copy Specifies the identifier of the transformation matrix object in which to copy the box orientation. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Transformation matrix object ID to use to define Specifies the identifier of the transformation matrix object used to set the 3D box geometry object's box orientation. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. 3D geometry object ID Specifies the identifier of the 3D box geometry object whose orientation to set. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. M_GEOMETRY Specifies to copy a 3D geometry object into another 3D geometry object. M_XY_PLANE Specifies to copy the XY (Z=0) plane into a 3D geometry object. 3D geometry object ID Specifies the identifier of the 3D geometry object whose geometry to set to the XY (Z=0) plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. 3D geometry object ID from which to copy Specifies the identifier of a 3D geometry object from which to copy the geometry. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and must have been successfully defined. 3D geometry object ID Specifies the identifier of the 3D geometry object whose geometry to set. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. M_ROTATION_AND_SCALE Specifies to set only the rotation and scale values of a transformation matrix object using a MIL array buffer, or to copy only the rotation and scale values of a transformation matrix object. M_IDENTITY_MATRIX Specifies to copy the rotation and scale values of the identity matrix (equivalent to no rotation and uniform scale of 1). MIL array buffer ID in which to copy Specifies the identifier of the 4x4 MIL array buffer in which to copy the rotation and scale values of the identity matrix. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT. Transformation matrix object ID in which to copy Specifies the identifier of the destination transformation matrix object in which to copy the rotation and scale values of the identity matrix. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. MIL array buffer ID to use to define Specifies the identifier of a 4x4 MIL array buffer used to set the rotation and scale values of the transformation matrix object. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT, and must have been initialized. Transformation matrix object ID Specifies the identifier of the transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Transformation matrix object ID from which to copy Specifies the identifier of a transformation matrix object from which to copy the rotation and scale values. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. MIL array buffer ID in which to copy Specifies the identifier of the 4x4 MIL array buffer in which to copy the rotation and scale values of the transformation matrix object. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT. Transformation matrix object ID in which to copy Specifies the identifier of the destination transformation matrix object in which to copy the rotation and scale values of the source transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_TRANSFORMATION_MATRIX Specifies to set the values of a transformation matrix object using a MIL array buffer, or to copy a transformation matrix object. M_IDENTITY_MATRIX Specifies to copy the identity matrix. MIL array buffer ID in which to copy Specifies the identifier of the 4x4 MIL array buffer in which to copy the identity matrix. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT. Transformation matrix object ID in which to copy Specifies the identifier of the destination transformation matrix object in which to copy the identity matrix. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. MIL array buffer ID to use to define Specifies the identifier of a 4x4 MIL array buffer used to set the transformation matrix object. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT, and must have been initialized. Transformation matrix object ID Specifies the identifier of the transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Transformation matrix object ID from which to copy Specifies the identifier of a transformation matrix object to copy. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. MIL array buffer ID in which to copy Specifies the identifier of the 4x4 MIL array buffer in which to copy the values of the transformation matrix object. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT. Transformation matrix object ID in which to copy Specifies the identifier of the destination transformation matrix object in which to copy the values of the source transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_TRANSLATION Specifies to set only the translation values of a transformation matrix object using a MIL array buffer, or to copy only the translation values of a transformation matrix object. M_IDENTITY_MATRIX Specifies to copy the translation values of the identity matrix (equivalent to no translation). MIL array buffer ID in which to copy Specifies the identifier of the 4x4 MIL array buffer in which to copy the translation values of the identity matrix. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT. Transformation matrix object ID in which to copy Specifies the identifier of the destination transformation matrix object in which to copy the translation values of the identity matrix. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. MIL array buffer ID to use to define Specifies the identifier of a 4x4 MIL array buffer used to set the translation values of the transformation matrix object. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT, and must have been initialized. Transformation matrix object ID Specifies the identifier of the transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Transformation matrix object ID from which to copy Specifies the identifier of a transformation matrix object from which to copy the translation values. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. MIL array buffer ID in which to copy Specifies the identifier of the 4x4 MIL array buffer in which to copy the translation values of the transformation matrix object. The MIL array buffer must have been previously allocated using MbufAlloc2d() with M_ARRAY and 32 + M_FLOAT. Transformation matrix object ID in which to copy Specifies the identifier of the destination transformation matrix object in which to copy the translation values of the source transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - SrcMilObjectId - DstMilObjectId - CopyType - ControlFlag Parameter Associations For specifying the copy type [M_BOX_ORIENTATION] [M_GEOMETRY] [M_ROTATION_AND_SCALE] [M_TRANSFORMATION_MATRIX] [M_TRANSLATION] Compilation information ",
      "wordCount": 1672,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoCylinder",
      "version": null,
      "title": "M3dgeoCylinder",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoCylinder.htm",
      "text": " M3dgeoCylinder Synopsis Define a 3D cylinder geometry object. Syntax void M3dgeoCylinder( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;XPos1, //in MIL_DOUBLE&nbsp;YPos1, //in MIL_DOUBLE&nbsp;ZPos1, //in MIL_DOUBLE&nbsp;XPos2OrVector, //in MIL_DOUBLE&nbsp;YPos2OrVector, //in MIL_DOUBLE&nbsp;ZPos2OrVector, //in MIL_DOUBLE&nbsp;Radius, //in MIL_DOUBLE&nbsp;Length, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines an arbitrary right circular 3D cylinder geometry object. You can translate, rotate, scale, or transform the resulting cylinder, using the 3D image processing module. You can use the resulting cylinder to, for example, crop a point cloud or perform an arithmetic operation on a depth map using the 3D image processing module, or calculate its distance from each point in a point cloud using the 3D metrology module. If you want to define a cylinder geometry object from results obtained in a different module, you can use the copy function of that module. All coordinates are expressed in world units in the working coordinate system. Note that if Geometry3dgeoId specifies a previously-defined cylinder, you can leave some of its attributes unchanged, even if that attribute was set using a different creation mode or was modified using the 3D image processing module. To do so, set the corresponding parameter to M_UNCHANGED. Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object, previously allocated on the required system using M3dgeoAlloc() with M_GEOMETRY. CreationMode Specifies how the cylinder is defined. See the Parameter associations section for possible values that can be specified. XPos1 Specifies the X-coordinate of a point on the cylinder's central axis. See the Parameter associations section for possible values that can be specified. YPos1 Specifies the Y-coordinate of a point on the cylinder's central axis. See the Parameter associations section for possible values that can be specified. ZPos1 Specifies the Z-coordinate of a point on the cylinder's central axis. See the Parameter associations section for possible values that can be specified. XPos2OrVector Specifies the X-coordinate of the cylinder's second defining point, or the X-component of the cylinder's central axis vector. See the Parameter associations section for possible values that can be specified. YPos2OrVector Specifies the Y-coordinate of the cylinder's second defining point, or the Y-component of the cylinder's central axis vector. See the Parameter associations section for possible values that can be specified. ZPos2OrVector Specifies the Z-coordinate of the cylinder's second defining point, or the Z-component of the cylinder's central axis vector. See the Parameter associations section for possible values that can be specified. Radius Specifies the cylinder's radius. For specifying the cylinder's radius Value Description M_UNCHANGED Specifies to use the previously-defined value. Value &gt; 0.0 Specifies the cylinder's radius. Length Specifies to override the default cylinder length. For specifying to override the default cylinder length Value Description M_DEFAULT Specifies the default length defined by the creation mode. M_INFINITE Specifies an infinite cylinder. M_UNCHANGED Specifies to use the previously-defined value. Value &gt;= 0.0 Specifies to override the cylinder's length with a specific value. ControlFlag Specifies whether the resulting cylinder has bases. Cylinders with Length set to M_INFINITE cannot have bases. For specifying if the cylinder has bases Value Description M_DEFAULT Specifies the default value. For a finite cylinder, this value is the same as M_WITH_BASES. For an infinite cylinder, this value is the same as M_WITHOUT_BASES. M_UNCHANGED Specifies to use the previously-defined value. M_WITH_BASES Specifies that the resulting cylinder has a circular base at each end. This value is only supported for finite cylinders. M_WITHOUT_BASES Specifies that the resulting cylinder does not have bases. Parameter associations The table below lists possible values for the CreationMode, XPos1, YPos1, ZPos1, XPos2OrVector, YPos2OrVector, and ZPos2OrVector parameters. For specifying the cylinder For specifying the cylinder CreationMode Description XPos1 YPos1 ZPos1 XPos2OrVector YPos2OrVector ZPos2OrVector M_POINT_AND_VECTOR Defines the cylinder using a point on the cylinder's central axis and a nonzero vector defining the central axis direction. By default, the length of the cylinder is finite and is set to the vector's magnitude. The point is at the center of the cylinder's first circular base. Note that if you set one of the vector's components to M_UNCHANGED, you must also set the other two components to M_UNCHANGED. XPos1 Specifies the X-coordinate of the point on the cylinder's central axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-coordinate of the first point on the cylinder's central axis. YPos1 Specifies the Y-coordinate of the point on the cylinder's central axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-coordinate of the first point on the cylinder's central axis. ZPos1 Specifies the Z-coordinate of the point on the cylinder's central axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-coordinate of the first point on the cylinder's central axis. XPos2OrVector Specifies the X-component of the vector defining the central axis direction. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-component of the vector defining the central axis direction. YPos2OrVector Specifies the Y-component of the vector defining the central axis direction. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-component of the vector defining the central axis direction. ZPos2OrVector Specifies the Z-component of the vector defining the central axis direction. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-component of the vector defining the central axis direction. M_TWO_POINTS Defines the cylinder using any two non-identical points on the cylinder's central axis. By default, the length of the cylinder is finite and is set to the distance between the two specified points. The first specified point is at the center of the cylinder's first circular base and the second specified point is at the center of the cylinder's second circular base. XPos1 Specifies the X-coordinate of the first point on the cylinder's central axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-coordinate of the first point on the cylinder's central axis. YPos1 Specifies the Y-coordinate of the first point on the cylinder's central axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-coordinate of the first point on the cylinder's central axis. ZPos1 Specifies the Z-coordinate of the first point on the cylinder's central axis. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-coordinate of the first point on the cylinder's central axis. XPos2OrVector Specifies the X-coordinate of the second point on the cylinder's central axis. YPos2OrVector Specifies the Y-coordinate of the second point on the cylinder's central axis. ZPos2OrVector Specifies the Z-coordinate of the second point on the cylinder's central axis. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - CreationMode - XPos1 - YPos1 - ZPos1 - XPos2OrVector - YPos2OrVector - ZPos2OrVector - Radius For specifying the cylinder's radius - Length For specifying to override the default cylinder length - ControlFlag For specifying if the cylinder has bases Parameter Associations For specifying the cylinder Compilation information ",
      "wordCount": 1127,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoDraw3d",
      "version": null,
      "title": "M3dgeoDraw3d",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoDraw3d.htm",
      "text": " M3dgeoDraw3d Synopsis Draw the geometry, defined in the specified 3D geometry object, into a 3D graphics list. Syntax MIL_INT64 M3dgeoDraw3d( MIL_ID&nbsp;OperationDraw3dContext3dgeoId, //in MIL_ID&nbsp;SrcGeometry3dgeoId, //in MIL_ID&nbsp;DstList3dgraId, //in MIL_INT64&nbsp;DstParentLabel, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function draws a geometry, defined in the specified 3D geometry object, into the destination 3D graphics list. Parameters Parameters OperationDraw3dContext3dgeoId Reserved for future expansion and must be set to M_DEFAULT. SrcGeometry3dgeoId Specifies the identifier of the 3D geometry object to draw into the 3D graphics list. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and must have been successfully defined. Supported 3D geometries include box, cylinder, line, plane, point, and sphere. For geometries with infinite size, such as infinite lines, planes, and cylinders, the 3D graphics list's clipping box is used to determine the position and size of the 3D graphic. The size and position are only set when calling M3dgeoDraw3d(); they do not update if the 3D graphics list's clipping box is changed afterward. For specifying the geometry object identifier Value Description M_XY_PLANE Specifies the XY (Z=0) plane. MIL 3D geometry object identifier Specifies the identifier of a 3D geometry object. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. DstList3dgraId Specifies the identifier of the 3D graphics list in which to draw. The 3D graphics list must have been previously allocated using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). DstParentLabel Specifies the label of the 3D graphic in the 3D graphics list to be used as the geometry's parent. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the 3D graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - OperationDraw3dContext3dgeoId - SrcGeometry3dgeoId For specifying the geometry object identifier - DstList3dgraId - DstParentLabel For specifying the parent label - ControlFlag Return value Compilation information ",
      "wordCount": 379,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoEvalCurve",
      "version": null,
      "title": "M3dgeoEvalCurve",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoEvalCurve.htm",
      "text": " M3dgeoEvalCurve Synopsis Evaluate a curve and a list of partial coordinates and find the missing coordinates for points that lie on the curve. Syntax MIL_INT M3dgeoEvalCurve( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_INT64&nbsp;Operation, //in MIL_INT&nbsp;NumPoints, //in const MIL_DOUBLE&nbsp;*SrcCoordArrayPtr, //in MIL_DOUBLE&nbsp;*Dst1CoordArrayPtr, //out MIL_DOUBLE&nbsp;*Dst2CoordArrayPtr, //out MIL_INT64&nbsp;ControlFlag //in ) Description This function evaluates a curve (such as a 3D line) and a list of partial coordinates and calculates the missing coordinates for points that lie on the curve. You must provide a source array of coordinates in one dimension (for example, X-coordinates). M3dgeoEvalCurve() calculates the coordinates for the other two dimensions (for example, the missing Y- and Z-coordinates). Only coordinates that lie on the given source curve are calculated. M3dgeoEvalCurve() supports 3D line geometries only. Note that a 3D line has a dimensionality of one, which means that, given a single coordinate for a point that lies on the line, it is possible to find the other two coordinates. You can inquire a 3D geometry's dimensionality using M3dgeoInquire() with M_DIMENSION. For each provided source coordinate, there are two possible cases: Exactly one point with the specified coordinate exists on the 3D line. The missing coordinates are calculated and written to the corresponding entries in the destination arrays. No singular point exists. This occurs when no point with the specified coordinate exists on the 3D line, or when infinite remaining coordinate pairs are possible. If no singular point exists, or if infinite points are possible, M_INVALID_POINT (or M_INVALID_POINT_FLOAT, in the case of an array of type MIL_FLOAT) is written to the corresponding entries in the destination arrays. For example, no coordinates are calculated for any source coordinate that is beyond the limits of a finite line. Also note that if the source 3D line is parallel to an axis plane (for example, the XY-plane), providing any coordinate on the axis that is perpendicular to the plane returns M_INVALID_POINT. Note that presented above is an example prototype of this function. You can call M3dgeoEvalCurve() with the same prototype as any of the type-specific functions below, without using the function's type-specific name; that is, use M3dgeoEvalCurve() and not, for example, M3dgeoEvalCurveFloat(). MIL automatically casts the data into the appropriate type. This is true except when using a C compiler. When using a C compiler, you must always call this function with its type-specific name (you cannot use the standard name of this function). Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object used to evaluate 3D points. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a line. Operation Specifies the coordinates to evaluate (establish). For specifying the coordinates to evaluate (establish) Value Description M_EVAL_XY Specifies to establish the X- and Y-coordinates of the source 3D geometry, for each provided Z-coordinate. Results are written to the corresponding entry in the destination arrays. If destination coordinates are not packed, the first and second destination arrays hold the X- and Y-coordinates, respectively. M_EVAL_XZ Specifies to establish the X- and Z-coordinates of the source 3D geometry, for each provided Y-coordinate. Results are written to the corresponding entry in the destination arrays. If destination coordinates are not packed, the first and second destination arrays hold the X- and Z-coordinates, respectively. M_EVAL_YZ Specifies to establish the Y- and Z-coordinates of the source 3D geometry, for each provided X-coordinate. Results are written to the corresponding entry in the destination arrays. If destination coordinates are not packed, the first and second destination arrays hold the Y- and Z-coordinates, respectively. Combination values for M_EVAL_XY , M_EVAL_XZ , M_EVAL_YZ. You can add one of the following values to the above-mentioned values to specify to use packed sets of X-, Y-, and Z-coordinates. For specifying the storage format Combination value Description M_PACKED Same as specifying both M_PACKED_SRC and M_PACKED_DST. M_PACKED_DST Specifies to store the point data in a packed format in the Dst1CoordArrayPtr destination array; that is, the coordinates will be stored together (XYZ XYZ XYZ...). Dst2CoordArrayPtr must be set to M_NULL. Note that all three coordinates will be written to the first destination array. M_PACKED_SRC Specifies that source points are provided in a packed format in the source array; that is, the coordinates are stored together (XYZ XYZ XYZ...). Note that, if packed, not all coordinates are considered. For example, if you specify an M_EVAL_XY operation, the function uses only the source Z-coordinates in the evaluation. NumPoints Specifies the number of points in the arrays. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the SrcCoordArrayPtr parameter. SrcCoordArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) M_NULL Specifies the address of the array that contains the source coordinates, or, when M_PACKED or M_PACKED_SRC is specified, the address of the array that contains a packed set of source X-, Y-, and Z-coordinates. Dst1CoordArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) M_NULL Specifies the address of the array in which to store the first set of destination coordinates, or, when M_PACKED or M_PACKED_DST is specified, the address of the array that contains a packed set of destination X-, Y-, and Z-coordinates. Dst2CoordArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) M_NULL Specifies the address of the array in which to store the second set of destination coordinates. This parameter must be set to M_NULL when M_PACKED or M_PACKED_DST is specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value The returned value is the number of valid points written to the destination array(s); that is, the number of points whose coordinates match the 3D line geometry and are not set to M_INVALID_POINT or M_INVALID_POINT_FLOAT. Type-specific versions of the function when using a C compiler MIL_INT M3dgeoEvalCurveDouble (MIL_ID Geometry3dgeoId, MIL_INT64 Operation, MIL_INT NumPoints, const MIL_DOUBLE *SrcCoordArrayPtr, MIL_DOUBLE *Dst1CoordArrayPtr, MIL_DOUBLE *Dst2CoordArrayPtr, MIL_INT64 ControlFlag) Details Parameters Geometry3dgeoId See Geometry3dgeoId of the main function for a description. Operation See Operation of the main function for a description. NumPoints See NumPoints of the main function for a description. SrcCoordArrayPtr See SrcCoordArrayPtr of the main function for a description. Dst1CoordArrayPtr See Dst1CoordArrayPtr of the main function for a description. Dst2CoordArrayPtr See Dst2CoordArrayPtr of the main function for a description. ControlFlag See ControlFlag of the main function for a description. MIL_INT M3dgeoEvalCurveFloat (MIL_ID Geometry3dgeoId, MIL_INT64 Operation, MIL_INT NumPoints, const MIL_FLOAT *SrcCoordArrayPtr, MIL_FLOAT *Dst1CoordArrayPtr, MIL_FLOAT *Dst2CoordArrayPtr, MIL_INT64 ControlFlag) Details Parameters Geometry3dgeoId See Geometry3dgeoId of the main function for a description. Operation See Operation of the main function for a description. NumPoints See NumPoints of the main function for a description. SrcCoordArrayPtr See SrcCoordArrayPtr of the main function for a description. Dst1CoordArrayPtr See Dst1CoordArrayPtr of the main function for a description. Dst2CoordArrayPtr See Dst2CoordArrayPtr of the main function for a description. ControlFlag See ControlFlag of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - Operation For specifying the coordinates to evaluate (establish) + For specifying the storage format - NumPoints - SrcCoordArrayPtr - Dst1CoordArrayPtr - Dst2CoordArrayPtr - ControlFlag Return value Type-specific versions of the function when using a C compiler Compilation information ",
      "wordCount": 1279,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoEvalSurface",
      "version": null,
      "title": "M3dgeoEvalSurface",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoEvalSurface.htm",
      "text": " M3dgeoEvalSurface Synopsis Evaluate a surface and a list of partial coordinates and find the missing coordinates for points that lie on the surface. Syntax MIL_INT M3dgeoEvalSurface( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_INT64&nbsp;Operation, //in MIL_INT&nbsp;NumPoints, //in const MIL_DOUBLE&nbsp;*Src1CoordArrayPtr, //in const MIL_DOUBLE&nbsp;*Src2CoordArrayPtr, //in MIL_DOUBLE&nbsp;*DstCoordArrayPtr, //out MIL_INT64&nbsp;ControlFlag //in ) Description This function evaluates a surface (such as a 3D plane or sphere) and a list of partial coordinates and calculates the missing coordinates for points that lie on the surface. You must provide source coordinates in two dimensions (for example, X- and Y-coordinates). M3dgeoEvalSurface() calculates the coordinates for the third dimension (for example, the missing Z-coordinates). Only coordinates that lie on the given geometry's surface are calculated. M3dgeoEvalSurface() supports 3D plane and 3D sphere geometries only. Note that these geometries have a dimensionality of two, which means that, given two coordinates for a point that lies on the surface, it is possible to find the third coordinate. You can inquire a 3D geometry's dimensionality using M3dgeoInquire() with M_DIMENSION. For each provided source coordinate pair, there are three possible cases: Exactly one point with the specified coordinates exists on the 3D geometry's surface. The missing coordinate is calculated and written to the corresponding entry in the destination array. Exactly two points with the specified coordinates exist on the 3D geometry's surface. This can occur with a 3D sphere geometry. In this case, you can specify to write the largest or smallest calculated coordinate to the corresponding entry in the destination array (with M_MAX_VALUE or M_MIN_VALUE, respectively). No point exists. This can occur when the provided coordinates do not match the source 3D geometry (for example, when the coordinates match a sphere with a different radius, or when the coordinates match a parallel plane that does not intersect with the provided plane). If no point exists, the value M_INVALID_POINT (or M_INVALID_POINT_FLOAT, in the case of an array of type MIL_FLOAT) is written to the corresponding entry in the destination array. Note that presented above is an example prototype of this function. You can call M3dgeoEvalSurface() with the same prototype as any of the type-specific functions below, without using the function's type-specific name; that is, use M3dgeoEvalSurface() and not, for example, M3dgeoEvalSurfaceFloat(). MIL automatically casts the data into the appropriate type. This is true except when using a C compiler. When using a C compiler, you must always call this function with its type-specific name (you cannot use the standard name of this function). Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object used to evaluate 3D points. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a plane or sphere. Operation Specifies the coordinate to evaluate (establish). For specifying the coordinate to evaluate (establish). Value Description M_EVAL_X Specifies to establish the X-coordinate of the source 3D geometry, for each provided pair of Y- and Z-coordinates. Results are written to the corresponding entry in the destination array. If destination coordinates are not packed, the destination array holds the X-coordinates. M_EVAL_Y Specifies to establish the Y-coordinate of the source 3D geometry, for each provided pair of X- and Z-coordinates. Results are written to the corresponding entry in the destination array. If destination coordinates are not packed, the destination array holds the Y-coordinates. M_EVAL_Z Specifies to establish the Z-coordinate of the source 3D geometry, for each provided pair of X- and Y-coordinates. Results are written to the corresponding entry in the destination array. If destination coordinates are not packed, the destination array holds the Z-coordinates. Combination values for M_EVAL_X , M_EVAL_Y , M_EVAL_Z. You can add one of the following values to the above-mentioned values to specify which coordinate to store in the destination array when multiple coordinates are calculated. For specifying which evaluated point will be returned Combination value Description M_MAX_VALUE Stores the largest calculated coordinate for each entry in the destination array. This is the default value. M_MIN_VALUE Stores the smallest calculated coordinate for each entry in the destination array. Combination values for M_EVAL_X , M_EVAL_Y , M_EVAL_Z. You can add one of the following values to the above-mentioned values to specify to use packed sets of X-, Y-, and Z-coordinates. For specifying the storage format Combination value Description M_PACKED Same as specifying both M_PACKED_SRC and M_PACKED_DST. M_PACKED_DST Specifies to store the point data in a packed format in the destination array; that is, the coordinates will be stored together (XYZ XYZ XYZ...). Note that all three coordinates will be written to the destination array. M_PACKED_SRC Specifies that source points are provided in a packed format in the Src1CoordArrayPtr source array; that is, the coordinates are stored together (XYZ XYZ XYZ...). Src2CoordArrayPtr must be set to M_NULL. Note that, if packed, not all coordinates are considered. For example, if you specify an M_EVAL_X operation, the function uses only the source Y- and Z-coordinates in the evaluation. NumPoints Specifies the number of points in the arrays. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the Src1CoordArrayPtr or Src2CoordArrayPtr parameter. Src1CoordArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) M_NULL Specifies the address of the array that contains the first source coordinates, or, when M_PACKED or M_PACKED_SRC is specified, the address of the array that contains a packed set of source X-, Y-, and Z-coordinates. Src2CoordArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) M_NULL Specifies the address of the array that contains the second source coordinates. This parameter must be set to M_NULL when M_PACKED or M_PACKED_SRC is specified. DstCoordArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumPoints) M_NULL Specifies the address of the array in which to store the set of destination coordinates, or, when M_PACKED or M_PACKED_DST is specified, the address of the array that contains a packed set of destination X-, Y-, and Z-coordinates. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value The returned value is the number of valid points written to the destination array(s); that is, the number of points whose coordinates match the 3D geometry and are not set to M_INVALID_POINT or M_INVALID_POINT_FLOAT. Type-specific versions of the function when using a C compiler MIL_INT M3dgeoEvalSurfaceDouble (MIL_ID Geometry3dgeoId, MIL_INT64 Operation, MIL_INT NumPoints, const MIL_DOUBLE *Src1CoordArrayPtr, const MIL_DOUBLE *Src2CoordArrayPtr, MIL_DOUBLE *DstCoordArrayPtr, MIL_INT64 ControlFlag) Details Parameters Geometry3dgeoId See Geometry3dgeoId of the main function for a description. Operation See Operation of the main function for a description. NumPoints See NumPoints of the main function for a description. Src1CoordArrayPtr See Src1CoordArrayPtr of the main function for a description. Src2CoordArrayPtr See Src2CoordArrayPtr of the main function for a description. DstCoordArrayPtr See DstCoordArrayPtr of the main function for a description. ControlFlag See ControlFlag of the main function for a description. MIL_INT M3dgeoEvalSurfaceFloat (MIL_ID Geometry3dgeoId, MIL_INT64 Operation, MIL_INT NumPoints, const MIL_FLOAT *Src1CoordArrayPtr, const MIL_FLOAT *Src2CoordArrayPtr, MIL_FLOAT *DstCoordArrayPtr, MIL_INT64 ControlFlag) Details Parameters Geometry3dgeoId See Geometry3dgeoId of the main function for a description. Operation See Operation of the main function for a description. NumPoints See NumPoints of the main function for a description. Src1CoordArrayPtr See Src1CoordArrayPtr of the main function for a description. Src2CoordArrayPtr See Src2CoordArrayPtr of the main function for a description. DstCoordArrayPtr See DstCoordArrayPtr of the main function for a description. ControlFlag See ControlFlag of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - Operation For specifying the coordinate to evaluate (establish). + For specifying which evaluated point will be returned + For specifying the storage format - NumPoints - Src1CoordArrayPtr - Src2CoordArrayPtr - DstCoordArrayPtr - ControlFlag Return value Type-specific versions of the function when using a C compiler Compilation information ",
      "wordCount": 1367,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoFree",
      "version": null,
      "title": "M3dgeoFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoFree.htm",
      "text": " M3dgeoFree Synopsis Free a 3D geometry object or transformation matrix object. Syntax void M3dgeoFree( MIL_ID&nbsp;GeometryOrMatrix3dgeoId //in ) Description This function deletes the specified 3D geometry object or transformation matrix object and releases any memory associated with it. All 3D geometry objects or transformation matrix objects allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter GeometryOrMatrix3dgeoId Specifies the identifier of the 3D geometry object or transformation matrix object to free. These must have been successfully allocated with M3dgeoAlloc() prior to calling this function. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - GeometryOrMatrix3dgeoId Compilation information ",
      "wordCount": 117,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoInquire",
      "version": null,
      "title": "M3dgeoInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoInquire.htm",
      "text": " M3dgeoInquire Synopsis Inquire about a 3D geometry object setting or transformation matrix object setting. Syntax MIL_DOUBLE M3dgeoInquire( MIL_ID&nbsp;GeometryOrMatrix3dgeoId, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about a specified setting of a 3D geometry object or transformation matrix object. Note that if the specified 3D geometry object was transformed (for example, using the 3D image processing module), this function returns the modified coordinates and dimensions. In this case, the coordinates and dimensions returned by M3dgeoInquire() might not be the same initial coordinates and dimensions used to define the 3D geometry object. Parameters Parameters GeometryOrMatrix3dgeoId Specifies the identifier of the 3D geometry object or transformation matrix object about which to inquire information. The object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY or M_TRANSFORMATION_MATRIX. See the Parameter associations section for possible values that can be specified. InquireType Specifies the setting to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MIL_DOUBLE MIL_FLOAT MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the M3dgeoInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the GeometryOrMatrix3dgeoId and InquireType parameters and possible values returned to the UserVarPtr parameter. For inquiring about any 3D geometry object For inquiring about a specific type of 3D geometry object For inquiring about any transformation matrix object For any 3D geometry object, the GeometryOrMatrix3dgeoId and InquireType parameters can be set to one of the following: For inquiring about any 3D geometry object GeometryOrMatrix3dgeoId Description InquireType UserVarPtr - Possible values returned 3D geometry object ID Specifies a 3D geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY. M_DIMENSION Inquires the dimensionality of the 3D geometry. The dimensionality specifies, for a point on the geometry, the number of coordinates you must have to determine all three coordinates. For example, for a 3D line (dimensionality of 1), if you have the X-coordinate of a point on the line, you can find the corresponding Y- and Z-coordinates. Similarly, for a plane (dimensionality of 2), if you have the X- and Y-coordinates for a point on the plane, you can find the corresponding Z-coordinate. Use M3dgeoEvalCurve() to find missing coordinates for a 3D line; use M3dgeoEvalSurface() to find missing coordinates for a 3D plane or sphere. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 2 Specifies the dimensionality of the 3D geometry. M_GEOMETRY_TYPE Inquires the 3D geometry type. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BOX Specifies a box. M_CYLINDER Specifies a cylinder. M_LINE Specifies a line. M_NOT_INITIALIZED Specifies that a geometry has not been defined for the 3D geometry object. M_PLANE Specifies a plane. M_POINT Specifies a point. M_SPHERE Specifies a sphere. For a 3D geometry object of a specific type, the GeometryOrMatrix3dgeoId and InquireType parameters can be set to one of the following. Note that for any 3D geometry object, you can use any inquire type available for its respective geometry type, regardless of the creation mode used to define the geometry. For inquiring about a specific type of 3D geometry object GeometryOrMatrix3dgeoId Description InquireType UserVarPtr - Possible values returned 3D box geometry object ID Specifies a 3D box geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a box. Note that a box's corners are assigned the following indices upon initially defining the box, based on the corner's position with respect to the axes of the working coordinate system. The index of a box corner does not change based on the orientation of the box. M_CORNER_X( MIL_INT CornerIndex ) Inquires the X-coordinate of the specified box corner. Filters: fc_A: [{I: f_3}] Parameters CornerIndex Specifies the index of the box corner. 0 &lt;= Value &lt;= 7 Specifies the box corner. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the specified box corner, expressed in the working coordinate system. M_CORNER_Y( MIL_INT CornerIndex ) Inquires the Y-coordinate of the specified box corner. Filters: fc_A: [{I: f_3}] Parameters CornerIndex Specifies the index of the box corner. 0 &lt;= Value &lt;= 7 Specifies the box corner. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the specified box corner, expressed in the working coordinate system. M_CORNER_Z( MIL_INT CornerIndex ) Inquires the Z-coordinate of the specified box corner. Filters: fc_A: [{I: f_3}] Parameters CornerIndex Specifies the index of the box corner. 0 &lt;= Value &lt;= 7 Specifies the box corner. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the specified box corner, expressed in the working coordinate system. M_AXIS_ALIGNED Inquires whether the box is axis-aligned with the working coordinate system. Note that this inquire type returns the opposite of the M_ROTATED inquire type, except when an axis-aligned box is rotated by 180 degrees; in this case, M_AXIS_ALIGNED and M_ROTATED both return M_TRUE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the box is not axis-aligned; a rotation (other than a 180 degree rotation) has been applied. M_TRUE Specifies that the box is axis-aligned; no rotation (or a 180 degree rotation) has been applied. M_CENTER_X Inquires the X-coordinate of the box's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the box's center point, expressed in the working coordinate system. M_CENTER_Y Inquires the Y-coordinate of the box's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the box's center point, expressed in the working coordinate system. M_CENTER_Z Inquires the Z-coordinate of the box's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the box's center point, expressed in the working coordinate system. M_CORNER_X_ALL Inquires the X-coordinate of each of the box's 8 corners, in their index order. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(8) Value Specifies the X-component the box's corner, expressed in the working coordinate system. M_CORNER_Y_ALL Inquires the Y-coordinate of each of the box's 8 corners, in their index order. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(8) Value Specifies the Y-component the box's corner, expressed in the working coordinate system. M_CORNER_Z_ALL Inquires the Z-coordinate of each of the box's 8 corners, in their index order. UserVarPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(8) Value Specifies the Z-component the box's corner, expressed in the working coordinate system. M_ROTATED Inquires whether the box has been rotated. This inquire type returns true when the box's rotation matrix is not the identity matrix. This can occur even if you did not use, for example, M3dimRotate() or M3dimMatrixTransform() to explicitly rotate the box. If you copied the box from a statistics 3D image processing result buffer (after calculating a semi-oriented box) or a 3D model finder result buffer, it can have a rotation matrix other than the identity matrix. Note that this inquire type returns the opposite of the M_AXIS_ALIGNED inquire type, except when an axis-aligned box is rotated by 180 degrees; in this case, M_AXIS_ALIGNED and M_ROTATED both return M_TRUE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the box is not rotated; its rotation matrix is the identity matrix. M_TRUE Specifies that the box is rotated; its rotation matrix is not the identity matrix. M_SIZE_X Inquires the box's length along the X-axis, ignoring the box's rotation. The length is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the length of the unrotated box, in world units, along the X-axis of the working coordinate system. M_SIZE_Y Inquires the box's length along the Y-axis, ignoring the box's rotation. The length is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the length of the unrotated box, in world units, along the Y-axis of the working coordinate system. M_SIZE_Z Inquires the box's length along the Z-axis, ignoring the box's rotation. The length is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the length of the unrotated box, in world units, along the Z-axis of the working coordinate system. M_UNROTATED_MAX_X Inquires the box's maximum X-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's maximum X-coordinate, ignoring the box's rotation, expressed in the working coordinate system. M_UNROTATED_MAX_Y Inquires the box's maximum Y-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's maximum Y-coordinate, ignoring the box's rotation, expressed in the working coordinate system. M_UNROTATED_MAX_Z Inquires the box's maximum Z-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's maximum Z-coordinate, ignoring the box's rotation, expressed in the working coordinate system. M_UNROTATED_MIN_X Inquires the box's minimum X-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's minimum X-coordinate, ignoring the box's rotation, expressed in the working coordinate system. M_UNROTATED_MIN_Y Inquires the box's minimum Y-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's minimum Y-coordinate, ignoring the box's rotation, expressed in the working coordinate system. M_UNROTATED_MIN_Z Inquires the box's minimum Z-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the box's minimum Z-coordinate, ignoring the box's rotation, expressed in the working coordinate system. 3D cylinder geometry object ID Specifies a 3D cylinder geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a cylinder. M_AXIS_X Inquires the X-component of the cylinder's central axis unit vector. This vector does not reflect the cylinder's length, regardless of whether a vector was used to define the cylinder's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the cylinder's central axis unit vector, expressed in the working coordinate system. M_AXIS_Y Inquires the Y-component of the cylinder's central axis unit vector. This vector does not reflect the cylinder's length, regardless of whether a vector was used to define the cylinder's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the cylinder's central axis unit vector, expressed in the working coordinate system. M_AXIS_Z Inquires the Z-component of the cylinder's central axis unit vector. This vector does not reflect the cylinder's length, regardless of whether a vector was used to define the cylinder's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the cylinder's central axis unit vector, expressed in the working coordinate system. M_BASES Inquires whether the cylinder has bases. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_WITH_BASES Specifies that the cylinder has bases. M_WITHOUT_BASES Specifies that the cylinder does not have bases. M_CENTER_X Inquires the X-coordinate of the center point on the cylinder's central axis. This inquire type is only available if the cylinder's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the center point on the cylinder's central axis, expressed in the working coordinate system. M_CENTER_Y Inquires the Y-coordinate of the center point on the cylinder's central axis. This inquire type is only available if the cylinder's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the center point on the cylinder's central axis, expressed in the working coordinate system. M_CENTER_Z Inquires the Z-coordinate of the center point on the cylinder's central axis. This inquire type is only available if the cylinder's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the center point on the cylinder's central axis, expressed in the working coordinate system. M_END_POINT_X Inquires the X-coordinate of the cylinder's end point, positioned at the center of the cylinder's second circular base. This inquire type is only available if the cylinder's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the cylinder's end point, expressed in the working coordinate system. M_END_POINT_Y Inquires the Y-coordinate of the cylinder's end point, positioned at the center of the cylinder's second circular base. This inquire type is only available if the cylinder's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the cylinder's end point, expressed in the working coordinate system. M_END_POINT_Z Inquires the Z-coordinate of the cylinder's end point, positioned at the center of the cylinder's second circular base. This inquire type is only available if the cylinder's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the cylinder's end point, expressed in the working coordinate system. M_LENGTH Inquires the cylinder's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies that the cylinder is infinite. Value &gt;= 0.0 Specifies the cylinder's length in world units. M_RADIUS Inquires the cylinder's radius. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the cylinder's radius in world units. M_START_POINT_X Inquires the X-coordinate of the cylinder's start point on the cylinder's central axis. When the cylinder's length is infinite, this returns the X-coordinate of the first point used to define the cylinder. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the first point on the central axis used to define the cylinder, expressed in the working coordinate system. M_START_POINT_Y Inquires the Y-coordinate of the cylinder's start point on the cylinder's central axis. When the cylinder's length is infinite, this returns the Y-coordinate of the first point used to define the cylinder. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the first point on the central axis used to define the cylinder, expressed in the working coordinate system. M_START_POINT_Z Inquires the Z-coordinate of the cylinder's start point on the cylinder's central axis. When the cylinder's length is infinite, this returns the Z-coordinate of the first point used to define the cylinder. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the first point on the central axis used to define the cylinder, expressed in the working coordinate system. 3D line geometry object ID Specifies a 3D line geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a line. M_AXIS_X Inquires the X-component of the line's direction unit vector. This vector does not reflect the line's length, regardless of whether a vector was used to define the line's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the line's direction unit vector, expressed in the working coordinate system. M_AXIS_Y Inquires the Y-component of the line's direction unit vector. This vector does not reflect the line's length, regardless of whether a vector was used to define the line's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the line's direction unit vector, expressed in the working coordinate system. M_AXIS_Z Inquires the Z-component of the line's direction unit vector. This vector does not reflect the line's length, regardless of whether a vector was used to define the line's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the line's direction unit vector, expressed in the working coordinate system. M_CENTER_X Inquires the X-coordinate of the line's center point. This inquire type is only available if the line's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the center point on the line, expressed in the working coordinate system. M_CENTER_Y Inquires the Y-coordinate of the line's center point. This inquire type is only available if the line's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the center point on the line, expressed in the working coordinate system. M_CENTER_Z Inquires the Z-coordinate of the line's center point. This inquire type is only available if the line's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the center point on the line, expressed in the working coordinate system. M_END_POINT_X Inquires the X-coordinate of the line's end point. This inquire type is only available if the line's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the line's end point, expressed in the working coordinate system. M_END_POINT_Y Inquires the Y-coordinate of the line's end point. This inquire type is only available if the line's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the line's end point, expressed in the working coordinate system. M_END_POINT_Z Inquires the Z-coordinate of the line's end point. This inquire type is only available if the line's length is not M_INFINITE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the line's end point, expressed in the working coordinate system. M_LENGTH Inquires the line's length. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies that the line is infinite. Value &gt;= 0.0 Specifies the line's length in world units. M_START_POINT_X Inquires the X-coordinate of the line's start point. When the line's length is infinite, this returns the X-coordinate of the first point used to define the line. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the first point used to define the line, expressed in the working coordinate system. M_START_POINT_Y Inquires the Y-coordinate of the line's start point. When the line's length is infinite, this returns the Y-coordinate of the first point used to define the line. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the first point used to define the line, expressed in the working coordinate system. M_START_POINT_Z Inquires the Z-coordinate of the line's start point. When the line's length is infinite, this returns the Z-coordinate of the first point used to define the line. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the first point used to define the line, expressed in the working coordinate system. 3D plane geometry object ID Specifies a 3D plane geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a plane. M_CLOSEST_TO_ORIGIN_X Inquires the X-coordinate of the point on the plane closest to the origin of the working coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the point on the plane closest to the origin of the working coordinate system. M_CLOSEST_TO_ORIGIN_Y Inquires the Y-coordinate of the point on the plane closest to the origin of the working coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the point on the plane closest to the origin of the working coordinate system. M_CLOSEST_TO_ORIGIN_Z Inquires the Z-coordinate of the point on the plane closest to the origin of the working coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the point on the plane closest to the origin of the working coordinate system. M_COEFFICIENT_A Inquires the coefficient A of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient A of the plane equation. M_COEFFICIENT_B Inquires the coefficient B of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient B of the plane equation. M_COEFFICIENT_C Inquires the coefficient C of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient C of the plane equation. M_COEFFICIENT_D Inquires the coefficient D of the plane equation, Ax + By + Cz + D = 0. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the coefficient D of the plane equation. M_NORMAL_X Inquires the X-component of the plane's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the plane's normal unit vector, expressed in the working coordinate system. M_NORMAL_Y Inquires the Y-component of the plane's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the plane's normal unit vector, expressed in the working coordinate system. M_NORMAL_Z Inquires the Z-component of the plane's normal unit vector. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the plane's normal unit vector, expressed in the working coordinate system. 3D point geometry object ID Specifies a 3D point geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a point. M_POSITION_X Inquires the X-coordinate of the point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the point, expressed in the working coordinate system. M_POSITION_Y Inquires the Y-coordinate of the point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the point, expressed in the working coordinate system. M_POSITION_Z Inquires the Z-coordinate of the point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the point, expressed in the working coordinate system. 3D sphere geometry object ID Specifies a 3D sphere geometry object, allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a sphere. M_CENTER_X Inquires the X-coordinate of the sphere's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the sphere's center point, expressed in the working coordinate system. M_CENTER_Y Inquires the Y-coordinate of the sphere's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the sphere's center point, expressed in the working coordinate system. M_CENTER_Z Inquires the Z-coordinate of the sphere's center point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the sphere's center point, expressed in the working coordinate system. M_RADIUS Inquires the sphere's radius. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the sphere's radius in world units. For any transformation matrix object, the GeometryOrMatrix3dgeoId and InquireType parameters can be set to one of the following: For inquiring about any transformation matrix object GeometryOrMatrix3dgeoId Description InquireType UserVarPtr - Possible values returned Transformation matrix object ID Specifies a transformation matrix object, allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_AFFINE Inquires whether the transformation matrix object is an affine transformation matrix. An affine transformation matrix has translation and/or rotation and/or scale transformations. The scale can be uniform or non-uniform. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not an affine transformation matrix. M_TRUE Specifies that the transformation matrix object is an affine transformation matrix. M_AXIS_ALIGNED Inquires whether the transformation matrix object is an axis-aligned transformation matrix. An axis-aligned transformation matrix has translation and/or scale transformations. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not an axis-aligned transformation matrix. M_TRUE Specifies that the transformation matrix object is an axis-aligned transformation matrix. M_IDENTITY Inquires whether the transformation matrix object is an identity transformation matrix. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not an identity matrix. M_TRUE Specifies that the transformation matrix object is an identity matrix. M_MIRROR Inquires whether the transformation matrix object preserves the handedness of the coordinate system. If true, applying the matrix will flip the handedness of the coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that applying the transformation matrix object will flip the handedness of the coordinate system. M_TRUE Specifies that applying the transformation matrix object preserves the handedness of the coordinate system. M_RIGID Inquires whether the transformation matrix object is a rigid transformation matrix. A rigid transformation matrix has translation and/or rotation transformations. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not a rigid transformation matrix. M_TRUE Specifies that the transformation matrix object is a rigid transformation matrix. M_ROTATION Inquires whether the transformation matrix object is a rotation transformation matrix. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not a rotation transformation matrix. M_TRUE Specifies that the transformation matrix object is a rotation transformation matrix. M_SCALE Inquires whether the transformation matrix object is a scale transformation matrix. The scale can be uniform or non-uniform. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not a scale transformation matrix. M_TRUE Specifies that the transformation matrix object is a scale transformation matrix. M_SCALE_UNIFORM Inquires whether the transformation matrix object is a uniform scale transformation matrix. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not a uniform scale transformation matrix. M_TRUE Specifies that the transformation matrix object is a uniform scale transformation matrix. M_SIMILARITY Inquires whether the transformation matrix object is a similarity transformation matrix. A similarity transformation matrix has translation and/or rotation and/or uniform scale transformations. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not a similarity transformation matrix. M_TRUE Specifies that the transformation matrix object is a similarity transformation matrix. M_TRANSFORMATION_TYPE Inquires the transformation matrix object's transformation type. Note that this inquire type will return the strictest type that matches the transformation matrix object. For example, if the transformation matrix object is a rotation transformation matrix, it will return true for M_ROTATION, M_RIGID, M_SIMILARITY, and M_AFFINE, but M_TRANSFORMATION_TYPE will return M_ROTATION. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AFFINE Specifies an affine transformation matrix. This is returned if the transformation matrix object has a non-uniform scale transformation, and at least one other type of transformation, including translation or rotation. M_AXIS_ALIGNED Specifies an axis-aligned transformation matrix. This is returned if the transformation matrix object has translation and scale transformations. M_IDENTITY Specifies an identity transformation matrix. M_PROJECTION Specifies a projection transformation matrix. M_RIGID Specifies a rigid transformation matrix. This is returned if the transformation matrix object has rotation and translation transformations. M_ROTATION Specifies a rotation transformation matrix. M_SCALE Specifies a scale transformation matrix. This is returned if the transformation matrix object has a non-uniform transformation. M_SCALE_UNIFORM Specifies a uniform scale transformation matrix. M_SIMILARITY Specifies a similarity transformation matrix. This is returned if the transformation matrix object has a uniform scale transformation, and at least one other type of transformation, including translation or rotation. M_TRANSLATION Specifies a translation transformation matrix. M_TRANSLATION Inquires whether the transformation matrix object is a translation transformation matrix. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the transformation matrix object is not a translation transformation matrix. M_TRUE Specifies that the transformation matrix object is a translation transformation matrix. Combination value for Tables: For inquiring about any 3D geometry object For inquiring about a specific type of 3D geometry object For inquiring about any transformation matrix object the values listed in all the parameter association tables. You can add the following value to the above-mentioned values to determine whether an inquire type is supported. For inquiring whether an inquire type is supported InquireType Description UserVarPtr - Possible values returned M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for Tables: For inquiring about any 3D geometry object For inquiring about a specific type of 3D geometry object For inquiring about any transformation matrix object the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to cast the requested information to the required data type. Note: In C++, when using a standard vector (std::vector) instead of an array, the values listed in this combination table must not be used. If you need to use a specific data type, instantiate the vector with the necessary data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When a single result. Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(defined elsewhere) Note: When multiple results. M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT &nbsp;|&nbsp; array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] MORE Data type: address of a MIL_FLOAT Note: When a single result. Data type: array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When a single result. Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 &nbsp;|&nbsp; array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] MORE Data type: address of a MIL_INT32 Note: When a single result. Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] Required array size:(defined elsewhere) Note: When multiple results. M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 &nbsp;|&nbsp; array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MORE Data type: address of a MIL_INT64 Note: When a single result. Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Return value The returned value is the requested information, cast to a MIL_DOUBLE. If the requested information does not fit into a MIL_DOUBLE, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - GeometryOrMatrix3dgeoId - InquireType - UserVarPtr Parameter Associations For inquiring about any 3D geometry object [3D geometry object ID] For inquiring about a specific type of 3D geometry object [3D box geometry object ID] [3D cylinder geometry object ID] [3D line geometry object ID] [3D plane geometry object ID] [3D point geometry object ID] [3D sphere geometry object ID] For inquiring about any transformation matrix object [Transformation matrix object ID] + For inquiring whether an inquire type is supported + For specifying the data type Return value Compilation information ",
      "wordCount": 6199,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoLine",
      "version": null,
      "title": "M3dgeoLine",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoLine.htm",
      "text": " M3dgeoLine Synopsis Define an arbitrary 3D line geometry object. Syntax void M3dgeoLine( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;XPos1, //in MIL_DOUBLE&nbsp;YPos1, //in MIL_DOUBLE&nbsp;ZPos1, //in MIL_DOUBLE&nbsp;XPos2OrVector, //in MIL_DOUBLE&nbsp;YPos2OrVector, //in MIL_DOUBLE&nbsp;ZPos2OrVector, //in MIL_DOUBLE&nbsp;Length, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines an arbitrary 3D line geometry object. You can translate, rotate, scale, or transform the resulting line, using the 3D image processing module. You can use the resulting line to, for example, perform an arithmetic operation on a depth map using the 3D image processing module, or calculate its distance from each point in a point cloud using the 3D metrology module. If you want to define a line geometry object from results obtained in a different module, you can use the copy function of that module. All coordinates are expressed in world units in the working coordinate system. Note that if Geometry3dgeoId specifies a previously-defined line, you can leave some of its attributes unchanged, even if that attribute was set using a different creation mode or was modified using the 3D image processing module. To do so, set the corresponding parameter to M_UNCHANGED. Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object, previously allocated on the required system using M3dgeoAlloc() with M_GEOMETRY. CreationMode Specifies how the line is defined. See the Parameter associations section for possible values that can be specified. XPos1 Specifies the X-coordinate of the first point used to define the line. See the Parameter associations section for possible values that can be specified. YPos1 Specifies the Y-coordinate of the first point used to define the line. See the Parameter associations section for possible values that can be specified. ZPos1 Specifies the Z-coordinate of the first point used to define the line. See the Parameter associations section for possible values that can be specified. XPos2OrVector Specifies the X-coordinate of the second point used to define the line, or the X-component of the vector defining the line's direction and length (if Length is M_DEFAULT). See the Parameter associations section for possible values that can be specified. YPos2OrVector Specifies the Y-coordinate of the second point used to define the line, or the Y-component of the vector defining the line's direction and length (if Length is M_DEFAULT). See the Parameter associations section for possible values that can be specified. ZPos2OrVector Specifies the Z-coordinate of the second point used to define the line, or the Z-component of the vector defining the line's direction and length (if Length is M_DEFAULT). See the Parameter associations section for possible values that can be specified. Length Specifies to override the default line length. For specifying to override the default line length Value Description M_DEFAULT Specifies the default length defined by the creation mode. M_INFINITE Specifies an infinite line. M_UNCHANGED Specifies to use the previously-defined value. Value &gt;= 0.0 Specifies to override the line's length with a specific value. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, XPos1, YPos1, ZPos1, XPos2OrVector, YPos2OrVector, and ZPos2OrVector parameters. For specifying the line For specifying the line CreationMode Description XPos1 YPos1 ZPos1 XPos2OrVector YPos2OrVector ZPos2OrVector M_POINT_AND_VECTOR Defines the line using a point on the line and a nonzero vector defining the line's direction. By default, the length of the line is finite and is set to the vector's magnitude. The point is at the start of the line. You can determine the coordinates of the line's end point by adding the given vector's X-, Y-, and Z-components to the first point's respective coordinates. You can also use M3dgeoInquire() with M_END_POINT_.... Note that if you set one of the vector's components to M_UNCHANGED, you must also set the other two components to M_UNCHANGED. XPos1 Specifies the X-coordinate of the point on the line. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-coordinate of the first point on the line. YPos1 Specifies the Y-coordinate of the point on the line. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-coordinate of the first point on the line. ZPos1 Specifies the Z-coordinate of the point on the line. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-coordinate of the first point on the line. XPos2OrVector Specifies the X-component of the vector defining the line's direction. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-component of the vector defining the line's direction. YPos2OrVector Specifies the Y-component of the vector defining the line's direction. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-component of the vector defining the line's direction. ZPos2OrVector Specifies the Z-component of the vector defining the line's direction. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-component of the vector defining the line's direction. M_TWO_POINTS Defines the line using any two non-identical points. By default, the length of the line is finite and is set to the distance between the two specified points. The line starts at the first point, and ends at the second point. XPos1 Specifies the X-coordinate of the first point on the line. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-coordinate of the first point on the line. YPos1 Specifies the Y-coordinate of the first point on the line. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-coordinate of the first point on the line. ZPos1 Specifies the Z-coordinate of the first point on the line. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-coordinate of the first point on the line. XPos2OrVector Specifies the X-coordinate of the second point on the line. YPos2OrVector Specifies the Y-coordinate of the second point on the line. ZPos2OrVector Specifies the Z-coordinate of the second point on the line. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - CreationMode - XPos1 - YPos1 - ZPos1 - XPos2OrVector - YPos2OrVector - ZPos2OrVector - Length For specifying to override the default line length - ControlFlag Parameter Associations For specifying the line Compilation information ",
      "wordCount": 1001,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoMatrixGet",
      "version": null,
      "title": "M3dgeoMatrixGet",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoMatrixGet.htm",
      "text": " M3dgeoMatrixGet Synopsis Get data from a transformation matrix object and place it in a user-supplied array. Syntax void M3dgeoMatrixGet( MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;GetType, //in MIL_DOUBLE&nbsp;*UserArrayPtr //out ) Description This function copies the values from a transformation matrix object and places them in an array. Note that presented above is an example prototype of this function. You can call M3dgeoMatrixGet() with the same prototype as any of the type-specific functions below, without using the function's type-specific name; that is, use M3dgeoMatrixGet() and not, for example, M3dgeoMatrixGetFloat(). MIL automatically casts the data into the appropriate type. This is true except when using a C compiler. When using a C compiler, you must always call this function with its type-specific name (you cannot use the standard name of this function). Parameters Parameters Matrix3dgeoId Specifies the identifier of the source transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. GetType Reserved for future expansion and must be set to M_DEFAULT. UserArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(16) Specifies the address of the user array in which to copy the data from the transformation matrix. Ensure that the user array is large enough to receive the data to be copied from the source object. Transformation matrices are 4x4 matrices, so the array must be of size 16. Type-specific versions of the function when using a C compiler void M3dgeoMatrixGetDouble (MIL_ID Matrix3dgeoId, MIL_INT64 GetType, MIL_DOUBLE *UserArrayPtr) Details Parameters Matrix3dgeoId See Matrix3dgeoId of the main function for a description. GetType See GetType of the main function for a description. UserArrayPtr See UserArrayPtr of the main function for a description. void M3dgeoMatrixGetFloat (MIL_ID Matrix3dgeoId, MIL_INT64 GetType, MIL_FLOAT *UserArrayPtr) Details Parameters Matrix3dgeoId See Matrix3dgeoId of the main function for a description. GetType See GetType of the main function for a description. UserArrayPtr See UserArrayPtr of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Matrix3dgeoId - GetType - UserArrayPtr Type-specific versions of the function when using a C compiler Compilation information ",
      "wordCount": 371,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoMatrixGetTransform",
      "version": null,
      "title": "M3dgeoMatrixGetTransform",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoMatrixGetTransform.htm",
      "text": " M3dgeoMatrixGetTransform Synopsis Get the translation, rotation, or scale defined by a given transformation matrix object. Syntax void M3dgeoMatrixGetTransform( MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;InquireType, //in MIL_DOUBLE&nbsp;*Param1Ptr, //out MIL_DOUBLE&nbsp;*Param2Ptr, //out MIL_DOUBLE&nbsp;*Param3Ptr, //out MIL_DOUBLE&nbsp;*Param4Ptr, //out MIL_INT64&nbsp;ControlFlag //in ) Description This function retrieves the translation, rotation, or scale defined by a given transformation matrix object. The three distinct rotations about the axes of the working coordinate system (M_ROTATION_...) are also known as roll, pitch, and yaw. You can determine the required rotation order by checking the convention used by your robot's manufacturer. Note that M_ROTATION_AXIS... and M_ROTATION_QUATERNION do not depend on the manufacturer. Note that M3dgeoMatrixGetTransform() returns angles in degrees. However, unlike most other MIL functions, this function returns angles following the right-hand grip rule around the axis of rotation; if you wrap your right hand around the axis of rotation, pointing your thumb in the positive direction of the axis, your fingers wrap in the direction of rotation. For example, a positive rotation around the Z-axis corresponds to a rotation that turns the positive X-axis toward the positive Y-axis. All coordinates are expressed in world units in the working coordinate system. Parameters Parameters Matrix3dgeoId Specifies the identifier of the transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. This function only supports matrices that can qualify as matrices of any type other than M_AFFINE or M_PROJECTION. A transformation matrix object is supported if passing it in a call to M3dgeoInquire() with the M_TRANSFORMATION_TYPE inquire type returns any value other than M_AFFINE or M_PROJECTION. For specifying the transformation matrix object identifier Value Description MIL transformation matrix object identifier Specifies the identifier of a 3D geometry object. InquireType Specifies the type of transformation to retrieve from the given transformation matrix object. See the Parameter associations section for possible values that can be specified. Param1Ptr Specifies the first address in which to return information about the transformation required. See the Parameter associations section for possible values that can be returned. Param2Ptr Specifies the second address in which to return information about the transformation required. See the Parameter associations section for possible values that can be returned. Param3Ptr Specifies the third address in which to return information about the transformation required. See the Parameter associations section for possible values that can be returned. Param4Ptr Specifies the fourth address in which to return information about the transformation required. If this parameter is not used, it must be set to M_NULL. See the Parameter associations section for possible values that can be returned. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the InquireType parameter and possible values returned to the Param1Ptr, Param2Ptr, Param3Ptr, and Param4Ptr parameters. For specifying the transformation type Any parameters for which a value is not returned must be set to M_NULL. For specifying the transformation type InquireType Description Param1Ptr - Possible values returned Param2Ptr - Possible values returned Param3Ptr - Possible values returned Param4Ptr - Possible values returned M_ROTATION_AXIS_ANGLE Retrieves the axis and angle of rotation. The axis of rotation is defined by a vector. The rotation angle is measured in the counter-clockwise direction around the axis of rotation, as per the right-hand rule. The axis of rotation is always normalized. Param1Ptr Returns the X-component of the vector that defines the axis of rotation. Param2Ptr Returns the Y-component of the vector that defines the axis of rotation. Param3Ptr Returns the Z-component of the vector that defines the axis of rotation. Param4Ptr Returns the angle of the rotation, in degrees, around the axis of rotation. 0 &lt;= Value &lt; 360 Specifies the rotation angle, in degrees. M_ROTATION_AXIS_X Retrieves the normalized vector of the X-axis which results from applying the given transformation matrix to the working coordinate system's X-axis. Param1Ptr Returns the X-component of the vector. Param2Ptr Returns the Y-component of the vector. Param3Ptr Returns the Z-component of the vector. M_ROTATION_AXIS_Y Retrieves the normalized vector of the Y-axis which results from applying the given transformation matrix to the working coordinate system's Y-axis. Param1Ptr Returns the X-component of the vector. Param2Ptr Returns the Y-component of the vector. Param3Ptr Returns the Z-component of the vector. M_ROTATION_AXIS_Z Retrieves the normalized vector of the Z-axis which results from applying the given transformation matrix to the working coordinate system's Z-axis. Param1Ptr Returns the X-component of the vector. Param2Ptr Returns the Y-component of the vector. Param3Ptr Returns the Z-component of the vector. M_ROTATION_QUATERNION Retrieves the components of the rotation quaternion. The quaternion is always normalized. Param1Ptr Returns the scalar component of the quaternion. Param2Ptr Returns the X-component of the quaternion. Param3Ptr Returns the Y-component of the quaternion. Param4Ptr Returns the Z-component of the quaternion. M_ROTATION_XYZ Retrieves the three distinct rotations about the axes of the working coordinate system in the following order: the X-axis, the Y-axis, and the Z-axis rotation. Param1Ptr Returns the X-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the X-axis rotation, in degrees. Param2Ptr Returns the Y-axis rotation. 0.0 &lt;= Value &lt;= 90.0 Specifies the Y-axis rotation, in degrees, when located between the positive Z-axis and the positive X-axis. 270.0 &lt;= Value &lt; 360.0 Specifies the Y-axis rotation, in degrees, when located between the positive Z-axis and the negative X-axis. Param3Ptr Returns the Z-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Z-axis rotation, in degrees. M_ROTATION_XZY Retrieves the three distinct rotations about the axes of the working coordinate system in the following order: the X-axis, the Z-axis, and the Y-axis rotation. Param1Ptr Returns the X-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the X-axis rotation, in degrees. Param2Ptr Returns the Z-axis rotation. 0.0 &lt;= Value &lt;= 90.0 Specifies the Z-axis rotation, in degrees, when located between the positive X-axis and the positive Y-axis. 270.0 &lt;= Value &lt; 360.0 Specifies the Z-axis rotation, in degrees, when located between the positive X-axis and the negative Y-axis. Param3Ptr Returns the Y-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Y-axis rotation, in degrees. M_ROTATION_YXZ Retrieves the three distinct rotations about the axes of the working coordinate system in the following order: the Y-axis, the X-axis, and the Z-axis rotation. Param1Ptr Returns the Y-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Y-axis rotation, in degrees. Param2Ptr Returns the X-axis rotation. 0.0 &lt;= Value &lt;= 90.0 Specifies the X-axis rotation, in degrees, when located between the positive Y-axis and the positive Z-axis. 270.0 &lt;= Value &lt; 360.0 Specifies the X-axis rotation, in degrees, when located between the positive Y-axis and the negative Z-axis. Param3Ptr Returns the Z-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Z-axis rotation, in degrees. M_ROTATION_YZX Retrieves the three distinct rotations about the axes of the working coordinate system in the following order: the Y-axis, the Z-axis, and the X-axis rotation. Param1Ptr Returns the Y-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Y-axis rotation, in degrees. Param2Ptr Returns the Z-axis rotation. 0.0 &lt;= Value &lt;= 90.0 Specifies the Z-axis rotation, in degrees, when located between the positive X-axis and the positive Y-axis. 270.0 &lt;= Value &lt; 360.0 Specifies the Z-axis rotation, in degrees, when located between the positive X-axis and the negative Y-axis. Param3Ptr Returns the X-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the X-axis rotation, in degrees. M_ROTATION_ZXY Retrieves the three distinct rotations about the axes of the working coordinate system in the following order: the Z-axis, the X-axis, and the Y-axis rotation. Param1Ptr Returns the Z-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Z-axis rotation, in degrees. Param2Ptr Returns the X-axis rotation. 0.0 &lt;= Value &lt;= 90.0 Specifies the X-axis rotation, in degrees, when located between the positive Y-axis and the positive Z-axis. 270.0 &lt;= Value &lt; 360.0 Specifies the X-axis rotation, in degrees, when located between the positive Y-axis and the negative Z-axis. Param3Ptr Returns the Y-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Y-axis rotation, in degrees. M_ROTATION_ZYX Retrieves the three distinct rotations about the axes of the working coordinate system in the following order: the Z-axis, the Y-axis, and the X-axis rotation. Param1Ptr Returns the Z-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the Z-axis rotation, in degrees. Param2Ptr Returns the Y-axis rotation. 0.0 &lt;= Value &lt;= 90.0 Specifies the Y-axis rotation, in degrees, when located between the positive Z-axis and the positive X-axis. 270.0 &lt;= Value &lt; 360.0 Specifies the Y-axis rotation, in degrees, when located between the positive Z-axis and the negative X-axis. Param3Ptr Returns the X-axis rotation. 0.0 &lt;= Value &lt; 360.0 Specifies the X-axis rotation, in degrees. M_SCALE Retrieves the scale factor along each axis. Param1Ptr Returns the scaling factor in X. Param2Ptr Returns the scaling factor in Y. Param3Ptr Returns the scaling factor in Z. M_TRANSLATION Retrieves the translation along each of the axes of the working coordinate system. Param1Ptr Returns the displacement along the X-axis of the working coordinate system. Param2Ptr Returns the displacement along the Y-axis of the working coordinate system. Param3Ptr Returns the displacement along the Z-axis of the working coordinate system. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Matrix3dgeoId For specifying the transformation matrix object identifier - InquireType - Param1Ptr - Param2Ptr - Param3Ptr - Param4Ptr - ControlFlag Parameter Associations For specifying the transformation type Compilation information ",
      "wordCount": 1535,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoMatrixPut",
      "version": null,
      "title": "M3dgeoMatrixPut",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoMatrixPut.htm",
      "text": " M3dgeoMatrixPut Synopsis Put data from a user-supplied array into a transformation matrix object. Syntax void M3dgeoMatrixPut( MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;PutType, //in const MIL_DOUBLE&nbsp;*UserArrayPtr //in ) Description This function copies an array of values into a specified transformation matrix object. Note that presented above is an example prototype of this function. You can call M3dgeoMatrixPut() with the same prototype as any of the type-specific functions below, without using the function's type-specific name; that is, use M3dgeoMatrixPut() and not, for example, M3dgeoMatrixPutFloat(). MIL automatically casts the data into the appropriate type. This is true except when using a C compiler. When using a C compiler, you must always call this function with its type-specific name (you cannot use the standard name of this function). Parameters Parameters Matrix3dgeoId Specifies the identifier of the transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. PutType Reserved for future expansion and must be set to M_DEFAULT. UserArrayPtr Accepts the address of one of the following: array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] (and a maximum array rank for C# of 1) Required array size:(16) Specifies the address of the user array from which to copy the data into the transformation matrix object. Ensure that user array is large enough to contain the data to be copied to the destination object. Transformation matrices are 4x4 matrices, so the array must be of size 16. Type-specific versions of the function when using a C compiler void M3dgeoMatrixPutDouble (MIL_ID Matrix3dgeoId, MIL_INT64 PutType, const MIL_DOUBLE *UserArrayPtr) Details Parameters Matrix3dgeoId See Matrix3dgeoId of the main function for a description. PutType See PutType of the main function for a description. UserArrayPtr See UserArrayPtr of the main function for a description. void M3dgeoMatrixPutFloat (MIL_ID Matrix3dgeoId, MIL_INT64 PutType, const MIL_FLOAT *UserArrayPtr) Details Parameters Matrix3dgeoId See Matrix3dgeoId of the main function for a description. PutType See PutType of the main function for a description. UserArrayPtr See UserArrayPtr of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Matrix3dgeoId - PutType - UserArrayPtr Type-specific versions of the function when using a C compiler Compilation information ",
      "wordCount": 368,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoMatrixSetTransform",
      "version": null,
      "title": "M3dgeoMatrixSetTransform",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoMatrixSetTransform.htm",
      "text": " M3dgeoMatrixSetTransform Synopsis Set the transformation values of a transformation matrix object. Syntax void M3dgeoMatrixSetTransform( MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;TransformType, //in MIL_DOUBLE&nbsp;Param1, //in MIL_DOUBLE&nbsp;Param2, //in MIL_DOUBLE&nbsp;Param3, //in MIL_DOUBLE&nbsp;Param4, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function assigns a transformation to a transformation matrix object or composes a transformation with a transformation matrix object. The transformation can be defined as a translation, rotation, scale, or the result of a matrix composition. The three distinct rotations about the axes of the working coordinate system (M_ROTATION_...) are also known as roll, pitch, and yaw. You can determine the required rotation order by checking the convention used by your robot's manufacturer. Note that M_ROTATION_AXIS... and M_ROTATION_QUATERNION do not depend on the manufacturer. Note that all angles should be given in degrees. However, unlike most other MIL functions, angles are interpreted using the right-hand grip rule around the axis of rotation; if you wrap your right hand around the axis of rotation, pointing your thumb in the positive direction of the axis, your fingers wrap in the direction of rotation. For example, a positive rotation around the Z-axis corresponds to a rotation that turns the positive X-axis toward the positive Y-axis. All coordinates are expressed in world units in the working coordinate system. Parameters Parameters Matrix3dgeoId Specifies the identifier of the transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. TransformType Specifies the type of transformation to apply. See the Parameter associations section for possible values that can be specified. Param1 Specifies the first parameter used to define the transformation matrix. See the Parameter associations section for possible values that can be specified. Param2 Specifies the second parameter used to define the transformation matrix. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param3 Specifies the third parameter used to define the transformation matrix. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param4 Specifies the fourth parameter used to define the transformation matrix. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ControlFlag Specifies how to apply the transformation. For specifying how to apply the transformation Value Description M_DEFAULT Same as M_ASSIGN. M_ASSIGN Specifies to assign the specified transformation to the given transformation matrix object. M_COMPOSE_WITH_CURRENT Specifies to compose the specified transformation with the given matrix. The matrix composition follows the equation BA = C, where A is the transformation matrix specified by Matrix3dgeoId, B is the transformation matrix defined by the parameter associations, and C is the resulting transformation matrix. The values of the resulting transformation matrix are written to the transformation matrix object specified by Matrix3dgeoId. Parameter associations The table below lists possible values for the TransformType, Param1, Param2, Param3, and Param4 parameters. For specifying the transformation type Set unused parameters to M_DEFAULT. For specifying the transformation type TransformType Description Param1 Param2 Param3 Param4 M_COMPOSE_TWO_MATRICES Specifies the transformation resulting from the composition of two matrices. The matrix composition follows the equation AB = C, where A is the transformation matrix specified by Param1, B is the transformation matrix specified by Param2, and C is the resulting transformation matrix. Note that transformation matrix B is applied before transformation matrix A. Therefore, transformation matrix C describes the transformation obtained by applying transformation matrix B followed by transformation matrix A. Param1 Specifies the first source matrix (that is, source matrix A). M_IDENTITY_MATRIX Specifies the identity matrix. MIL transformation matrix object identifier Specifies the identifier of a transformation matrix object. Param2 Specifies the second source matrix (that is, source matrix B). M_IDENTITY_MATRIX Specifies the identity matrix. MIL transformation matrix object identifier Specifies the identifier of a transformation matrix object. M_FIXTURE_TO_GEOMETRY Specifies a transformation that can move the working coordinate system to a 3D geometry object. Param1 Specifies a 3D geometry object. MIL 3D box geometry object identifier Specifies a 3D box geometry object identifier previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a box. The result is the transformation that can move the working coordinate system such that its origin moves to the box's center, and the box's orientation is applied. MIL 3D cylinder geometry object identifier Specifies a 3D cylinder geometry object identifier previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a cylinder. The result is the transformation that can move the working coordinate system such that its origin moves to the cylinder's start point, and the cylinder's central axis becomes the positive Z-axis. The rotation of the X- and Y-axis is determined by the minimal rotation that must be applied to align the positive Z-axis with the cylinder's central axis. MIL 3D plane geometry object identifier Specifies a 3D plane geometry object identifier previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a plane. The result is the transformation that can move the working coordinate system such that its XY (Z=0) plane is moved to the specified plane, and the plane's normal becomes the positive Z-axis. The working coordinate system's origin is moved to the closest point on the plane (the projection). MIL 3D point geometry object identifier Specifies a 3D point geometry object identifier previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a point. The result is the transformation that can move the working coordinate system such that its origin is moved to the point. MIL 3D sphere geometry object identifier Specifies a 3D sphere geometry object identifier previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a sphere. The result is the transformation that can move the working coordinate system such that its origin is moved to the sphere's center. No rotation is applied. M_FIXTURE_TO_PLANE Specifies a transformation that can move the XY (Z=0) plane of the working coordinate system to a plane specified by Param1. By default, the origin is moved using the same transformation. You can optionally specify a point on the plane where the origin should be moved, using Param2, Param3, and Param4. If the point is not on the plane, or if you set Param2, Param3, and Param4 to M_DEFAULT, the closest point on the plane (the projection) is chosen instead. Param1 Specifies a 3D geometry plane. M_XY_PLANE Specifies the XY (Z=0) plane. The result is the transformation that can move the origin of the working coordinate system to a point on its XY (Z=0) plane, specified by Param2, Param3, and Param4. If these parameters are set to M_DEFAULT, the result is the identity transformation. MIL 3D geometry object identifier Specifies a 3D plane geometry object identifier previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a plane. Param2 Specifies the X-coordinate of a point on the plane where the origin will be moved. Param3 Specifies the Y-coordinate of a point on the plane where the origin will be moved. Param4 Specifies the Z-coordinate of a point on the plane where the origin will be moved. M_IDENTITY Specifies the identity transformation. This resets the matrix to the identity matrix, removing all transformations from the transformation matrix object, when ControlFlag is M_ASSIGN. M_INVERSE Specifies the inverse transformation. Param1 Specifies the source matrix. MIL transformation matrix object identifier Specifies the identifier of a transformation matrix object previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_ROTATION_AXIS_ANGLE Specifies a rotation described by an axis and angle of rotation. The axis of rotation is defined by a vector. The angle of rotation is measured in the counter-clockwise direction around the axis of rotation. Param1 Specifies the X-component of the vector that defines the axis of rotation. Param2 Specifies the Y-component of the vector that defines the axis of rotation. Param3 Specifies the Z-component of the vector that defines the axis of rotation. Param4 Specifies the angle of the rotation, in degrees, around the axis of rotation. M_ROTATION_AXIS_X Specifies the minimal rotation that can align the working coordinate system's X-axis with the specified vector. Param1 Specifies the X-component of the vector. Param2 Specifies the Y-component of the vector. Param3 Specifies the Z-component of the vector. M_ROTATION_AXIS_Y Specifies the minimal rotation that can align the working coordinate system's Y-axis with the specified vector. Param1 Specifies the X-component of the vector. Param2 Specifies the Y-component of the vector. Param3 Specifies the Z-component of the vector. M_ROTATION_AXIS_Z Specifies the minimal rotation that can align the working coordinate system's Z-axis with the specified vector. Param1 Specifies the X-component of the vector. Param2 Specifies the Y-component of the vector. Param3 Specifies the Z-component of the vector. M_ROTATION_QUATERNION Specifies a rotation operation that is described by a rotation quaternion. Param1 Specifies the scalar component of the quaternion. Param2 Specifies the X-component of the quaternion. Param3 Specifies the Y-component of the quaternion. Param4 Specifies the Z-component of the quaternion. M_ROTATION_X Specifies a rotation operation around the X-axis. Param1 Specifies the X-axis rotation, in degrees. M_ROTATION_XYZ Specifies a rotation that is described by three distinct rotations about the axes of the working coordinate system in the following order: a rotation about the X-axis, a rotation about the Y-axis, and a rotation about the Z-axis rotation. Param1 Specifies the X-axis rotation, in degrees. Param2 Specifies the Y-axis rotation, in degrees. Param3 Specifies the Z-axis rotation, in degrees. M_ROTATION_XZY Specifies a rotation that is described by three distinct rotations about the axes of the working coordinate system in the following order: a rotation about the X-axis, a rotation about the Z-axis, and a rotation about the Y-axis rotation. Param1 Specifies the X-axis rotation, in degrees. Param2 Specifies the Z-axis rotation, in degrees. Param3 Specifies the Y-axis rotation, in degrees. M_ROTATION_Y Specifies a rotation operation around the Y-axis. Param1 Specifies the Y-axis rotation, in degrees. M_ROTATION_YXZ Specifies a rotation that is described by three distinct rotations about the axes of the working coordinate system in the following order: a rotation about the Y-axis, a rotation about the X-axis, and a rotation about the Z-axis rotation. Param1 Specifies the Y-axis rotation, in degrees. Param2 Specifies the X-axis rotation, in degrees. Param3 Specifies the Z-axis rotation, in degrees. M_ROTATION_YZX Specifies a rotation that is described by three distinct rotations about the axes of the working coordinate system in the following order: a rotation about the Y-axis, a rotation about the Z-axis, and a rotation about the X-axis rotation. Param1 Specifies the Y-axis rotation, in degrees. Param2 Specifies the Z-axis rotation, in degrees. Param3 Specifies the X-axis rotation, in degrees. M_ROTATION_Z Specifies a rotation operation around the Z-axis. Param1 Specifies the Z-axis rotation, in degrees. M_ROTATION_ZXY Specifies a rotation that is described by three distinct rotations about the axes of the working coordinate system in the following order: a rotation about the Z-axis, a rotation about the X-axis, and a rotation about the Y-axis rotation. Param1 Specifies the Z-axis rotation, in degrees. Param2 Specifies the X-axis rotation, in degrees. Param3 Specifies the Y-axis rotation, in degrees. M_ROTATION_ZYX Specifies a rotation that is described by three distinct rotations about the axes of the working coordinate system in the following order: a rotation about the Z-axis, a rotation about the Y-axis, and a rotation about the X-axis rotation. Param1 Specifies the Z-axis rotation, in degrees. Param2 Specifies the Y-axis rotation, in degrees. Param3 Specifies the X-axis rotation, in degrees. M_SCALE Specifies a scaling operation. Param1 Specifies the scaling factor in X. Param2 Specifies the scaling factor in Y. Param3 Specifies the scaling factor in Z. M_TRANSLATION Specifies a translation along each of the axes of the working coordinate system. Param1 Specifies the displacement along the X-axis. Param2 Specifies the displacement along the Y-axis. Param3 Specifies the displacement along the Z-axis. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Matrix3dgeoId - TransformType - Param1 - Param2 - Param3 - Param4 - ControlFlag For specifying how to apply the transformation Parameter Associations For specifying the transformation type Compilation information ",
      "wordCount": 1975,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoMatrixSetWithAxes",
      "version": null,
      "title": "M3dgeoMatrixSetWithAxes",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoMatrixSetWithAxes.htm",
      "text": " M3dgeoMatrixSetWithAxes Synopsis Defines a transformation matrix that can transform points from the working coordinate system into the specified coordinate system, or vice versa. Syntax void M3dgeoMatrixSetWithAxes( MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT64&nbsp;Mode, //in MIL_DOUBLE&nbsp;OriginX, //in MIL_DOUBLE&nbsp;OriginY, //in MIL_DOUBLE&nbsp;OriginZ, //in MIL_DOUBLE&nbsp;Axis1VectorX, //in MIL_DOUBLE&nbsp;Axis1VectorY, //in MIL_DOUBLE&nbsp;Axis1VectorZ, //in MIL_DOUBLE&nbsp;Axis2VectorX, //in MIL_DOUBLE&nbsp;Axis2VectorY, //in MIL_DOUBLE&nbsp;Axis2VectorZ, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines a transformation matrix that can transform points from the working coordinate system into a new specified coordinate system, or vice versa. The new coordinate system is described by its origin and its orientation with respect to the working coordinate system. The Mode parameter specifies which two axes are used to define the new coordinate system. The first axis is defined using Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The second axis is defined using Axis2VectorX, Axis2VectorY, and Axis2VectorZ. The components of the vector aligned with the second axis can be approximate, since this axis will be internally orthogonalized. However, the second axis must not be parallel to the first axis. The third axis is internally deduced by computing the vector that is orthogonal to the first two axes and respects the right-hand rule. By default, this function returns the transformation matrix that transforms points from the working coordinate system into the new coordinate system. To get the transformation matrix that transforms the points from the new coordinate system into the working coordinate system, use M_COORDINATE_SYSTEM_TRANSFORMATION. Note that the two specified axes must have a magnitude that is greater than 0. Parameters Parameters Matrix3dgeoId Specifies the identifier of the transformation matrix object, previously allocated on the required system using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. Mode Specifies which two axes to use to define the new coordinate system. The first letter determines the first axis, and the second letter determines the second axis. Note that because the second specified axis is internally orthogonalized, the order in which the axes are specified is important. The second specified axis will be moved if it is not already orthogonal to the first specified axis. For specifying the two axes to use Value Description M_XY_AXES Specifies the X-axis, and then the Y-axis. The X-axis is specified by Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The Y-axis is approximately specified by Axis2VectorX, Axis2VectorY, and Axis2VectorZ. M_XZ_AXES Specifies the X-axis, and then the Z-axis. The X-axis is specified by Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The Z-axis is approximately specified by Axis2VectorX, Axis2VectorY, and Axis2VectorZ. M_YX_AXES Specifies the Y-axis, and then the X-axis. The Y-axis is specified by Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The X-axis is approximately specified by Axis2VectorX, Axis2VectorY, and Axis2VectorZ. M_YZ_AXES Specifies the Y-axis, and then the Z-axis. The Y-axis is specified by Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The Z-axis is approximately specified by Axis2VectorX, Axis2VectorY, and Axis2VectorZ. M_ZX_AXES Specifies the Z-axis, and then the X-axis. The Z-axis is specified by Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The X-axis is approximately specified by Axis2VectorX, Axis2VectorY, and Axis2VectorZ. M_ZY_AXES Specifies the Z-axis, and then the Y-axis. The Z-axis is specified by Axis1VectorX, Axis1VectorY, and Axis1VectorZ. The Y-axis is approximately specified by Axis2VectorX, Axis2VectorY, and Axis2VectorZ. Combination values for the values listed in For specifying the two axes to use. You can add one of the following values to the above-mentioned values to specify the direction of the transformation between coordinate systems. For specifying the direction of the transformation between coordinate systems Combination value Description M_DEFAULT Same as M_POSITION_TRANSFORMATION. M_COORDINATE_SYSTEM_TRANSFORMATION Specifies to return the transformation matrix that transforms points such that their coordinates are expressed relative to the specified position and orientation. When you apply the resulting matrix, point coordinates are passively transformed, and will be expressed relative to the newly specified origin and axes. This is a backward mapping that you can use to fixture points to a new coordinate system. In the example below, the point P (3, 0, 2) is expressed as P' (2, 0, 1) in the new coordinate system. M_POSITION_TRANSFORMATION Specifies to return the transformation matrix that transforms points such that they are offset by the specified position and orientation. When you apply the resulting matrix, point coordinates are actively transformed, and will be expressed relative to the original origin and axes. This is a forward mapping that you can use to move points. In the example below, the point P (3, 0, 2) is moved to P' (4, 0, 3). Note that P's offset from the original coordinate system is equivalent to P''s offset from the new coordinate system. OriginX Specifies the X-coordinate of the new coordinate system's origin, expressed in the working coordinate system. OriginY Specifies the Y-coordinate of the new coordinate system's origin, expressed in the working coordinate system. OriginZ Specifies the Z-coordinate of the new coordinate system's origin, expressed in the working coordinate system. Axis1VectorX Specifies the X-component of the vector aligned with the new coordinate system's first axis, expressed in the working coordinate system. Axis1VectorY Specifies the Y-component of the vector aligned with the new coordinate system's first axis, expressed in the working coordinate system. Axis1VectorZ Specifies the Z-component of the vector aligned with the new coordinate system's first axis, expressed in the working coordinate system. Axis2VectorX Specifies the approximate X-component of the vector aligned with the new coordinate system's second axis, expressed in the working coordinate system. Axis2VectorY Specifies the approximate Y-component of the vector aligned with the new coordinate system's second axis, expressed in the working coordinate system. Axis2VectorZ Specifies the approximate Z-component of the vector aligned with the new coordinate system's second axis, expressed in the working coordinate system. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Matrix3dgeoId - Mode For specifying the two axes to use + For specifying the direction of the transformation between coordinate systems - OriginX - OriginY - OriginZ - Axis1VectorX - Axis1VectorY - Axis1VectorZ - Axis2VectorX - Axis2VectorY - Axis2VectorZ - ControlFlag Compilation information ",
      "wordCount": 979,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoPlane",
      "version": null,
      "title": "M3dgeoPlane",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoPlane.htm",
      "text": " M3dgeoPlane Synopsis Define a 3D plane geometry object. Syntax void M3dgeoPlane( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_INT64&nbsp;CreationMode, //in MIL_DOUBLE&nbsp;X1, //in MIL_DOUBLE&nbsp;Y1, //in MIL_DOUBLE&nbsp;Z1, //in MIL_DOUBLE&nbsp;X2OrD, //in MIL_DOUBLE&nbsp;Y2, //in MIL_DOUBLE&nbsp;Z2, //in MIL_DOUBLE&nbsp;X3, //in MIL_DOUBLE&nbsp;Y3, //in MIL_DOUBLE&nbsp;Z3, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines a 3D plane geometry object. You can translate, rotate, or transform the resulting plane, using the 3D image processing module. You can use the resulting plane to, for example, crop a point cloud or perform an arithmetic operation on a depth map using the 3D image processing module, or calculate its distance from each point in a point cloud using the 3D metrology module. If you want to define a plane geometry object from results obtained in a different module, you can use the copy function of that module. All coordinates are expressed in world units in the working coordinate system. Note that if Geometry3dgeoId specifies a previously-defined plane, and CreationMode is set to M_POINT_AND_NORMAL, you can leave the components of the plane's normal vector unchanged, even if the plane was modified using the 3D image processing module. Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object, previously allocated on the required system using M3dgeoAlloc() with M_GEOMETRY. CreationMode Specifies how the plane is defined. See the Parameter associations section for possible values that can be specified. X1 Specifies the first parameter used to define the plane. See the Parameter associations section for possible values that can be specified. Y1 Specifies the second parameter used to define the plane. See the Parameter associations section for possible values that can be specified. Z1 Specifies the third parameter used to define the plane. See the Parameter associations section for possible values that can be specified. X2OrD Specifies the fourth parameter used to define the plane. See the Parameter associations section for possible values that can be specified. Y2 Specifies the fifth parameter used to define the plane. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Z2 Specifies the sixth parameter used to define the plane. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. X3 Specifies the seventh parameter used to define the plane. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Y3 Specifies the eighth parameter used to define the plane. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Z3 Specifies the ninth parameter used to define the plane. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Parameter associations The table below lists possible values for the CreationMode, X1, Y1, Z1, X2OrD, Y2, Z2, X3, Y3, and Z3 parameters. For specifying the plane Set unused parameters to M_DEFAULT. For specifying the plane CreationMode Description X1 Y1 Z1 X2OrD Y2 Z2 X3 Y3 Z3 M_COEFFICIENTS Specifies to define the plane using coefficients from the plane equation (Ax + By + Cz + D = 0). Coefficients A, B, and C cannot all be zero. Note that the coefficients will be internally normalized such that A^2 + B^2 + C^2 = 1. X1 Specifies coefficient A of the plane equation. Y1 Specifies coefficient B of the plane equation. Z1 Specifies coefficient C of the plane equation. X2OrD Specifies coefficient D of the plane equation. M_POINT_AND_NORMAL Specifies to define the plane using a point on the plane and the plane's normal. The plane's normal must have a non-zero magnitude. Note that the plane's normal will be internally converted to a unit vector. Note that if Geometry3dgeoId specifies a previously-defined plane, you can leave the components of its normal vector unchanged, even if that attribute was set using a different creation mode or was modified using the 3D image processing module. To do so, set the corresponding parameter to M_UNCHANGED. X1 Specifies the X-coordinate of the point on the plane. Y1 Specifies the Y-coordinate of the point on the plane. Z1 Specifies the Z-coordinate of the point on the plane. X2OrD Specifies the X-component of the normal. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-component of the normal. Y2 Specifies the Y-component of the normal. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-component of the normal. Z2 Specifies the Z-component of the normal. M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-component of the normal. M_POINT_AND_TWO_VECTORS Specifies to define the plane using a point on the plane and two vectors parallel to the plane. The two vectors must have non-zero magnitudes and cannot be co-linear. X1 Specifies the X-coordinate of the point on the plane. Y1 Specifies the Y-coordinate of the point on the plane. Z1 Specifies the Z-coordinate of the point on the plane. X2OrD Specifies the X-component of the first vector. Y2 Specifies the Y-component of the first vector. Z2 Specifies the Z-component of the first vector. X3 Specifies the X-component of the second vector. Y3 Specifies the Y-component of the second vector. Z3 Specifies the Z-component of the second vector. M_THREE_POINTS Specifies to define the plane using three points on the plane. X1 Specifies the X-coordinate of the first point on the plane. Y1 Specifies the Y-coordinate of the first point on the plane. Z1 Specifies the Z-coordinate of the first point on the plane. X2OrD Specifies the X-coordinate of the second point on the plane. Y2 Specifies the Y-coordinate of the second point on the plane. Z2 Specifies the Z-coordinate of the second point on the plane. X3 Specifies the X-coordinate of the third point on the plane. Y3 Specifies the Y-coordinate of the third point on the plane. Z3 Specifies the Z-coordinate of the third point on the plane. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - CreationMode - X1 - Y1 - Z1 - X2OrD - Y2 - Z2 - X3 - Y3 - Z3 - ControlFlag Parameter Associations For specifying the plane Compilation information ",
      "wordCount": 1039,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoPoint",
      "version": null,
      "title": "M3dgeoPoint",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoPoint.htm",
      "text": " M3dgeoPoint Synopsis Define an arbitrary 3D point geometry object. Syntax void M3dgeoPoint( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_DOUBLE&nbsp;PositionX, //in MIL_DOUBLE&nbsp;PositionY, //in MIL_DOUBLE&nbsp;PositionZ, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines an arbitrary 3D point geometry object. All coordinates are expressed in world units in the working coordinate system. Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object, previously allocated on the required system using M3dgeoAlloc() with M_GEOMETRY. PositionX Specifies the X-coordinate of the point. For specifying the X-coordinate of the point Value Description M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-coordinate of the point. PositionY Specifies the Y-coordinate of the point. For specifying the Y-coordinate of the point Value Description M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-coordinate of the point. PositionZ Specifies the Z-coordinate of the point. For specifying the Z-coordinate of the point Value Description M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-coordinate of the point. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - PositionX For specifying the X-coordinate of the point - PositionY For specifying the Y-coordinate of the point - PositionZ For specifying the Z-coordinate of the point - ControlFlag Compilation information ",
      "wordCount": 219,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoRestore",
      "version": null,
      "title": "M3dgeoRestore",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoRestore.htm",
      "text": " M3dgeoRestore Synopsis Restore a 3D geometry object or transformation matrix object from disk. Syntax MIL_ID M3dgeoRestore( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*GeometryOrMatrix3dgeoIdPtr //out ) Description This function restores a 3D geometry object or transformation matrix object that was previously saved to a file, using M3dgeoSave() or M3dgeoStream(). This function restores all of the 3D geometry object 's or transformation matrix object's settings that were in effect when it was saved. When the restored 3D geometry object or transformation matrix object is no longer required, release it using M3dgeoFree() unless M_UNIQUE_ID was specified during restoration; if M_UNIQUE_ID was specified, the smart identifier manages the 3D geometry object or transformation matrix object's lifetime and you must not manually free it. Parameters Parameters FileName Specifies the name and path of the file from which to restore the 3D geometry object or transformation matrix object. The function handles (internally) the opening and closing of the file. For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Open dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). Typically, registration context files have an M3DGEO extension. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). SysId Specifies the system on which to restore the 3D geometry object or transformation matrix object. This parameter should be set to one of the following values: For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable in which to write the 3D geometry object or transformation matrix object identifier or specifies the data type that the function should use to return the 3D geometry object or transformation matrix object identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D geometry object or transformation matrix object ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D geometry object or transformation matrix object ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DGEO_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D geometry object or transformation matrix object (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the 3D geometry object identifier Specifies the address of a MIL_ID in which to write the identifier of the restored 3D geometry object identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the transformation matrix object identifier Specifies the address of a MIL_ID in which to write the identifier of the restored transformation matrix object identifier. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D geometry object or transformation matrix object identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DGEO_ID). If restoration fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - FileName For specifying the file name and path - SysId For specifying the system identifier - ControlFlag - GeometryOrMatrix3dgeoIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 707,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoSave",
      "version": null,
      "title": "M3dgeoSave",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoSave.htm",
      "text": " M3dgeoSave Synopsis Save a 3D geometry object or transformation matrix object to a file. Syntax void M3dgeoSave( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;GeometryOrMatrix3dgeoId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function saves all the information about a previously allocated 3D geometry object or transformation matrix object to disk. To load a saved context, use either M3dgeoRestore() or M3dgeoStream(). Parameters Parameters FileName Specifies the name and path of the file in which to save the 3D geometry object or transformation matrix object; it is recommended that you use the M3DGEO file extension for easier use with other Matrox Imaging software products. The function internally handles the opening and closing of this file. If this file already exists, it will be overwritten. This parameter can be set to one of the following values: For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Save As dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). The recommended extension is M3DGEO. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). GeometryOrMatrix3dgeoId Specifies the identifier of the 3D geometry object or transformation matrix object to save. These must have been successfully allocated with M3dgeoAlloc() prior to calling this function. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - FileName For specifying the file name and path - GeometryOrMatrix3dgeoId - ControlFlag Compilation information ",
      "wordCount": 292,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoSphere",
      "version": null,
      "title": "M3dgeoSphere",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoSphere.htm",
      "text": " M3dgeoSphere Synopsis Define a 3D sphere geometry object. Syntax void M3dgeoSphere( MIL_ID&nbsp;Geometry3dgeoId, //in MIL_DOUBLE&nbsp;CenterX, //in MIL_DOUBLE&nbsp;CenterY, //in MIL_DOUBLE&nbsp;CenterZ, //in MIL_DOUBLE&nbsp;Radius, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function defines a 3D sphere geometry object, using its center coordinates and radius. You can translate, scale, or transform the resulting sphere, using the 3D image processing module. You can use the resulting sphere to, for example, crop a point cloud or perform an arithmetic operation on a depth map using the 3D image processing module, or calculate its distance from each point in a point cloud using the 3D metrology module. If you want to define a sphere geometry object from results obtained in a different module, you can use the copy function of that module. All coordinates are expressed in world units in the working coordinate system. Note that if Geometry3dgeoId specifies a previously-defined sphere, you can leave some of its attributes unchanged, even if that attribute was modified using the 3D image processing module. To do so, set the corresponding parameter to M_UNCHANGED. Parameters Parameters Geometry3dgeoId Specifies the identifier of the 3D geometry object, previously allocated on the required system using M3dgeoAlloc() with M_GEOMETRY. CenterX Specifies the X-coordinate of the sphere's center. For specifying the X-coordinate of the sphere's center Value Description M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the X-coordinate of the sphere's center. CenterY Specifies the Y-coordinate of the sphere's center. For specifying the Y-coordinate of the sphere's center Value Description M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Y-coordinate of the sphere's center. CenterZ Specifies the Z-coordinate of the sphere's center. For specifying the Z-coordinate of the sphere's center Value Description M_UNCHANGED Specifies to use the previously-defined value. Value Specifies the Z-coordinate of the sphere's center. Radius Specifies the sphere's radius. This parameter cannot be set to a negative value. For specifying the sphere's radius Value Description M_UNCHANGED Specifies to use the previously-defined value. Value &gt;= 0.0 Specifies the sphere's radius. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - Geometry3dgeoId - CenterX For specifying the X-coordinate of the sphere's center - CenterY For specifying the Y-coordinate of the sphere's center - CenterZ For specifying the Z-coordinate of the sphere's center - Radius For specifying the sphere's radius - ControlFlag Compilation information ",
      "wordCount": 400,
      "subEntries": []
    },
    {
      "id": "Reference_3dgeo_M3dgeoStream",
      "version": null,
      "title": "M3dgeoStream",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dgeo\\M3dgeoStream.htm",
      "text": " M3dgeoStream Synopsis Load, restore, or save a 3D geometry object or transformation matrix object from/to a file or memory stream. Syntax void M3dgeoStream( MIL_TEXT_PTR&nbsp;MemPtrOrFileName, //in-out MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;StreamType, //in MIL_DOUBLE&nbsp;Version, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*GeometryOrMatrix3dgeoIdPtr, //in-out MIL_INT&nbsp;*SizeByteVarPtr //out ) Description This function can load, restore, or save a 3D geometry object or transformation matrix object from/to a file or memory stream. To inquire the number of bytes necessary to save a 3D geometry object or transformation matrix object to a memory stream, you should first call this function (M3dgeoStream()) with M_INQUIRE_SIZE_BYTE. The content saved to memory stream is equivalent to the content saved to file. This function is equivalent to a file saved using M3dgeoSave(). You can use this and other MIL stream functions, for example, to save all required MIL objects, as well as any other custom data, for your application to a memory stream. Once in a memory stream, you can write the stream to a single file or transfer it over a network. You are responsible for concatenating the streams and for saving the stream to file. Parameters Parameters MemPtrOrFileName Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_TEXT_PTR [optionally, in C++: a reference to a MIL_STRING] Optionally, in C++: a reference to a std::vector of type MIL_UINT8 Specifies the file or memory stream. See the Parameter associations section for possible values that can be returned/specified. SysId Specifies the system on which to restore the 3D geometry object or transformation matrix object. See the Parameter associations section for possible values that can be specified. Operation Specifies the operation to perform. See the Parameter associations section for possible values that can be specified. StreamType Specifies the type of stream in which to store/from which to restore the 3D geometry object or transformation matrix object. This parameter must be set to one of the following values: For specifying the type of stream Value Description M_FILE Specifies a file stream. M_MEMORY Specifies a memory stream. You are responsible for allocating a block of memory for the stream. Version Specifies the MIL version of the 3D geometry object or transformation matrix object. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable in which to write or from which to read the identifier of the 3D geometry object or transformation matrix object. If the M_RESTORE operation is not successful, M_NULL is returned. See the Parameter associations section for possible values that can be returned/specified. SizeByteVarPtr Specifies the address of the variable in which to write the size of the 3D geometry object or transformation matrix object, in bytes. If the size is not required, you can set this parameter to M_NULL. Note that the size of the 3D geometry object or transformation matrix object will vary depending on the MIL version specified. Parameter associations The table below lists possible values for the MemPtrOrFileName, SysId, Operation, Version, and GeometryOrMatrix3dgeoIdPtr parameters. For performing the stream operation. For performing the stream operation. Operation Description MemPtrOrFileName - Possible values passed or returned SysId Version GeometryOrMatrix3dgeoIdPtr - Possible values passed or returned M_INQUIRE_SIZE_BYTE Inquires the number of bytes required to save a 3D geometry object or transformation matrix object to memory stream. This operation is not supported when the StreamType parameter is set to M_FILE. MemPtrOrFileName This parameter must be set to M_NULL. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D geometry object or transformation matrix object must be compatible when saved. The size of a 3D geometry object or transformation matrix object might differ from one MIL version to another. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP4 Specifies the version as being MIL 10.0 Service Pack 4. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable containing the identifier of the 3D geometry object or transformation matrix object. M_LOAD Loads the content of a specified file or memory stream into a previously allocated 3D geometry object or transformation matrix object. MemPtrOrFileName Specifies the file or memory stream from which to load the 3D geometry object or transformation matrix object. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D geometry objects or transformation matrix objects typically have an M3DGEO file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version This parameter must be set to M_DEFAULT. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable containing the identifier of the 3D geometry object or transformation matrix object. All previous settings are overwritten with those of the loaded 3D geometry object or transformation matrix object, or are set to the default value if the settings didn't exist in the version of MIL from which the 3D geometry object or transformation matrix object is being loaded. M_RESTORE Restores a 3D geometry object or transformation matrix object from a file or memory stream and assigns it a MIL identifier. MemPtrOrFileName Specifies the file or memory stream from which to restore the 3D geometry object or transformation matrix object. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D geometry objects or transformation matrix objects typically have an M3DGEO file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId Specifies the system on which to allocate the 3D geometry object or transformation matrix object. M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). Version This parameter must be set to M_DEFAULT. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable in which to write the identifier of the 3D geometry object or transformation matrix object. If the operation is not successful, M_NULL is returned. M_SAVE Saves a 3D geometry object or transformation matrix object to a specified file or memory stream. MemPtrOrFileName Specifies the file or memory stream. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. For easier use with other Matrox Imaging software products, when saving a 3D geometry object or transformation matrix object to a file, use the M3DGEO file extension. The function handles (internally) the opening and closing of the file. If the file already exists, it will be overwritten. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which to write, and the block of memory must be large enough to stream the entire object. To determine the required size, call this function with M_INQUIRE_SIZE_BYTE. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D geometry object or transformation matrix object must be compatible when saved. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP4 Specifies the version as being MIL 10.0 Service Pack 4. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. GeometryOrMatrix3dgeoIdPtr Specifies the address of the variable containing the identifier of the 3D geometry object or transformation matrix object to save. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Compilation information Header Include mil.h. Library Use mil.lib; mil3d.lib. DLL Requires mil.dll; mil3d.dll. Syntax Description Parameters - MemPtrOrFileName - SysId - Operation - StreamType For specifying the type of stream - Version - ControlFlag - GeometryOrMatrix3dgeoIdPtr - SizeByteVarPtr Parameter Associations For performing the stream operation. Compilation information ",
      "wordCount": 1687,
      "subEntries": []
    }
  ]
}]