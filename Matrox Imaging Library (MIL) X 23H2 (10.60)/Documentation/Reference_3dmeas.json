[{
  "id": "Reference_3dmeas",
  "version": "2024020714",
  "title": "3dmeas",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\3dmeas\\ModuleInformation.htm",
  "text": " M3dmeas functions Synopsis The functions prefixed with M3dmeas make up the MIL 3D Measurement module. Functions M3dmeasAlloc M3dmeasAllocResult M3dmeasControl M3dmeasControlDraw M3dmeasCopy M3dmeasCopyResult M3dmeasDefine M3dmeasDraw M3dmeasDraw3d M3dmeasFindMarker M3dmeasFit M3dmeasFree M3dmeasGetResult M3dmeasInquire M3dmeasInquireDraw M3dmeasRestore M3dmeasSave M3dmeasStream ",
  "wordCount": 36,
  "subEntries": [
    {
      "id": "Reference_3dmeas_M3dmeasAlloc",
      "version": null,
      "title": "M3dmeasAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasAlloc.htm",
      "text": " M3dmeasAlloc Synopsis Allocate a 3D measurement context. Syntax MIL_ID M3dmeasAlloc( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ContextType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dmeasIdPtr //out ) Description This function allocates a 3D measurement context on the specified system. A 3D measurement context contains information needed to perform an M3dmeasFindMarker() or M3dmeasFit() operation, which allow you to find markers in a specified depth map or fit a geometry to found markers, respectively. Markers denote the location of edge transitions along a profile; the edge transition can go from a lower Z-value to a higher Z-value (or vice versa). You can also use M3dmeasAlloc() to allocate a draw 3D measurement context for drawing results using M3dmeasDraw3d(). You can find markers in a profile taken along a specified path, or you can find markers in profiles taken at regular intervals perpendicular to boundaries of a specified template. Finding markers along a path is useful when you want to find an object but you don't know its exact location. In this case, you can allocate an M_FIND_MARKER_PATH_CONTEXT and use M3dmeasDefine() to set a path that crosses through the possible locations. The 3D measurement module will extract a profile along the path and find the markers within the profile. Finding markers perpendicular to a template is useful when you want to verify the location or shape of an object. There are 2 types of contexts that have a template: a template 3D measurement context and a profile 3D measurement context. You can allocate an M_FIND_MARKER_TEMPLATE_CONTEXT and specify a template that follows an expected edge of your object using M3dmeasDefine(). To find the markers that can form the template, the 3D measurement module will extract profiles at regular intervals perpendicular to the template and find a single marker in each profile where the height change occurs. If your template runs along a column(s) of the depth map, you can use a profile 3D measurement context (M_FIND_MARKER_PROFILE_CONTEXT) instead, in which case the profile extraction step is skipped and the find marker operation is performed on each row (profile) of the depth map; you don't explicitly define the template. If you supply the profiles, the 3D measurement module can find the specified number of markers along each profile; whereas, if you specify a template, the module will only find the best marker close to the template along each profile. Note that if you need to fit a geometry to the found markers to compare their location to that of the template, you must use a template 3D measurement context. After allocating the 3D measurement context, and if required, defining the path or template, use M3dmeasFindMarker() or M3dmeasFit() to find and/or fit the markers. When the 3D measurement context is no longer required, release it using M3dmeasFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D measurement context's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the system on which to allocate the 3D measurement context. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ContextType Specifies the type of 3D measurement context to allocate. This parameter should be set to one of the following values: For specifying the context object Value Description M_DRAW_3D_PATH_CONTEXT Specifies to allocate a draw path 3D measurement context for use with M3dmeasDraw3d(), to draw features of a path, a path's profile, or markers found in a path's profile. M_DRAW_3D_PROFILE_CONTEXT Specifies to allocate a draw profile 3D measurement context for use with M3dmeasDraw3d(), to draw features of supplied profiles or markers found in supplied profiles. M_DRAW_3D_TEMPLATE_CONTEXT Specifies to allocate a draw template 3D measurement context for use with M3dmeasDraw3d(), to draw features of a template, a template's perpendicular profiles, markers found in a template's perpendicular profiles, or results from a fit operation. M_FIND_MARKER_PATH_CONTEXT Specifies to allocate a path 3D measurement context for use with M3dmeasFindMarker(), to find markers in a path's profile. M_FIND_MARKER_PROFILE_CONTEXT Specifies to allocate a profile 3D measurement context for use with M3dmeasFindMarker(), to find markers in supplied profiles. Note that supplied profiles have a corresponding default template that does not need to be defined. M_FIND_MARKER_TEMPLATE_CONTEXT Specifies to allocate a template 3D measurement context for use with M3dmeasFindMarker() or M3dmeasFit(), to find markers in a template's perpendicular profiles. M_FIT_CONTEXT Specifies to allocate a fit 3D measurement context for use with M3dmeasFit(), to fit a geometry to markers found in a template's perpendicular profiles. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Context3dmeasIdPtr Specifies the address of the variable in which to write the 3D measurement context identifier or specifies the data type that the function should use to return the 3D measurement context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D measurement context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D measurement context ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DMEAS_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D measurement context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the draw path 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw path 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the draw profile 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw profile 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the draw template 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw template 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the fit 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated fit 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the path 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated path 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the profile 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated profile 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the template 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated template 3D measurement context. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D measurement context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DMEAS_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - SysId For specifying the system - ContextType For specifying the context object - ControlFlag - Context3dmeasIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 1333,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasAllocResult",
      "version": null,
      "title": "M3dmeasAllocResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasAllocResult.htm",
      "text": " M3dmeasAllocResult Synopsis Allocates a 3D measurement result buffer. Syntax MIL_ID M3dmeasAllocResult( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ResultType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Result3dmeasIdPtr //out ) Description This function allocates a 3D measurement result buffer on the specified system, to store results obtained from an M3dmeasFindMarker() or M3dmeasFit() operation. When the 3D measurement result buffer is no longer required, release it using M3dmeasFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D measurement result buffer's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the identifier of the system on which to allocate the 3D measurement result buffer. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ResultType Specifies the type of 3D measurement result buffer to allocate. For specifying the type of result to allocate Value Description M_FIND_MARKER_PATH_RESULT Specifies to allocate a path 3D measurement result buffer, used to store M3dmeasFindMarker() results. M_FIND_MARKER_PROFILE_RESULT Specifies to allocate a profile 3D measurement result buffer, used to store M3dmeasFindMarker() results. M_FIND_MARKER_TEMPLATE_RESULT Specifies to allocate a template 3D measurement result buffer, used to store M3dmeasFindMarker() or M3dmeasFit() results. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Result3dmeasIdPtr Specifies the address of the variable in which to write the 3D measurement result buffer identifier or specifies the data type that the function should use to return the 3D measurement result buffer identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D measurement result buffer ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D measurement result buffer ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DMEAS_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D measurement result buffer (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the path 3D measurement result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated path 3D measurement result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the profile 3D measurement result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated profile 3D measurement result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the template 3D measurement result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated template 3D measurement result buffer. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D measurement result buffer identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DMEAS_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - SysId For specifying the system - ResultType For specifying the type of result to allocate - ControlFlag - Result3dmeasIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 641,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasControl",
      "version": null,
      "title": "M3dmeasControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasControl.htm",
      "text": " M3dmeasControl Synopsis Control a setting for a 3D measurement context or result buffer. Syntax void M3dmeasControl( MIL_ID&nbsp;ContextOrResult3dmeasId, //in MIL_INT64&nbsp;PathOrTemplateIndex, //in MIL_INT64&nbsp;ProfileIndex, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function allows you to control a setting of a 3D measurement context or result buffer. You can typically inquire these settings using M3dmeasInquire(). To control draw 3D measurement settings for M3dmeasDraw3d(), use M3dmeasControlDraw() instead. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dmeasControl() internally calls the MIL_DOUBLE version of this function (M3dmeasControlDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (M3dmeasControlInt64()). Parameters Parameters ContextOrResult3dmeasId Specifies the identifier of the 3D measurement context or result buffer to control. The 3D measurement context or result buffer must have been previously allocated on the required system using M3dmeasAlloc() or M3dmeasAllocResult(). PathOrTemplateIndex Specifies to control a 3D measurement context, a path, a template, a default template, or a 3D measurement result buffer. Set this parameter to one of the following values: For specifying what to control Value Description M_DEFAULT Specifies the default value. If a 3D measurement context is specified, same as M_CONTEXT. If a 3D measurement result buffer is specified, same as M_GENERAL. M_PATH_INDEX( MIL_INT PathIndex ) Specifies to control an individual path in a path 3D measurement context, if one is specified. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies to control an individual template in a template 3D measurement context, if one is specified. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. M_CONTEXT Specifies to control a global setting of a 3D measurement context, if one is specified. M_DEFAULT_TEMPLATE Specifies to control the default template in a profile 3D measurement context, if one is specified. Note that the default template in a profile 3D measurement context is different from an explicitly defined template in a template 3D measurement context. The default template is inherent to the supplied profiles, such that it is the theoretical template that would result in these profiles. Note, unlike for the profiles perpendicular to the template in a template 3D measurement context, multiple markers can be found along the profiles perpendicular to the default template in a profile 3D measurement context. M_GENERAL Specifies to control a general setting of a 3D measurement result buffer, if one is specified. ProfileIndex Specifies the profile to control, if required. Set this parameter to one of the following values: For specifying a profile Value Description M_DEFAULT Specifies that the index of a profile is not required. M_PROFILE_INDEX( MIL_INT ProfileIndex ) Specifies to control an individual profile in a template 3D measurement context, if one is specified. Parameters ProfileIndex Set this parameter to one of the following: M_ALL Specifies all profiles. Value &gt;= 0 Specifies the index of the profile. ControlType Specifies the setting to control. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ControlType and ControlValue parameters. To control a global setting of a profile, path, or template 3D measurement context To control the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context To control the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context To control a template in a template 3D measurement context To control a template or profile in a template 3D measurement context To control a profile in a template 3D measurement context To control a fit 3D measurement context To control a profile, path, or template 3D measurement result buffer The following ControlType and ControlValue parameter setting can be specified to control a global setting of a profile, path, or template 3D measurement context. PathOrTemplateIndex must be set to M_DEFAULT or M_CONTEXT, and ProfileIndex must be set to M_DEFAULT. To control a global setting of a profile, path, or template 3D measurement context ControlType Description ControlValue M_TIMEOUT Sets the maximum amount of time for M3dmeasFindMarker() or M3dmeasFit() to complete the find marker operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. The following ControlType and ControlValue parameter settings can be specified for the default template in a profile 3D measurement context, a path in a path 3D measurement context, or a template in a template 3D measurement context. PathOrTemplateIndex must be set to M_DEFAULT_TEMPLATE, the index of a path, or the index of a template, respectively, and ProfileIndex must be set to M_DEFAULT. To control the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context ControlType Description ControlValue M_MARKER_NUMBER Sets the number of markers to search for in the profile. Note that this control type is not available for a template 3D measurement context. In this case, the find marker operation always looks for 1 marker in each perpendicular profile of the template. M_DEFAULT Specifies the default value; the default value is 1. M_ALL Specifies to search for all markers. Value &gt; 0 Specifies the number of markers for which to search. M_MARKER_POLARITY Sets the polarity of the transition to find. Transitions from a lower Z-value to a higher Z-value, according to the direction of the search along the profile, have a positive polarity. Transitions from a higher Z-value to a lower one have a negative polarity. If the polarity does not matter, you can set this control to M_ANY to find transitions with either a positive or negative polarity. M_DEFAULT Same as M_POSITIVE. M_ANY Specifies to find a transition with any polarity. M_NEGATIVE Specifies to find a transition with negative polarity. M_POSITIVE Specifies to find a transition with positive polarity. M_MARKER_POSITION_INVALID Sets where to identify a transition when an invalid region is encountered in the profile. M_DEFAULT Same as M_BOTH. M_AFTER Specifies that the transition is immediately after the gap. M_BEFORE Specifies that the transition is immediately before the gap. M_BOTH Specifies that there is one transition immediately before and one transition immediately after the gap. M_MIDDLE Specifies that the transition is in the middle of the gap. M_MARKER_POSITION_RELATIVE Sets the position that the markers should be closest to when M_MARKER_SELECTION is set to M_POSITION_RELATIVE and the number of candidates is greater than M_MARKER_NUMBER. Note that this also sets the relative position to use when calculating the M3dmeasGetResult() M_OFFSET result type. M_DEFAULT Specifies the default value; the default value is 50.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the position, as a percentage of the total profile length. M_MARKER_SELECTION Sets the policy used to select found markers when the number of candidates is greater than M_MARKER_NUMBER. M_DEFAULT Same as M_STRONGEST. M_BEST_FIT Specifies to use a different selection criteria depending on the operation. When performing an M3dmeasFindMarker() operation, M_BEST_FIT specifies to select markers according to their proximity to the profile's origin; the closest marker is selected first. When performing an M3dmeasFit() operation with a template 3D measurement context, M_BEST_FIT specifies to select markers according to possible resulting fit scores; the marker that would result in the best fit possible is selected first. M_POSITION_FIRST Specifies to select markers according to their proximity to the profile's origin; the closest marker is selected first. M_POSITION_LAST Specifies to select markers according to their proximity to the end of the profile; the closest marker is selected first. M_POSITION_RELATIVE Specifies to select markers according to their proximity to the position set using M_MARKER_POSITION_RELATIVE; the closest marker is selected first. M_STRONGEST Specifies to select markers according to the strength of the transition; the marker with the strongest transition is selected first. M_TALLEST Specifies to select markers according to their measured depth; the marker with the greatest depth is selected first. M_MARKER_STRENGTH_MIN Sets the minimum strength required for a peak in the profile response, for it to be considered a valid transition signifying a marker. MIL establishes strengths by taking the normalized first derivative of the profile, which generally resembles a peak when a valid transition is present. The strength at the summit of the highest peak that rises above and then falls below the minimum strength on both sides represents the transition's position. When searching for multiple transitions, you might need to further constrain the strengths that MIL considers, using M_MARKER_STRENGTH_MIN_VAR. M_DEFAULT Specifies the default value; the default value is 4.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the minimum strength. A setting of 0.0 indicates that MIL considers all strengths, while a setting of 100.0 indicates that MIL only considers the greatest possible strength. The greatest possible strength results from a perfectly straight transition from the lowest Z-value to the highest Z-value (or vice versa) over one pixel in the profile response image. If you set the minimum strength to a very low value, M3dmeasFindMarker() can take longer to execute. M_MARKER_STRENGTH_MIN_VAR Sets the minimum prominence required for a peak in the profile response, for it to be considered a valid transition signifying a marker. This control is useful for advanced applications where you are trying to find multiple neighboring transitions in the profile, and M_MARKER_STRENGTH_MIN does not give you enough control over identifying the required transitions. To determine if the minimum prominence is met, MIL establishes a local threshold for each peak in the profile response by subtracting M_MARKER_STRENGTH_MIN_VAR from it. The portion of the profile response above the local threshold that contains the peak can be referred to as the peak's interval, provided that the profile response eventually dips below the local threshold on both sides of its peak. For MIL to consider a peak to be a valid transition, there must be no strength greater than that peak within its interval. If the local threshold calculated with M_MARKER_STRENGTH_MIN_VAR is less than M_MARKER_STRENGTH_MIN, the local threshold equals M_MARKER_STRENGTH_MIN. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the minimum prominence. A setting of 0.0 indicates no prominence; that is, MIL only considers the maximum strength of the peak's interval. A setting of 100.0 (default) indicates the greatest possible prominence; that is, MIL considers all strengths of the peak's interval that are above M_MARKER_STRENGTH_MIN. In this case, M_MARKER_STRENGTH_MIN_VAR has no effect. M_MARKER_TRANSITION Sets the type of transition to find. M_DEFAULT Same as M_EDGE. M_EDGE Specifies to find edge transitions. M_EDGE_OR_INVALID Specifies to find edge transitions and invalid transitions. M_INVALID Specifies to find invalid transitions. M_MARKER_TYPE Sets the type of marker to extract from the profile. M_DEFAULT Same as M_SINGLE. M_SINGLE Specifies to extract markers represented by a single transition. M_PROFILE_FILTER_SMOOTHNESS Sets the degree of smoothness (strength of denoising) applied to the profile to create the profile response before finding the markers. Increasing the smoothness value reduces transitions caused by noise, lowering the risk of finding false markers. It can also increase the strength of gradual transitions, allowing some previously undetected markers to be found. M_DEFAULT Specifies the default value; the default value is 50.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the smoothness value. A value of 100.0 results in a strong noise reduction effect, while a value of 0.0 has almost no noise reduction effect. M_PROFILE_GAP_FILL_SHARP_ELEVATION Sets how to fill sharp elevation gaps. A gap is considered a sharp elevation gap if the difference between the values on either side of the gap is at least M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH. You can specify to propagate the boundary value before or after the gap, propagate the minimum or maximum gap boundary value, propagate both boundary values up to the middle of the gap, or not to fill sharp elevation gaps. M_DEFAULT Same as M_DISABLE. M_AFTER Specifies to fill the gap with the value of the boundary after the gap. M_BEFORE Specifies to fill the gap with the value of the boundary before the gap. M_DISABLE Specifies not to fill sharp elevation gaps. M_MAX Specifies to fill the gap with the maximum gap boundary value. M_MIDDLE Specifies to fill the first half with the value of the boundary before the gap and the second half with the value of the boundary after the gap. M_MIN Specifies to fill the gap with the minimum gap boundary value. M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH Sets the threshold used to differentiate between gradual elevation gaps and sharp elevation gaps. A gap is an invalid region in the profile resulting from missing data in the source depth map. If the difference between a gap's boundary values is less than the specified threshold, the gap is considered a gradual elevation gap, otherwise it is considered a sharp elevation gap. Gradual elevation gaps are filled using linear interpolation; sharp elevation gaps are either filled by propagating the boundary values or are left unfilled, depending on the M_PROFILE_GAP_FILL_SHARP_ELEVATION control type. It is often better to fill gradual elevation gaps using linear interpolation since the underlying surface of such a gap is considered to be part of the same surface as its boundaries. Whereas for sharp elevation gaps, the underlying surface is considered to be discontinuous at least at one of its boundaries, so propagating the value of one of the boundaries is recommended. If a gap is greater than M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH, it is replaced using the secondary algorithm described in M_PROFILE_GAP_FILL_SHARP_ELEVATION. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the threshold is infinite. When M_INFINITE is specified, all gaps are considered gradual elevation gaps, so linear interpolation is always used and M_PROFILE_GAP_FILL_SHARP_ELEVATION is ignored. Value &gt;= 0.0 Specifies the threshold, as a percentage of the depth map's Z-range or in world units, depending on the units specified with M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH_UNITS. When the threshold is set to 0.0, all gaps are considered sharp elevation gaps, so linear interpolation is never used and all gaps are filled according to M_PROFILE_GAP_FILL_SHARP_ELEVATION. M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH_UNITS Sets the units with which to interpret the M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH control type. M_DEFAULT Same as M_PERCENTAGE. M_PERCENTAGE Specifies to interpret the value as a percentage of the range of Z-values (Z-range) visible in the depth map. M_WORLD Specifies to interpret the value in world units. M_PROFILE_GAP_FILL_THRESHOLD Sets the maximum size of gaps that will be filled. Gaps are invalid regions in the profile where the 3D sensor could not pick up information, due to occlusion, reflections, or areas out of the camera's field of view. If a gap in the profile is larger than the fill threshold, it is not replaced. M_DEFAULT Specifies the default value; the default value is 0.0. M_INFINITE Specifies no maximum gap size. Value &gt;= 0.0 Specifies the maximum gap size, in sample or world units, depending on the units specified with M_PROFILE_GAP_FILL_THRESHOLD_UNITS. M_PROFILE_GAP_FILL_THRESHOLD_UNITS Sets the units with which to interpret the M_PROFILE_GAP_FILL_THRESHOLD control type. M_DEFAULT Same as M_SAMPLE. M_SAMPLE Specifies to interpret the value relative to the sampling distance (M_PROFILE_SAMPLE_SIZE). M_WORLD Specifies to interpret the value in world units. The following ControlType and ControlValue parameter settings can be specified for a path in a path 3D measurement context or a template in a template 3D measurement context. PathOrTemplateIndex must be set to the index of a path or template, respectively, and ProfileIndex must be set to M_DEFAULT. These control types are used to specify how to extract the profile along the path or the profiles at regular intervals perpendicular to the template. Note that the sampling distance determines where each profile point will be extracted. The points within the thickness of the profile line at each of these positions are considered a sample, and a single profile point is calculated from the points in each sample. To control the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context ControlType Description ControlValue M_PROFILE_ACCUMULATE_TYPE Sets how points in a given sample are accumulated to create a single profile point when there are multiple points within the thickness of the profile line. M_DEFAULT Same as M_MEAN. M_MAX Specifies to use the largest value of all the points in the sample. This option is not supported when M_PROFILE_INTERPOLATION_MODE is set to M_AVERAGE. M_MEAN Specifies to use the mean value of all the points in the sample. M_MIN Specifies to use the smallest value of all the points in the sample. This option is not supported when M_PROFILE_INTERPOLATION_MODE is set to M_AVERAGE. M_PROFILE_INTERPOLATION_AVERAGE_FRACTION Sets the fraction of the sampling distance to use when taking a weighted average of the area surrounding the profile point. For example, a value of 0.5 indicates that 50 percent of the pixel area that surrounds the profile point (defined by 50% of the sampling distance along the line) is used to calculate a weighted average for the profile point. This control type is only available when M_PROFILE_INTERPOLATION_MODE is set to M_AVERAGE. M_DEFAULT Specifies the default value; the default value is 1.0. 0.0 &lt; Value &lt;= 1.0 Specifies the fraction. M_PROFILE_INTERPOLATION_MODE Sets the interpolation mode used to calculate the value for each point in the sample that will be used to create the profile point. M_DEFAULT Same as M_BILINEAR. M_AVERAGE Specifies averaging interpolation. The new value is determined by taking a weighted average of the pixel area that surrounds the profile point. You can use M_PROFILE_INTERPOLATION_AVERAGE_FRACTION to specify how much of the pixel area to consider. M_BILINEAR Specifies bilinear interpolation. The new value is determined by taking a weighted average of the 4 values (2x2) that surround the point in the sample. M_NEAREST_NEIGHBOR Specifies nearest neighbor interpolation. The new value is that of the pixel closest to the point in the sample. M_PROFILE_MIN_VALID_PERCENTAGE Sets the minimum percentage of points in a given sample that must be valid to set the corresponding profile point to a valid value. When there are multiple points within the thickness for the sample that will be used to create the profile point, the profile point will be invalid if the minimum valid percentage is not met. M_DEFAULT Specifies the default value; the default value is 0.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies the percentage of points in the sample. Note that a value of 0.0% means there are no constraints on the number of valid points, but if all points contributing to the calculation of a profile point are invalid, the profile point will be invalid in the destination. M_PROFILE_SAMPLE_SIZE Sets the sampling distance between two consecutive points along the profile line. When the pixel size in X is not equal to the pixel size in Y in the source depth map, this ensures that the extracted points are at a uniform distance. Note that this will be the pixel size of the profile. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the distance. Use M_PROFILE_SAMPLE_SIZE_MODE to specify how to interpret the specified sampling distance. M_PROFILE_SAMPLE_SIZE_MODE Sets how to interpret the specified sampling distance (M_PROFILE_SAMPLE_SIZE). M_DEFAULT Same as M_RELATIVE_TO_PIXEL_SIZE_MIN. M_ABSOLUTE Specifies to use the sampling distance directly, without applying a multiplying factor. For example, if you set M_PROFILE_SAMPLE_SIZE to 2.0, the sampling distance will be 2.0 mm. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the sampling distance by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the sampling distance by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the sampling distance by the pixel size in X. For example, if you set M_PROFILE_SAMPLE_SIZE to 2.0 and the pixel size in X is 0.5 mm, the sampling distance will be 1.0 mm. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the sampling distance by the pixel size in Y. For example, if you set M_PROFILE_SAMPLE_SIZE to 2.0 and the pixel size in Y is 0.6 mm, the sampling distance will be 1.2 mm. M_PROFILE_THICKNESS Sets the thickness of the profile line. Pixels along the line, within the specified thickness, are sampled and corresponding points are considered for the profile. Note that a thick profile line typically results in multiple points contributing to the same profile point. You can use M_PROFILE_ACCUMULATE_TYPE to determine how multiple point values are combined to set the value of the corresponding profile point. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the thickness. Use M_PROFILE_THICKNESS_MODE to specify how to interpret the specified thickness. M_PROFILE_THICKNESS_MODE Sets how to interpret the specified thickness value (M_PROFILE_THICKNESS). M_DEFAULT Same as M_RELATIVE_TO_PIXEL_SIZE_MIN. M_ABSOLUTE Specifies to use the thickness value directly, without applying a multiplying factor. For example, if you set M_PROFILE_THICKNESS to 2.0, the profiles will be 2.0 mm thick. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the thickness value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the thickness value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the thickness value by the pixel size in X. For example, if you set M_PROFILE_THICKNESS to 2.0 and the pixel size in X is 0.5 mm, the profiles will be 1.0 mm thick. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the thickness value by the pixel size in Y. For example, if you set M_PROFILE_THICKNESS to 2.0 and the pixel size in Y is 0.6 mm, the profiles will be 1.2 mm thick. M_RELATIVE_TO_SPACING Specifies to multiply the thickness value by the profile spacing. For example, if you set M_PROFILE_THICKNESS to 2.0 and the spacing between profiles is 2.0 mm, the profiles will be 4.0 mm thick. Note that this value is only available if a template 3D measurement context is specified and M_TEMPLATE_PROFILE_SPACING_MODE is not set to M_RELATIVE_TO_THICKNESS. The following ControlType and ControlValue parameter settings can be specified for a template in a template 3D measurement context. PathOrTemplateIndex must be set to the index of a template, and ProfileIndex must be set to M_DEFAULT. To control a template in a template 3D measurement context ControlType Description ControlValue M_TEMPLATE_EXTENDED_SEARCH Sets whether to extend the search outside of the template's defined area. When this control type is enabled, the profiles are positioned normally and all data within the profile's thickness, including data outside of the template, is considered. When this control type is disabled, the first profile will be offset towards the center of the template such that its thickness does not extend outside the template, meaning data outside of the template's defined area is never considered. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to extend the search beyond the template. M_ENABLE Specifies to extend the search beyond the template. M_TEMPLATE_PROFILE_NUMBER_ELEMENTS Sets the number of profile elements in the template 3D measurement context. Each profile element contains the settings for a single profile. If you reduce the number of profile elements, the settings of the ones that remain are kept unchanged. If you increase the number of profile elements, the new ones are initialized with the default settings. You should have at least as many profile elements as the number of profiles to extract. You configure profile elements by setting the M_TEMPLATE_PROFILE_..._SOURCE controls to M_PROFILE and setting the corresponding control in the To control a template or profile in a template 3D measurement context table. Note this value is not available when M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING. M_DEFAULT Specifies the default value; the default value is 512. Value &gt;= M_TEMPLATE_PROFILE_NUMBER_VALUE Specifies the number of profile elements. M_TEMPLATE_PROFILE_NUMBER_MODE Sets the mode with which to determine the number of profiles to use to find the markers of a template. M_DEFAULT Same as M_USER_DEFINED. M_SPACING Specifies that the number of profiles is determined based on the spacing between the profiles. M_USER_DEFINED Specifies to use the value set with M_TEMPLATE_PROFILE_NUMBER_VALUE. The distance between profiles is established by distributing the specified number of profiles evenly perpendicular to the template. M_TEMPLATE_PROFILE_NUMBER_VALUE Sets the number of profiles perpendicular to the template. The distance between profiles is established by evenly distributing the specified number of profiles. Note this value is only available when M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_USER_DEFINED. M_DEFAULT Specifies the default value; the default value is 10. 0 &lt; Value &lt;= M_TEMPLATE_PROFILE_NUMBER_ELEMENTS Specifies the number of profiles. M_TEMPLATE_PROFILE_SPACING Sets the spacing between the profiles along the template. Note that this control type is only used if M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the spacing. Use M_TEMPLATE_PROFILE_SPACING_MODE to specify how to interpret the specified spacing. M_TEMPLATE_PROFILE_SPACING_MODE Sets how to interpret the specified spacing value (M_TEMPLATE_PROFILE_SPACING). Note that this control type is only used if M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING. M_DEFAULT Same as M_RELATIVE_TO_THICKNESS. M_ABSOLUTE Specifies to use the spacing value directly, without applying a multiplying factor. For example, if you set M_TEMPLATE_PROFILE_SPACING to 2.0, the spacing between profiles will be 2.0 mm. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the spacing value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the spacing value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the spacing value by the pixel size in X. For example, if you set M_TEMPLATE_PROFILE_SPACING to 2.0 and the pixel size in X is 0.5 mm, the spacing between profiles will be 1.0 mm. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the spacing value by the pixel size in Y. For example, if you set M_TEMPLATE_PROFILE_SPACING to 2.0 and the pixel size in Y is 0.6 mm, the spacing between profiles will be 1.2 mm. M_RELATIVE_TO_THICKNESS Specifies to multiply the spacing value by the profile thickness. For example, if you set M_TEMPLATE_PROFILE_SPACING to 2.0 and the profile thickness is 2.0 mm, the spacing between profiles will be 4.0 mm. The following ControlType and ControlValue parameter settings can be specified for a template or profile in a template 3D measurement context. PathOrTemplateIndex must be set to the index of a template. If ProfileIndex is set to M_DEFAULT, these control types allow you to specify global settings for the template's perpendicular profiles. If ProfileIndex is set to a specific index, they allow you to specify custom settings for the specified profile. Note that you must set the corresponding M_TEMPLATE_PROFILE_..._SOURCE control to M_PROFILE for the custom settings of the profile to be used. To control a template or profile in a template 3D measurement context ControlType Description ControlValue M_TEMPLATE_PROFILE_LENGTH Sets the nominal length of the profile to extract (perpendicular to the template). You should set the nominal length large enough to include the expected position variation of the marker. If you want to return a transition even when it is outside the expected range of positions, you can add a margin to the length, using M_TEMPLATE_PROFILE_LENGTH_MARGIN, and MIL will continue the search within the margin. Note that if you are setting the nominal length for a specific profile, you must set M_TEMPLATE_PROFILE_LENGTH_SOURCE to M_PROFILE to specify to use the custom length value. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the length. Use M_TEMPLATE_PROFILE_LENGTH_MODE to specify how to interpret the specified length. M_TEMPLATE_PROFILE_LENGTH_MARGIN Sets a margin on the profile length. You should include a margin when you still want to find a transition when it is located outside of the positions that you want to verify. The nominal length, specified with M_TEMPLATE_PROFILE_LENGTH, plus the specified margin define the length of the profile. Note that if you are setting the margin for a specific profile, you must set M_TEMPLATE_PROFILE_LENGTH_MARGIN_SOURCE to M_PROFILE to specify to use the custom margin value. M_DEFAULT Specifies the default value; the default value is 50.0. Value &gt;= 0.0 Specifies the margin, as a percentage of the nominal length. M_TEMPLATE_PROFILE_LENGTH_MODE Sets how to interpret the specified length value (M_TEMPLATE_PROFILE_LENGTH). Note that if you are setting the length mode for a specific profile, you must set M_TEMPLATE_PROFILE_LENGTH_SOURCE to M_PROFILE to specify to use the custom length mode. M_DEFAULT Same as M_RELATIVE_TO_PIXEL_SIZE_MIN. M_ABSOLUTE Specifies to use the length value directly, without applying a multiplying factor. For example, if you set M_TEMPLATE_PROFILE_LENGTH to 2.0, the profile length will be 2.0 mm. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the length value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the length value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the length value by the pixel size in X. For example, if you set M_TEMPLATE_PROFILE_LENGTH to 2.0 and the pixel size in X is 0.5 mm, the profile length will be 1.0 mm. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the length value by the pixel size in Y. For example, if you set M_TEMPLATE_PROFILE_LENGTH to 2.0 and the pixel size in Y is 0.6 mm, the profile length will be 1.2 mm. M_TEMPLATE_PROFILE_POSITION_RELATIVE Sets the position of the profile, relative to the template. You must specify the position as a percentage of the nominal length of the profile (not including the margin). For example, if a profile has a nominal length of 10 mm and you specify a value of 50.0%, the profile is moved 5 mm backwards, such that the end of its nominal length touches the template; if a margin was specified, it will continue across the template. If you specify a value of -50.0%, the profile is moved 5 mm forwards, such that the start of its nominal length touches the template. By default, the profiles are centered on the template. Note that if you are setting the relative position for a specific profile, you must set M_TEMPLATE_PROFILE_POSITION_SOURCE to M_PROFILE to specify to use the custom relative position value. M_DEFAULT Specifies the default value; the default value is 0.0. -50.0 &lt;= Value &lt;= 50.0 Specifies the relative position, as a percentage of the nominal length. The following ControlType and ControlValue parameter settings can be specified for a profile perpendicular to a template in a template 3D measurement context. PathOrTemplateIndex must be set to the index of a template, and ProfileIndex must be set to the index of one or all profiles. These control types allow you to specify whether to use the global or custom settings for the specified profile, when extracting the profile perpendicular to the template. To control a profile in a template 3D measurement context ControlType Description ControlValue M_TEMPLATE_PROFILE_LENGTH_MARGIN_SOURCE Sets whether to use the template's global margin or a custom margin for the profile. The margin is added to the nominal length to define the length of the profile. M_DEFAULT Same as M_TEMPLATE. M_PROFILE Specifies to use the custom margin value for the specified profile. You must set the custom margin using M_TEMPLATE_PROFILE_LENGTH_MARGIN with ProfileIndex set to the index of the profile. M_TEMPLATE Specifies to use the template's global margin value for the specified profile. You must set the template's global margin using M_TEMPLATE_PROFILE_LENGTH_MARGIN with ProfileIndex set to M_DEFAULT. M_TEMPLATE_PROFILE_LENGTH_SOURCE Sets whether to use the template's global nominal length and length mode or a custom nominal length and length mode for the profile. M_DEFAULT Same as M_TEMPLATE. M_PROFILE Specifies to use the custom profile length for the specified profile. You must set the custom length using M_TEMPLATE_PROFILE_LENGTH and M_TEMPLATE_PROFILE_LENGTH_MODE with ProfileIndex set to the index of the profile. M_TEMPLATE Specifies to use the template's global profile length for the specified profile. You must set the template's global length using M_TEMPLATE_PROFILE_LENGTH and M_TEMPLATE_PROFILE_LENGTH_MODE with ProfileIndex set to M_DEFAULT. M_TEMPLATE_PROFILE_POSITION_SOURCE Sets whether to use the template's global relative position or a custom relative position for the profile. M_DEFAULT Same as M_TEMPLATE. M_PROFILE Specifies to use the custom relative position value for the specified profile. You must set the custom relative position using M_TEMPLATE_PROFILE_POSITION_RELATIVE with ProfileIndex set to the index of the profile. M_TEMPLATE Specifies to use the template's global relative position value. You must set the template's global relative position using M_TEMPLATE_PROFILE_POSITION_RELATIVE with ProfileIndex set to M_DEFAULT. The following ControlType and ControlValue parameter settings can be specified for a fit 3D measurement context. PathOrTemplateIndex must be set to M_DEFAULT or M_GENERAL, and ProfileIndex must be set to M_DEFAULT. To control a fit 3D measurement context ControlType Description ControlValue M_EXPECTED_OUTLIER_PERCENTAGE Sets the expected percentage of outlier markers among the markers that are extracted. M_DEFAULT Specifies the default value; the default value is 20.0%. 0.0 &lt; Value &lt; 100.0 Specifies the expected outliers, as a percentage. M_FIT_COVERAGE_MIN Sets the minimum percentage of profiles that must have a marker covered by a fitted point. M_DEFAULT Specifies the default value; the default value is 0.0%. Value &gt; 0.0 Specifies the minimum coverage, as a percentage. M_FIT_DISTANCE Sets the distance value that MIL uses to establish outlier markers, which are excluded from the robust best fit. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the fit distance is infinite. When M_INFINITE is specified, no markers are considered outliers, so no markers are excluded from the robust best fit. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Sets how to interpret the specified fit distance value (M_FIT_DISTANCE). M_DEFAULT Same as M_AUTO. M_ABSOLUTE Specifies to use the fit distance value directly, without applying a multiplying factor. For example, if you set M_FIT_DISTANCE to 2.0, the fit distance will be 2.0 mm. M_AUTO Specifies to automatically calculate the fit distance; the distance is estimated from all the extracted markers. Note that when the find and fit are performed together (by calling M3dmeasFit() with a template 3D measurement context and a depth map), and there are multiple valid transitions within a single profile, the automatic fit distance can be overestimated. In this case, you should use a different mode. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the fit distance value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the fit distance value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the fit distance value by the pixel size in X. For example, if you set M_FIT_DISTANCE to 2.0 and the pixel size in X is 0.5 mm, the fit distance will be 1.0 mm. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the fit distance value by the pixel size in Y. For example, if you set M_FIT_DISTANCE to 2.0 and the pixel size in Y is 0.6 mm, the fit distance will be 1.2 mm. M_RELATIVE_TO_SAMPLING Specifies to multiply the fit distance value by the sampling distance along each profile. For example, if you set M_FIT_DISTANCE to 2.0 and the sampling distance along each profile is 2.0 mm, the fit distance will be 4.0 mm. M_REMOVE_OUTLIERS Sets whether to remove outlier markers from the template 3D measurement result buffer after the fit. Note that when the find and fit are performed simultaneously, using M3dmeasFit() with a template 3D measurement context and a depth map, the outliers are always removed, even if this control type is set to M_DISABLE. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to remove outliers. M_ENABLE Specifies to remove outliers. The following ControlType and ControlValue parameter setting can be specified for a profile, path, or template 3D measurement result buffer. PathOrTemplateIndex must be set to M_DEFAULT or M_GENERAL, and ProfileIndex must be set to M_DEFAULT. To control a profile, path, or template 3D measurement result buffer ControlType Description ControlValue M_STOP_FIND Stops the current execution of M3dmeasFindMarker() or M3dmeasFit(). This can only be done from another thread of higher priority. Results already available in the result buffer become invalid and will be discarded. M_DEFAULT Specifies the default behavior. Type-specific versions of the function when using a C compiler under 64-bit void M3dmeasControlInt64 (MIL_ID ContextOrResult3dmeasId, MIL_INT64 PathOrTemplateIndex, MIL_INT64 ProfileIndex, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters ContextOrResult3dmeasId See ContextOrResult3dmeasId of the main function for a description. PathOrTemplateIndex See PathOrTemplateIndex of the main function for a description. ProfileIndex See ProfileIndex of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void M3dmeasControlDouble (MIL_ID ContextOrResult3dmeasId, MIL_INT64 PathOrTemplateIndex, MIL_INT64 ProfileIndex, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters ContextOrResult3dmeasId See ContextOrResult3dmeasId of the main function for a description. PathOrTemplateIndex See PathOrTemplateIndex of the main function for a description. ProfileIndex See ProfileIndex of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - ContextOrResult3dmeasId - PathOrTemplateIndex For specifying what to control - ProfileIndex For specifying a profile - ControlType - ControlValue Parameter Associations To control a global setting of a profile, path, or template 3D measurement context To control the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context To control the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context To control a template in a template 3D measurement context To control a template or profile in a template 3D measurement context To control a profile in a template 3D measurement context To control a fit 3D measurement context To control a profile, path, or template 3D measurement result buffer Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 6205,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasControlDraw",
      "version": null,
      "title": "M3dmeasControlDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasControlDraw.htm",
      "text": " M3dmeasControlDraw Synopsis Control a setting of a draw 3D measurement context. Syntax void M3dmeasControlDraw( MIL_ID&nbsp;DrawContext3dmeasId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls a specified setting of a draw 3D measurement context. These settings establish which 3D measurement results to draw into the 3D graphics list (and how to draw them), when calling M3dmeasDraw3d(). You can inquire about most of these settings using M3dmeasInquireDraw(). Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dmeasControlDraw() internally calls the MIL_DOUBLE version of this function (M3dmeasControlDrawDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (M3dmeasControlDrawInt64()). Parameters Parameters DrawContext3dmeasId Specifies the identifier of the draw 3D measurement context to control. The 3D measurement context must have been previously allocated on the system using M3dmeasAlloc() with M_DRAW_3D_PROFILE_CONTEXT, M_DRAW_3D_PATH_CONTEXT, or M_DRAW_3D_TEMPLATE_CONTEXT. Operation Specifies the draw operation. See the Parameter associations section for possible values that can be specified. ControlType Specifies the setting to change. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the Operation, ControlType, and ControlValue parameters. For controlling a draw profile, path, or template 3D measurement context setting For controlling a draw path 3D measurement context setting For controlling a draw template 3D measurement context setting The following Operation, ControlType, and ControlValue parameter settings are available to control draw profile, path, or template 3D measurement context settings. For controlling a draw profile, path, or template 3D measurement context setting Operation Description ControlType ControlValue M_ALL Applies the setting to all operations that support the control type. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets the appearance of the graphic(s) to solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_MARKERS Sets whether and how to draw the cross-like symbol at each specified marker's position when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_PSEUDO_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PROFILE_EXTRACTED Sets whether and how to draw the extracted points that form each specified profile when calling M3dmeasDraw3d(). Note that this includes points introduced after filling gaps. The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_YELLOW. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PROFILE_REGION Sets whether and how to draw the region where each specified profile was extracted when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_POLYGON. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_MAGENTA. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 20. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PROFILE_RESPONSE Sets whether and how to draw the response of each specified profile (after applying the filter) when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_CYAN. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_TRANSITIONS Sets whether and how to draw the step-like symbol at each specified marker's transition position when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_PSEUDO_DARK_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_GLOBAL_DRAW_SETTINGS Sets a global draw 3D measurement context setting. M_PSEUDO_COLOR_OFFSET Sets the offset to apply to either the 3D measurement result element's index when drawing with M_PSEUDO_COLOR or M_PSEUDO_DARK_COLOR. You can use this control type to prevent the same colors from being assigned to different result elements when drawing several results at once. M_DEFAULT Specifies the default value; the default value is 0. Value &gt;= 0 Specifies the offset to apply to the index. The following Operation, ControlType, and ControlValue parameter settings are available to control draw path 3D measurement context settings. For controlling a draw path 3D measurement context setting Operation Description ControlType ControlValue M_DRAW_PATH Sets whether and how to draw the path defined in the path 3D measurement context when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINE. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_MAGENTA. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PATH_PROJECTED Sets whether and how to draw the projection of the path defined in the path 3D measurement context when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_POLYGON. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_MAGENTA. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 50. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. The following Operation, ControlType, and ControlValue parameter settings are available to control draw template 3D measurement context settings. For controlling a draw template 3D measurement context setting Operation Description ControlType ControlValue M_DRAW_FIND_GEOMETRY Sets whether and how to draw the line segments connecting the extracted markers when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_CYAN. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIND_GEOMETRY_PROJECTED Sets whether and how to draw the planes connecting the projections of the extracted markers when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_DARK_CYAN. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 50. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_GEOMETRY Sets whether and how to draw the fitted 3D geometry when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINE. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_YELLOW. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_GEOMETRY_PROJECTED Sets whether and how to draw the projection of the fitted 3D geometry when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_POLYGON. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_DARK_YELLOW. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 50. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_MARKERS Sets whether and how to draw the cross-like symbol at the position of each marker that was used for the fit operation when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_GREEN. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_MARKERS_OUTLIERS Sets whether and how to draw the cross-like symbol at the position of each marker that was considered an outlier for the fit operation when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_RED. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_TEMPLATE Sets whether and how to draw the template defined in the template 3D measurement context when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_LINE. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_MAGENTA. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_TEMPLATE_PROJECTED Sets whether and how to draw the projection of the template defined in the template 3D measurement context when calling M3dmeasDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_POLYGON. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets whether to draw the graphic(s) as a solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_MAGENTA. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 50. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. Type-specific versions of the function when using a C compiler under 64-bit void M3dmeasControlDrawDouble (MIL_ID DrawContext3dmeasId, MIL_INT64 Operation, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters DrawContext3dmeasId See DrawContext3dmeasId of the main function for a description. Operation See Operation of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void M3dmeasControlDrawInt64 (MIL_ID DrawContext3dmeasId, MIL_INT64 Operation, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters DrawContext3dmeasId See DrawContext3dmeasId of the main function for a description. Operation See Operation of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - DrawContext3dmeasId - Operation - ControlType - ControlValue Parameter Associations For controlling a draw profile, path, or template 3D measurement context setting [M_ALL] [M_DRAW_MARKERS] [M_DRAW_PROFILE_EXTRACTED] [M_DRAW_PROFILE_REGION] [M_DRAW_PROFILE_RESPONSE] [M_DRAW_TRANSITIONS] [M_GLOBAL_DRAW_SETTINGS] For controlling a draw path 3D measurement context setting [M_DRAW_PATH] [M_DRAW_PATH_PROJECTED] For controlling a draw template 3D measurement context setting [M_DRAW_FIND_GEOMETRY] [M_DRAW_FIND_GEOMETRY_PROJECTED] [M_DRAW_FIT_GEOMETRY] [M_DRAW_FIT_GEOMETRY_PROJECTED] [M_DRAW_FIT_MARKERS] [M_DRAW_FIT_MARKERS_OUTLIERS] [M_DRAW_TEMPLATE] [M_DRAW_TEMPLATE_PROJECTED] Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 9006,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasCopy",
      "version": null,
      "title": "M3dmeasCopy",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasCopy.htm",
      "text": " M3dmeasCopy Synopsis Copy a path or template to a 3D geometry. Syntax void M3dmeasCopy( MIL_ID&nbsp;SrcContext3dmeasId, //in MIL_INT64&nbsp;SrcIndex, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;DstIndex, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies a path in a path 3D measurement context or a template in a template 3D measurement context to a 3D geometry. Parameters Parameters SrcContext3dmeasId Specifies the identifier of the source 3D measurement context from which to copy. For specifying the source 3D measurement context Value Description MIL path 3D measurement context identifier Specifies the identifier of the path 3D measurement context from which to copy the path. MIL template 3D measurement context identifier Specifies the identifier of the template 3D measurement context from which to copy the template. SrcIndex Specifies the index of the path or template in the source 3D measurement context. For specifying a path or template Value Description M_PATH_INDEX( MIL_INT PathIndex ) Specifies the path in a path 3D measurement context, if one is specified. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies the template in a template 3D measurement context, if one is specified. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. DstMilObjectId Specifies the identifier of the 3D geometry object in which to copy the path or template. For specifying the destination 3D geometry object Value Description MIL 3D geometry object identifier Specifies the identifier of the 3D geometry object in which to copy the path or template. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. DstIndex Reserved for future expansion and must be set to M_DEFAULT. CopyType Specifies the type of copy operation to perform. Specifies the type of copy operation Value Description M_GEOMETRY_PATH Specifies to copy the path from the path 3D measurement context into the specified 3D geometry object, establishing a 3D line geometry. M_GEOMETRY_TEMPLATE Specifies to copy the template from the template 3D measurement context into the specified 3D geometry object, establishing a 3D line geometry. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - SrcContext3dmeasId For specifying the source 3D measurement context - SrcIndex For specifying a path or template - DstMilObjectId For specifying the destination 3D geometry object - DstIndex - CopyType Specifies the type of copy operation - ControlFlag Compilation information ",
      "wordCount": 409,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasCopyResult",
      "version": null,
      "title": "M3dmeasCopyResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasCopyResult.htm",
      "text": " M3dmeasCopyResult Synopsis Copy a group of results from a 3D measurement result buffer into a 3D geometry object, container, or image buffer. Syntax void M3dmeasCopyResult( MIL_ID&nbsp;SrcResult3dmeasId, //in MIL_INT64&nbsp;SrcPathOrTemplateIndex, //in MIL_INT64&nbsp;SrcProfileIndex, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;DstIndex, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies a group of results from a 3D measurement result buffer into a 3D geometry object, container, or image buffer. Parameters Parameters SrcResult3dmeasId Specifies the identifier of a 3D measurement result buffer from which to copy results. The 3D measurement result buffer must have been allocated using M3dmeasAllocResult(). See the Parameter associations section for possible values that can be specified. SrcPathOrTemplateIndex Specifies the index of the source template or path to copy. See the Parameter associations section for possible values that can be specified. SrcProfileIndex Specifies the index of the source profile to copy. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. DstMilObjectId Specifies the identifier of the image buffer, 3D geometry object, or container in which to store the copied results. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. See the Parameter associations section for possible values that can be specified. DstIndex Reserved for future expansion and must be set to M_DEFAULT. CopyType Specifies the type of copy operation to perform. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the SrcResult3dmeasId, SrcPathOrTemplateIndex, SrcProfileIndex, DstMilObjectId, and CopyType parameters. For specifying the copy type For specifying the copy type CopyType Description SrcResult3dmeasId SrcPathOrTemplateIndex SrcProfileIndex DstMilObjectId M_GEOMETRY_FIT Specifies to copy the fitted geometry from the specified template 3D measurement result buffer into the specified 3D geometry object. Note that this is only available after an M3dmeasFit() operation. SrcResult3dmeasId Specifies the identifier of the template 3D measurement result buffer from which to copy the fitted geometry. SrcPathOrTemplateIndex Specifies the index of the template in the template 3D measurement result buffer for which to copy the fitted geometry. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies the index of the template. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index. DstMilObjectId Specifies the identifier of the destination 3D geometry object in which to copy the fitted geometry. M_GEOMETRY_PATH Specifies to copy the path with the specified index, used to calculate the results in the specified path 3D measurement result buffer, into the specified 3D geometry object. SrcResult3dmeasId Specifies the identifier of the path 3D measurement result buffer from which to copy the path. SrcPathOrTemplateIndex Specifies the index of the path to copy from the path 3D measurement result buffer. M_PATH_INDEX( MIL_INT PathIndex ) Specifies the index of the path. Parameters PathIndex Set this parameter to the following: 0 Specifies the index. DstMilObjectId Specifies the identifier of the destination 3D geometry object in which to copy the path. M_GEOMETRY_TEMPLATE Specifies to copy the template with the specified index, used to calculate the results in the specified template 3D measurement result buffer, into the specified 3D geometry object. SrcResult3dmeasId Specifies the identifier of the template 3D measurement result buffer from which to copy the template. SrcPathOrTemplateIndex Specifies the index of the template to copy from the template 3D measurement result buffer. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies the index of the template. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index. DstMilObjectId Specifies the identifier of the destination 3D geometry object in which to copy the template. M_PROFILE_EXTRACTED Specifies to copy the extracted profile from the specified 3D measurement result buffer into a row of the specified image buffer or container. SrcResult3dmeasId Specifies the identifier of the path or template 3D measurement result buffer from which to copy the profile. SrcPathOrTemplateIndex Specifies the index of the path or template in the path or template 3D measurement result buffer that has the profile to copy. M_PATH_INDEX( MIL_INT PathIndex ) Specifies the index of the path in the path 3D measurement result buffer. Parameters PathIndex Set this parameter to the following: 0 Specifies the index. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies the index of the template in the template 3D measurement result buffer. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index. SrcProfileIndex Specifies the index of the profile in the 3D measurement result buffer to copy. Value &gt;= 0 Specifies the index of a profile. Note that for a path 3D measurement result buffer, only index 0 is supported because only 1 profile is extracted along the path. DstMilObjectId Specifies the identifier of the destination image buffer or container in which to copy the profile. Image buffer identifier Specifies the identifier of an image buffer. The image buffer must be an 8-bit, 16-bit, or 32-bit unsigned, 1-band buffer. Note that the profile is copied into the first row of the specified image buffer. MIL container identifier Specifies the identifier of a container. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. Note that after the profile is copied, the specified container will be a 3D-processable depth map container with a single row. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - SrcResult3dmeasId - SrcPathOrTemplateIndex - SrcProfileIndex - DstMilObjectId - DstIndex - CopyType - ControlFlag Parameter Associations For specifying the copy type Compilation information ",
      "wordCount": 908,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasDefine",
      "version": null,
      "title": "M3dmeasDefine",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasDefine.htm",
      "text": " M3dmeasDefine Synopsis Add a path or template to, or delete a path or template from, a path or template 3D measurement context. Syntax MIL_INT64 M3dmeasDefine( MIL_ID&nbsp;PathOrTemplateContext3dmeasId, //in MIL_ID&nbsp;Geometry3dgeoId, //in MIL_ID&nbsp;Matrix3dgeoId, //in MIL_INT&nbsp;PathOrTemplateIndex, //in MIL_INT64&nbsp;Operation, //in MIL_INT&nbsp;MarkerType, //in MIL_INT&nbsp;TransitionType, //in MIL_INT&nbsp;NumberMode, //in MIL_INT&nbsp;LengthSource, //in MIL_INT&nbsp;LengthMode, //in MIL_INT&nbsp;NumberValue, //in const MIL_DOUBLE&nbsp;*ParamArrayPtr, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function allows you to add or delete the path or template that is used to find markers. Note that a path can only be added to, or deleted from, a path 3D measurement context, and a template can only be added to, or deleted from, a template 3D measurement context. Setting a path is useful when you want to find an object but you don't know its exact location. You can set a path that crosses through possible locations to detect height changes along the line. Setting a template is useful when you want to check whether an object is at an expected location. You can set a template where you expect a height change to occur, and verify if the object is present and has the shape you expect. You can use M3dmeasFit() to fit a geometry to the found markers to compare it with the template that you defined. You can only define one path per path 3D measurement context and one template per template 3D measurement context. When adding a path or template to the context, it is assigned an index of 0. Note that you cannot add a path or template to a profile 3D measurement context. A profile 3D measurement context has a default template that corresponds to the profiles supplied to M3dmeasFindMarker() and cannot be defined nor deleted. After defining the path or template, use M3dmeasFindMarker() to find markers along the path or find the markers that can form the template. Parameters Parameters PathOrTemplateContext3dmeasId Specifies the path or template 3D measurement context to which to add, or from which to delete, the path or template. The context must have been allocated using M3dmeasAlloc() with M_FIND_MARKER_PATH_CONTEXT or M_FIND_MARKER_TEMPLATE_CONTEXT. See the Parameter associations section for possible values that can be specified. Geometry3dgeoId Specifies the identifier of the 3D geometry object to use to define the path or template. The 3D geometry object must have been allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a line. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Matrix3dgeoId Specifies the identifier of the transformation matrix object to apply to the path or template. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. PathOrTemplateIndex Specifies the index of the template or path in the 3D measurement context. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Operation Specifies the operation to perform. For specifying the type of operation Value Description M_ADD Specifies to add a path or template to the specified 3D measurement context. M_DELETE Specifies to delete the specified path or template from the specified 3D measurement context. MarkerType Reserved for future expansion and must be set to M_DEFAULT. TransitionType Specifies the type of transition to find. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. NumberMode Specifies the mode with which to determine the number of profiles that will be used to find the markers of a template. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. LengthSource Specifies the source to use to define the length of the profiles. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. LengthMode Specifies the mode with which to interpret the specified length (ParamArrayPtr). Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. NumberValue Specifies the number of profiles. Set this parameter to M_DEFAULT if not used. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the ParamArrayPtr parameter. See the Parameter associations section for possible values that can be specified. ParamArrayPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a constant std::vector&lt;MIL_DOUBLE&gt; ] M_NULL MIL_DOUBLE Specifies the address of the array that contains the lengths of the profiles. If this information is not required, set this parameter to M_NULL. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The tables below list possible values for the PathOrTemplateContext3dmeasId, Geometry3dgeoId, Matrix3dgeoId, PathOrTemplateIndex, TransitionType, NumberMode, LengthSource, LengthMode, NumberValue, and ParamArrayPtr parameters. For adding a path or template to the 3D measurement context For deleting a path or template from the 3D measurement context To add a path or template to the 3D measurement context, the PathOrTemplateContext3dmeasId, Geometry3dgeoId, Matrix3dgeoId, PathOrTemplateIndex, TransitionType, NumberMode, LengthSource, LengthMode, NumberValue, and ParamArrayPtr parameters can be set to the following values. The Operation parameter must be set to M_ADD. Note that any unused parameters should be set to M_DEFAULT. Note, if unused, set ParamArrayPtr to M_NULL. For adding a path or template to the 3D measurement context PathOrTemplateContext3dmeasId Description Geometry3dgeoId Matrix3dgeoId PathOrTemplateIndex TransitionType NumberMode LengthSource LengthMode NumberValue ParamArrayPtr Path 3D measurement context identifier in which to define a path Specifies to add a path to a path 3D measurement context. Geometry3dgeoId Specifies the identifier of the 3D geometry object to use to define the path. The 3D geometry object must have been allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a line. Matrix3dgeoId Specifies the identifier of the transformation matrix object to apply to the path. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. PathOrTemplateIndex This parameter must be set to M_DEFAULT. TransitionType Specifies the type of transition to find. M_DEFAULT Same as M_EDGE. M_EDGE Specifies to search for edge transitions. M_EDGE_OR_INVALID Specifies to search for edge transitions and invalid transitions. M_INVALID Specifies to search for invalid transitions. Template 3D measurement context identifier in which to define a template Specifies to add a template to a template 3D measurement context. Geometry3dgeoId Specifies the identifier of the 3D geometry object to use to define the template. The 3D geometry object must have been allocated using M3dgeoAlloc() with M_GEOMETRY and successfully defined as a line. Matrix3dgeoId Specifies the identifier of the transformation matrix object to apply to the template. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. PathOrTemplateIndex This parameter must be set to M_DEFAULT. TransitionType Specifies the type of transition to find. M_DEFAULT Same as M_EDGE. M_EDGE Specifies to search for edge transitions. M_EDGE_OR_INVALID Specifies to search for edge transitions and invalid transitions. M_INVALID Specifies to search for invalid transitions. NumberMode Specifies the mode with which to determine the number of profiles that will be used to find the markers of a template. M_DEFAULT Same as M_USER_DEFINED. M_SPACING Specifies that the number of profiles is based on the spacing between the profiles. The profiles are generated such that they are evenly spaced and span the entire template. Note that you must set the required spacing using M3dmeasControl() with M_TEMPLATE_PROFILE_SPACING and M_TEMPLATE_PROFILE_SPACING_MODE. M_USER_DEFINED Specifies that the number of profiles is explicitly set using the NumberValue parameter. LengthSource Specifies the source to use to define the length of the profiles. M_DEFAULT Same as M_TEMPLATE. M_PROFILE Specifies that the length of each profile is set individually. You must set the length of each profile using ParamArrayPtr. Note that this value is only available when NumberMode is set to M_USER_DEFINED. M_TEMPLATE Specifies that the length of each profile is determined by a single value set for the template. You must set the length of the profiles using ParamArrayPtr. LengthMode Specifies the mode with which to interpret the specified length (ParamArrayPtr). M_DEFAULT Same as M_RELATIVE_TO_PIXEL_SIZE_MIN. M_ABSOLUTE Specifies to use the length value directly, without applying a multiplying factor. For example, if you set the length value to 2.0, the profile length will be 2.0 mm. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the length value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the length value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the length value by the pixel size in X. For example, if you set the length value to 2.0 and the pixel size in X is 0.5 mm, the profile length will be 1.0 mm. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the length value by the pixel size in Y. For example, if you set the length value to 2.0 and the pixel size in Y is 0.6 mm, the profile length will be 1.2 mm. NumberValue Specifies the number of profiles. M_DEFAULT Specifies the default value. If NumberMode is set to M_SPACING, specifies that the number value is not required. If NumberMode is set to M_USER_DEFINED, the default value is 10. Value &gt; 0 Specifies the number of profiles. Note that this value is only available when NumberMode is set to M_USER_DEFINED. ParamArrayPtr Specifies the address of the array that contains the lengths of the profiles. When the LengthSource parameter is set to M_PROFILE, the number of elements in the array should be equal to the NumberValue parameter. When it is set to M_TEMPLATE, the array size should be 1. Alternatively, you can set this parameter to M_NULL to use the default length of the template 3D measurement context. To delete a path or template from the 3D measurement context, the PathOrTemplateContext3dmeasId, Geometry3dgeoId, Matrix3dgeoId, and PathOrTemplateIndex parameters can be set to the following values. The Operation parameter must be set to M_DELETE. Note that any unused parameters should be set to M_DEFAULT. Note, set ParamArrayPtr to M_NULL. For deleting a path or template from the 3D measurement context PathOrTemplateContext3dmeasId Description Geometry3dgeoId Matrix3dgeoId PathOrTemplateIndex TransitionType NumberMode LengthSource LengthMode NumberValue ParamArrayPtr Path 3D measurement context identifier in which to remove a path Specifies to delete a path from a path 3D measurement context. Geometry3dgeoId This parameter must be set to M_DEFAULT. Matrix3dgeoId This parameter must be set to M_DEFAULT. PathOrTemplateIndex Specifies the index of the path in the path 3D measurement context. M_PATH_INDEX( MIL_INT PathIndex ) Specifies the path to delete from the path 3D measurement context. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. Template 3D measurement context identifier in which to remove a template Specifies to delete a template from a template 3D measurement context. Geometry3dgeoId This parameter must be set to M_DEFAULT. Matrix3dgeoId This parameter must be set to M_DEFAULT. PathOrTemplateIndex Specifies the index of the template in the template 3D measurement context. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies the template to delete from the template 3D measurement context. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. Return value Reserved for future expansion. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - PathOrTemplateContext3dmeasId - Geometry3dgeoId - Matrix3dgeoId - PathOrTemplateIndex - Operation For specifying the type of operation - MarkerType - TransitionType - NumberMode - LengthSource - LengthMode - NumberValue - ParamArrayPtr - ControlFlag Parameter Associations For adding a path or template to the 3D measurement context For deleting a path or template from the 3D measurement context Return value Compilation information ",
      "wordCount": 1956,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasDraw",
      "version": null,
      "title": "M3dmeasDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasDraw.htm",
      "text": " M3dmeasDraw Synopsis Draw specific features of templates, paths, profiles, or markers in an image buffer or 2D graphics list. Syntax void M3dmeasDraw( MIL_ID&nbsp;ContextGraId, //in MIL_ID&nbsp;ContextOrResult3dmeasId, //in MIL_ID&nbsp;DstImageBufOrListGraId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;PathOrTemplateIndex, //in MIL_INT64&nbsp;ProfileIndex, //in MIL_INT64&nbsp;MarkerIndex, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function draws specific template, path, profile, or marker features in the destination image buffer or 2D graphics list. Parameters Parameters ContextGraId Specifies the identifier of the 2D graphics context to use when drawing. This parameter must be set to one of the following values: For specifying the 2D graphics context Value Description M_DEFAULT Specifies that the default 2D graphics context of the current MIL application is used. Note that there is a different default 2D graphics context for each thread. MIL 2D graphics context identifier Specifies a valid 2D graphics context identifier, which you have allocated using MgraAlloc(). ContextOrResult3dmeasId Specifies the 3D measurement context or result buffer from which to extract the features to draw. The 3D measurement context or result buffer must have been previously allocated using M3dmeasAlloc() or M3dmeasAllocResult(), respectively. DstImageBufOrListGraId Specifies the identifier of the destination image buffer or 2D graphics list in which to draw. The buffer can be any valid MIL image buffer allocated using MbufAlloc...(). The 2D graphics list must be previously allocated using MgraAllocList(). By drawing into a display's overlay buffer or associating the 2D graphics list with the display, you can also annotate an image non-destructively. If specifying an image buffer, it must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. Operation Specifies the type of operation to perform. Operations can be added together to draw multiple features at a time. For example, to draw both the marker's profile region and the marker, you would set the Operation parameter to M_DRAW_PROFILE_REGION + M_DRAW_MARKERS. The Operation parameter can be set to a combination of the following values. The following operation can draw path features extracted from a path 3D measurement context. For extracting path features from a path 3D measurement context Value Description M_DRAW_PATH Draws the path as a line with an arrow head. The following operation can draw template features extracted from a template 3D measurement context. For extracting template features from a template 3D measurement context Value Description M_DRAW_TEMPLATE Draws the template as a line with an arrow head. The following operations can draw profile features extracted from a path or template 3D measurement context, or a profile, path, or template 3D measurement result buffer. For extracting profile features from a path or template 3D measurement context or any 3D measurement result buffer Value Description M_DRAW_PROFILE_REGION Draws a rectangle around the profile. M_DRAW_PROFILE_REGION_DIRECTION Draws a line with an arrow pointing in the direction of the profile. The following operations can draw marker features extracted from a profile, path, or template 3D measurement result buffer. For extracting marker features from a 3D measurement result buffer Value Description M_DRAW_MARKERS Draws a cross-like symbol at the marker position. M_DRAW_TRANSITIONS Draws a cross-like symbol at the transition position. The following operations can draw fit features extracted from a template 3D measurement result buffer. For extracting fit features from a template 3D measurement result buffer Value Description M_DRAW_FIT_GEOMETRY Draws the fitted 3D line geometry. M_DRAW_FIT_MARKERS Draws a cross-like symbol at the marker positions that were used for the fit. M_DRAW_FIT_MARKERS_OUTLIERS Draws a cross-like symbol at the marker positions that were not used for the fit. PathOrTemplateIndex Specifies the index of the path or template in the specified 3D measurement context or result buffer. This parameter should be set to one of the following values: For specifying the template or path Value Description M_PATH_INDEX( MIL_INT PathIndex ) Specifies that the drawing operation is for a path in the path 3D measurement context or result buffer, if one is specified. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies that the drawing operation is for a template in the template 3D measurement context or result buffer, if one is specified. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. M_DEFAULT_TEMPLATE Specifies that the drawing operation is for the default template in the profile 3D measurement result buffer, if one is specified. Note that the default template in a profile 3D measurement context is different from an explicitly defined template in a template 3D measurement context. The default template is inherent to the supplied profiles, such that it is the theoretical template that would result in these profiles. Note, unlike for the profiles perpendicular to the template in a template 3D measurement context, multiple markers can be found along the profiles perpendicular to the default template in a profile 3D measurement context. ProfileIndex Specifies the index of the profile in the specified 3D measurement context or result buffer. This parameter should be set to one of the following values: For specifying the profile Value Description M_DEFAULT Same as M_ALL. M_PROFILE_INDEX( MIL_INT Index ) Specifies that the drawing operation is for a profile in the specified 3D measurement context or result buffer. Parameters Index Set this parameter to the following: M_ALL Specifies all profiles in the specified 3D measurement context or result buffer. Value &gt;= 0 Specifies the index of the profile in the specified 3D measurement context or result buffer. MarkerIndex Specifies the index of the marker in the specified 3D measurement result buffer. This parameter should be set to one of the following values: For specifying the marker Value Description M_DEFAULT Same as M_ALL. M_ALL Specifies that the drawing operation is for all markers in the specified 3D measurement result buffer. Value &gt;= 0 Specifies the index of the marker in the specified 3D measurement result buffer. ControlFlag Reserved for future expansion. this parameter must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - ContextGraId For specifying the 2D graphics context - ContextOrResult3dmeasId - DstImageBufOrListGraId - Operation For extracting path features from a path 3D measurement context For extracting template features from a template 3D measurement context For extracting profile features from a path or template 3D measurement context or any 3D measurement result buffer For extracting marker features from a 3D measurement result buffer For extracting fit features from a template 3D measurement result buffer - PathOrTemplateIndex For specifying the template or path - ProfileIndex For specifying the profile - MarkerIndex For specifying the marker - ControlFlag Compilation information ",
      "wordCount": 1087,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasDraw3d",
      "version": null,
      "title": "M3dmeasDraw3d",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasDraw3d.htm",
      "text": " M3dmeasDraw3d Synopsis Draw specific features of templates, paths, profiles, or markers into a 3D graphics list. Syntax MIL_INT64 M3dmeasDraw3d( MIL_ID&nbsp;OperationDraw3dContext3dmeasId, //in MIL_ID&nbsp;SrcResult3dmeasId, //in MIL_INT64&nbsp;PathOrTemplateIndex, //in MIL_INT64&nbsp;ProfileIndex, //in MIL_INT64&nbsp;MarkerIndex, //in MIL_ID&nbsp;DstList3dgraId, //in MIL_INT64&nbsp;DstParentLabel, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function draws specific template, path, profile, or marker features, stored in the specified 3D measurement result buffer, into a 3D graphics list. Set the draw operations and options for the draw using M3dmeasControlDraw(). Parameters Parameters OperationDraw3dContext3dmeasId Specifies the identifier of the draw 3D measurement context that specifies the annotations to draw and how to draw them. For specifying the draw 3D measurement context Value Description M_DEFAULT Specifies a predefined draw 3D measurement context. The default context is predefined with all draw operations (M3dmeasControlDraw()) set to use default settings. MIL draw 3D measurement context identifier Specifies a valid draw 3D measurement context identifier, which you have allocated using M3dmeasAlloc() with M_DRAW_3D_PATH_CONTEXT, M_DRAW_3D_PROFILE_CONTEXT, or M_DRAW_3D_TEMPLATE_CONTEXT. SrcResult3dmeasId Specifies the identifier of the profile, path, or template 3D measurement result buffer, previously allocated using M3dmeasAllocResult() with M_FIND_MARKER_PROFILE_RESULT, M_FIND_MARKER_PATH_RESULT, or M_FIND_MARKER_TEMPLATE_RESULT, respectively. PathOrTemplateIndex Specifies the path or template to draw. Set this parameter to one of the following values: For specifying a template or path Value Description M_PATH_INDEX( MIL_INT PathIndex ) Specifies the path in the path 3D measurement result buffer to draw, if one is specified. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies the template in the template 3D measurement result buffer to draw, if one is specified. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. M_DEFAULT_TEMPLATE Specifies to draw the default template in the profile 3D measurement result buffer, if one is specified. Note that the default template in a profile 3D measurement context is different from an explicitly defined template in a template 3D measurement context. The default template is inherent to the supplied profiles, such that it is the theoretical template that would result in these profiles. Note, unlike for the profiles perpendicular to the template in a template 3D measurement context, multiple markers can be found along the profiles perpendicular to the default template in a profile 3D measurement context. ProfileIndex Specifies the profile to draw. Set this parameter to one of the following values: For specifying a profile Value Description M_DEFAULT Same as M_ALL. M_PROFILE_INDEX( MIL_INT Index ) Specifies the profile in the specified 3D measurement result buffer to draw. Parameters Index Set this parameter to the following: M_ALL Specifies all profiles. Value &gt;= 0 Specifies the index of the profile. MarkerIndex Specifies the marker to draw. Set this parameter to one of the following values: For specifying a marker Value Description M_DEFAULT Same as M_ALL. M_ALL Specifies to draw features of all the markers. Value &gt;= 0 Specifies the index of the markers for which to draw features. DstList3dgraId Specifies the identifier of the 3D graphics list in which to draw. The 3D graphics list must have been previously allocated using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). DstParentLabel Specifies the label of the 3D graphic in the 3D graphics list to use as the annotation's parent. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the label of the 3D graphic added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - OperationDraw3dContext3dmeasId For specifying the draw 3D measurement context - SrcResult3dmeasId - PathOrTemplateIndex For specifying a template or path - ProfileIndex For specifying a profile - MarkerIndex For specifying a marker - DstList3dgraId - DstParentLabel For specifying the parent label - ControlFlag Return value Compilation information ",
      "wordCount": 665,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasFindMarker",
      "version": null,
      "title": "M3dmeasFindMarker",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasFindMarker.htm",
      "text": " M3dmeasFindMarker Synopsis Search for markers in a depth map. Syntax void M3dmeasFindMarker( MIL_ID&nbsp;Context3dmeasId, //in MIL_ID&nbsp;DepthMapOrContainerBufId, //in MIL_ID&nbsp;Result3dmeasId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function searches for markers in the specified depth map and writes the results in the specified result buffer. You can retrieve results using M3dmeasGetResult(). Markers denote the location of transitions along a profile. Edge transitions go from a lower Z-value to a higher Z-value (or vice versa). Note that invalid transitions can also be identified, either in the middle of an invalid region, or where the data goes from valid to invalid (or vice versa). To find markers along a specified path in the supplied depth map, you must use a path 3D measurement context. You must add a path to the path 3D measurement context, using M3dmeasDefine(). Setting a path is useful when you want to find an object but you don't know its exact location. You can set a path that crosses through possible locations to detect height changes along the line. In this case, M3dmeasFindMarker() extracts a single profile along the path and finds the markers in the profile. If you want to verify if an object is at an expected location or has an expected shape, you can find markers perpendicular to a template. To set a template where you expect a height change to occur, you must use a template 3D measurement context. You must add a template that follows an expected edge of your object to the template 3D measurement context, using M3dmeasDefine(). In this case, M3dmeasFindMarker() extracts profiles at regular intervals perpendicular to the template and finds the best marker close to the template in each profile. If your template runs along a column(s) of the depth map, you can use a profile 3D measurement context instead, in which case the profile extraction step is skipped and the find marker operation is performed on each row (profile) of the depth map; you don't explicitly define the template. If you supply the profiles, the 3D measurement module can find the specified number of markers along each profile. If you use a template 3D measurement context, you can use M3dmeasFit() after calling M3dmeasFindMarker() to fit a geometry to the found markers to compare its position with the defined template. Alternatively, you can find the markers from the template's perpendicular profiles and perform the fit simultaneously, using M3dmeasFit() with a template 3D measurement context and a depth map. When the find and fit are performed simultaneously, all possible markers are considered and the ones that provide the best fit are kept. Use M3dmeasControl() to configure profile extraction settings and marker search settings before calling this function. Parameters Parameters Context3dmeasId Specifies the 3D measurement context. The context must have been allocated using M3dmeasAlloc() with M_FIND_MARKER_PROFILE_CONTEXT, M_FIND_MARKER_PATH_CONTEXT, or M_FIND_MARKER_TEMPLATE_CONTEXT. DepthMapOrContainerBufId Specifies the identifier of the depth map container or depth map image buffer. For specifying the depth map container or depth map image buffer identifier Value Description Depth map container identifier Specifies the identifier of a depth map container. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must store data in a 3D-processable depth map format (that is, if you call MbufInquireContainer() with M_3D_PROCESSABLE_DEPTH_MAP, the function returns M_TRUE). Depth map image buffer identifier Specifies the identifier of a depth map image buffer. The image buffer must be an 8-bit, 16-bit, or 32-bit unsigned, 1-band buffer, and must contain a fully corrected depth map (that is, if you call McalInquire() with M_DEPTH_MAP, the function returns M_TRUE). The image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. Result3dmeasId Specifies the identifier of the 3D measurement result buffer. The result buffer must have been allocated using M3dmeasAllocResult() with M_FIND_MARKER_PROFILE_RESULT, M_FIND_MARKER_PATH_RESULT, or M_FIND_MARKER_TEMPLATE_RESULT, and must match the specified context. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - Context3dmeasId - DepthMapOrContainerBufId For specifying the depth map container or depth map image buffer identifier - Result3dmeasId - ControlFlag Compilation information ",
      "wordCount": 690,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasFit",
      "version": null,
      "title": "M3dmeasFit",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasFit.htm",
      "text": " M3dmeasFit Synopsis Fits a 3D line geometry to markers found in a template's perpendicular profiles. Syntax void M3dmeasFit( MIL_ID&nbsp;FitContext3dmeasId, //in MIL_ID&nbsp;TemplateContext3dmeasId, //in MIL_ID&nbsp;DepthMapOrContainerBufId, //in MIL_ID&nbsp;TemplateResult3dmeasId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function fits a 3D line geometry to markers found in a template's perpendicular profiles. You can find the markers before calling this function, using M3dmeasFindMarker(). If finding the markers before calling this function, pass the template 3D measurement result buffer containing the markers to which to fit the line geometry. The results must be stored in the template 3D measurement result buffer that you pass to this function through the TemplateResult3dmeasId parameter, and the TemplateContext3dmeasId and DepthMapOrContainerBufId parameters must be set to M_NULL. This function can also find markers and perform the fit simultaneously, in which case, all possible markers are considered and the ones that provide the best fit are kept. You must provide the template 3D measurement context and the depth map image buffer or container in which to search for markers. You can use M3dmeasGetResult() with M_ANGULARITY, M_CENTER_DISTANCE, and M_DISTANCE_MAX to compare the resulting fitted geometry to the defined template. Parameters Parameters FitContext3dmeasId Specifies the identifier of the fit 3D measurement context. The context must have been allocated using M3dmeasAlloc() with M_FIT_CONTEXT. TemplateContext3dmeasId Specifies the identifier of the template 3D measurement context, when searching for the markers using this function. If TemplateResult3dmeasId already contains found markers and you only want to perform the fit operation, set this parameter to M_NULL. The context must have been allocated using M3dmeasAlloc() with M_FIND_MARKER_TEMPLATE_CONTEXT. DepthMapOrContainerBufId Specifies the identifier of the depth map container or depth map image buffer, when searching for the markers using this function. If TemplateResult3dmeasId already contains found markers and you only want to perform the fit operation, set this parameter to M_NULL. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must store data in a 3D-processable depth map format (that is, if you call MbufInquireContainer() with M_3D_PROCESSABLE_DEPTH_MAP, the function returns M_TRUE). The image buffer must be an 8-bit, 16-bit, or 32-bit unsigned, 1-band buffer, and must contain a fully corrected depth map (that is, if you call McalInquire() with M_DEPTH_MAP, the function returns M_TRUE). TemplateResult3dmeasId Specifies the identifier of the template 3D measurement result buffer. The result buffer must have been allocated using M3dmeasAllocResult() with M_FIND_MARKER_TEMPLATE_RESULT, and, if TemplateContext3dmeasId and DepthMapOrContainerBufId are set to M_NULL, must contain the results of a call to M3dmeasFindMarker(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - FitContext3dmeasId - TemplateContext3dmeasId - DepthMapOrContainerBufId - TemplateResult3dmeasId - ControlFlag Compilation information ",
      "wordCount": 443,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasFree",
      "version": null,
      "title": "M3dmeasFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasFree.htm",
      "text": " M3dmeasFree Synopsis Free a 3D measurement context or result buffer. Syntax void M3dmeasFree( MIL_ID&nbsp;ContextOrResult3dmeasId //in ) Description This function deletes the specified 3D measurement context or result buffer identifier, and releases any memory associated with it. All 3D measurement contexts and result buffers allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter ContextOrResult3dmeasId Specifies the identifier of the 3D measurement context or result buffer to free. These must have been successfully allocated using M3dmeasAlloc() or M3dmeasAllocResult() prior to calling this function. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - ContextOrResult3dmeasId Compilation information ",
      "wordCount": 116,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasGetResult",
      "version": null,
      "title": "M3dmeasGetResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasGetResult.htm",
      "text": " M3dmeasGetResult Synopsis Get the specified type of result(s) from a 3D measurement result buffer. Syntax MIL_DOUBLE M3dmeasGetResult( MIL_ID&nbsp;Result3dmeasId, //in MIL_INT64&nbsp;PathOrTemplateIndex, //in MIL_INT64&nbsp;ProfileIndex, //in MIL_INT64&nbsp;MarkerIndex, //in MIL_INT64&nbsp;ResultType, //in void&nbsp;*ResultArrayPtr //out ) Description This function retrieves the result(s) of the specified type from a 3D measurement result buffer. Parameters Parameters Result3dmeasId Specifies the identifier of the 3D measurement result buffer from which to retrieve results. PathOrTemplateIndex Specifies the index of the path or template, or a default template. Set this parameter to one of the following values: For specifying the index of the template or path Value Description M_PATH_INDEX( MIL_INT PathIndex ) Specifies to retrieve results for a path in a path 3D measurement result buffer, if one is specified. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies to retrieve results for a template in a template 3D measurement result buffer, if one is specified. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. M_DEFAULT_TEMPLATE Specifies to retrieve results for the default template in a profile 3D measurement result buffer, if one is specified. Note that the default template in a profile 3D measurement context is different from an explicitly defined template in a template 3D measurement context. The default template is inherent to the supplied profiles, such that it is the theoretical template that would result in these profiles. Note, unlike for the profiles perpendicular to the template in a template 3D measurement context, multiple markers can be found along the profiles perpendicular to the default template in a profile 3D measurement context. ProfileIndex Specifies the index of the profile. Set this parameter to one of the following values: For specifying the index of the profile Value Description M_DEFAULT Same as M_GENERAL. M_PROFILE_INDEX( MIL_INT ProfileIndex ) Specifies to retrieve results for a profile. Parameters ProfileIndex Set this parameter to one of the following: M_ALL Specifies all profiles. Value &gt;= 0 Specifies the index of the profile. M_GENERAL Specifies to retrieve general results for a default template, path, or template. MarkerIndex Specifies the index of the marker. Set this parameter to one of the following values: For specifying the index of the marker Value Description M_DEFAULT Same as M_GENERAL. M_TRANSITION_FIRST( MIL_INT MarkerIndex ) Specifies to retrieve results for the first transition of a marker. Note that since only single transition markers are currently supported, the first transition is the sole transition of the marker. Parameters MarkerIndex Set this parameter to one of the following: M_ALL Specifies all markers. 0 &lt;= Value &lt; M_NUMBER_MARKER Specifies the index of the marker. M_ALL Specifies to retrieve results for all markers. M_GENERAL Specifies to retrieve general results for a default template, path, template, or profile. 0 &lt;= Value &lt; M_NUMBER_MARKER Specifies the index of the individual marker for which to retrieve results. ResultType Specifies the type of result to retrieve. See the Parameter associations section for possible values that can be specified. ResultArrayPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_ID [optionally, in C++: a reference to a std::vector&lt;MIL_ID&gt; ] array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MIL_DOUBLE MIL_ID MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the results. Since the M3dmeasGetResult() function also returns the results, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the ResultType parameter and possible values returned to the ResultArrayPtr parameter. For retrieving general results from a profile, path, or template 3D measurement result buffer For retrieving profile results from a profile, path, or template 3D measurement result buffer For retrieving marker or transition results from a profile, path, or template 3D measurement result buffer For retrieving fit results from a template 3D measurement result buffer When retrieving general results for a default template, path, or template from a profile, path, or template 3D measurement result buffer, the ResultType parameter can be set to one of the following values. ProfileIndex and MarkerIndex must be set to M_GENERAL. For retrieving general results from a profile, path, or template 3D measurement result buffer ResultType Description ResultArrayPtr - Possible values returned M_NUMBER_PROFILE Retrieves the number of profiles that were analyzed. Note that along a path, only one profile is extracted and analyzed. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PROFILE_SAMPLE_SIZE Retrieves the sampling distance between profile points, in world units. Note that this is also the pixel size in X of the profiles. For a path or template 3D measurement result buffer, this is equivalent to the sampling distance specified using M3dmeasControl() with M_PROFILE_SAMPLE_SIZE when M_PROFILE_SAMPLE_SIZE_MODE is set to M_ABSOLUTE, or equivalent to M_PROFILE_SAMPLE_SIZE multiplied by the source pixel size when M_PROFILE_SAMPLE_SIZE_MODE is set to M_RELATIVE_TO_PIXEL_SIZE_.... ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_STATUS_FIND Retrieves the status of the find marker operation. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_COMPLETE Specifies that the find marker operation completed. M_CURRENTLY_CALCULATING Specifies that the find marker operation is ongoing. You can only get this status if you are retrieving it from another thread. M_INTERNAL_ERROR Specifies that an unexpected internal error occurred during the find marker operation. M_NOT_INITIALIZED Specifies that the 3D measurement result buffer was not used in a call to M3dmeasFindMarker() or M3dmeasFit(), and contains no results. M_STOPPED_BY_REQUEST Specifies that the find marker operation was stopped from another thread using M3dmeasControl() with M_STOP_FIND. M_TIMEOUT_REACHED Specifies that the find marker operation took longer than the allowed value, specified using M3dmeasControl() with M_TIMEOUT, and has stopped before completion. When retrieving results for a profile from a profile, path, or template 3D measurement result buffer, the ResultType parameter can be set to one of the following values. ProfileIndex must be set to the index of one or all profiles, and MarkerIndex must be set to M_GENERAL. For retrieving profile results from a profile, path, or template 3D measurement result buffer ResultType Description ResultArrayPtr - Possible values returned M_NUMBER_MARKER Retrieves the number of markers found. Note that for a template 3D measurement result buffer, a maximum of 1 marker is found for each profile taken perpendicular to a template. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: when retrieving a result for an individual profile Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_PROFILE ) M3dmeasGetResult ( M_NUMBER_MARKER + M_NB_ELEMENTS ) Note: when retrieving a result for all profiles M_PROFILE_RESPONSE Retrieves the response of the profile after applying a filter (that is, the normalized first derivative profile response). Note that this result type is not available if the M_MARKER_TRANSITION control type is set to M_INVALID. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_RESULT_SIZE_X ) M3dmeasGetResult ( M_PROFILE_RESPONSE + M_NB_ELEMENTS ) M_RESULT_SIZE_X Retrieves the size in X of the profile response, in sample units. Note that this is equivalent to the number of profile points. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: when retrieving a result for an individual profile Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_PROFILE ) M3dmeasGetResult ( M_RESULT_SIZE_X + M_NB_ELEMENTS ) Note: when retrieving a result for all profiles When retrieving results for a marker or marker transition from a profile, path, or template 3D measurement result buffer, the ResultType parameter can be set to one of the following values. ProfileIndex must be set to the index of one or all profiles, and MarkerIndex must be set to the index of one or all markers or the first transition of one or all markers. For retrieving marker or transition results from a profile, path, or template 3D measurement result buffer ResultType Description ResultArrayPtr - Possible values returned M_DEPTH Retrieves the depth of the marker or transition. This is equivalent to M_MAX_Z - M_MIN_Z. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_DEPTH + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_FIT_INLIER_STATUS Retrieves whether the marker was inside or outside the fit. Note that MarkerIndex must be set to the index of one or all markers. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: when retrieving a result for an individual marker Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_FIT_INLIER_STATUS + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_INSIDE Specifies that the marker was inside. M_OUTSIDE Specifies that the marker was outside. M_MAX_Z Retrieves the maximum Z-value that makes up the marker or transition. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_MAX_Z + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_MIN_Z Retrieves the minimum Z-value that makes up the marker or transition. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_MIN_Z + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_OFFSET Retrieves the offset of the marker or transition from the position specified using M3dmeasControl() with M_MARKER_POSITION_RELATIVE. The offset is calculated using the following formula: (M_POSITION / nominal profile length * 100) - M_MARKER_POSITION_RELATIVE . For example, if the marker/transition was found at 3 mm from the start of the profile, the nominal profile length is 10 mm, and M_MARKER_POSITION_RELATIVE is set to 50%, M_OFFSET will return -20%. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_OFFSET + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POLARITY Retrieves the polarity of the transition. Note that MarkerIndex must be set to the first transition of one or all markers. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: when retrieving a result for an individual marker Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POLARITY + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_NEGATIVE Specifies a negative polarity. M_POSITIVE Specifies a positive polarity. M_POSITION Retrieves the position of the marker or transition relative to the start of the profile, in world units. For example, if the marker/transition was found at 3 mm from the start of the profile, M_POSITION will return 3 mm. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POSITION_EXTRACTED Retrieves the position of the marker or transition relative to the start of the profile, in sample units. Note that this considers the entire profile, including areas that are clipped due to falling outside of the depth map. The extracted position is calculated using the following formula: M_POSITION / (M_PROFILE_SAMPLE_SIZE / sample). For example, if the marker/transition was found at 3 mm from the start of the profile and the sampling distance is 0.25 mm, M_POSITION_EXTRACTED will return 12 sample units. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_EXTRACTED + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POSITION_EXTRACTED_CLIPPED Retrieves the position of the marker or transition relative to the start of the clipped profile, in sample units. For example, if the marker or transition is 12 sample units from the start of whole profile, but the first 2 sample units of the profile fall outside of the depth map, M_POSITION_EXTRACTED_CLIPPED will return 10 sample units. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_EXTRACTED_CLIPPED + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POSITION_INVALID Retrieves the position of the invalid transition relative to an invalid region (gap) in the profile. Note that MarkerIndex must be set to the first transition of one or all markers. This result type is only meaningful if the M_TRANSITION result type is M_INVALID. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: when retrieving a result for an individual marker Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_INVALID + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_AFTER Specifies that the transition is located after the gap. M_BEFORE Specifies that the transition is located before the gap. M_MIDDLE Specifies that the transition is located in the middle of the gap. M_POSITION_RELATIVE Retrieves the position of the marker or transition relative to the start of the profile, as a percentage of the nominal length of the profile. The relative position is calculated using the following formula: M_POSITION / nominal profile length * 100. For example, if the marker/transition was found at 3 mm from the start of the profile and the nominal profile length is 10 mm, M_POSITION_RELATIVE will return 30%. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_RELATIVE + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POSITION_X Retrieves the X-coordinate of the marker or transition in the source depth map. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_X + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POSITION_Y Retrieves the Y-coordinate of the marker or transition in the source depth map. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_Y + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_POSITION_Z Retrieves the Z-coordinate of the marker or transition in the source depth map. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_POSITION_Z + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_STRENGTH Retrieves the strength of the marker or transition in the profile response. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: when retrieving a result for an individual marker Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_STRENGTH + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_TRANSITION Retrieves the type of transition. Note that MarkerIndex must be set to the first transition of one or all markers. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: when retrieving a result for an individual marker Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dmeasGetResult ( M_NUMBER_MARKER ) M3dmeasGetResult ( M_TRANSITION + M_NB_ELEMENTS ) Note: when retrieving a result for all markers M_EDGE Specifies an edge transition. M_INVALID Specifies an invalid transition. If M3dmeasControl() with M_MARKER_TRANSITION is set to M_EDGE_OR_INVALID or M_INVALID, invalid transitions can be identified before, after, or in the middle of gaps encountered in the profile. When retrieving fit results for a template from a template 3D measurement result buffer, the ResultType parameter can be set to one of the following values. PathOrTemplateIndex must be set to M_TEMPLATE_INDEX(), and ProfileIndex and MarkerIndex must be set to M_GENERAL. These results are only available after a call to M3dmeasFit(). For retrieving fit results from a template 3D measurement result buffer ResultType Description ResultArrayPtr - Possible values returned M_ANGULARITY Retrieves the angle between the fitted 3D geometry and the template, in degrees. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_AXIS_X Retrieves the X-component of the fitted 3D geometry's unit vector. For a 3D line geometry, the X-component of the line's direction unit vector is retrieved. This vector does not reflect the line's length. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_AXIS_Y Retrieves the Y-component of the fitted 3D geometry's unit vector. For a 3D line geometry, the Y-component of the line's direction unit vector is retrieved. This vector does not reflect the line's length. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_AXIS_Z Retrieves the Z-component of the fitted 3D geometry's unit vector. For a 3D line geometry, the Z-component of the line's direction unit vector is retrieved. This vector does not reflect the line's length. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_CENTER_DISTANCE Retrieves the distance between the center of the fitted 3D geometry and the template. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_CENTER_X Retrieves the X-coordinate of the center of the fitted 3D geometry. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_CENTER_Y Retrieves the Y-coordinate of the center of the fitted 3D geometry. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_CENTER_Z Retrieves the Z-coordinate of the center of the fitted 3D geometry. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISTANCE_MAX Retrieves the maximum distance between the fitted 3D geometry and the template. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_END_POINT_X Retrieves the X-coordinate of the fitted 3D geometry's end point. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_END_POINT_Y Retrieves the Y-coordinate of the fitted 3D geometry's end point. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_END_POINT_Z Retrieves the Z-coordinate of the fitted 3D geometry's end point. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_FIT_RMS_ERROR Retrieves the root-mean-squared (RMS) error of the distance between the markers and the fitted 3D geometry. Only inliers are considered when calculating the RMS error. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_NUMBER_MARKER_FITTED Retrieves the number of markers that were used for the fit operation. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_NUMBER_MARKER_OUTLIERS Retrieves the number of markers that were not used for the fit operation. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_START_POINT_X Retrieves the X-coordinate of the fitted 3D geometry's start point. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_START_POINT_Y Retrieves the Y-coordinate of the fitted 3D geometry's start point. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_START_POINT_Z Retrieves the Z-coordinate of the fitted 3D geometry's start point. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_STATUS_FIT Retrieves the status of the fit operation. This result is always available. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_COMPLETE Specifies that the fit operation completed. M_CURRENTLY_CALCULATING Specifies that the fit operation is ongoing. You can only get this status if you are retrieving it from another thread. M_INSUFFICIENT_COVERAGE Specifies that the fit operation failed because an insufficient number of markers were covered by the fitted points. M_INTERNAL_ERROR Specifies that an unexpected error occurred during the fit operation. M_NOT_ENOUGH_VALID_DATA Specifies that the fit operation failed because there were not enough valid points to fit the specified 3D geometry. M_NOT_INITIALIZED Specifies that the 3D measurement result buffer was not used in a call to M3dmeasFit(), and contains no results. Combination value for Tables: For retrieving general results from a profile, path, or template 3D measurement result buffer For retrieving profile results from a profile, path, or template 3D measurement result buffer For retrieving marker or transition results from a profile, path, or template 3D measurement result buffer For retrieving fit results from a template 3D measurement result buffer the values listed in all the parameter association tables. You can add the following value to the above-mentioned values to specify whether a result is available. For determining whether results are available ResultType Description ResultArrayPtr - Possible values returned M_AVAILABLE Retrieves whether the requested result type is available for retrieval. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the requested result type is not available. M_TRUE Specifies that the requested result type is available. Combination value for the values listed in For retrieving profile results from a profile, path, or template 3D measurement result buffer, For retrieving marker or transition results from a profile, path, or template 3D measurement result buffer. You can add the following value to the above-mentioned values to determine the required array size (number of elements) to store the returned values. For determining the required array size (number of elements) to store the returned values ResultType combination value Description ResultArrayPtr - Possible values returned M_NB_ELEMENTS Retrieves the required array size (number of elements) to store the returned values. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Combination values for Tables: For retrieving general results from a profile, path, or template 3D measurement result buffer For retrieving profile results from a profile, path, or template 3D measurement result buffer For retrieving marker or transition results from a profile, path, or template 3D measurement result buffer For retrieving fit results from a template 3D measurement result buffer the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to cast the requested results to the required data type. Note: In C++, when using a standard vector (std::vector) instead of an array, the values listed in this combination table must not be used. If you need to use a specific data type, instantiate the vector with the necessary data type. For specifying the data type ResultType Description ResultArrayPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested results to a MIL_DOUBLE. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] &nbsp;|&nbsp; address of a MIL_DOUBLE MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_DOUBLE Note: When a single result. M_TYPE_MIL_ID Casts the requested results to a MIL_ID. ResultArrayPtr extra info Data type info: Data type: array of type MIL_ID [optionally, in C++: a reference to a std::vector&lt;MIL_ID&gt; ] &nbsp;|&nbsp; address of a MIL_ID MORE Data type: array of type MIL_ID [optionally, in C++: a reference to a std::vector&lt;MIL_ID&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_ID Note: When a single result. M_TYPE_MIL_INT Casts the requested results to a MIL_INT. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] &nbsp;|&nbsp; address of a MIL_INT MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT Note: When a single result. M_TYPE_MIL_INT32 Casts the requested results to a MIL_INT32. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] &nbsp;|&nbsp; address of a MIL_INT32 MORE Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT32 Note: When a single result. M_TYPE_MIL_INT64 Casts the requested results to a MIL_INT64. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT64 Note: When a single result. Return value The returned value is the requested information, cast to a MIL_DOUBLE. If the requested information does not fit into a MIL_DOUBLE, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - Result3dmeasId - PathOrTemplateIndex For specifying the index of the template or path - ProfileIndex For specifying the index of the profile - MarkerIndex For specifying the index of the marker - ResultType - ResultArrayPtr Parameter Associations For retrieving general results from a profile, path, or template 3D measurement result buffer For retrieving profile results from a profile, path, or template 3D measurement result buffer For retrieving marker or transition results from a profile, path, or template 3D measurement result buffer For retrieving fit results from a template 3D measurement result buffer + For determining whether results are available + For determining the required array size (number of elements) to store the returned values + For specifying the data type Return value Compilation information ",
      "wordCount": 5156,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasInquire",
      "version": null,
      "title": "M3dmeasInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasInquire.htm",
      "text": " M3dmeasInquire Synopsis Inquire information about a 3D measurement context. Syntax MIL_INT64 M3dmeasInquire( MIL_ID&nbsp;Context3dmeasId, //in MIL_INT64&nbsp;PathOrTemplateIndex, //in MIL_INT64&nbsp;ProfileIndex, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires information about a 3D measurement context. To retrieve results from a 3D measurement result buffer, use M3dmeasGetResult(). To inquire about draw 3D measurement settings for M3dmeasDraw3d(), use M3dmeasInquireDraw() instead. Parameters Parameters Context3dmeasId Specifies the identifier of the 3D measurement context to inquire. The 3D measurement context must have been previously allocated on the required system using M3dmeasAlloc(). PathOrTemplateIndex Specifies that information will be inquired about a 3D measurement context, a path, a template, or a default template. Set this parameter to one of the following values: For specifying what to inquire Value Description M_DEFAULT Same as M_CONTEXT. M_PATH_INDEX( MIL_INT PathIndex ) Specifies to inquire about an individual path in a path 3D measurement context, if one is specified. Parameters PathIndex Set this parameter to the following: 0 Specifies the index of the path. M_TEMPLATE_INDEX( MIL_INT TemplateIndex ) Specifies to inquire about an individual template in a template 3D measurement context, if one is specified. Parameters TemplateIndex Set this parameter to the following: 0 Specifies the index of the template. M_CONTEXT Specifies to inquire about a global setting of a 3D measurement context. M_DEFAULT_TEMPLATE Specifies to inquire about the default template in a profile 3D measurement context, if one is specified. Note that the default template in a profile 3D measurement context is different from an explicitly defined template in a template 3D measurement context. The default template is inherent to the supplied profiles, such that it is the theoretical template that would result in these profiles. Note, unlike for the profiles perpendicular to the template in a template 3D measurement context, multiple markers can be found along the profiles perpendicular to the default template in a profile 3D measurement context. ProfileIndex Specifies the profile to inquire about, if required. Set this parameter to one of the following values: For specifying a profile Value Description M_DEFAULT Specifies that the index of a profile is not required. M_PROFILE_INDEX( MIL_INT ProfileIndex ) Specifies to inquire about an individual profile in a template 3D measurement context, if one is specified. Parameters ProfileIndex Set this parameter to one of the following: M_ALL Specifies all profiles. Value &gt;= 0 Specifies the index of the profile. InquireType Specifies the type of information about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_FLOAT MIL_INT MIL_INT32 MIL_INT64 Specifies the address of the variable in which to write the requested information. Since the M3dmeasInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For inquiring about a global setting of a profile, path, or template 3D measurement context For inquiring about the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context For inquiring about the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context For inquiring about a template in a template 3D measurement context For inquiring about a template or profile in a template 3D measurement context For inquiring about a profile in a template 3D measurement context For inquiring about a fit 3D measurement context For inquiring about a path 3D measurement context For inquiring about a template 3D measurement context For a profile, path, or template 3D measurement context, the InquireType parameter can be set to one of the following to inquire about a global setting. PathOrTemplateIndex must be set to M_DEFAULT or M_CONTEXT, and ProfileIndex must be set to M_DEFAULT. For inquiring about a global setting of a profile, path, or template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_TIMEOUT Inquires the maximum amount of time for M3dmeasFindMarker() or M3dmeasFit() to complete the find marker operation before generating a time-out error. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. For the default template in a profile 3D measurement context, a path in a path 3D measurement context, or a template in a template 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to M_DEFAULT_TEMPLATE, the index of a path, or the index of a template, respectively, and ProfileIndex must be set to M_DEFAULT. For inquiring about the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_MARKER_NUMBER Inquires the number of markers to search for in the profile. Note that this inquire type is not available for a template 3D measurement context. In this case, the find marker operation always looks for 1 marker in each perpendicular profile of the template. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL Specifies to search for all markers. Value &gt; 0 Specifies the number of markers for which to search. M_MARKER_POLARITY Inquires the polarity of the transition to find. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ANY Specifies to find a transition with any polarity. M_NEGATIVE Specifies to find a transition with negative polarity. M_POSITIVE Specifies to find a transition with positive polarity. M_MARKER_POSITION_INVALID Inquires where to identify a transition when an invalid region is encountered in the profile. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AFTER Specifies that the transition is immediately after the gap. M_BEFORE Specifies that the transition is immediately before the gap. M_BOTH Specifies that there is one transition immediately before and one transition immediately after the gap. M_MIDDLE Specifies that the transition is in the middle of the gap. M_MARKER_POSITION_RELATIVE Inquires the position that the markers should be closest to when M_MARKER_SELECTION is set to M_POSITION_RELATIVE and the number of candidates is greater than M_MARKER_NUMBER. Note that this also inquires the relative position used when calculating the M3dmeasGetResult() M_OFFSET result type. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the position, as a percentage of the total profile length. M_MARKER_SELECTION Inquires the policy used to select found markers when the number of candidates is greater than M_MARKER_NUMBER. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BEST_FIT Specifies to use a different selection criteria depending on the operation. When performing an M3dmeasFindMarker() operation, M_BEST_FIT specifies to select markers according to their proximity to the profile's origin; the closest marker is selected first. When performing an M3dmeasFit() operation with a template 3D measurement context, M_BEST_FIT specifies to select markers according to possible resulting fit scores; the marker that would result in the best fit possible is selected first. M_POSITION_FIRST Specifies to select markers according to their proximity to the profile's origin; the closest marker is selected first. M_POSITION_LAST Specifies to select markers according to their proximity to the end of the profile; the closest marker is selected first. M_POSITION_RELATIVE Specifies to select markers according to their proximity to the position set using M_MARKER_POSITION_RELATIVE; the closest marker is selected first. M_STRONGEST Specifies to select markers according to the strength of the transition; the marker with the strongest transition is selected first. M_TALLEST Specifies to select markers according to their measured depth; the marker with the greatest depth is selected first. M_MARKER_STRENGTH_MIN Inquires the minimum strength required for a peak in the profile response, for it to be considered a valid transition signifying a marker. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the minimum strength. M_MARKER_STRENGTH_MIN_VAR Inquires the minimum prominence required for a peak in the profile response, for it to be considered a valid transition signifying a marker. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the minimum prominence. M_MARKER_TRANSITION Inquires the type of transition to find. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_EDGE Specifies to find edge transitions. M_EDGE_OR_INVALID Specifies to find edge transitions and invalid transitions. M_INVALID Specifies to find invalid transitions. M_MARKER_TYPE Inquires the type of marker to extract from the profile. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SINGLE Specifies to extract markers represented by a single transition. M_PROFILE_FILTER_SMOOTHNESS Inquires the degree of smoothness (strength of denoising) applied to the profile to create the profile response before finding the markers. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the smoothness value. M_PROFILE_GAP_FILL_SHARP_ELEVATION Inquires how to fill sharp elevation gaps. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AFTER Specifies to fill the gap with the value of the boundary after the gap. M_BEFORE Specifies to fill the gap with the value of the boundary before the gap. M_DISABLE Specifies not to fill sharp elevation gaps. M_MAX Specifies to fill the gap with the maximum gap boundary value. M_MIDDLE Specifies to fill the first half with the value of the boundary before the gap and the second half with the value of the boundary after the gap. M_MIN Specifies to fill the gap with the minimum gap boundary value. M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH Inquires the threshold used to differentiate between gradual elevation gaps and sharp elevation gaps. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies that the threshold is infinite. Value &gt;= 0.0 Specifies the threshold, as a percentage of the depth map's Z-range or in world units, depending on the units specified with M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH_UNITS. M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH_UNITS Inquires the units with which to interpret the M_PROFILE_GAP_FILL_SHARP_ELEVATION_DEPTH inquire type. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PERCENTAGE Specifies to interpret the value as a percentage of the range of Z-values (Z-range) visible in the depth map. M_WORLD Specifies to interpret the value in world units. M_PROFILE_GAP_FILL_THRESHOLD Inquires the maximum size of gaps that will be filled. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no maximum gap size. Value &gt;= 0.0 Specifies the maximum gap size, in sample or world units, depending on the units specified with M_PROFILE_GAP_FILL_THRESHOLD_UNITS. M_PROFILE_GAP_FILL_THRESHOLD_UNITS Inquires the units with which to interpret the M_PROFILE_GAP_FILL_THRESHOLD inquire type. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SAMPLE Specifies to interpret the value relative to the sampling distance (M_PROFILE_SAMPLE_SIZE). M_WORLD Specifies to interpret the value in world units. For a path in a path 3D measurement context or template in a template 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to the index of a path or template, respectively, and ProfileIndex must be set to M_DEFAULT. These inquire types are used to inquire about how to extract the profile along the path or the profiles at regular intervals perpendicular to the template. For inquiring about the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_PROFILE_ACCUMULATE_TYPE Inquires how points in a given sample are accumulated to create a single profile point when there are multiple points within the thickness of the profile line. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_MAX Specifies to use the largest value of all the points in the sample. M_MEAN Specifies to use the mean value of all the points in the sample. M_MIN Specifies to use the smallest value of all the points in the sample. M_PROFILE_INTERPOLATION_AVERAGE_FRACTION Inquires the fraction of the sampling distance to use when taking a weighted average of the area surrounding the profile point. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 1.0 Specifies the fraction. M_PROFILE_INTERPOLATION_MODE Inquires the interpolation mode used to calculate the value for each point in the sample that will be used to create the profile point. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AVERAGE Specifies averaging interpolation. M_BILINEAR Specifies bilinear interpolation. M_NEAREST_NEIGHBOR Specifies nearest neighbor interpolation. M_PROFILE_MIN_VALID_PERCENTAGE Inquires the minimum percentage of points in a given sample that must be valid to set the corresponding profile point to a valid value. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the percentage of points in the sample. M_PROFILE_SAMPLE_SIZE Inquires the sampling distance between two consecutive points along the profile line. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the distance. M_PROFILE_SAMPLE_SIZE_MODE Inquires how to interpret the specified sampling distance (M_PROFILE_SAMPLE_SIZE). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ABSOLUTE Specifies to use the sampling distance directly, without applying a multiplying factor. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the sampling distance by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the sampling distance by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the sampling distance by the pixel size in X. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the sampling distance by the pixel size in Y. M_PROFILE_THICKNESS Inquires the thickness of the profile line. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the thickness. M_PROFILE_THICKNESS_MODE Inquires how to interpret the specified thickness value (M_PROFILE_THICKNESS). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ABSOLUTE Specifies to use the thickness value directly, without applying a multiplying factor. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the thickness value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the thickness value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the thickness value by the pixel size in X. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the thickness value by the pixel size in Y. M_RELATIVE_TO_SPACING Specifies to multiply the thickness value by the profile spacing. For a template in a template 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to the index of a template, and ProfileIndex must be set to M_DEFAULT. For inquiring about a template in a template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_TEMPLATE_EXTENDED_SEARCH Inquires whether to extend the search outside of the template's defined area. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to extend the search beyond the template. M_ENABLE Specifies to extend the search beyond the template. M_TEMPLATE_PROFILE_COUNT Inquires the number of profiles used to find the markers of a template. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_UNKNOWN Specifies that the number of profiles used is unknown. This occurs when the number of profiles is dependent on the depth map calibration. For example, when M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING and M_TEMPLATE_PROFILE_SPACING_MODE is set to M_RELATIVE_TO_PIXEL_SIZE_.... Value &gt; 0 Specifies the number profiles used. M_TEMPLATE_PROFILE_NUMBER_ELEMENTS Inquires the number of profile elements in the template 3D measurement context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= M_TEMPLATE_PROFILE_NUMBER_VALUE Specifies the number of profile elements. M_TEMPLATE_PROFILE_NUMBER_MODE Inquires the mode with which to determine the number of profiles to use to find the markers of a template. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SPACING Specifies that the number of profiles is determined based on the spacing between the profiles. M_USER_DEFINED Specifies to use the value set with M_TEMPLATE_PROFILE_NUMBER_VALUE. M_TEMPLATE_PROFILE_NUMBER_VALUE Inquires the number of profiles perpendicular to the template. Note that this inquire type is only valid if M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt; Value &lt;= M_TEMPLATE_PROFILE_NUMBER_ELEMENTS Specifies the number of profiles. M_TEMPLATE_PROFILE_SPACING Inquires the spacing between the profiles along the template. Note that this inquire type is only valid if M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the spacing. M_TEMPLATE_PROFILE_SPACING_MODE Inquires how to interpret the specified spacing value (M_TEMPLATE_PROFILE_SPACING). Note that this inquire type is only valid if M_TEMPLATE_PROFILE_NUMBER_MODE is set to M_SPACING. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ABSOLUTE Specifies to use the spacing value directly, without applying a multiplying factor. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the spacing value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the spacing value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the spacing value by the pixel size in X. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the spacing value by the pixel size in Y. M_RELATIVE_TO_THICKNESS Specifies to multiply the spacing value by the profile thickness. For a template or profile in a template 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to the index of a template. If ProfileIndex is set to M_DEFAULT, these inquire types allow you to retrieve global settings for the template's perpendicular profiles. If ProfileIndex is set to a specific index, they allow you to retrieve custom settings for the specified profile. For inquiring about a template or profile in a template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_TEMPLATE_PROFILE_LENGTH Inquires the nominal length of the profile to extract (perpendicular to the template). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the length. M_TEMPLATE_PROFILE_LENGTH_MARGIN Inquires the margin on the profile length. The nominal length (M_TEMPLATE_PROFILE_LENGTH), plus the margin define the length of the profile. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the margin, as a percentage of the nominal length. M_TEMPLATE_PROFILE_LENGTH_MODE Inquires how to interpret the specified length value (M_TEMPLATE_PROFILE_LENGTH). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ABSOLUTE Specifies to use the length value directly, without applying a multiplying factor. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the length value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the length value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the length value by the pixel size in X. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the length value by the pixel size in Y. M_TEMPLATE_PROFILE_POSITION_RELATIVE Inquires the position of the profile, relative to the template. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE -50.0 &lt;= Value &lt;= 50.0 Specifies the relative position, as a percentage of the nominal length. For a profile perpendicular to a template in a template 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to the index of a template, and ProfileIndex must be set to the index of one or all profiles. These inquire types allow you to retrieve whether to use the global or custom settings for the specified profile, when extracting the profile perpendicular to the template. For inquiring about a profile in a template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_TEMPLATE_PROFILE_LENGTH_MARGIN_SOURCE Inquires whether to use the template's global margin or a custom margin for the profile. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PROFILE Specifies to use the custom margin value for the specified profile. M_TEMPLATE Specifies to use the template's global margin value for the specified profile. M_TEMPLATE_PROFILE_LENGTH_SOURCE Inquires whether to use the template's global nominal length and length mode or a custom nominal length and length mode for the profile. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PROFILE Specifies to use the custom profile length for the specified profile. M_TEMPLATE Specifies to use the template's global profile length for the specified profile. M_TEMPLATE_PROFILE_POSITION_SOURCE Inquires whether to use the template's global relative position or a custom relative position for the profile. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PROFILE Specifies to use the custom relative position value for the specified profile. M_TEMPLATE Specifies to use the template's global relative position value. For a fit 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to M_DEFAULT or M_CONTEXT, and ProfileIndex must be set to M_DEFAULT. For inquiring about a fit 3D measurement context InquireType Description UserVarPtr - Possible values returned M_EXPECTED_OUTLIER_PERCENTAGE Inquires the expected percentage of outlier markers among the markers that are extracted. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0.0 &lt; Value &lt; 100.0 Specifies the expected outliers, as a percentage. M_FIT_COVERAGE_MIN Inquires the minimum percentage of profiles that must have a marker covered by a fitted point. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0.0 Specifies the minimum coverage, as a percentage. M_FIT_DISTANCE Inquires the distance value that MIL uses to establish outlier markers, which are excluded from the robust best fit. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_INFINITE Specifies that the fit distance is infinite. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Inquires how to interpret the specified fit distance value (M_FIT_DISTANCE). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ABSOLUTE Specifies to use the fit distance value directly, without applying a multiplying factor. M_AUTO Specifies to automatically calculate the fit distance; the distance is estimated from all the extracted markers. M_RELATIVE_TO_PIXEL_SIZE_MAX Specifies to multiply the fit distance value by the pixel size in X or in Y, depending on which is bigger. M_RELATIVE_TO_PIXEL_SIZE_MIN Specifies to multiply the fit distance value by the pixel size in X or in Y, depending on which is smaller. M_RELATIVE_TO_PIXEL_SIZE_X Specifies to multiply the fit distance value by the pixel size in X. M_RELATIVE_TO_PIXEL_SIZE_Y Specifies to multiply the fit distance value by the pixel size in Y. M_RELATIVE_TO_SAMPLING Specifies to multiply the fit distance value by the sampling distance along each profile. M_REMOVE_OUTLIERS Inquires whether to remove outlier markers from the template 3D measurement result buffer after the fit. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to remove outliers. M_ENABLE Specifies to remove outliers. For a path 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to M_DEFAULT or M_CONTEXT, and ProfileIndex must be set to M_DEFAULT. For inquiring about a path 3D measurement context InquireType Description UserVarPtr - Possible values returned M_NUMBER_OF_PATHS Inquires the number of paths in the path 3D measurement context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the number of paths. For a template 3D measurement context, the InquireType parameter can be set to one of the following. PathOrTemplateIndex must be set to M_DEFAULT or M_CONTEXT, and ProfileIndex must be set to M_DEFAULT. For inquiring about a template 3D measurement context InquireType Description UserVarPtr - Possible values returned M_NUMBER_OF_TEMPLATES Inquires the number of templates in the template 3D measurement context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the number of templates. Combination values for Tables: For inquiring about a global setting of a profile, path, or template 3D measurement context For inquiring about the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context For inquiring about the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context For inquiring about a template in a template 3D measurement context For inquiring about a template or profile in a template 3D measurement context For inquiring about a profile in a template 3D measurement context For inquiring about a fit 3D measurement context For inquiring about a path 3D measurement context For inquiring about a template 3D measurement context the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination values for Tables: For inquiring about a global setting of a profile, path, or template 3D measurement context For inquiring about the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context For inquiring about the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context For inquiring about a template in a template 3D measurement context For inquiring about a template or profile in a template 3D measurement context For inquiring about a profile in a template 3D measurement context For inquiring about a fit 3D measurement context For inquiring about a path 3D measurement context For inquiring about a template 3D measurement context the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to determine whether an inquire type is supported. To inquire whether an inquire type is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for Tables: For inquiring about a global setting of a profile, path, or template 3D measurement context For inquiring about the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context For inquiring about the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context For inquiring about a template in a template 3D measurement context For inquiring about a template or profile in a template 3D measurement context For inquiring about a profile in a template 3D measurement context For inquiring about a fit 3D measurement context For inquiring about a path 3D measurement context For inquiring about a template 3D measurement context the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to cast the requested information to a required data type. To specify the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE MORE Data type: address of a MIL_DOUBLE Note: When a single inquire. M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT MORE Data type: address of a MIL_FLOAT Note: When a single result. M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT MORE Data type: address of a MIL_INT Note: When a single inquire. M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 MORE Data type: address of a MIL_INT32 Note: When a single inquire. M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 MORE Data type: address of a MIL_INT64 Note: When a single inquire. Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - Context3dmeasId - PathOrTemplateIndex For specifying what to inquire - ProfileIndex For specifying a profile - InquireType - UserVarPtr Parameter Associations For inquiring about a global setting of a profile, path, or template 3D measurement context For inquiring about the default template in a profile 3D measurement context, path in a path 3D measurement context, or template in a template 3D measurement context For inquiring about the profile extraction along a path in a path 3D measurement context or perpendicular to the template in a template 3D measurement context For inquiring about a template in a template 3D measurement context For inquiring about a template or profile in a template 3D measurement context For inquiring about a profile in a template 3D measurement context For inquiring about a fit 3D measurement context For inquiring about a path 3D measurement context For inquiring about a template 3D measurement context + For inquiring about the default value + To inquire whether an inquire type is supported + To specify the data type Return value Compilation information ",
      "wordCount": 5355,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasInquireDraw",
      "version": null,
      "title": "M3dmeasInquireDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasInquireDraw.htm",
      "text": " M3dmeasInquireDraw Synopsis Inquire about a setting of a draw 3D measurement context. Syntax MIL_INT64 M3dmeasInquireDraw( MIL_ID&nbsp;DrawContext3dmeasId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about a specified setting of a draw 3D measurement context. These settings establish which 3D measurement results to draw into the 3D graphics list when calling M3dmeasDraw3d() and how to draw them. You can control the draw 3D measurement context settings using M3dmeasControlDraw(). Parameters Parameters DrawContext3dmeasId Specifies the identifier of the draw 3D measurement context to inquire. The draw 3D measurement context must have been previously allocated on the required system using M3dmeasAlloc() with M_DRAW_3D_PROFILE_CONTEXT, M_DRAW_3D_PATH_CONTEXT, or M_DRAW_3D_TEMPLATE_CONTEXT. Operation Specifies the draw operation about which to inquire. See the Parameter associations section for possible values that can be specified. InquireType Specifies the type of setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_FLOAT MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the M3dmeasInquireDraw() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the Operation and InquireType parameters and possible values returned to the UserVarPtr parameter. For inquiring a draw profile, path, or template 3D measurement context For inquiring a draw path 3D measurement context For inquiring a draw template 3D measurement context The following Operation and InquireType parameter settings are available to inquire about draw profile, path, or template 3D measurement context settings. For inquiring a draw profile, path, or template 3D measurement context Operation Description InquireType UserVarPtr - Possible values returned M_DRAW_MARKERS Inquires whether and how to draw the cross-like symbol at each specified marker's position when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PROFILE_EXTRACTED Inquires whether and how to draw the extracted points that form each specified profile when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PROFILE_REGION Inquires whether and how to draw the region where each specified profile was extracted when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PROFILE_RESPONSE Inquires whether and how to draw the response of each specified profile (after applying the filter) when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_TRANSITIONS Inquires whether and how to draw the step-like symbol at each specified marker's transition position when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_GLOBAL_DRAW_SETTINGS Inquires a global draw 3D measurement context setting. M_PSEUDO_COLOR_OFFSET Inquires the index of the volume element to draw. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the offset to apply to the index. The following Operation and InquireType parameter settings are available to inquire about draw path 3D measurement context settings. For inquiring a draw path 3D measurement context Operation Description InquireType UserVarPtr - Possible values returned M_DRAW_PATH Inquires whether and how to draw the path defined in the path 3D measurement context when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PATH_PROJECTED Inquires whether and how to draw the projection of the path defined in the path 3D measurement context when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. The following Operation and InquireType parameter settings are available to inquire about draw template 3D measurement context settings. For inquiring a draw template 3D measurement context Operation Description InquireType UserVarPtr - Possible values returned M_DRAW_FIND_GEOMETRY Inquires whether and how to draw the line segments connecting the extracted markers when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIND_GEOMETRY_PROJECTED Inquires whether and how to draw the planes connecting the projections of the extracted markers when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_GEOMETRY Inquires whether and how to draw the fitted 3D geometry when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_GEOMETRY_PROJECTED Inquires whether and how to draw the projection of the fitted 3D geometry when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_MARKERS Inquires whether and how to draw the cross-like symbol at the position of each marker that was used for the fit operation when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FIT_MARKERS_OUTLIERS Inquires whether and how to draw the cross-like symbol at the position of each marker that was considered an outlier for the fit operation when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_TEMPLATE Inquires whether and how to draw the template defined in the template 3D measurement context when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_TEMPLATE_PROJECTED Inquires whether and how to draw the projection of the template defined in the template 3D measurement context when calling M3dmeasDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each 3D measurement result element with a different color, according to the mapping between each result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_PSEUDO_DARK_COLOR Specifies to draw the graphic for each 3D measurement result element with a different dark color, according to the mapping between each element's index and a distinct dark color corresponding to those in the M_COLORMAP_DISTINCT_256 colormap, where the dark color has the same hue but a lower luminance. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the 3D graphic. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. Combination values for Tables: For inquiring a draw profile, path, or template 3D measurement context For inquiring a draw path 3D measurement context For inquiring a draw template 3D measurement context the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination values for Tables: For inquiring a draw profile, path, or template 3D measurement context For inquiring a draw path 3D measurement context For inquiring a draw template 3D measurement context the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to determine whether an inquire type has a default value or whether it is supported. For inquiring whether an inquire type has a default value or whether it is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for Tables: For inquiring a draw profile, path, or template 3D measurement context For inquiring a draw path 3D measurement context For inquiring a draw template 3D measurement context the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to cast the requested information to the required data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT Data type: address of a MIL_FLOAT M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 Data type: address of a MIL_INT32 M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - DrawContext3dmeasId - Operation - InquireType - UserVarPtr Parameter Associations For inquiring a draw profile, path, or template 3D measurement context [M_DRAW_MARKERS] [M_DRAW_PROFILE_EXTRACTED] [M_DRAW_PROFILE_REGION] [M_DRAW_PROFILE_RESPONSE] [M_DRAW_TRANSITIONS] [M_GLOBAL_DRAW_SETTINGS] For inquiring a draw path 3D measurement context [M_DRAW_PATH] [M_DRAW_PATH_PROJECTED] For inquiring a draw template 3D measurement context [M_DRAW_FIND_GEOMETRY] [M_DRAW_FIND_GEOMETRY_PROJECTED] [M_DRAW_FIT_GEOMETRY] [M_DRAW_FIT_GEOMETRY_PROJECTED] [M_DRAW_FIT_MARKERS] [M_DRAW_FIT_MARKERS_OUTLIERS] [M_DRAW_TEMPLATE] [M_DRAW_TEMPLATE_PROJECTED] + For inquiring about the default value + For inquiring whether an inquire type has a default value or whether it is supported + For specifying the data type Return value Compilation information ",
      "wordCount": 7972,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasRestore",
      "version": null,
      "title": "M3dmeasRestore",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasRestore.htm",
      "text": " M3dmeasRestore Synopsis Restore a 3D measurement context from disk. Syntax MIL_ID M3dmeasRestore( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dmeasIdPtr //out ) Description This function restores a 3D measurement context that was previously saved to a file, using M3dmeasSave() or M3dmeasStream(). This function restores all of the 3D measurement context's settings that were in effect when it was saved. When the restored 3D measurement context is no longer required, release it using M3dmeasFree() unless M_UNIQUE_ID was specified during restoration; if M_UNIQUE_ID was specified, the smart identifier manages the 3D measurement context's lifetime and you must not manually free it. Parameters Parameters FileName Specifies the name and path of the file from which to restore the 3D measurement context. The function handles (internally) the opening and closing of the file. For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Open dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). Typically, 3D measurement files have an M3DMEAS extension. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). SysId Specifies the system on which to restore the 3D measurement context. This parameter should be set to one of the following values: For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Context3dmeasIdPtr Specifies the address of the variable in which to write the 3D measurement context identifier or specifies the data type that the function should use to return the 3D measurement context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D measurement context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D measurement context ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DMEAS_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D measurement context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the draw 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the find marker 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated find marker 3D measurement context. If allocation fails, M_NULL is written as the identifier. Address in which to write the fit 3D measurement context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated fit 3D measurement context. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D measurement context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DMEAS_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - FileName For specifying the file name and path - SysId For specifying the system identifier - ControlFlag - Context3dmeasIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 697,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasSave",
      "version": null,
      "title": "M3dmeasSave",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasSave.htm",
      "text": " M3dmeasSave Synopsis Save a 3D measurement context to a file. Syntax void M3dmeasSave( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;Context3dmeasId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function saves all the information about a previously allocated 3D measurement context to disk. To load a saved context, use either M3dmeasRestore() or M3dmeasStream(). Parameters Parameters FileName Specifies the name and path of the file in which to save the 3D measurement context; it is recommended that you use the M3DMEAS file extension for easier use with other Matrox Imaging software products. The function internally handles the opening and closing of this file. If this file already exists, it will be overwritten. This parameter can be set to one of the following values: For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Save As dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). The recommended extension is M3DMEAS. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Context3dmeasId Specifies the identifier of the 3D measurement context to save. The context must have been successfully allocated with M3dmeasAlloc() prior to calling this function. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - FileName For specifying the file name and path - Context3dmeasId - ControlFlag Compilation information ",
      "wordCount": 277,
      "subEntries": []
    },
    {
      "id": "Reference_3dmeas_M3dmeasStream",
      "version": null,
      "title": "M3dmeasStream",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmeas\\M3dmeasStream.htm",
      "text": " M3dmeasStream Synopsis Load, restore, or save a 3D measurement context from/to a file or memory stream. Syntax void M3dmeasStream( MIL_TEXT_PTR&nbsp;MemPtrOrFileName, //in-out MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;StreamType, //in MIL_DOUBLE&nbsp;Version, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dmeasIdPtr, //in-out MIL_INT&nbsp;*SizeByteVarPtr //out ) Description This function can load, restore, or save a 3D measurement context from/to a file or memory stream. To inquire the number of bytes necessary to save a 3D measurement context to a memory stream, you should first call this function (M3dmeasStream()) with M_INQUIRE_SIZE_BYTE. The content saved to memory stream is equivalent to the content saved to file. This function is equivalent to a file saved using M3dmeasSave(). You can use this and other MIL stream functions, for example, to save all required MIL objects, as well as any other custom data, for your application to a memory stream. Once in a memory stream, you can write the stream to a single file or transfer it over a network. You are responsible for concatenating the streams and for saving the stream to file. Parameters Parameters MemPtrOrFileName Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_TEXT_PTR [optionally, in C++: a reference to a MIL_STRING] Optionally, in C++: a reference to a std::vector of type MIL_UINT8 Specifies the file or memory stream. See the Parameter associations section for possible values that can be returned/specified. SysId Specifies the system on which to restore the 3D measurement context. See the Parameter associations section for possible values that can be specified. Operation Specifies the operation to perform. See the Parameter associations section for possible values that can be specified. StreamType Specifies the type of stream in which to store/from which to restore the 3D measurement context. This parameter must be set to one of the following values: For specifying the type of stream Value Description M_FILE Specifies a file stream. M_MEMORY Specifies a memory stream. You are responsible for allocating a block of memory for the stream. Version Specifies the MIL version of the 3D measurement context. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Context3dmeasIdPtr Specifies the address of the variable in which to write or from which to read the identifier of the 3D measurement context. If the M_RESTORE operation is not successful, M_NULL is returned. See the Parameter associations section for possible values that can be returned/specified. SizeByteVarPtr Specifies the address of the variable in which to write the size of the 3D measurement context, in bytes. If the size is not required, you can set this parameter to M_NULL. Note that the size of the 3D measurement context will vary depending on the MIL version specified. Parameter associations The table below lists possible values for the MemPtrOrFileName, SysId, Operation, Version, and Context3dmeasIdPtr parameters. For performing the stream operation. For performing the stream operation. Operation Description MemPtrOrFileName - Possible values passed or returned SysId Version Context3dmeasIdPtr - Possible values passed or returned M_INQUIRE_SIZE_BYTE Inquires the number of bytes required to save a 3D measurement context to memory stream. This operation is not supported when the StreamType parameter is set to M_FILE. MemPtrOrFileName This parameter must be set to M_NULL. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D measurement context must be compatible when saved. The size of a 3D measurement context might differ from one MIL version to another. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. Context3dmeasIdPtr Specifies the address of the variable containing the identifier of the 3D measurement context. M_LOAD Loads the content of a specified file or memory stream into a previously allocated 3D measurement context. MemPtrOrFileName Specifies the file or memory stream from which to load the 3D measurement context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D measurement contexts typically have an M3DMEAS file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version This parameter must be set to M_DEFAULT. Context3dmeasIdPtr Specifies the address of the variable containing the identifier of the 3D measurement context. All previous settings are overwritten with those of the loaded 3D measurement context, or are set to the default value if the settings didn't exist in the version of MIL from which the 3D measurement context is being loaded. M_RESTORE Restores a 3D measurement context from a file or memory stream and assigns it a MIL identifier. MemPtrOrFileName Specifies the file or memory stream from which to restore the 3D measurement context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D measurement contexts typically have an M3DMEAS file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId Specifies the system on which to allocate the 3D measurement context. M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). Version This parameter must be set to M_DEFAULT. Context3dmeasIdPtr Specifies the address of the variable in which to write the identifier of the 3D measurement context. If the operation is not successful, M_NULL is returned. M_SAVE Saves a 3D measurement context to a specified file or memory stream. MemPtrOrFileName Specifies the file or memory stream. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. For easier use with other Matrox Imaging software products, when saving a 3D measurement context to a file, use the M3DMEAS file extension. The function handles (internally) the opening and closing of the file. If the file already exists, it will be overwritten. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which to write, and the block of memory must be large enough to stream the entire object. To determine the required size, call this function with M_INQUIRE_SIZE_BYTE. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D measurement context must be compatible when saved. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. Context3dmeasIdPtr Specifies the address of the variable containing the identifier of the 3D measurement context to save. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmeas.lib. DLL Requires mil.dll; mil3dmeas.dll. Syntax Description Parameters - MemPtrOrFileName - SysId - Operation - StreamType For specifying the type of stream - Version - ControlFlag - Context3dmeasIdPtr - SizeByteVarPtr Parameter Associations For performing the stream operation. Compilation information ",
      "wordCount": 1509,
      "subEntries": []
    }
  ]
}]