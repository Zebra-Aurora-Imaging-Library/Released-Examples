[{
  "id": "Readme_milGenTL",
  "version": "2023100322",
  "title": "milGenTL",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Readme_milGenTL_milGenTL",
      "title": "milGenTL",
      "location": "MIL Release Notes",
      "pageURL": "\\milGenTL\\milGenTL.htm",
      "text": " Matrox Imaging Library (MIL) X Update 90 Release Notes (GenTL with MIL) January 2021 ?? Copyright Matrox Electronic Systems Ltd., 1992-2021. &nbsp; This document outlines what is new with Matrox support for GenTL and explains the current limitations and particularities. It also presents last-minute information that did not make it into the manual or on-line help. Note that this help file serves to complement your manual. The information found in this file overrides your formally documented material. Contents 1.???? MIL Driver for GenTL 1.1???????? Differences between MIL X Update 90 and MIL 10 Update 34 1.2???????? What?s new in MIL X Update 90 1.2.1????? Standards compliance 1.2.2????? Summary of new features 1.2.3????? Matrox Capture Works 1.2.4????? Working with a 3D device 1.2.5????? Additions to the command reference 1.2.6????? Improvements 1.2.7????? Behavioral changes 1.2.8????? Bug fixes 1.2.9????? Known limitations and particularities 1.3???????? What?s new in MIL 10 Update 34 1.3.1????? Standards compliance 1.3.2????? Summary of new features 1.3.3????? API enhancements 2.???? Example locations (in the help file) 3.???? Last minute information &nbsp; 1.&nbsp;&nbsp; MIL Driver for GenTL The Matrox driver for GenTL (MIL GenTL Consumer) allows you to use a third-party GenTL Producer with MIL. 1.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Differences between MIL X Update 90 and MIL 10 Update 34 New Matrox Capture Works utility. Support for grab containers. Support for M_DYNAMIC grab buffers. Support for GenTL Version 1.6. Various bug fixes and improvements. 1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; What?s new in MIL X Update 90 MIL X Update 90 requires MIL X Service Pack 4 (SP4). 1.2.1&nbsp;&nbsp;&nbsp; Standards compliance The MIL driver for GenTL supports the following standards: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? GenAPI Standard Version 3.2. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? GenTL Standard Version 1.6. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? GenDC Standard Version 1.0. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? Standard Feature Naming Convention (SFNC) version 2.5. 1.2.2&nbsp;&nbsp;&nbsp; Summary of new features Matrox Capture Works utility. Support for GenTL 1.6 multi-part and GenDC payload types. Support for grab containers. Support for M_DYNAMIC buffers. Support for device enumeration API. Support for the redesigned Matrox Feature Browser. 1.2.3&nbsp;&nbsp;&nbsp; Matrox Capture Works Matrox Capture Works is a new interactive utility to configure and test devices that make use of a GenICam-based interface standard. The version included in MIL X Update 90 adds support for the MIL GenTL Consumer. Matrox Capture Works features, in particular, support for container payload types from the GenICam GenDC and multi-part additions to interface standards, support for 3D display, and support for 3D profile sensors. Matrox Capture Works is currently available for Windows, while support for Linux will be added in a future update. 1.2.4&nbsp;&nbsp;&nbsp; Working with a 3D device Grabbing from a 3D device Data from a 3D device is grabbed using functions from the Digitizer module such as MdigGrabContinuous(), MdigGrab(), and MdigProcess(). In most respects, grabbing data from a 3D device is similar to grabbing images from a 2D camera. However, to work with 3D data in MIL, you must use a container. A container is used because 3D devices can transmit multiple components (for example, range, confidence, etc.) during the grab. If your 3D device transmits data using the GenICam GenDC or the GenTL multi-part payload types, you can grab directly into a container that was previously allocated using MbufAllocContainer(). For demonstrations on how to grab from a 3D device with MIL, see the MdigProcess3D and MultiComponentGrab examples. These examples make extensive use of containers for grabbing and show the great flexibility they provide. Grabbing into a MIL container When grabbing into a container for the first time, MIL will free all existing components and allocate the components required to store the current frame of data. MIL will typically reuse these automatically allocated components during subsequent grabs, unless you add or remove components from the container. In this case, all components will be freed and new components will be allocated for the grabbed data. MIL will not grab into components of the container that you have allocated manually using MbufAllocComponent(), MbufCopyComponent(), or MbufCreateComponent(). Rather, MIL will create components, as required. Grabbing into a MIL buffer If you grab into a traditional buffer from a device that outputs data in a format suitable for a container, the first intensity component (i.e., a standard image) in the frame of data will be grabbed. If there is no intensity component, the first component that is not metadata will be grabbed. Grabbing using older utilities and certain examples Limitations are to be expected when using older utilities (such as Matrox Intellicam), and certain MIL examples (such as MdigGrab, MdigGrabSequence and MdigProcess), to grab from particular 3D devices. These utilities and examples do not support grabbing multiple components. That is, they are not able to grab all of the components at once. If present, the first intensity component is always used. Otherwise, the first component that can be stored into a MIL image buffer is used. 1.2.5&nbsp;&nbsp;&nbsp; Additions to the command reference Additions to MsysControl() / MsysInquire() Support for M_DISCOVER_DEVICE. MsysControl(): Performs a device discovery. ControlValue must be M_DEFAULT. Note: executing this control can trigger an M_CAMERA_PRESENT hook. Support for M_DISCOVER_DEVICE_COUNT. MsysInquire(): Inquires the number of devices present. Inquire returns a MIL_INT. Support for M_DISCOVER_DEVICE_DIGITIZER_NUMBER + N. MsysInquire(): Inquires the MIL digitizer device number associated to the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_INT. Support for M_DISCOVER_DEVICE_MANUFACTURER_NAME + N. MsysInquire(): Inquires the device's manufacturer name, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_MODEL_NAME + N. MsysInquire(): Inquires the device's model name, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_MANUFACTURER_INFO + N. MsysInquire(): Inquires the device's manufacturer-specific information, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_USER_NAME + N. MsysInquire(): Inquires the device's user programmable device name, for the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_VERSION + N. MsysInquire(): Inquires the device version of the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_SERIAL_NUMBER + N. MsysInquire(): Inquires the device serial number of the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_INTERFACE_NAME + N. MsysInquire(): Inquires the name of the host interface associated to the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Support for M_DISCOVER_DEVICE_ADDRESS + N. MsysInquire(): Inquires the address of the nth device. N must be between 0 and M_DISCOVER_DEVICE_COUNT ? 1. Inquire returns a MIL_STRING. Additions to MbufAlloc?(): Support for grab containers. See container support in the Mbuf module of the MIL Help for details. Support for M_IMAGE + M_GRAB + M_DYNAMIC buffer attribute. Additions to MbufInquire?(): Support for M_GRAB_TIME_STAMP. MbufInquire(): Inquires the time when MIL finished grabbing into the buffer, expressed in seconds. Inquire returns a MIL_DOUBLE. Support for M_GRAB_TIME_STAMP_NS. MbufInquire(): Inquires the time when MIL finished grabbing into the buffer, expressed in nanoseconds. Inquire returns a MIL_INT64. Support for M_CAMERA_TIME_STAMP. MbufInquire(): Inquires the time at which the device generated the frame of data, expressed in seconds. Inquire returns a MIL_DOUBLE. Support for M_CAMERA_TIME_STAMP_NS. MbufInquire(): Inquires the time at which the device generated the frame of data expressed in nanoseconds. Inquire returns a MIL_INT64. Support for M_COMPONENT_TIME_STAMP. MbufInquire(), MbufInquireContainer(): When using MbufInquire(), the BufId must be that of a component. When using MbufInquireContainer(), the BufId must be that of a container, and the Component parameter must not be set to M_CONTAINER. When grabbing into a container, from a device transmitting data in GenDC format, this inquire gets the time at which the device generated the data component expressed in seconds. Zero is returned if there is no component time stamp available. Inquire returns a MIL_DOUBLE. Note: components belonging to the same container can have different component time stamps. Support for M_COMPONENT_TIME_STAMP_NS. MbufInquire(), MbufInquireContainer(): When using MbufInquire(), the BufId must be that of a component. When using MbufInquireContainer(), the BufId must be that of a container, and the Component parameter must not be set to M_CONTAINER. When grabbing into a container, from a device transmitting data in GenDC format, this inquire gets the time at which the device generated the data component expressed in nanoseconds. Zero is returned if there is no component time stamp available. Inquire returns a MIL_INT64. Note: components belonging to the same container can have different component time stamps. Support for M_COMPONENT_TIME_STAMP_IS_PTP. MbufInquire(), MbufInquireContainer(): When using MbufInquire(), the BufId must be that of a component. When using MbufInquireContainer(), the Component parameter must not be set to M_CONTAINER. If M_COMPONENT_TIME_STAMP_IS_PTP returns M_TRUE, then M_COMPONENT_TIME_STAMP_NS is relative to the epoch January 1st 1970 0:00:00. Support for M_LAYOUT_MODIFICATION_COUNT. MbufInquireContainer(): When using MbufInquireContainer(), the BufId must be that of a container and the Component parameter must be set to M_CONTAINER. This value is modified every time a component is added or removed from the container. Inquire returns a MIL_INT. Support for M_PFNC_VALUE. Returns the buffer?s format as defined in the GenICam Pixel Format Naming Convention (PFNC). Support for M_PFNC_SUPPORT. Returns M_YES if the PFNC format is a native MIL format. Returns M_WITH_COMPENSATION if the PFNC format is not a native MIL format but can be converted to a MIL native format. A buffer of this type can only be used as a source buffer. Returns M_NO if MIL cannot handle this type of format. In this case the user has to access the buffer?s memory directly. MbufInquire() with M_HOST_ADDRESS can be used to get a pointer to the buffer?s data. Additions to MdigGetHookInfo(): Support for M_GRAB_LINE_COUNT. Retrieves the number of lines (rows) grabbed. Note that the data contained in the line is available for processing. This is useful when grabbing from a line-scan camera with frames of variable length. Additions to MdigInquireFeature(): Support for M_FEATURE_ENUM_ENTRY_TOOLTIP + N. MdigInquireFeature(). Returns the nth enum entry?s tooltip string. The string size can be inquired by adding the M_STRING_SIZE combination constant. Support for M_FEATURE_ENUM_ENTRY_DESCRIPTION + N. MdigInquireFeature(). Returns the nth enum entry?s description string. The string size can be inquired by adding the M_STRING_SIZE combination constant. Support for M_FEATURE_ENUM_ENTRY_ACCESS_MODE + N. MdigInquireFeature(). Returns the nth enum entry?s access mode. See M_FEATURE_ACCESS_MODE in the MIL documentation for details. Support for M_FEATURE_ENUM_ENTRY_VISIBILITY + N. MdigInquireFeature(). Returns the nth enum entry?s visibility value. See M_FEATURE_VISIBILLITY in the MIL documentation for details. Support for M_FEATURE_ENUM_ENTRY_CACHING_MODE + N. MdigInquireFeature(). Returns the nth enum entry?s caching mode. See M_FEATURE_CACHING_MODE in the MIL documentation for details. Support for M_FEATURE_ENUM_ENTRY_STREAMABLE + N. MdigInquireFeature(). Returns the nth enum entry?s streamable value. See M_FEATURE_STREAMABLE in the MIL documentation for details. Support for M_FEATURE_SELECTOR_COUNT. MdigInquireFeature(). Returns the number of features selected by the specified FeatureName parameter. Note that the FeatureName parameter must specify a selector type feature. Support for M_FEATURE_SELECTOR_NAME + N. MdigInquireFeature(). Returns the nth feature name, as a string, selected by the specified feature. Note that the FeatureName parameter must specify a selector type feature. Support for M_FEATURE_VALID_VALUE_COUNT. MdigInquireFeature(). Integer and floating point type features can support a fixed list of valid values instead of the traditional minimum, maximum, and increment values. M_FEATURE_VALID_VALUE_COUNT returns the number of valid values supported. A value of 0 returned indicates the feature does not support a list of valid values; minimum, maximum, and increment values must be used instead. Support for M_FEATURE_VALID_VALUE + N. MdigInquireFeature(). Returns the nth valid value for an integer or floating point type feature. 1.2.6&nbsp;&nbsp;&nbsp; Improvements M_CONTAINER grab buffer support was added to the MIL GenTL Consumer driver. A container is a data object that stores related buffers, referred to as the container?s buffer components. Components are automatically added to a container, when you grab into it or use it as a destination of a supported function. See the MultiComponentGrab and MdigProcess3D examples located in examples\\boardspecific\\multicomponentgrab\\c++ and examples\\core\\mdigprocess3d\\c++, for details. M_DYNAMIC grab buffer support was added to the MIL GenTL Consumer driver. M_DYNAMIC buffers do not have a format defined at allocation time. Instead their rectangular size and format is defined after a grab has been performed in the M_DYNAMIC buffer. The buffer?s rectangular size and format can be inquired after the grab using MbufInquire(). The next time the dynamic buffer is used for grabbing its rectangular size and format might change again if the format of the image sent by the camera changes. The Dynamic buffer?s size in bytes must be large enough to accommodate the largest image that can be sent by the camera. See the MdigGrabDynamic board specific example, located in examples\\board-specific\\mdiggrabdynamic\\c++, for details. The Matrox Feature Browser was completely redesigned and now supports both Windows and Linux. Values of unavailable features are now kept blank in the Feature Browser. Added support of loading camera XML through DCF parameter: XmlFile. 1.2.7&nbsp;&nbsp;&nbsp; Behavioral changes An error message is now generated if MdigControl() is executed with M_WHITE_BALANCE and M_CALCULATE while a grab is in progress. In previous versions the call would fail without error. The device?s stream will now be immediately stopped after a grab completes when M_GC_STREAMING_STOP_DELAY is set to 0. On previous releases the stream would be stopped from the stream control thread during its next time slice which resulted in the stream continuing for a bit longer. Calling MdigControl with M_GRAB_ABORT will now stop the camera?s stream. Unannounced grab buffers are now announced to the GenTL Producer when a grab is queued even if the remote device stream is already started. If the remote device stream has already been started then it will be stopped, the grab buffer will be announced and the stream will be started again. The 64-bit version of the GenTL Consumer driver now allocates 10 auxiliary buffers at digitizer allocation time (up from 5). No longer throwing exceptions from internal grab thread when an internal grab timeout occurs. This caused ?first chance exception? messages to be printed in the debugger?s output window even though the exceptions were caught and properly handled by the MIL GenTL Consumer. 1.2.8&nbsp;&nbsp;&nbsp; Bug fixes Fixed issue with timeout of remote device events that caused future events not to be signalled. Fixed issue unlocking auxiliary buffer twice. Fixed black grab image when chunk mode was enabled. Fixed exception at MdigAlloc when device allocation fails. Fixed deadlock that occurred under certain circumstances when calling MdigControl with M_GENTL_ANNOUNCE_BUFFER or M_GENTL_REVOKE_BUFFER. Fixed issue with variable frame size devices streaming in multi-part payload format. Fixed issue grabbing a multi-part stream with chunks enabled. Fixed issue when using GenICam?s generic chunk parser. Fixed exception when auxiliary buffer allocation failed. 1.2.9&nbsp;&nbsp;&nbsp; Known limitations and particularities Windows? automatic 8.3 file name creation needs to be enabled in order for the MIL installer to access the temp folder when the user name contains a space. This option allows Windows to create short file/folder name aliases for paths with long names for programs, such as the MIL installer, that don't support spaces in the file/folder names. Alternatively, the MIL installer needs to run from a user account that belongs to the administrators group, with no spaces in the name. Note that the same applies for uninstalling MIL. The required Visual C++ 2017 Redistributable needs the presence of KB2919442 and KB2919355. These will need to be obtained and applied before restarting this update. During driver installation under Windows 7, you might continue to be asked to trust Matrox software after selecting the option to ?Always trust software from MATROX ELECTRONIC SYSTEMS, LTD?. To avoid being asked mutliple times, refer to Microsoft KB2921916. 1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; What?s new in MIL 10 Update 34 1.3.1&nbsp;&nbsp;&nbsp; Standards compliance The MIL driver for GenTL supports the following standards: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? GenAPI Standard Version 2.4.1. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GenICam? GenTL Standard Version 1.5. 1.3.2&nbsp;&nbsp;&nbsp; Summary of new features The following features are new for this release: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New API to enumerate installed GenTL producer libraries. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New M_SYSTEM_GENTL system type. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New API to access multiple GenICam XML description files. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New API to enumerate GenTL modules. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New API to display the feature browser. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New API to hook a MIL callback to a GenICam feature change. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New API to announce M_GRAB buffers prior to grabbing. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New hardware-specific examples: o&nbsp;&nbsp;&nbsp; CameraEvents, located in Examples\\BoardSpecific\\CameraEvents\\C++. This program demonstrates new MIL features for managing GenICam? devices. This program focuses on hooking a MIL handler to asynchronous camera events. o&nbsp;&nbsp;&nbsp; ChunkMode, located in Examples\\BoardSpecific\\ChunkMode\\C++. This program shows the use of the MdigProcess() function to perform real-time acquisition. It also enables your GenICam? device in chunk mode (if supported). o&nbsp;&nbsp;&nbsp; EnumFeatures, located in Examples\\BoardSpecific\\EnumFeatures\\C++. This example shows how to use MIL in order to enumerate all the features in your GenICam? compliant device. o&nbsp;&nbsp;&nbsp; FeatureChangeHook, located in Examples\\BoardSpecific\\FeatureChangeHook\\C++. This example shows how to use MIL in order to hook a MIL callback function to GenICam? feature change events. o&nbsp;&nbsp;&nbsp; GenTL, located in Examples\\BoardSpecific\\GenTL\\C++. This program demonstrates new MIL features for managing GenICam GenTL devices using the Matrox GenTL consumer system. 1.3.3&nbsp;&nbsp;&nbsp; API enhancements Additions to MappInquire() ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New Inquire types: o&nbsp;&nbsp;&nbsp; M_GENTL_ PRODUCER_COUNT. Specifies the number of installed GenTL producer libraries available. UserVarPtr data type info: address of a MIL_INT. o&nbsp;&nbsp;&nbsp; M_GENTL_PRODUCER_DESCRIPTOR + n. Specifies the selected GenTL producer libraries? path and filename, where n is the index number of the GenTL producer library. UserVarPtr data type info: MIL_TEXT_PTR. o&nbsp;&nbsp;&nbsp; M_GENTL_PRODUCER_DESCRIPTOR_SIZE + n. Specifies the size of the selected GenTL producer libraries? description, where n is the index number of the GenTL producer library +1. UserVarPtr data type info: address of a MIL_INT. Additions to MsysAlloc() ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New system type: o&nbsp;&nbsp;&nbsp; ?M_SYSTEM_GENTL. Allocates a MIL GenTL system. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New combination constant for the SystemNum parameter: o&nbsp;&nbsp;&nbsp; M_GENTL_PRODUCER(n). Specifies that the nth GenTL producer library will be used by the MIL system allocation, where n can be a number from 0 to 127. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New InitFlags: o&nbsp;&nbsp;&nbsp; M_MIXED. Specifies to initialize any available transport layer type interfaces to work with the Matrox GenTL system. o&nbsp;&nbsp;&nbsp; M_CL. Specifies to initialize Camera Link? type interfaces to work with the Matrox GenTL system. o&nbsp;&nbsp;&nbsp; M_CLHS. Specifies to initialize Camera Link HS? type interfaces to work with the Matrox GenTL system. o&nbsp;&nbsp;&nbsp; M_CXP. Specifies to initialize CoaXPress? type interfaces to work with the Matrox GenTL system. o&nbsp;&nbsp;&nbsp; M_GEV. Specifies to initialize GigE Vision? type interfaces to work with the Matrox GenTL system. o&nbsp;&nbsp;&nbsp; M_U3V. Specifies to initialize USB 3 Vision? type interfaces to work with the Matrox GenTL system. Additions to MsysInquire(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New Inquire type: o&nbsp;&nbsp;&nbsp; M_GENTL_INTERFACE_COUNT. Inquires the number of initialized GenTL interfaces available to the GenTL producer. Note that this result is limited by the GenTL producer loaded during MsysAlloc() and the setting of the InitFlag parameter. UserVarPtr data type: address of a MIL_INT. Additions to MsysControl(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New ControlTypes and associated ControlValues: o&nbsp;&nbsp;&nbsp; M_GC_FEATURE_BROWSER: Sets whether to display the GenTL system and interface configuration information interactively. You can specify a combination value with one of the following: ?&nbsp; + M_GENTL_SYSTEM. Specifies to display the GenTL system configuration information. ?&nbsp; + M_GENTL_INTERFACE_NUMBER(n). Specifies to displays the nth GenTL interface configuration information, where n is the nth GenTL interface, and n can be a number from 0 to M_GENTL_INTERFACE_COUNT-1. o&nbsp;&nbsp;&nbsp; M_GC_FEATURE_BROWSER?s control values are as follows: ?&nbsp; M_DEFAULT. Same as M_OPEN. ?&nbsp; M_OPEN. Opens the feature browser. You must specify a combination value from the following: o&nbsp;&nbsp;&nbsp; + M_ASYNCHRONOUS. Specifies that this function returns immediately once the feature browser window opens. o&nbsp;&nbsp;&nbsp; + M_SYNCHRONOUS. Specifies that this function is blocked until the feature browser window closes. ?&nbsp; M_CLOSE. Closes the Feature Browser. New MsysControlFeature() / MsysInquireFeature(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Same API as MdigControlFeature() / MdigInquireFeature(). ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Combination values for the values listed in the For specifying the type of information about the feature to set and the data type returned table: o&nbsp;&nbsp;&nbsp; M_GENTL_SYSTEM. Specifies to target the GenTL system XML. o&nbsp;&nbsp;&nbsp; M_GENTL_INTERFACE_NUMBER(n). Specifies to targets the nth GenTL interface XML, where n can be a number from 0 to M_GENTL_INTERFACE_COUNT-1. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_ENUM_ENTRY_DISPLAY_NAME + n. Inquires the internally-used name of the specified enumeration entry of the feature, where n is the index into the enumerated list. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_USER_ARRAY_SIZE(). Specifies that the feature value is expressed as a string of a specified size. The M_FEATURE_USER_ARRAY_SIZE() macro passes the size of the user-allocated buffer (first passed to the MsysInquireFeature's UserVarPtr parameter). See M_FEATURE_USER_ARRAY_SIZE() in the MIL documentation. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_CHANGE_HOOK. Sets whether to enable an event to occur when the value of the specified feature changes. Once enabled, use MsysHookFunction() with M_FEATURE_CHANGE to hook a specified function to the feature change event. Repeat for each feature that you want to enable a feature change event. Alternatively, to enable an event to occur when the value of any feature changes, use MsysHookFunction() with M_FEATURE_CHANGE + M_ALL. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Within the hook function, use MsysGetHookInfo() with M_GC_FEATURE_CHANGE_NAME to retrieve the name of the feature that caused the event. Additions to MsysHookFunction(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_CHANGE. Hooks the function to the event that occurs when the value of a GenICam GenTL feature changes. The list of potential feature change events is set using MsysControlFeature() with M_FEATURE_CHANGE_HOOK. Combination values for M_FEATURE_CHANGE: You can add the following value to M_FEATURE_CHANGE to specify to hook the specified function to all feature change events. o&nbsp;&nbsp;&nbsp; M_ALL. Specifies to hook the specified function to all feature change events. o&nbsp;&nbsp;&nbsp; M_GENTL_SYSTEM: Specifies to hook the specified function to a GenTL system feature change callback. o&nbsp;&nbsp;&nbsp; M_GENTL_INTERFACE_NUMBER(n): Specifies to hook the specified function to a nth GenTL interface feature change callback, where n can be a number from 0 to M_GENTL_INTERFACE_COUNT-1. Additions to MsysGetHookInfo(): The following allows you to retrieve information from a GenTL feature change event. These information types are only available if MsysGetHookInfo() was called from a function hooked to GenTL feature change event using MsysHookFunction() with M_FEATURE_CHANGE. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME: Retrieves the name of the GenTL feature that changed. UserVarPtr data type: array of type MIL_TEXT_CHAR. Required array size: MsysGetHookInfo() with M_GC_FEATURE_CHANGE_NAME_SIZE. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME_SIZE: Retrieves the string length of the feature name that changed. UserVarPtr data type: address of a MIL_INT. Additions to MdigInquire(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GENTL_INTERFACE_INDEX. Inquires the number of GenICam GenTL camera interface that is associated to the specified digitizer. UserVarPtr data type: address of a MIL_INT. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GENTL_STREAM_COUNT. Inquires the number of GenTL streams associated to the specified digitizer. UserVarPtr data type: address of a MIL_INT. Additions to MdigControl(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_BROWSER: Displays the Matrox feature browser containing the GenTL device, remote device, and stream XMLs. You can specify a combination value with one of the following: o&nbsp;&nbsp;&nbsp; M_GENTL_DEVICE. Displays the GenTL device?s configuration information. o&nbsp;&nbsp;&nbsp; M_GENTL_REMOTE_DEVICE. Displays the GenTL remote device (camera) configuration information. o&nbsp;&nbsp;&nbsp; M_GENTL_STREAM_NUMBER(n). Displays the nth GenTL stream configuration information, where n is a number from 0 to M_GENTL_STREAM_COUNT-1. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GENTL_ANNOUNCE_BUFFER. Sets the buffer to announce to the GenTL producer, before starting the acquisition with MdigGrab(). Note that it is not necessary to announce buffers used with MdigGrabContinuous() or MdigProcess(). o&nbsp;&nbsp;&nbsp; MIL buffer identifier. Specifies the buffer to announce to the GenTL producer. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GENTL_REVOKE_BUFFER. Revokes a previously announced buffer. Note that acquisition must be stopped before revoking a buffer. o&nbsp;&nbsp;&nbsp; MIL buffer identifier. Specifies the buffer to revoke from the GenTL producer. Note that this buffer must have been previously announced using M_GENTL_ANNOUNCE_BUFFER. Additions to MdigControlFeature() / MdigInquireFeature(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New combination constants for the ControlType parameter: o&nbsp;&nbsp;&nbsp; M_GENTL_DEVICE. Specifies the GenTL device?s configuration information. o&nbsp;&nbsp;&nbsp; M_GENTL_REMOTE_DEVICE (Default). Specifies the GenTL remote device?s configuration information (such as, the camera). o&nbsp;&nbsp;&nbsp; M_GENTL_STREAM_NUMBER(n). Specifies the nth GenTL stream?s configuration information. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The FeatureType parameter has been changed to UserVarType. This was done to simplify writing code with MdigControl/InquireFeature(). UserVarType must always reflect the type of the pointer passed to the UserVarPtr parameter. Legacy code is transparently supported, but we recommend you update your code. Note that M_TYPE_REGISTER now becomes M_TYPE_UINT8, M_TYPE_ENUMERATION now becomes M_TYPE_INT64 or M_TYPE_STRING, and M_TYPE_COMMAND now becomes M_DEFAULT. Data type conversions are made, whenever possible, in cases where the feature?s ?native? data type is different than the UserVarType supplied. Regardless of a feature?s ?native? data type it can always be read as a string. See hardware-specific examples for details. The following is a list of example calls using the new UserVatType: ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_INT64, &amp;Int64Var) ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Gain?), M_TYPE_DOUBLE, &amp;DoubleVar) ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?ReverseX?), M_TYPE_BOOLEAN, &amp;BoolVar) ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?PixelFormat?), M_TYPE_STRING, MIL_TEXT(?Mono8?)) ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?LUTValueAll?), M_TYPE_UINT8, Uint8Array) ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?AcquisitionStart?), M_DEFAULT, M_NULL) ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_INT64, &amp;Int64Var) ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Gain?), M_TYPE_DOUBLE, &amp;DoubleVar) ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?ReverseX?), M_TYPE_BOOLEAN, &amp;BoolVar) ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE + M_STRING_SIZE, MIL_TEXT(?PixelFormat?), M_TYPE_MIL_INT, &amp;MilIntVar) ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?PixelFormat?), M_TYPE_STRING, MilTextCharArray) ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?LUTValueAll?), M_TYPE_UINT8, Uint8Array) ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_USER_ARRAY_SIZE() can now be used with MdigInquireFeature() when the data type returned is a string or an array of bytes (register). The M_FEATURE_USER_ARRAY_SIZE() macro is used to pass the size of the user-allocated buffer passed to MdigInquireFeature's UserVarPtr parameter. M_FEATURE_USER_ARRAY_SIZE() is passed using the UserVarType parameter. See GenTL hardware-specific example for sample usage. The following is a list of example calls using M_FEATURE_USER_ARRAY_SIZE(): o&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?PixelFormat?), M_TYPE_STRING + M_FEATURE_USER_ARRAY_SIZE(N), MilTextCharArray); N being equal to the number of MIL_TEXT_CHAR in the MilTextCharArray. o&nbsp;&nbsp;&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?LUTValueAll?), M_TYPE_UINT8 + M_FEATURE_USER_ARRAY_SIZE(N), Uint8Array); N being equal to the number of Uint8 in the Uint8Array. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_ENUM_ENTRY_DISPLAY_NAME can now be used to inquire possible enumeration string entry to use for display purposes. See M_FEATURE_ENUM_ENTRY_NAME in the MIL documentation. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_VALUE_AS_STRING is now deprecated. o&nbsp;&nbsp;&nbsp; To read a feature?s value as a string and get the required string length use: ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE + M_STRING_SIZE, MIL_TEXT(?Width?), M_TYPE_MIL_INT, &amp;MilIntVar); o&nbsp;&nbsp;&nbsp; To read a feature?s value as a string use: ?&nbsp; MdigInquireFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_STRING+M_FEATURE_USER_ARRAY_SIZE(ArraySize), MilTextCharArray); o&nbsp;&nbsp;&nbsp; To write a feature?s value from a string use: ?&nbsp; MdigControlFeature(MilDigitizer, M_FEATURE_VALUE, MIL_TEXT(?Width?), M_TYPE_STRING, MIL_TEXT(?1024?)); ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_CHANGE_HOOK. Identifies the specified FeatureName to trigger the M_FEATURE_CHANGE hook callback. You must be hooked to the M_FEATURE_CHANGE hook type using MdigHookFunction(). Additions to MdigHookFunction(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_CHANGE. Hooks the function to the event that occurs when a specified feature changes. The list of potential feature change events is set using MdigControlFeature() with M_FEATURE_CHANGE_HOOK. You can add the following value to the above-mentioned value to specify to hook the specified function to all featue change events. o&nbsp;&nbsp;&nbsp; M_ALL. Specifies to hook the specified function to all feature change events. o&nbsp;&nbsp;&nbsp; M_GENTL_DEVICE. Specifies to hook the specified function to a GenTL device feature change event. o&nbsp;&nbsp;&nbsp; M_GENTL_REMOTE_DEVICE. Specifies to hook the specified feature change to a GenTL remote device feature change event. o&nbsp;&nbsp;&nbsp; M_GENTL_STREAM_NUMBER(n). Specifies to hook the specified feature change to the nth GenTL stream feature change event. Additions to MdigGetHookInfo(): The following allows you to retrieve information from a GenICam feature change event. These information types are only available if MdigGetHookInfo() was called from a function hooked to GenICam feature change event using MdigHookFunction() with M_FEATURE_CHANGE. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME: Retrieves the name of the GenICam feature that changed. UserVarPtr data type: array of type MIL_TEXT_CHAR Required array size: MdigGetHookInfo() with M_GC_FEATURE_CHANGE_NAME_SIZE. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME_SIZE: Retrieves the string length of the feature name that changed. UserVarPtr data type: address of a MIL_INT. Additions to MbufControl(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_BROWSER: Displays the Matrox feature browser containing the GenTL buffer configuration information. You can specify a combination value with the following: o&nbsp;&nbsp;&nbsp; + M_GENTL_BUFFER. Displays the GenTL buffer configuration information. New MbufControlFeature() / MbufInquireFeature(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Same API as MdigControlFeature() / MdigInquireFeature() ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Combination constants for the ControlType / InquireType parameter The following value might be combined with the ControlType / InquireType values to specify to control/Inquire the GenTL buffer configuration information. o&nbsp;&nbsp;&nbsp; M_GENTL_BUFFER. This is the default value. Specifies to control/inquire the GenTL buffer configuration information. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_CHANGE_HOOK. Identifies the specified FeatureName to trigger the M_FEATURE_CHANGE hook callback. You must be hooked to the M_FEATURE_CHANGE hook type using MbufHookFunction(). Additions to MbufHookFunction(): ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_FEATURE_CHANGE. Hooks the function to the event that occurs when the value of a GenTL buffer feature changes. To enable an event to occur when the value of a specific feature changes, use MbufControlFeature() with M_FEATURE_CHANGE_HOOK set to M_ENABLE. Repeat for each feature that you want to enable a feature change event. To enable an event to occur when the value of any feature changes, use M_FEATURE_CHANGE + M_ALL. Within the hook function, use MbufGetHookInfo() with M_GC_FEATURE_CHANGE_NAME to retrieve the name of the feature that caused the event. You can add the following value to the above-mentioned value to specify to hook the specified function to all featue change events. o&nbsp;&nbsp;&nbsp; M_ALL. Specifies to hook the specified function to all feature change events. o&nbsp;&nbsp;&nbsp; M_GENTL_BUFFER. Specifies to hook the specified function to GenTL buffer feature change events. Additions to MbufGetHookInfo(): The following allows you to retrieve information from a GenTL feature change event. These information types are only available if MbufGetHookInfo() was called from a function hooked to GenTL feature change event using MbufHookFunction() with M_FEATURE_CHANGE. ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME. Retrieves the name of the GenICam feature that changed. UserVarPtr data type: array of type MIL_TEXT_CHAR. Required array size: MdigGetHookInfo() with M_GC_FEATURE_CHANGE_NAME_SIZE ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M_GC_FEATURE_CHANGE_NAME_SIZE. Retrieves the string length of the feature name that changed. UserVarPtr data type: array of a MIL_INT. 2.&nbsp;&nbsp; Example locations (in the help file) In the help file, the location information written at the top of examples might not be up-to-date. Use MIL Example Launcher to find an example on disk. 3.&nbsp;&nbsp; Last minute information A problem has been found when MIL 10 Processing Pack 1 is installed after MIL 10 Update 34. The MIL 10 Processing Pack 1 installer will overwrite MIL import libraries that are provided by MIL 10 Update 34. The following functions will therefore no longer link: ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsysControlFeature ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsysInquireFeature ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MbufControlFeature ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MbufInquireFeature To resolve this issue, re-install MIL 10 Update 34 or make sure to install MIL 10 Processing Pack 1 before installing MIL 10 Update 34. ",
      "wordCount": 4944,
      "subEntries": []
    }
  ]
}]