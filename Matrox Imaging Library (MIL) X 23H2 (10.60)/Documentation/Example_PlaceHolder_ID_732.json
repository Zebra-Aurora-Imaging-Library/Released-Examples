[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_Magm_CPP_magm_cpp",
      "version": "2024020714",
      "title": "magm.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //************************************************************************************* // // File name: Magm.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program consists of 2 examples that use the AGM module // to define a model and search for model occurrences in target images. // The first example extracts a single-definition model from a source image, // then quickly finds occurrences in a cluttered target image. // The second example constructs a composite-definition model through training, // then finds occurrences with slight variations in appearance in different target images. // // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; // Path definitions. #define EXAMPLE_IMAGE_DIR_PATH M_IMAGE_PATH MIL_TEXT(\"/Magm/\") #define MODEL_IMAGE_0_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"CircuitPinsModel.mim\") #define MODEL_IMAGE_1_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"SwitchModel.mim\") #define TARGET_IMAGE_0_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"CircuitBoardTarget.mim\") #define TARGET_IMAGE_1_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"SwitchTarget.mim\") #define TRAIN_IMAGES_0_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"LabeledTrainImages0.mbufc\") #define TRAIN_IMAGES_1_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"LabeledTrainImages1.mbufc\") #define TEST_IMAGES_DIR_0_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"Testset0/\") #define TEST_IMAGES_DIR_1_PATH EXAMPLE_IMAGE_DIR_PATH MIL_TEXT(\"Testset1/\") // Function declarations. void SingleModelExample(MIL_ID MilSystem); void CompositeModelExample(MIL_ID MilSystem); //**************************************************************************** // Main. //**************************************************************************** int MosMain(void) { MIL_ID MilApplication, // Application identifier. MilSystem; // System identifier. // Allocate defaults. MappAllocDefault(M_DEFAULT, &amp;MilApplication, &amp;MilSystem, M_NULL, M_NULL, M_NULL); // Print the example synopsis. MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT(\"Magm\\n\\n\")); MosPrintf(MIL_TEXT(\"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT(\"This program shows the use of the AGM module.\\n\\n\")); MosPrintf(MIL_TEXT(\"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT(\"Advanced Geometric Matcher, Buffer, Display, Graphics.\\n\\n\")); // Run single-definition model example. SingleModelExample(MilSystem); // Run composite-definition model example. CompositeModelExample(MilSystem); // Wait for a key to be pressed. MosPrintf(MIL_TEXT(\"Press any key to end.\\n\")); MosGetch(); // Free defaults. MappFreeDefault(MilApplication, MilSystem, M_NULL, M_NULL, M_NULL); return 0; } //**************************************************************************** // Execute Single-definition model example. //**************************************************************************** void ExecuteSingleModelExample( MIL_ID MilSystem, MIL_ID MilModelDisplay, MIL_ID MilTargetDisplay, MIL_CONST_TEXT_PTR ModelImagePath, MIL_CONST_TEXT_PTR TargetImagePath, MIL_DOUBLE DetectionSearchAngleDeltaPos = 0.0) { MIL_ID MilGraphicList; // Graphic list identifier. MIL_ID MilFindContext; // Find AGM context identifier. MIL_ID MilSearchResult; // Find AGM result buffer identifier. MIL_ID MilModelImage; // Image buffer identifier. MIL_ID MilTargetImage; // Image buffer identifier. // Allocate a graphic list to hold the subpixel annotations to draw. MgraAllocList(MilSystem, M_DEFAULT, &amp;MilGraphicList); // Associate the graphic list to the display for annotations. MdispControl(MilTargetDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, MilGraphicList); // Restore the model image. MbufRestore(ModelImagePath, MilSystem, &amp;MilModelImage); // Make the model display a little bigger since the image is small. MIL_INT ModelWindowSizeX = MbufInquire(MilModelImage, M_SIZE_X, M_NULL) + 150; MIL_INT ModelWindowSizeY = MbufInquire(MilModelImage, M_SIZE_Y, M_NULL) + 150; MdispControl(MilModelDisplay, M_WINDOW_INITIAL_SIZE_X, ModelWindowSizeX); MdispControl(MilModelDisplay, M_WINDOW_INITIAL_SIZE_Y, ModelWindowSizeY); // Sets the initial, left-most, X-coordinate of the model disaplay and target display MdispControl(MilModelDisplay, M_WINDOW_INITIAL_POSITION_X, 10); MdispControl(MilModelDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); MdispControl(MilTargetDisplay, M_WINDOW_INITIAL_POSITION_X, ModelWindowSizeX + 90); MdispControl(MilTargetDisplay, M_WINDOW_INITIAL_POSITION_Y, 10); // Display the model image. MdispSelect(MilModelDisplay, MilModelImage); MosPrintf(MIL_TEXT(\"A single-definition model was defined \")); MosPrintf(MIL_TEXT(\"from the displayed model image.\\n\\n\")); // Allocate a find AGM context. MagmAlloc(MilSystem, M_GLOBAL_EDGE_BASED_FIND, M_DEFAULT, &amp;MilFindContext); // Allocate a find AGM result buffer. MagmAllocResult(MilSystem, M_GLOBAL_EDGE_BASED_FIND_RESULT, M_DEFAULT, &amp;MilSearchResult); // Define the single-definition model. MagmDefine(MilFindContext, M_ADD, M_DEFAULT, M_SINGLE, MilModelImage, M_DEFAULT); // Set the minimum acceptable detection score. MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_ACCEPTANCE_DETECTION, 75.0); // Set the search angle range for the detection. MagmControl(MilFindContext, M_AGM_MODEL_INDEX(0), M_DETECTION_DELTA_POS_ANGLE, DetectionSearchAngleDeltaPos); // Preprocess the find AGM context. MagmPreprocess(MilFindContext, M_DEFAULT); // Restore the target image. MbufRestore(TargetImagePath, MilSystem, &amp;MilTargetImage); // Reset the time. MIL_DOUBLE FindTime = 0.0; MappTimer(M_DEFAULT, M_TIMER_RESET + M_SYNCHRONOUS, M_NULL); // Find the model. MagmFind(MilFindContext, MilTargetImage, MilSearchResult, M_DEFAULT); // Read the find time. MappTimer(M_DEFAULT, M_TIMER_READ + M_SYNCHRONOUS, &amp;FindTime); // Get the number of occurrences found. MIL_INT NumOccurrences = 0; MagmGetResult(MilSearchResult, M_DEFAULT, M_NUMBER + M_TYPE_MIL_INT, &amp;NumOccurrences); if(NumOccurrences &gt; 0) { std::vector&lt;MIL_DOUBLE&gt; XPositions; std::vector&lt;MIL_DOUBLE&gt; YPositions; std::vector&lt;MIL_DOUBLE&gt; DetectionScores; std::vector&lt;MIL_DOUBLE&gt; FitScores; std::vector&lt;MIL_DOUBLE&gt; CoverageScores; MagmGetResult(MilSearchResult, M_ALL, M_POSITION_X, XPositions); MagmGetResult(MilSearchResult, M_ALL, M_POSITION_Y, YPositions); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_DETECTION, DetectionScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_FIT, FitScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_COVERAGE, CoverageScores); // Print the results for each occurrence found. MosPrintf(MIL_TEXT(\"The model was found in the target image:\\n\\n\")); MosPrintf(MIL_TEXT(\"Result X Position Y Position \") MIL_TEXT(\"DetectionScore FitScore CoverageScore\\n\\n\")); for(MIL_INT i = 0; i &lt; NumOccurrences; ++i) { MosPrintf(MIL_TEXT(\"%-9i%-13.2f%-13.2f%-17.2f%-11.2f%-11.2f\\n\"), i, XPositions[i], YPositions[i], DetectionScores[i], FitScores[i], CoverageScores[i]); } MosPrintf(MIL_TEXT(\"\\nNumber of occurrences found in the target image: %i\\n\"), NumOccurrences); MosPrintf(MIL_TEXT(\"Search time: %.1f ms\\n\"), FindTime * 1000.0); // Draw green edges and bounding boxes over the occurrences that were found. MgraControl(M_DEFAULT, M_COLOR, M_COLOR_GREEN); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_EDGES + M_DRAW_BOX, M_ALL, M_DEFAULT); // Draw red positions over the occurrences that were found. MgraControl(M_DEFAULT, M_COLOR, M_COLOR_RED); MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_POSITION, M_ALL, M_DEFAULT); } else { MosPrintf(MIL_TEXT(\"The model was not found in the target image.\\n\")); } // Display the target image. MdispSelect(MilTargetDisplay, MilTargetImage); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); // Put the display back to its default state. MdispControl(MilModelDisplay, M_WINDOW_INITIAL_SIZE_X, M_DEFAULT); MdispControl(MilModelDisplay, M_WINDOW_INITIAL_SIZE_Y, M_DEFAULT); // Remove the display. MdispSelect(MilModelDisplay , M_NULL); MdispSelect(MilTargetDisplay, M_NULL); // Free MIL objects. MgraFree(MilGraphicList); MagmFree(MilFindContext); MagmFree(MilSearchResult); MbufFree(MilModelImage); MbufFree(MilTargetImage); } //**************************************************************************** // Single-definition model example. //**************************************************************************** void SingleModelExample(MIL_ID MilSystem) { MosPrintf(MIL_TEXT(\"This example shows that AGM is able \")); MosPrintf(MIL_TEXT(\"to quickly find occurrences\\n\")); MosPrintf(MIL_TEXT(\"in a large cluttered target image.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); MIL_ID MilModelDisplay; // MIL display identifier. MIL_ID MilTargetDisplay; // MIL display identifier. // Allocate the model and target displays MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, &amp;MilModelDisplay ); MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, &amp;MilTargetDisplay); // Set the model and target display's titles MdispControl(MilModelDisplay , M_TITLE, MIL_TEXT(\"Model\")); MdispControl(MilTargetDisplay, M_TITLE, MIL_TEXT(\"Target\")); ExecuteSingleModelExample(MilSystem, MilModelDisplay, MilTargetDisplay, MODEL_IMAGE_0_PATH, TARGET_IMAGE_0_PATH); MosPrintf(MIL_TEXT(\"AGM can also find orriented occurrences.\\n\\n\")); ExecuteSingleModelExample(MilSystem, MilModelDisplay, MilTargetDisplay, MODEL_IMAGE_1_PATH, TARGET_IMAGE_1_PATH, 360.0); // Free the displays MdispFree(MilModelDisplay ); MdispFree(MilTargetDisplay); } //**************************************************************************** // Execute Composite-definition model example. //**************************************************************************** void ExecuteCompositeModelExample( MIL_ID MilSystem, MIL_ID MilDisplay, MIL_CONST_TEXT_PTR TrainImagesPath, MIL_CONST_TEXT_PTR TestImagesPath, MIL_DOUBLE RealignStrength = 0.0) { MIL_ID MilGraphicList; // Graphic list identifier. MIL_ID MilTrainContext; // Train AGM context identifier. MIL_ID MilTrainResult; // Train AGM result buffer identifier. MIL_ID MilFindContext; // Find context identifier. MIL_ID MilSearchResult; // Find AGM result buffer identifier. MIL_ID Regions; // Graphic list identifier. MIL_ID TrainImagesContainer; // Container buffer identifier. // Restore the training images. MbufRestore(TrainImagesPath, MilSystem, &amp;TrainImagesContainer); // Print message about training image labels. MosPrintf(MIL_TEXT(\"\\n*******************************************************\\n\")); MosPrintf(MIL_TEXT(\"LOADING LABELED TRAINING IMAGES...\\n\")); MosPrintf(MIL_TEXT(\"*******************************************************\\n\")); MosPrintf(MIL_TEXT(\"Training requires labeled images with positive and negative samples.\\n\")); MosPrintf(MIL_TEXT(\"Positive samples are occurrences delimited by blue boxes and\\n\")); MosPrintf(MIL_TEXT(\"negative samples are background parts delimited by red boxes.\\n\")); MosPrintf(MIL_TEXT(\"Typically, when false positives are detected in training images,\\n\")); MosPrintf(MIL_TEXT(\"they should be used as negative samples to improve the training.\\n\")); MosPrintf(MIL_TEXT(\"To ease the labeling of images, use the example AgmLabelingTool.\\n\")); // Wait for a key to be pressed. MosPrintf(MIL_TEXT(\"\\nPress any key to show the labeled images used in this training.\\n\")); MosGetch(); // Get the components from the container. std::vector&lt;MIL_ID&gt; TrainImages; MbufInquireContainer(TrainImagesContainer, M_CONTAINER, M_COMPONENT_LIST, TrainImages); // Allocate a graphic list to hold the subpixel annotations to draw. MgraAllocList(MilSystem, M_DEFAULT, &amp;Regions); // Associate the graphic list to the display for annotations. MdispControl(MilDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, Regions); // Display each labeled training image. MosPrintf(MIL_TEXT(\"\\nOnly positive samples are given because AGM is able\\n\")); MosPrintf(MIL_TEXT(\"to automatically generate negative samples.\\n\\n\")); MIL_INT NumTrainImage = (MIL_INT)TrainImages.size(); for(MIL_INT i = 0; i &lt; NumTrainImage; ++i) { MgraClear(M_DEFAULT, Regions); MbufSetRegion(TrainImages[i], Regions, M_DEFAULT, M_EXTRACT, M_DEFAULT); MdispSelect(MilDisplay, TrainImages[i]); MosPrintf(MIL_TEXT(\"Training image %i/%i\\n\"), i + 1, NumTrainImage); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\")); MosGetch(); } // Disassociate the graphic list from the display and stop displaying the training images. MdispControl(MilDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, M_NULL); MdispSelect(MilDisplay, M_NULL); // Allocate a find AGM context. MagmAlloc(MilSystem, M_GLOBAL_EDGE_BASED_FIND, M_DEFAULT, &amp;MilFindContext); // Allocate a find AGM result buffer. MagmAllocResult(MilSystem, M_GLOBAL_EDGE_BASED_FIND_RESULT, M_DEFAULT, &amp;MilSearchResult); // Allocate a train AGM context. MagmAlloc(MilSystem, M_GLOBAL_EDGE_BASED_TRAIN, M_DEFAULT, &amp;MilTrainContext); // Allocate a train AGM result buffer. MagmAllocResult(MilSystem, M_GLOBAL_EDGE_BASED_TRAIN_RESULT, M_DEFAULT, &amp;MilTrainResult); // Define the composite-definition model. MagmDefine(MilTrainContext, M_ADD, M_DEFAULT, M_COMPOSITE, M_NULL, M_DEFAULT); // Enable the automatic generation of negative labels. MagmControl(MilTrainContext, M_AGM_MODEL_INDEX(0), M_NEGATIVE_LABELS_MODE, M_AUTO); // Set the realignment of positive labels. MagmControl(MilTrainContext, M_AGM_MODEL_INDEX(0), M_REALIGN_STRENGTH, RealignStrength); // Preprocess the train AGM context. MagmPreprocess(MilTrainContext, M_DEFAULT); // Train the composite-definition model. MosPrintf(MIL_TEXT(\"\\n*******************************************************\\n\")); MosPrintf(MIL_TEXT(\"TRAINING... THIS WILL TAKE SOME TIME...\\n\")); MosPrintf(MIL_TEXT(\"*******************************************************\\n\")); MagmTrain(MilTrainContext, &amp;TrainImagesContainer, 1, MilTrainResult, M_DEFAULT); // Check that the training process completed successfully. MIL_INT TrainStatus = -1; MagmGetResult(MilTrainResult, M_DEFAULT, M_STATUS, &amp;TrainStatus); if(TrainStatus == M_COMPLETE) { MosPrintf(MIL_TEXT(\"Training complete!\\n\")); // Ensure that the trained model is valid before copying to the find AGM context. MIL_INT TrainedModelStatus = -1; MagmGetResult(MilTrainResult, M_AGM_MODEL_INDEX(0), M_STATUS, &amp;TrainedModelStatus); if(TrainedModelStatus == M_STATUS_TRAIN_OK) { // Display all the positive and negative labels on the training images. MosPrintf(MIL_TEXT(\"Here are the training images with the positive labels\\n\")); MosPrintf(MIL_TEXT(\"and the automatically generated negative labels.\\n\\n\")); MdispControl(MilDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, Regions); for(MIL_INT i = 0; i &lt; NumTrainImage; ++i) { MgraClear(M_DEFAULT, Regions); MgraColor(M_DEFAULT, M_COLOR_BLUE); MagmDraw(M_DEFAULT, MilTrainResult, Regions, M_DRAW_POS_RECTANGLES, M_AGM_IMAGE_INDEX(i), M_DEFAULT); MgraColor(M_DEFAULT, M_COLOR_RED); MagmDraw(M_DEFAULT, MilTrainResult, Regions, M_DRAW_NEG_RECTANGLES, M_AGM_IMAGE_INDEX(i), M_DEFAULT); MdispSelect(MilDisplay, TrainImages[i]); MosPrintf(MIL_TEXT(\"Training image %i/%i\\n\"), i + 1, NumTrainImage); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\")); MosGetch(); } // Disassociate the graphic list from the display and stop displaying the training images. MdispControl(MilDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, M_NULL); MdispSelect(MilDisplay, M_NULL); // Copy the trained model to a find AGM context. MagmCopyResult(MilTrainResult, M_DEFAULT, MilFindContext, M_DEFAULT, M_TRAINED_MODEL, M_DEFAULT); } } // Preprocess find AGM context. MagmPreprocess(MilFindContext, M_DEFAULT); MosPrintf(MIL_TEXT(\"\\n*******************************************************\\n\")); MosPrintf(MIL_TEXT(\"FINDING WITH THE TRAINED MODEL...\\n\")); MosPrintf(MIL_TEXT(\"*******************************************************\\n\")); // Restore test images. MIL_INT NumberOfImages = 0; MIL_STRING FilesToSearch = TestImagesPath; FilesToSearch += MIL_TEXT(\"*.mim\"); MappFileOperation(M_DEFAULT, FilesToSearch, M_NULL, M_NULL, M_FILE_NAME_FIND + M_NB_ELEMENTS, M_DEFAULT, &amp;NumberOfImages); std::vector&lt;MIL_ID&gt; TestImages(NumberOfImages); for(MIL_INT i = 0; i &lt; NumberOfImages; i++) { MIL_STRING Filename; MappFileOperation(M_DEFAULT, FilesToSearch, M_NULL, M_NULL, M_FILE_NAME_FIND, i, Filename); MIL_STRING FilePath = TestImagesPath + Filename; MbufRestore(FilePath, MilSystem, &amp;TestImages[i]); } // Allocate a graphic list to hold the subpixel annotations to draw. MgraAllocList(MilSystem, M_DEFAULT, &amp;MilGraphicList); // Associate the graphic list to the display for annotations. MdispControl(MilDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, MilGraphicList); // Assign the color to draw. MgraControl(M_DEFAULT, M_COLOR, M_COLOR_GREEN); for(MIL_INT i = 0; i &lt; NumberOfImages; ++i) { // Find the model in the test image. MagmFind(MilFindContext, TestImages[i], MilSearchResult, M_DEFAULT); // Get the number of occurrences found. MIL_INT NumOccurrences = 0; MagmGetResult(MilSearchResult, M_DEFAULT, M_NUMBER + M_TYPE_MIL_INT, &amp;NumOccurrences); if(NumOccurrences &gt; 0) { // Get the results of the search. std::vector&lt;MIL_DOUBLE&gt; XPositions; std::vector&lt;MIL_DOUBLE&gt; YPositions; std::vector&lt;MIL_DOUBLE&gt; DetectionScores; std::vector&lt;MIL_DOUBLE&gt; FitScores; std::vector&lt;MIL_DOUBLE&gt; CoverageScores; MagmGetResult(MilSearchResult, M_ALL, M_POSITION_X, XPositions); MagmGetResult(MilSearchResult, M_ALL, M_POSITION_Y, YPositions); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_DETECTION, DetectionScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_FIT, FitScores); MagmGetResult(MilSearchResult, M_ALL, M_SCORE_COVERAGE, CoverageScores); // Print the results for each occurrence foud. MosPrintf(MIL_TEXT(\"The model was found in the target image:\\n\\n\")); MosPrintf(MIL_TEXT(\"Result X Position Y Position \") MIL_TEXT(\"DetectionScore FitScore CoverageScore\\n\\n\")); for(MIL_INT j = 0; j &lt; NumOccurrences; ++j) { MosPrintf(MIL_TEXT(\"%-9i%-13.2f%-13.2f%-17.2f%-11.2f%-11.2f\\n\"), j, XPositions[j], YPositions[j], DetectionScores[j], FitScores[j], CoverageScores[j]); } // Empty the graphic list. MgraClear(M_DEFAULT, MilGraphicList); // Draw bounding box MagmDraw(M_DEFAULT, MilSearchResult, MilGraphicList, M_DRAW_BOX, M_ALL, M_DEFAULT); } else { MosPrintf(MIL_TEXT(\"The model was not found in the target image.\\n\")); } // Display the test image. MdispSelect(MilDisplay, TestImages[i]); // Wait for a key to be pressed. MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } // Remove the display. MdispSelect(MilDisplay, M_NULL); // Free MIL objects. for(MIL_INT i = 0; i &lt; NumberOfImages; ++i) { MbufFree(TestImages[i]); } MgraFree(MilGraphicList); MgraFree(Regions); MagmFree(MilTrainContext); MagmFree(MilTrainResult); MagmFree(MilFindContext); MagmFree(MilSearchResult); MbufFree(TrainImagesContainer); } //**************************************************************************** // Composite-definition model example. //**************************************************************************** void CompositeModelExample(MIL_ID MilSystem) { MosPrintf(MIL_TEXT(\"This example shows that AGM is able \")); MosPrintf(MIL_TEXT(\"to confidently find occurrences with appearance\\n\")); MosPrintf(MIL_TEXT(\"variation in a complex background \")); MosPrintf(MIL_TEXT(\"after training a composite-definition model.\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\")); MosGetch(); MIL_ID MilDisplay; // MIL display identifier. // Allocate the display MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, &amp;MilDisplay); ExecuteCompositeModelExample(MilSystem, MilDisplay, TRAIN_IMAGES_0_PATH, TEST_IMAGES_DIR_0_PATH); MosPrintf(MIL_TEXT(\"\\nThis second dataset shows that the positive labels can be realigned during training.\\n\")); ExecuteCompositeModelExample(MilSystem, MilDisplay, TRAIN_IMAGES_1_PATH, TEST_IMAGES_DIR_1_PATH, 100.0); // Free the display MdispFree(MilDisplay); } ",
      "wordCount": 1774
    }
  ]
}]