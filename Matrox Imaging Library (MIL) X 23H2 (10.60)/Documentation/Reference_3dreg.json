[{
  "id": "Reference_3dreg",
  "version": "2024020714",
  "title": "3dreg",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\3dreg\\ModuleInformation.htm",
  "text": " M3dreg functions Synopsis The functions prefixed with M3dreg make up the MIL 3D Registration module. Functions M3dregAlloc M3dregAllocResult M3dregCalculate M3dregControl M3dregControlDraw M3dregCopy M3dregCopyResult M3dregDraw3d M3dregFree M3dregGetResult M3dregInquire M3dregInquireDraw M3dregMerge M3dregRestore M3dregSave M3dregSetLocation M3dregStream ",
  "wordCount": 35,
  "subEntries": [
    {
      "id": "Reference_3dreg_M3dregAlloc",
      "version": null,
      "title": "M3dregAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregAlloc.htm",
      "text": " M3dregAlloc Synopsis Allocate a 3D registration context. Syntax MIL_ID M3dregAlloc( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ContextType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dregIdPtr //out ) Description This function allocates a 3D registration context on the specified system. A 3D registration context contains information needed to perform an M3dregCalculate() operation. You can also use M3dregAlloc() to allocate a draw 3D registration context for drawing results using M3dregDraw3d(). A pairwise 3D registration context contains global registration settings and registration elements; each registration element stores the registration information for a single point cloud. Specify how many registration elements are in the 3D registration context using M3dregControl() with M_NUMBER_OF_REGISTRATION_ELEMENTS. This registration information is set using M3dregControl() and M3dregSetLocation(). When the 3D registration context is no longer required, release it using M3dregFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D registration context's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the identifier of the system on which to allocate the 3D registration context. Set this parameter to one of the values below: For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ContextType Specifies the type of 3D registration context to allocate. Set this parameter to one of the values below: For specifying the type of 3D registration context Value Description M_DRAW_3D_CONTEXT Allocates a draw 3D registration context for use with M3dregDraw3d(). M_PAIRWISE_REGISTRATION_CONTEXT Specifies a pairwise 3D registration context for use with M3dregCalculate(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Context3dregIdPtr Specifies the address of the variable in which to write the 3D registration context identifier or specifies the data type that the function should use to return the 3D registration context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D registration context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D registration context ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DREG_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D registration context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the draw 3D registration context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw 3D registration context. If allocation fails, M_NULL is written as the identifier. Address in which to write the pairwise 3D registration context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated pairwise 3D registration context. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D registration context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DREG_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - SysId For specifying the system identifier - ContextType For specifying the type of 3D registration context - ControlFlag - Context3dregIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 635,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregAllocResult",
      "version": null,
      "title": "M3dregAllocResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregAllocResult.htm",
      "text": " M3dregAllocResult Synopsis Allocate a 3D registration result buffer. Syntax MIL_ID M3dregAllocResult( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ResultType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Result3dregIdPtr //out ) Description This function allocates a 3D registration result buffer, on the specified system, to store results obtained from a M3dregCalculate() operation. When the result buffer is no longer required, release it using M3dregFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the result buffer's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the system on which to allocate the result buffer. This parameter should be set to one of the following values: For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ResultType Specifies the type of result buffer to allocate. Set this parameter to the value below: For specifying the type of result buffer to allocate Value Description M_PAIRWISE_REGISTRATION_RESULT Specifies to allocate a 3D pairwise registration result buffer. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Result3dregIdPtr Specifies the address of the variable in which to write the 3D pairwise registration result buffer identifier or specifies the data type that the function should use to return the 3D pairwise registration result buffer identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D pairwise registration result buffer ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D pairwise registration result buffer ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DREG_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D pairwise registration result buffer (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated 3D pairwise registration result buffer. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D pairwise registration result buffer identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DREG_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - SysId For specifying the system identifier - ResultType For specifying the type of result buffer to allocate - ControlFlag - Result3dregIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 522,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregCalculate",
      "version": null,
      "title": "M3dregCalculate",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregCalculate.htm",
      "text": " M3dregCalculate Synopsis Perform the registration operation on the given point clouds and write the resulting transformation matrices into the pairwise 3D registration result buffer. Syntax void M3dregCalculate( MIL_ID&nbsp;Context3dregId, //in const MIL_ID&nbsp;*ContainerBufIdArrayPtr, //in MIL_INT&nbsp;NumContainers, //in MIL_ID&nbsp;Result3dregId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function calculates the optimal registration (alignment) of the overlapping region shared between each point cloud and its reference point cloud, and calculates the transformation needed to achieve this registration. Once the transformation that maps each point cloud's working coordinate system onto its reference point cloud's working coordinate system is calculated, all point clouds can be mapped onto the global coordinate system. Every point cloud is associated with a registration element in the 3D registration context, and that registration element provides the rough location of the point cloud relative to another point cloud (the reference point cloud), or in the global coordinate system (for example, the third container in the array is associated with the third registration element). This function takes points in one point cloud, pairs them with points in the other point cloud, and tries to minimize the root-mean-square (RMS) error of the distance between all the paired points with each iteration of the registration operation. The iterations continue, trying to reduce the RMS error in each iteration, until at least one stop condition occurs. You can specify the stop conditions using M3dregControl() with M_MAX_ITERATIONS, M_RMS_ERROR_THRESHOLD, and M_RMS_ERROR_RELATIVE_THRESHOLD. You can also use M3dregControl() with M_STOP_CALCULATE to stop the execution of M3dregCalculate(). Note that, by default, the pairwise comparison for the registration operation uses the M_POINT_TO_PLANE error minimization metric, which requires the normal vector of each point. If the source point clouds do not have normals components, these components are temporarily generated using default settings (M3dimControl()). If you require the M_COMPONENT_NORMALS_MIL components for future operations, or you want to use non-default settings for their generation, you can pass the point clouds to M3dimNormals() before calling M3dregCalculate(). During the first iteration of the registration operation, a point cloud is transformed to its rough location. The rough location is specified using M3dregSetLocation(), and the preregistration mode is set using M3dregControl() with M_PREREGISTRATION_MODE. Similar to the pairwise 3D registration context, the pairwise 3D registration result buffer contains registration result elements, each of which stores the results of the registration operation for each point cloud. Each point cloud in the array of containers is associated with the registration result element with the same index. Results include the calculated transformation matrix which aligns the working coordinate system of a point cloud to its reference (retrieved using M3dregCopyResult() with M_REGISTRATION_MATRIX), as well as status information (retrieved using M3dregGetResult() with M_STATUS). Parameters Parameters Context3dregId Specifies the identifier of the pairwise 3D registration context to use for the registration operation. The context must have been previously allocated using M3dregAlloc(). ContainerBufIdArrayPtr Accepts the address of one of the following: array of type MIL_ID [optionally, in C++: a reference to a constant std::vector&lt;MIL_ID&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumContainers) Specifies the address of the array containing the identifiers of the point cloud containers. The point clouds must be 3D-processable; use MbufInquireContainer() with M_3D_PROCESSABLE to ensure that the containers contain 3D-processable point clouds. The number of containers supplied in the array should be less than or equal to the number of registration elements in the registration context. Note that if M_ERROR_MINIMIZATION_METRIC is set to M_POINT_TO_PLANE and the inputted point clouds do not contain the component M_COMPONENT_NORMALS_MIL, the component will be generated temporarily with their default controls during the operation. If you intend on using the point clouds with more operations that require normals or require non-default controls for their creation, you should first call M3dimNormals(). NumContainers Specifies the size of the array passed to ContainerBufIdArrayPtr. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the ContainerBufIdArrayPtr parameter. For specifying the number of containers in the array Value Description 2 &lt;= Value &lt; M3dregInquire(ParamId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the size of the array. Result3dregId Specifies the pairwise 3D registration result buffer identifier in which to store results. The result buffer must have been previously allocated using M3dregAllocResult(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - Context3dregId - ContainerBufIdArrayPtr - NumContainers For specifying the number of containers in the array - Result3dregId - ControlFlag Compilation information ",
      "wordCount": 757,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregControl",
      "version": null,
      "title": "M3dregControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregControl.htm",
      "text": " M3dregControl Synopsis Control a pairwise 3D registration context or a pairwise 3D registration result buffer. Syntax void M3dregControl( MIL_ID&nbsp;ContextOrResult3dregId, //in MIL_INT64&nbsp;Index, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls the settings of a pairwise 3D registration context, one of its registration elements, or a pairwise 3D registration result buffer. These settings specify how to start and stop the registration operation (preregistration and stop conditions), and how M3dregCalculate() performs the pairwise comparison of points. To inquire about these control type settings, call M3dregInquire(). Parameters Parameters ContextOrResult3dregId Specifies the identifier of the pairwise 3D registration context or a pairwise 3D registration result buffer to control. The pairwise 3D registration context must be allocated using M3dregAlloc(), and the pairwise 3D registration result buffer must be allocated using M3dregAllocResult(). Index Specifies what to control. Set this parameter to one of the following values: For specifying the registration element Value Description M_DEFAULT Specifies the default behavior. If ContextOrResult3dregId specifies a pairwise 3D registration context, then M_DEFAULT is the same as M_CONTEXT. If ContextOrResult3dregId specifies a pairwise 3D registration result buffer, then M_DEFAULT is the same as M_GENERAL. M_ALL Specifies to apply the control settings to all registration elements of a pairwise 3D registration context or all registration result elements of a pairwise 3D registration result buffer. M_CONTEXT Specifies to apply the control settings to a pairwise 3D registration context. M_GENERAL Specifies to apply the control settings to a pairwise 3D registration result buffer. 0 &lt;= Value &lt; M3dregInquire(M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration element or registration result element to apply the control settings. ControlType Specifies the setting to change. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ControlType and ControlValue parameters. For controlling a pairwise 3D registration context For controlling the registration elements of a pairwise 3D registration context For controlling the registration elements of a pairwise 3D registration result buffer For controlling a pairwise 3D registration result buffer The following ControlType and corresponding ControlValue parameter settings are used to control the pairwise 3D registration context specified with the ContextOrResult3dregId parameter. Index must be set to M_CONTEXT. For controlling a pairwise 3D registration context ControlType Description ControlValue M_ERROR_MINIMIZATION_METRIC Sets the technique for performing the pairwise comparison during each iteration of the registration operation, and establishes how to compute the RMS error. In each iteration, points in the reference point cloud are paired with the closest points in the other point cloud. The points are always paired in the same manner (independent of the setting of M_ERROR_MINIMIZATION_METRIC). Once paired, the RMS error is calculated using the specified distance measurement or error metric. The best technique for a given registration depends on how many large and flat surfaces the object represented by the point cloud has. Using the correct setting can help avoid registration sliding (when multiple different registration are possible because of large planar surfaces) or diverging (when the registration operation results in the point clouds moving apart). M_DEFAULT Same as M_POINT_TO_PLANE. M_POINT_TO_PLANE Specifies to calculate the RMS error using the shortest distance between the point (in the reference point cloud), and the plane tangent to the other paired point. The tangent plane is calculated using the normal of the latter point. This setting improves the speed of registering organized point clouds, where the normal at a given point is not similar to the normal at nearby points. This implies that the object represented by the point cloud has a large range of surface directions, and no relatively large flat surfaces. Large surfaces can result in the registration sliding or diverging. M_POINT_TO_POINT Specifies to calculate the RMS error using the distance between the paired points. This setting is better suited to registering point clouds that represent objects with large planar surfaces, and will avoid registration sliding or diverging. M_MAX_ITERATIONS Sets a stop condition for the iterative registration operation. If the maximum number of iterations is reached, the registration operation stops. To inquire whether this stop condition was met, call M3dregGetResult() with M_STATUS. Note that preregistration constitutes the first iteration. M_DEFAULT Specifies the default value; the default value is 20. Value &gt; 0 Specifies the maximum number of iterations in the registration process. M_NUMBER_OF_REGISTRATION_ELEMENTS Sets the number of registration elements in the pairwise 3D registration context. The number of registration elements should be equal to, or greater than, the number of point clouds to register. If you reduce the number of registration elements, the settings of the ones that remain are kept unchanged. If you increase the number of registration elements, the new ones are initialized with the default settings. M_DEFAULT Specifies the default value; the default value is 2. 2 &lt;= Value &lt;= 65535 Specifies the number of registration elements in a pairwise 3D registration context. M_PAIRS_CREATION_FROM_TARGET Sets whether to begin pairing points from the reference to target point cloud, and then vice versa. You can enable such pairings so that they are performed for all iterations or only for specific iterations. When this control type is enabled, the registration operation finds point pairs in both directions. After looping over the reference point cloud to find, for every reference point, its closest pair in the target point cloud, the operation then loops over the target point cloud to find, for every target point, its closest pair in the reference point cloud. Using M_PAIRS_CREATION_FROM_TARGET can help prevent divergence when the reference and target point clouds are far apart. M_DEFAULT Same as M_DISABLE. M_AUTO Specifies to find point pairs in both directions for specific iterations based on an internal heuristic. M_DISABLE Specifies not to find point pairs in both directions. The operation finds matches in the target point cloud relative to reference points, and won't search for matches in the reference point cloud relative to target points. M_ENABLE Specifies to find point pairs in both directions. M_PAIRS_CREATION_MAX_POINT_DISTANCE Sets the maximum Euclidean distance within which two points could be paired. For any given reference point, M_PAIRS_CREATION_MAX_POINT_DISTANCE does not limit how many pairings are possible within the specified distance. If you know beforehand how far the target is from the reference, you can set this control type to an appropriate value and eliminate plainly irrelevant outliers. You can also use this setting to prevent divergence when there are multiple occurrences of the target in your scene. Place the reference over a rough estimate of an occurrence and set M_PAIRS_CREATION_MAX_POINT_DISTANCE to prevent convergence towards a different occurrence. M_PAIRS_CREATION_MAX_POINT_DISTANCE is independent from M_PAIRS_REJECTION_MODE. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that there is no maximum distance. Value &gt; 0.0 Specifies the maximum distance. M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE Sets whether to pair each point in the reference point cloud with a single point or multiple points in the target point cloud. You can also choose to allow multiple pairings for specific iterations only. When the reference and target point clouds are far apart, choosing M_MULTIPLE makes the point clouds less likely to diverge. When the two point clouds are very close, M_SINGLE can give a more refined registration. M_DEFAULT Same as M_SINGLE. M_AUTO Specifies to allow multiple point pairings for specific iterations; the operation adjusts the number of paired points per reference point for each iteration based on an internal heuristic. M_MULTIPLE Specifies to pair each reference point with up to 6 neighbors in the target point cloud. M_SINGLE Specifies to pair each reference point with a single point in the target point cloud. M_PAIRS_LIMIT_PER_TARGET_POINT_MODE Specifies whether to limit the number of point pairs to which a target point can belong. Once the operation determines each reference point's matching pair in the target point cloud, setting this control to M_SINGLE checks all target points to ensure that each is matched to no more than one point in the reference point cloud. Set this control to M_AUTO to let MIL determine the number of pairings per target point. M_DEFAULT Same as M_DISABLE. M_AUTO Specifies to allow every target point to be part of a variable number of point pairs, based on an internal heuristic. M_DISABLE Specifies not to limit the number of point pairs to which a target point can belong. M_SINGLE Specifies to allow every target point to be part of 1 point pair. M_PREREGISTRATION_MODE Sets how to perform the preregistration step. M_DEFAULT Same as M_USER_DEFINED. M_CENTROID Specifies to apply the preregistration transformation matrix, specified using M3dregSetLocation(); it then automatically registers the centroids (center of mass) of the two point clouds. By default, the registration of the centroids is a translation only and does not include any rotation. To only register the centroids, you can specify the identity matrix as the transformation matrix of the preregistration; to do so, call M3dregSetLocation() with M_IDENTITY_MATRIX. Alternatively, you can delegate the translation to the centroid registration, and define the rotation using a user-defined transformation matrix specified using M3dregSetLocation(). M_USER_DEFINED Specifies to apply the preregistration transformation matrix in the first iteration of the registration operation. Specify the transformation matrix using M3dregSetLocation(). M_RMS_ERROR_RELATIVE_THRESHOLD Sets the stop condition for the registration operation that tests the percentage change of the root-mean-square (RMS) error of successive iterations. The RMS error is calculated from the distance between all paired points. You can control how the distance is calculated using M_ERROR_MINIMIZATION_METRIC. Specifically, where Ei is the RMS error of iteration i, the relative RMS error is calculated as: [(Ei-1 - Ei )/Ei-1 ]*100 For instance, if the RMS error of the first iteration is 2.0 and the RMS error of the second iteration is 0.8, the relative RMS error of the second iteration is equal to [(2.0-0.8)/2.0]*100, which is 60%. If the relative RMS error is positive, this means the RMS error is decreasing, and the point clouds are becoming increasingly aligned. If the change in the calculated RMS error between successive iterations is less than or equal to the specified value, the registration operation stops. If this stop condition is met, the registration is typically considered correct. Note that the specified value represents a percentage, so the default value of 0.1 represents 0.1%, not 10%. M_DEFAULT Specifies the default value; the default value is 0.1. Value &gt;= 0.0 Specifies the relative RMS error threshold. M_RMS_ERROR_THRESHOLD Sets the stop condition for the registration operation that tests the root-mean-square (RMS) error of successive iterations. The RMS error is calculated from the distance between all paired points. You can control how the distance is calculated using M_ERROR_MINIMIZATION_METRIC. This value should be set to an acceptable average RMS error for a pair of points. If the calculated RMS error goes under or equals the specified value, the registration operation stops. If this stop condition is met, the registration is typically considered correct. M_DEFAULT Specifies the default value; the default value is 0.0. Value &gt;= 0.0 Specifies the RMS error threshold. M_SAVE_PAIRS_INFO Sets whether to save point pairs at each iteration. When pairs information is saved, you can retrieve diagnostic information using M3dregCopyResult() and draw this diagnostic information using M3dregDraw3d(). M_DEFAULT Same as M_FALSE. M_FALSE Specifies not to save point pairs at each iteration. M_TRUE Specifies to save point pairs at each iteration. M_SUBSAMPLE Sets whether to subsample all point clouds before applying the registration. This subsampling is applied before any point cloud-specific subsampling is applied by M_SUBSAMPLE_REFERENCE or M_SUBSAMPLE_TARGET. Enabling this control type associates the registration context with an internal subsampling context used when subsampling all point clouds. The subsampling context defines the subsampling technique to use. To change the settings of the subsampling context, call M3dregInquire() with M_SUBSAMPLE_CONTEXT_ID to first get the MIL identifier of the subsampling context. The subsampling context can then be controlled using M3dimControl() (see the settings available for Subsample context ID). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to disable subsampling before applying the registration. M_ENABLE Specifies to enable subsampling before applying the registration. M_TIMEOUT Sets the maximum amount of time for M3dregCalculate() to complete the registration operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. The following ControlType and corresponding ControlValue parameter settings are used to control the registration elements of the pairwise 3D registration context specified with the ContextOrResult3dregId parameter. Index must be set to an index value or M_ALL: For controlling the registration elements of a pairwise 3D registration context ControlType Description ControlValue M_OVERLAP Sets the percentage of point pairings to use in a single iteration of the registration operation. At the start of an iteration, the points of the reference point cloud are individually paired with the closest points in the other point cloud. M_OVERLAP specifies the percentage of those paired points that are used in the registration operation, prioritizing the paired points with the lowest RMS error. For example, if you specify 80%, then during each iteration, 80% of paired points (with the lowest calculated RMS error as defined by M_ERROR_MINIMIZATION_METRIC) are used to calculate the average RMS error of the iteration, and a new transformation. This excludes the 20% worst point pairings, which often contain outliers in the reference point cloud. These outliers are typically caused by image noise, occlusion, object deformity, or misalignment. Typically, if there are fewer points in the reference point cloud than in the point cloud that will be registered to it, the overlap should roughly equal the ratio of the points in the reference point cloud to the points in the other point cloud. If the density of points is the same in both point clouds, this ratio could be set to the exact ratio between the two. For example, if there are 100 points in the reference point cloud, 200 points in the point cloud that will be registered to it, and they have a similar density, then the overlap can be set to 50%. This can occur because of occlusion of the object while generating the scene point cloud. If there are more points in the reference point cloud, this value should be set to a little under 100%. In this case, it is recommended that you use as many of the points in the reference point cloud as possible while still accounting for outliers. M_DEFAULT Specifies the default value; the default value is 80.0. 0.0 &lt; Value &lt;= 100.0 Specifies the percentage of possible paired points included in each iteration of the registration operation. M_PAIRS_REJECTION_FACTOR Sets the rejection factor, which is a constant value with which to multiply the robust standard deviation when calculating the distance threshold (M_PAIRS_REJECTION_MODE set to M_ROBUST_STANDARD_DEVIATION). A larger rejection factor sets a larger distance threshold. M_DEFAULT Specifies the default value; the default value is 2.5. Value &gt;= 0.0 Specifies the rejection factor. M_PAIRS_REJECTION_MODE Sets whether to reject point pairs that are too far apart, according to a distance threshold established from all point pair distances. When using this mode, you can set M_PAIRS_REJECTION_FACTOR to adjust the threshold, which is calculated as follows: distance threshold = median(all pair distances) + rejection factor * robust standard deviation(all pair distances) . Note that M_PAIRS_REJECTION_MODE applies the threshold to each iteration. Note also that, for this control setting, a point pair's distance is that defined by M_ERROR_MINIMIZATION_METRIC. M_PAIRS_REJECTION_MODE is independent from M_PAIRS_CREATION_MAX_POINT_DISTANCE. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to use pairs rejection mode. M_ROBUST_STANDARD_DEVIATION Specifies to use pairs rejection mode with a robust estimate of the variance (standard deviation) of the distance between point pairs. Set the multiplicative factor used in the calculation with M_PAIRS_REJECTION_FACTOR. M_SUBSAMPLE_REFERENCE Sets whether to subsample the reference point cloud associated with the specified registration element, before applying the registration. This subsampling is applied to the point cloud after any subsampling is applied by M_SUBSAMPLE. Enabling this control type associates the registration element with an internal subsampling context used when subsampling the reference point cloud. The subsampling context defines the subsampling technique to use. This allows you to specify a different subsampling method for each registration element within a registration context. To change the settings of the subsampling context, call M3dregInquire() with M_SUBSAMPLE_REFERENCE_CONTEXT_ID to first get the MIL identifier of the subsampling context. The subsampling context can then be controlled using M3dimControl() (see the settings available for Subsample context ID). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to disable subsampling for the reference point cloud before applying the registration. M_ENABLE Specifies to enable subsampling for the reference point cloud before applying the registration. M_SUBSAMPLE_TARGET Sets whether to subsample the target point cloud associated with the specified registration element, before applying the registration. This subsampling is applied to the point cloud after any subsampling is applied by M_SUBSAMPLE. Enabling this control type associates the registration element with an internal subsampling context used when subsampling the reference point cloud. The subsampling context defines the subsampling technique to use. This allows you to specify a different subsampling method for each registration element within a registration context. To change the settings of the subsampling context, call M3dregInquire() with M_SUBSAMPLE_TARGET_CONTEXT_ID to first get the MIL identifier of the subsampling context. The subsampling context can then be controlled using M3dimControl() (see the settings available for Subsample context ID). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to disable subsampling for the target point cloud before applying the registration. M_ENABLE Specifies to enable subsampling for the target point cloud before applying the registration. The following ControlType and corresponding ControlValue parameter settings are used to control the registration elements of the pairwise 3D result buffer specified with the ContextOrResult3dregId parameter. Index must be set to an index value or M_ALL. For controlling the registration elements of a pairwise 3D registration result buffer ControlType Description ControlValue M_ITERATION_INDEX Sets the index of the iteration from which to copy, get, or draw results. Functions such as M3dregCopyResult() and M3dregGetResult() use this setting to retrieve results from intermediate iterations (M_INTERMEDIATE_ITERATION), which is useful when you want to debug the registration operation or understand it in greater detail. M3dregDraw3d() uses this setting when drawing the result of an intermediate iteration of the registration process. M_DEFAULT Same as M_LAST_ITERATION. M_LAST_ITERATION Specifies the index of the final iteration of the registration process. 0 &lt;= Value &lt; M3dregGetResult(M_NB_ITERATIONS) Specifies the index of the iteration from which to copy, get, or draw results. M_PAIRS_RANK Sets the point pair rank when using M3dregCopyResult() to create a distance, overlap, or pair index image. When a single reference point is paired to multiple points in the registration result element's point cloud, M_PAIRS_RANK sets from which point pair to copy results. Note that pairings are ranked from nearest (rank 0) to farthest. M_DEFAULT Specifies the default value; the default value is 0. 0 &lt;= Value &lt; M3dregGetResult(M_MAX_PAIRS_RANK) Specifies the rank of the pairing from which to copy results. If a pair with the specified rank does not exist, MIL writes an appropriate invalid value to the destination image buffer, depending on the type of image. For example, the invalid value for an M_OVERLAP_MASK image is zero. The following ControlType and corresponding ControlValue parameter settings are used to control the pairwise 3D registration result buffer specified with the ContextOrResult3dregId parameter. Index must be set to M_GENERAL. For controlling a pairwise 3D registration result buffer ControlType Description ControlValue M_MERGE_LOCATION Sets whether to transform the point clouds such that their working coordinate systems are aligned to the global coordinate system, or to transform (fixture) them such that their working coordinate systems are aligned with a specified point cloud's working coordinate system, for an M3dregMerge() operation. M_DEFAULT Same as M_REGISTRATION_GLOBAL. M_REGISTRATION_GLOBAL Specifies to transform the point clouds to the global coordinate system for the merging operation. 0 &lt;= Value &lt; M3dregInquire(M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the point cloud to which to fixture all point clouds; the point clouds will be aligned to the specified point cloud's working coordinate system. M_RESET Removes all results from the pairwise 3D registration result buffer. This does not delete the pairwise 3D registration result buffer, as is the case with M3dregFree(). M_DEFAULT Specifies the default behavior. M_STOP_CALCULATE Stops the current execution of M3dregCalculate() from another thread of higher priority. Any results from previous registrations become invalid and are discarded, and any completed results from the current registration operation will be available. M_DEFAULT Specifies the default behavior. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - ContextOrResult3dregId - Index For specifying the registration element - ControlType - ControlValue Parameter Associations For controlling a pairwise 3D registration context For controlling the registration elements of a pairwise 3D registration context For controlling the registration elements of a pairwise 3D registration result buffer For controlling a pairwise 3D registration result buffer Compilation information ",
      "wordCount": 3433,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregControlDraw",
      "version": null,
      "title": "M3dregControlDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregControlDraw.htm",
      "text": " M3dregControlDraw Synopsis Control a setting of a draw 3D registration context. Syntax void M3dregControlDraw( MIL_ID&nbsp;DrawContext3dregId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls a specified setting of a draw 3D registration context. These settings establish which pairwise 3D registration results to draw into the 3D graphics list (and how to draw them), when calling M3dregDraw3d(). You can inquire about most of these settings using M3dregInquireDraw(). Note that, prior to performing the 3D registration operation, you must specify to save pairs information at each iteration, using M3dregControl() with M_SAVE_PAIRS_INFO set to M_TRUE. This ensures that results are available to draw. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dregControlDraw() internally calls the MIL_DOUBLE version of this function (M3dregControlDrawDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (M3dregControlDrawInt64()). Parameters Parameters DrawContext3dregId Specifies the identifier of the draw 3D registration context to control. The draw 3D registration context must have been previously allocated on the required system using M3dregAlloc() with M_DRAW_3D_CONTEXT. Operation Specifies the draw operation. See the Parameter associations section for possible values that can be specified. ControlType Specifies the setting to change. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The table below lists possible values for the Operation, ControlType, and ControlValue parameters. For a draw 3D registration context The following Operation, ControlType, and ControlValue parameter settings are available to control draw 3D registration context settings. For a draw 3D registration context Operation Description ControlType ControlValue M_ALL Applies the setting to all operations that support the control type. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_OPACITY Sets the opacity of the 3D graphic(s) added to the 3D graphics list. M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . A graphic(s) with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_EXCLUDED_POINTS Sets whether and how to draw the points that are not paired to any other points. The resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_GRAY. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_OPACITY Sets the opacity with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 100. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . A graphic(s) with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_OVERLAP_POINTS Sets whether and how to draw overlapping (paired) points. Overlapping points are points in the reference point cloud that have been paired with at least one target point. The resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_PSEUDO_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each registration result element with a different color, according to the mapping between each registration result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_COLOR_COMPONENT Sets the color of the points in the point cloud(s) using one of the container's components. M_DEFAULT Same as M_DISTANCE_IMAGE. M_DISTANCE_IMAGE Specifies to color the point cloud according to an internally generated distance image; the distance image is created using the distances between paired points. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_COLOR_LIMITS Sets the default limits of the values in the component used to color the point cloud(s) added to the 3D graphics list. Values between the minimum and the maximum are remapped linearly to values between the minimum and maximum possible display values. The values beyond the minimum or maximum are saturated. When M_COLOR_USE_LUT is M_TRUE, the minimum and maximum get mapped to the LUT's extreme values. M_DEFAULT Same as M_DATA_EXTREMES_GLOBAL. M_DATA_EXTREMES_GLOBAL Specifies to use the global minimum and maximum of the buffer's data. If the buffer has multiple bands, a single minimum and maximum is used for all of the bands. Points with 0 confidence are ignored. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_COLOR_USE_LUT Sets whether to color the point cloud(s) added to the 3D graphics list by mapping each value of the component specified by M_COLOR_COMPONENT to a color in a LUT, and then using that color to display the corresponding point. M_DEFAULT Same as M_TRUE. M_FALSE Specifies not to use a LUT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_TRUE Specifies to use a LUT. M_OPACITY Sets the opacity of the 3D graphic(s) added to the 3D graphics list. M_DEFAULT Specifies the default value; the default value is 100.0. Specifies the default value; the default value is 100.0. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . A graphic(s) with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_PAIRS Sets whether and how to draw lines between paired points, when calling M3dregDraw3d(). The resulting graphic(s) will be of type M_GRAPHIC_TYPE_LINE or M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_OPACITY Sets the opacity of the 3D graphic(s) added to the 3D graphics list. M_DEFAULT Specifies the default value; the default value is 100.0. Specifies the default value; the default value is 100.0. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . A graphic(s) with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_GLOBAL_DRAW_SETTINGS Sets a global draw 3D registration context setting. M_PSEUDO_COLOR_OFFSET Sets the offset to apply to the registration result element's index when drawing with M_PSEUDO_COLOR. You can use this control type to prevent the same colors from being assigned to different registration result elements when drawing several results at once. M_DEFAULT Specifies the default value; the default value is 0. Value &gt;= 0 Specifies the offset to apply to the index. Type-specific versions of the function when using a C compiler under 64-bit void M3dregControlDrawDouble (MIL_ID DrawContext3dregId, MIL_INT64 Operation, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters DrawContext3dregId See DrawContext3dregId of the main function for a description. Operation See Operation of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void M3dregControlDrawInt64 (MIL_ID DrawContext3dregId, MIL_INT64 Operation, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters DrawContext3dregId See DrawContext3dregId of the main function for a description. Operation See Operation of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - DrawContext3dregId - Operation - ControlType - ControlValue Parameter Associations For a draw 3D registration context [M_ALL] [M_DRAW_EXCLUDED_POINTS] [M_DRAW_OVERLAP_POINTS] [M_DRAW_PAIRS] [M_GLOBAL_DRAW_SETTINGS] Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 2216,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregCopy",
      "version": null,
      "title": "M3dregCopy",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregCopy.htm",
      "text": " M3dregCopy Synopsis Copy a preregistration transformation matrix from a 3D registration context into a transformation matrix object. Syntax void M3dregCopy( MIL_ID&nbsp;SrcContext3dregId, //in MIL_INT&nbsp;SrcIndex, //in MIL_ID&nbsp;DstMatrix3dgeoId, //in MIL_INT&nbsp;DstIndex, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies the preregistration transformation matrix of a registration element in a 3D registration context, into a transformation matrix object. To copy a transformation matrix that M3dregCalculate() has calculated, use M3dregCopyResult() instead. Once copied, you can use the transformation matrix with other functions like M3dimMatrix...() and M3dgeoMatrix...(). Parameters Parameters SrcContext3dregId Specifies the identifier of the 3D registration context. The context must have been previously allocated using M3dregAlloc() with M_PAIRWISE_REGISTRATION_CONTEXT. SrcIndex Specifies the index of the registration element in the context. DstMatrix3dgeoId Specifies the identifier of a transformation matrix. The transformation matrix must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. DstIndex Reserved for future expansion and must be set to M_DEFAULT. CopyType Specifies the type of copy operation to perform. Specifies the type of copy operation Value Description M_PREREGISTRATION_MATRIX Copies the preregistration transformation matrix found in the registration element of the 3D registration context into a transformation matrix object. This transformation matrix specifies the rough location of a point cloud relative to its reference point cloud, and is initially set using M3dregSetLocation(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - SrcContext3dregId - SrcIndex - DstMatrix3dgeoId - DstIndex - CopyType Specifies the type of copy operation - ControlFlag Compilation information ",
      "wordCount": 256,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregCopyResult",
      "version": null,
      "title": "M3dregCopyResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregCopyResult.htm",
      "text": " M3dregCopyResult Synopsis Copy a group of results from a 3D registration result buffer into a transformation matrix object, an image buffer, or a container. Syntax void M3dregCopyResult( MIL_ID&nbsp;SrcResult3dregId, //in MIL_INT&nbsp;SrcIndex, //in MIL_INT&nbsp;SrcReference, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies a group of 3D registration results into a transformation matrix object, an image buffer, or a container, according to the specified copy operation. The 3D registration result buffer must contain results from a successful call to M3dregCalculate() with a pairwise 3D registration context. You can copy the transformation matrix that registers a point cloud to its reference point cloud, or you can retrieve the transformation matrix that registers a point cloud to any other point cloud in the list of point clouds that were also registered when M3dregCalculate() was called. The destination transformation matrix object can then be used to align the working coordinate system of the point cloud to the working coordinate system of the other specified point cloud, using M3dimMatrixTransform(). To retrieve the result of an intermediate iteration of the registration operation, specify the iteration index using M3dregControl() with M_ITERATION_INDEX, and combine the specified copy type with the M_INTERMEDIATE_ITERATION combination constant. Parameters Parameters SrcResult3dregId Specifies the identifier of the pairwise 3D registration result buffer. The pairwise 3D registration result buffer must have been previously allocated using M3dregAllocResult(). SrcIndex Specifies the index of the registration result element associated with the source point cloud. SrcReference Specifies relative to which coordinate system (the global coordinate system or that of a point cloud) to retrieve the copied information. For specifying the reference Value Description M_DEFAULT Same as M_REGISTRATION_GLOBAL. M_REGISTRATION_GLOBAL Specifies the global coordinate system. 0 &lt;= Value &lt; M3dregInquire(SrcResult3dregId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration result element associated with the point cloud to use as the reference. This value should not equal the value specified for SrcIndex. DstMilObjectId Specifies the identifier of the destination transformation matrix, image buffer, or container in which to save the copied information. See the Parameter associations section for possible values that can be specified. CopyType Specifies the type of copy operation to perform. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the DstMilObjectId and CopyType parameters. For specifying the copy type and destination object For specifying the copy type and destination object CopyType Description DstMilObjectId M_DISTANCE_IMAGE Specifies to copy point distances into an image buffer, creating a distance image. This operation copies the distance between paired points to a pixel location in the destination image buffer that corresponds to the reference point's location in its container. Paired points are those between the reference point cloud and the specified registration result element's point cloud (the target point cloud). Unpaired points are considered invalid and given the value of -1 in signed buffers and set to the maximum buffer value in unsigned buffers. For reference points that are paired to multiple target points, use M3dregControl() with M_PAIRS_RANK to set from which point pair to copy results. To use this copy type, you must have enabled M_SAVE_PAIRS_INFO (using M3dregControl()) prior to performing the pairwise 3D registration operation. Use M3dregControl() with M_ITERATION_INDEX to specify from which iteration to copy the information. Note, SrcReference must be set to M_DEFAULT. Image buffer identifier Specifies the identifier of an image buffer in which to copy results. The image buffer must be a 1-band buffer and its size must equal, in both X and Y, the size of the reference point cloud. Specifically, this is the size of the range component of the reference point cloud associated with the registration result element specified with SrcIndex. Note that the size will reflect any subsampling that was applied. To retrieve the size, use M3dregGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_OVERLAP_MASK Specifies to create a mask image whose pixels are non-zero for overlapping (paired) points, and zero otherwise. Overlapping points are points in the reference point cloud that have been paired with at least one target point. This operation uses the point's location in its container (the reference point cloud) to assign a non-zero value to a corresponding pixel location in the image buffer. The non-zero value is 1 for floating-point image buffers and -1 for signed image buffers. For unsigned image buffers, the maximum buffer value is used. All other pixels in the buffer are set to 0. For reference points that are paired to multiple target points, use M3dregControl() with M_PAIRS_RANK to set from which point pair to copy results. Note that paired points at higher ranks are typically less common. You can use the overlap mask image to help you visualize which points have pairings at higher ranks. To use this copy type, you must have enabled M_SAVE_PAIRS_INFO (using M3dregControl()) prior to performing the pairwise 3D registration operation. Use M3dregControl() with M_ITERATION_INDEX to specify from which iteration to copy the information. Note, SrcReference must be set to M_DEFAULT. Image buffer identifier Specifies the identifier of an image buffer in which to copy results. The image buffer must be a 1-band buffer and its size must equal, in both X and Y, the size of the reference point cloud. Specifically, this is the size of the range component of the reference point cloud associated with the registration result element specified with SrcIndex. Note that the size will reflect any subsampling that was applied. To retrieve the size, use M3dregGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_PAIR_INDEX_IMAGE Specifies to copy point indices into an image buffer, creating a pair index image. The pixels in the resulting image reflect point pairings, given that a point's index is its numbered position in the 2D organization of its point cloud container. (Indexing begins at 0 for the upper left position and proceeds from left to right across all rows in the 2D grid.) To create the pair index image, for each point pair, the target point's index is copied to the image at a pixel position that is the same as the reference point's index. To illustrate, if a point pair consists of a reference point at index 0 and a target point at index 20 (in their respective containers), then the pixel at index 0 in the pair index image receives the value 20. Unpaired points are considered invalid and given the value of -1 in signed buffers, and set to the maximum buffer value in unsigned buffers. For reference points that are paired to multiple target points, use M3dregControl() with M_PAIRS_RANK to set from which point pair to copy results. To use this copy type, you must have enabled M_SAVE_PAIRS_INFO (using M3dregControl()) prior to performing the pairwise 3D registration operation. Use M3dregControl() with M_ITERATION_INDEX to specify from which iteration to copy the information. Note, SrcReference must be set to M_DEFAULT. Image buffer identifier Specifies the identifier of an image buffer in which to copy results. The image buffer must be a 1-band buffer and its size must equal, in both X and Y, the size of the reference point cloud. Specifically, this is the size of the range component of the reference point cloud associated with the registration result element specified with SrcIndex. Note that the size will reflect any subsampling that was applied. To retrieve the size, use M3dregGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_REGISTRATION_MATRIX Specifies to copy the transformation matrix stored in the pairwise 3D registration result buffer to a transformation matrix object. Transformation matrix object ID in which to copy Specifies the identifier of the transformation matrix object in which to copy. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_SUBSAMPLED_CONTAINER_REFERENCE Specifies to copy the subsampled version of the reference point cloud associated with the specified registration result element into a container. By default, no subsampling is applied. In general, however, subsampling is recommended (using M3dregControl() with M_SUBSAMPLE and/or M_SUBSAMPLE_REFERENCE). The default subsampling mode (specified using M3dimControl() with M_SUBSAMPLE_MODE), is M_SUBSAMPLE_DECIMATE with a step size of 1 (in X and Y), which amounts to virtually no subsampling. Adjust the subsampling settings to find the best mode for your application. Since subsampling can differ for each registration element, this copy type allows you to retrieve the specific subsampled reference point cloud used in the registration operation for that registration result element. The subsampled reference point cloud will have the same X/Y dimensions as any distance image, overlap mask, or pair index image created using this function for the respective registration result element. To use this copy type, you must have enabled M_SAVE_PAIRS_INFO (using M3dregControl()) prior to performing the pairwise 3D registration operation. Note, SrcReference must be set to M_DEFAULT. MIL container identifier Specifies the destination container identifier. The destination container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. If a range component and a confidence component already exist in the container, they will be overwritten. If the container is empty, the range and confidence components are created to hold the copied information. M_SUBSAMPLED_CONTAINER_TARGET Specifies to copy the subsampled version of the target point cloud associated with the specified registration result element into a container. By default, no subsampling is applied. In general, however, subsampling is recommended (using M3dregControl() with M_SUBSAMPLE and/or M_SUBSAMPLE_TARGET). The default subsampling mode (specified using M3dimControl() with M_SUBSAMPLE_MODE), is M_SUBSAMPLE_DECIMATE with a step size of 1 (in X and Y), which amounts to virtually no subsampling. Adjust the subsampling settings to find the best mode for your application. Since subsampling can differ for each registration element, this copy type allows you to retrieve the specific subsampled target point cloud used in the registration operation for that registration result element. To use this copy type, you must have enabled M_SAVE_PAIRS_INFO (using M3dregControl()) prior to performing the pairwise 3D registration operation. Note, SrcReference must be set to M_DEFAULT. MIL container identifier Specifies the destination container identifier. The destination container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. If a range component and a confidence component already exist in the container, they will be overwritten. If the container is empty, the range and confidence components are created to hold the copied information. Combination value for the values listed in For specifying the copy type and destination object. You can add the following value to the above-mentioned values to determine the result for an intermediate iteration. For specifying to retrieve the result of an intermediate iteration Combination value Description M_INTERMEDIATE_ITERATION Specifies to retrieve the result for an intermediate iteration of the pairwise 3D registration operation. You can specify from which intermediate iteration to retrieve results using M3dregControl() with M_ITERATION_INDEX. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - SrcResult3dregId - SrcIndex - SrcReference For specifying the reference - DstMilObjectId - CopyType - ControlFlag Parameter Associations For specifying the copy type and destination object + For specifying to retrieve the result of an intermediate iteration Compilation information ",
      "wordCount": 1910,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregDraw3d",
      "version": null,
      "title": "M3dregDraw3d",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregDraw3d.htm",
      "text": " M3dregDraw3d Synopsis Draw the result of a pairwise 3D registration operation into a 3D graphics list. Syntax MIL_INT64 M3dregDraw3d( MIL_ID&nbsp;OperationDraw3dContext3dregId, //in MIL_ID&nbsp;SrcResult3dregId, //in MIL_INT&nbsp;Index, //in MIL_INT&nbsp;IterationIndex, //in MIL_INT&nbsp;PairsRank, //in MIL_ID&nbsp;DstList3dgraId, //in MIL_INT64&nbsp;DstParentLabel, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function draws the result of a pairwise 3D registration operation, stored in the specified pairwise 3D registration result buffer, into a 3D graphics list. Set the draw operations and options for the draw using M3dregControlDraw(). To ensure that the result buffer will hold the required information for the draw, prior to calling M3dregCalculate() you must specify to save pairs information at each iteration, using M3dregControl() with M_SAVE_PAIRS_INFO set to M_TRUE. M3dregCalculate() must be called before calling this function. The specified registration result element's point cloud is drawn relative to the coordinate system specified using M3dregControl() with M_MERGE_LOCATION. Parameters Parameters OperationDraw3dContext3dregId Specifies the identifier of the draw 3D registration context that specifies the features to draw and how to draw them. For specifying the draw 3D registration context identifier Value Description M_DEFAULT Specifies the default draw 3D registration context with all draw context control types (M3dregControlDraw()) set to their default. MIL draw 3D registration context identifier Specifies a valid draw 3D registration context identifier, previously allocated using M3dregAlloc() with M_DRAW_3D_CONTEXT. SrcResult3dregId Specifies the identifier of the pairwise 3D registration result buffer from which to retrieve calculated results. The result buffer must have been previously allocated using M3dregAllocResult() with M_PAIRWISE_REGISTRATION_RESULT. Index Specifies the registration result element that is associated with the point cloud whose points and/or calculated features you want to draw. For specifying the registration result element Value Description M_DEFAULT Same as M_ALL. M_ALL Specifies all registration result elements. 0 &lt;= Value &lt; M3dregInquire(SrcResult3dregId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration result element. IterationIndex Specifies the index of the iteration whose registration results to draw. This parameter must be set to one of the following values: For specifying the iteration index Value Description M_DEFAULT Same as M_LAST_ITERATION. M_INTERMEDIATE_ITERATION Specifies to draw the result of an intermediate iteration of the pairwise 3D registration operation. You can specify from which intermediate iteration to draw results using M3dregControl() with M_ITERATION_INDEX. M_LAST_ITERATION Specifies to draw the result of the final iteration of the registration process. Value &gt;= 0 Specifies the index of the iteration. If the specified index is greater than the number of elements in the pairwise 3D registration result buffer (M3dregGetResult() with M_NB_ITERATIONS), the result drawn will be of the final iteration (M_LAST_ITERATION) for that registration result element. PairsRank Specifies the rank of the point pairs to draw. When a reference point is paired to multiple points in the registration result element's point cloud, PairsRank sets from which pairing to draw results. Note that pairings are ranked from nearest (rank 0) to farthest. This parameter must be set to one of the following values: For specifying the pairs rank Value Description M_DEFAULT Specifies the default value; the default value is 0. M_ALL Specifies to draw results from all pairings in the registration result element that were calculated at the specified iteration. Value &gt;= 0 Specifies the rank of the point pair from which to draw results. DstList3dgraId Specifies the identifier of the 3D graphics list in which to draw. You can specify a 3D graphics list that you have previously allocated using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). DstParentLabel Specifies the label of the 3D graphic in the 3D graphics list to use as the annotation's parent. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the parent label of all 3D graphics that the function added to the 3D graphics list. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - OperationDraw3dContext3dregId For specifying the draw 3D registration context identifier - SrcResult3dregId - Index For specifying the registration result element - IterationIndex For specifying the iteration index - PairsRank For specifying the pairs rank - DstList3dgraId - DstParentLabel For specifying the parent label - ControlFlag Return value Compilation information ",
      "wordCount": 727,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregFree",
      "version": null,
      "title": "M3dregFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregFree.htm",
      "text": " M3dregFree Synopsis Free a 3D registration context or a 3D registration result buffer. Syntax void M3dregFree( MIL_ID&nbsp;ContextOrResult3dregId //in ) Description This function deletes the specified 3D registration context or 3D registration result buffer, and releases any memory associated with it. All 3D registration contexts and 3D registration result buffers allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter ContextOrResult3dregId Specifies the identifier of the 3D registration context or 3D registration result buffer to free. These must have been successfully allocated (using M3dregAlloc() or M3dregAllocResult()) prior to calling this function. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - ContextOrResult3dregId Compilation information ",
      "wordCount": 124,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregGetResult",
      "version": null,
      "title": "M3dregGetResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregGetResult.htm",
      "text": " M3dregGetResult Synopsis Get the specified type of result from a pairwise 3D registration result buffer. Syntax MIL_DOUBLE M3dregGetResult( MIL_ID&nbsp;Result3dregId, //in MIL_INT64&nbsp;ResultIndex, //in MIL_INT64&nbsp;ResultType, //in void&nbsp;*ResultArrayPtr //out ) Description This function retrieves results of the specified type from a pairwise 3D registration result buffer. The pairwise 3D registration result buffer contains registration result elements, each of which stores the registration results of M3dregCalculate() for each individual point cloud. To retrieve the transformation matrices, images, or subsampled point clouds generated by M3dregCalculate(), use M3dregCopyResult(). By default, M3dregGetResult() returns the final results of the registration operation. To retrieve the results of an intermediate iteration in the registration operation, use M3dregControl() with M_ITERATION_INDEX to specify for which iteration to retrieve results; then, when calling M3dregGetResult(), combine the required result type (ResultType) with M_INTERMEDIATE_ITERATION. To retrieve the results of all iterations in the registration operation, combine the required result type (ResultType) with M_ALL_ITERATIONS. Parameters Parameters Result3dregId Specifies the identifier of the pairwise 3D registration result buffer, previously allocated using M3dregAllocResult() with M_PAIRWISE_REGISTRATION_RESULT. ResultIndex Specifies the registration result element for which to retrieve results. This parameter must be set to one of the following values: For specifying the registration element index of a result Value Description M_ALL Specifies to retrieve results from all registration result elements in the pairwise 3D registration result buffer. M_GENERAL Specifies to retrieve general results from the pairwise 3D registration result buffer. 0 &lt;= Value &lt; M_NUMBER_OF_REGISTRATION_ELEMENTS Specifies the index of the registration result element from which to retrieve results. ResultType Specifies the type of result to get. See the Parameter associations section for possible values that can be specified. ResultArrayPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MIL_DOUBLE MIL_FLOAT MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the results. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the ResultType parameter and possible values returned to the ResultArrayPtr parameter. For retrieving general results from a pairwise 3D registration result buffer, where ResultIndex is set to M_GENERAL For retrieving results from a 3D pairwise registration result buffer, where ResultIndex is set to an index value or M_ALL To retrieve general results from a pairwise 3D registration result buffer, set ResultIndex to M_GENERAL, and ResultType should be set to one of the following values: For retrieving general results from a pairwise 3D registration result buffer, where ResultIndex is set to M_GENERAL ResultType Description ResultArrayPtr - Possible values returned M_NUMBER_OF_REGISTRATION_ELEMENTS Retrieves the number of registration result elements in the pairwise 3D registration result buffer. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SAVE_PAIRS_INFO Retrieves whether point pair information has been saved into the pairwise 3D registration result buffer. Point pair information is necessary to copy results into an image buffer or container (for example, to create a distance image using M3dregCopyResult() with M_DISTANCE_IMAGE). Point pair information is only saved if M3dregControl() with M_SAVE_PAIRS_INFO is set to M_TRUE. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that point pair information has not been saved. M_TRUE Specifies that point pair information has been saved. M_SET_LOCATION_REFERENCE Retrieves the index of the reference registration element, as set using M3dregSetLocation() when setting the rough location of a point cloud's working coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_REGISTRATION_GLOBAL Specifies the global coordinate system. 0 &lt;= Value &lt; M3dregGetResult(M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the reference registration element. M_STATUS Retrieves the global status of the last M3dregCalculate() operation. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT MORE Data type: address of a MIL_INT Note: When retrieving results from a single registration element. M_COMPLETE Specifies that the registration result is available. M_CURRENTLY_CALCULATING Specifies that the registration operation is ongoing. M_EMPTY Specifies that the result buffer is empty. M_INTERNAL_ERROR Specifies that an unexpected internal error occurred during the registration operation. M_NOT_ENOUGH_MEMORY Specifies that the registration operation was not completed because of a lack of available memory. M_STOPPED_BY_REQUEST Specifies that the registration operation was stopped from another thread using M3dregControl() with M_STOP_CALCULATE. M_TIMEOUT_REACHED Specifies that the registration operation took longer than the allowed value, specified using M3dregControl() with M_TIMEOUT, and has stopped before completion. To retrieve results from the registration result elements of a pairwise 3D registration result buffer, set ResultType to one of the following values, and set the ResultIndex parameter to the index of a registration result element, or to M_ALL (to retrieve the results of all registration result elements). Setting ResultIndex to M_ALL will return an array where each element contains the results of each registration result element. For retrieving results from a 3D pairwise registration result buffer, where ResultIndex is set to an index value or M_ALL ResultType Description ResultArrayPtr - Possible values returned M_MAX_PAIRS_RANK Retrieves the maximum possible pair rank for the registration element at the specified iteration index (set using M3dregControl() with M_ITERATION_INDEX). When there are reference points paired to multiple points in the registration result element's point cloud, M_MAX_PAIRS_RANK returns the maximum number of points to which they are paired. You can then specify M3dregControl() with M_PAIRS_RANK to establish from which pair's results to copy when using M3dregCopyResult() to create a distance, overlap, or pair index image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_NB_ITERATIONS Retrieves the number of iterations performed during the pairwise 3D registration operation. This always includes the preregistration step, which is the first iteration of the registration operation. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_REGISTRATION_COMPLETED Specifies whether the registration has successfully completed. This is a similar, but simpler, version of M_STATUS_REGISTRATION_ELEMENT. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the registration has not successfully completed. M_TRUE Specifies that the registration has successfully completed. M_RESULT_IMAGE_SIZE_X Retrieves the size in X of the reference point cloud's range component. You can use this value to allocate an image buffer of the correct size when retrieving a result image created using M3dregCopyResult() with M_OVERLAP_MASK, M_DISTANCE_IMAGE, or M_PAIR_INDEX_IMAGE. Note that the size is available after an M3dregCalculate() operation. If you have enabled subsampling, M_RESULT_IMAGE_SIZE_X will return the size in X of the subsampled container's range component. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_RESULT_IMAGE_SIZE_Y Retrieves the size in Y of the reference point cloud's range component. You can use this value to allocate an image buffer of the correct size when retrieving a result image created using M3dregCopyResult() with M_OVERLAP_MASK, M_DISTANCE_IMAGE, or M_PAIR_INDEX_IMAGE. Note that the size is available after an M3dregCalculate() operation. If you have enabled subsampling, M_RESULT_IMAGE_SIZE_Y will return the size in Y of the subsampled container's range component. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_RMS_ERROR Specifies the root-mean-square (RMS) error. Retrieves the RMS error calculated using the distance measured between paired points in two point clouds. How this distance is measured is set using M3dregControl() with M_ERROR_MINIMIZATION_METRIC. A value of 0.0 implies that all points in the first point cloud perfectly overlap with the points in the second point cloud. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_RMS_ERROR_RELATIVE Specifies the relative RMS error. The relative RMS error is the percentage change in the RMS error of the last two iterations of the pairwise 3D registration operation. Specifically, where Ei is the RMS error of iteration i, the relative RMS error is calculated as: [(Ei-1 - Ei )/ Ei-1 ]*100%. For instance, if the RMS error of the first iteration is 2.0 and the RMS error of the second iteration is 0.8, the relative RMS error of the second iteration is equal to [(2.0-0.8)/2.0]*100, which is 60%. If the relative RMS error is positive, this means the RMS error is decreasing, and the point clouds are becoming increasingly aligned. Note that the value returned represents a percentage. A value of 0.1 represents 0.1%, and not 10%. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_STATUS_REGISTRATION_ELEMENT Retrieves a status result from one, or all, pairwise registration result elements. If a result has multiple statuses, the status that is returned depends on the following order of precedence: M_RMS_ERROR_THRESHOLD_REACHED, M_RMS_ERROR_RELATIVE_THRESHOLD_REACHED, M_MAX_ITERATIONS_REACHED. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving results from a single registration element. Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size (either of the following): M3dregGetResult ( M_NUMBER_OF_REGISTRATION_ELEMENTS ) M3dregGetResult ( M_STATUS_REGISTRATION_ELEMENT + M_NB_ELEMENTS ) Note: When retrieving results from all registration elements. M_EMPTY Specifies that there are no results from the registration operation. M_MAX_ITERATIONS_REACHED Specifies that a stop condition has been met, and that the maximum number of iterations has been met. You can inquire what the maximum number of iterations is by calling M3dregInquire() with M_MAX_ITERATIONS. Note that this status implies that, for this registration result element in the result buffer, M_REGISTRATION_COMPLETED returns M_TRUE. M_NO_VALID_POINTS Specifies that there were no viable points for use in the registration operation. M_NOT_ENOUGH_POINT_PAIRS Specifies that there are not enough point pairs to use in the registration operation. M_REGISTRATION_GLOBAL Specifies that the registration element uses the global coordinate system as its reference. Note that this status implies that, for this registration result element in the result buffer, M_REGISTRATION_COMPLETED returns M_TRUE. M_RMS_ERROR_RELATIVE_THRESHOLD_REACHED Specifies that a stop condition has been met, and that the relative RMS error threshold has been met. You can inquire what the threshold is by calling M3dregInquire() with M_RMS_ERROR_RELATIVE_THRESHOLD. You can get the RMS error and relative RMS error using M3dregGetResult() with M_RMS_ERROR and M_RMS_ERROR_RELATIVE, respectively. Note that this status implies that, for this registration result element in the result buffer, M_REGISTRATION_COMPLETED returns M_TRUE. M_RMS_ERROR_THRESHOLD_REACHED Specifies that a stop condition has been met, and that the RMS error threshold has been met. You can inquire what the threshold is by calling M3dregInquire() with M_RMS_ERROR_THRESHOLD. You can get the RMS error and relative RMS error using M3dregGetResult() with M_RMS_ERROR and M_RMS_ERROR_RELATIVE, respectively. Note that this status implies that, for this registration result element in the result buffer, M_REGISTRATION_COMPLETED returns M_TRUE. Combination values for M_RMS_ERROR , M_RMS_ERROR_RELATIVE. You can add one of the following values to the above-mentioned values to determine the result for all iterations, or only for an intermediate iteration. For specifying to retrieve the result for each iteration, or only for an intermediate iteration ResultType Description ResultArrayPtr - Possible values returned M_ALL_ITERATIONS Specifies to retrieve the result for each iteration during the pairwise 3D registration operation. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size (either of the following): M3dregGetResult ( a value + M_NB_ITERATIONS ) M3dregGetResult ( M_ALL_ITERATIONS + M_NB_ELEMENTS ) M_INTERMEDIATE_ITERATION Specifies to retrieve the result for an intermediate iteration of the pairwise 3D registration operation. You can specify which intermediate iteration to retrieve results from using M3dregControl() with M_ITERATION_INDEX. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Combination value for the values listed in For retrieving general results from a pairwise 3D registration result buffer, where ResultIndex is set to M_GENERAL, For retrieving results from a 3D pairwise registration result buffer, where ResultIndex is set to an index value or M_ALL. You can add the following value to the above-mentioned values to determine whether a result is available. For determining whether results are available ResultType Description ResultArrayPtr - Possible values returned M_AVAILABLE Retrieves whether the requested result type is available for retrieval. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the requested result type is not available. M_TRUE Specifies that the requested result type is available. Combination value for M_STATUS_REGISTRATION_ELEMENT , M_ALL_ITERATIONS. You can add the following value to the above-mentioned values to determine the required array size (number of elements) to store the returned values. For determining the required array size (number of elements) to store the returned values ResultType combination value Description ResultArrayPtr - Possible values returned M_NB_ELEMENTS Retrieves the required array size (number of elements) to store the returned values. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Combination values for the values listed in For retrieving general results from a pairwise 3D registration result buffer, where ResultIndex is set to M_GENERAL, For retrieving results from a 3D pairwise registration result buffer, where ResultIndex is set to an index value or M_ALL. You can add one of the following values to the above-mentioned values to cast the requested results to the required data type. Note: In C++, when using a standard vector (std::vector) instead of an array, the values listed in this combination table must not be used. If you need to use a specific data type, instantiate the vector with the necessary data type. For specifying the data type ResultType Description ResultArrayPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested results to a MIL_DOUBLE. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] &nbsp;|&nbsp; address of a MIL_DOUBLE MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_DOUBLE Note: When a single result. M_TYPE_MIL_FLOAT Casts the requested results to a MIL_FLOAT. ResultArrayPtr extra info Data type info: Data type: array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] &nbsp;|&nbsp; address of a MIL_FLOAT MORE Data type: array of type MIL_FLOAT [optionally, in C++: a reference to a std::vector&lt;MIL_FLOAT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_FLOAT Note: When a single result. M_TYPE_MIL_INT Casts the requested results to a MIL_INT. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] &nbsp;|&nbsp; address of a MIL_INT MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT Note: When a single result. M_TYPE_MIL_INT32 Casts the requested results to a MIL_INT32. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] &nbsp;|&nbsp; address of a MIL_INT32 MORE Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT32 Note: When a single result. M_TYPE_MIL_INT64 Casts the requested results to a MIL_INT64. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT64 Note: When a single result. Return value The returned value is the requested information, cast to a MIL_DOUBLE. If the requested information does not fit into a MIL_DOUBLE, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - Result3dregId - ResultIndex For specifying the registration element index of a result - ResultType - ResultArrayPtr Parameter Associations For retrieving general results from a pairwise 3D registration result buffer, where ResultIndex is set to M_GENERAL For retrieving results from a 3D pairwise registration result buffer, where ResultIndex is set to an index value or M_ALL + For specifying to retrieve the result for each iteration, or only for an intermediate iteration + For determining whether results are available + For determining the required array size (number of elements) to store the returned values + For specifying the data type Return value Compilation information ",
      "wordCount": 2847,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregInquire",
      "version": null,
      "title": "M3dregInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregInquire.htm",
      "text": " M3dregInquire Synopsis Inquire information about a pairwise 3D registration context or a pairwise 3D registration result buffer. Syntax MIL_INT64 M3dregInquire( MIL_ID&nbsp;ContextOrResult3dregId, //in MIL_INT64&nbsp;Index, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires information about a pairwise 3D registration context or a pairwise 3D registration result buffer. In addition, this function can inquire the settings for stop conditions for the registration operation executed by M3dregCalculate(). To inquire whether a stop condition was met, call M3dregGetResult() with M_STATUS. Note that for a 3D pairwise registration result buffer, this function only retrieves information about the buffer's settings (set using M3dregAllocResult() or M3dregControl()). To retrieve results from the registration result buffer, use M3dregGetResult(). Parameters Parameters ContextOrResult3dregId Specifies the identifier of the 3D pairwise registration context or a pairwise 3D registration result buffer to inquire. The pairwise 3D registration context is allocated with M3dregAlloc(), and the pairwise 3D registration result buffer is allocated with M3dregAllocResult(). Index Specifies to inquire a pairwise 3D registration context, an individual registration element (or all registration elements), or a pairwise 3D registration result buffer. Set this parameter to one of the following values: For specifying the registration element Value Description M_DEFAULT Specifies the default behavior. If ContextOrResult3dregId specifies a pairwise 3D registration context, then M_DEFAULT is the same as M_CONTEXT. If ContextOrResult3dregId specifies a pairwise 3D registration result buffer, then M_DEFAULT is the same as M_GENERAL. M_ALL Specifies to inquire all registration elements of a pairwise 3D registration context or all registration result elements of a pairwise 3D registration result buffer. M_CONTEXT Specifies to inquire a pairwise 3D registration context. M_GENERAL Specifies to inquire a pairwise 3D registration result buffer. 0 &lt;= Value &lt; M3dregInquire(M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration element or registration result element to inquire. InquireType Specifies the type of setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_FLOAT MIL_ID MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the M3dregInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For inquiring a pairwise 3D registration context or a pairwise 3D registration result buffer For inquiring a pairwise 3D registration context For inquiring the registration elements of a 3D pairwise registration context For inquiring the registration elements of a 3D pairwise registration result buffer For inquiring a pairwise 3D registration result buffer For the following inquire types, the ContextOrResult3dregId parameter must specify a 3D registration context or a 3D registration result buffer. The Index parameter must be set to M_CONTEXT or M_GENERAL, for a 3D registration context or 3D registration result buffer respectively. For inquiring a pairwise 3D registration context or a pairwise 3D registration result buffer InquireType Description UserVarPtr - Possible values returned M_NUMBER_OF_REGISTRATION_ELEMENTS Inquires the number of registration elements in the 3D registration context, or the number of registration result elements in the 3D registration result buffer. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 2 &lt;= Value &lt;= 65535 Specifies the number of registration elements or registration result elements. The default value is 2. For a pairwise 3D registration context, when Index is set to M_CONTEXT, the InquireType parameter can be set to one of the following: For inquiring a pairwise 3D registration context InquireType Description UserVarPtr - Possible values returned M_ERROR_MINIMIZATION_METRIC Inquires the technique for performing the pairwise comparison during each iteration of the registration operation, and establishes how to compute the RMS error. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_POINT_TO_PLANE Specifies to calculate the RMS error using the shortest distance between the point (in the reference point cloud), and the plane tangent to the other paired point. M_POINT_TO_POINT Specifies to calculate the RMS error using the distance between the paired points. M_MAX_ITERATIONS Inquires a stop condition for the iterative registration operation. If the maximum number of iterations is reached, the registration operation stops. To inquire whether this stop condition was met, call M3dregGetResult() with M_STATUS. Note that preregistration constitutes the first iteration. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the maximum number of iterations in the registration process. M_PAIRS_CREATION_FROM_TARGET Inquires whether to first find matching points in the target point cloud relative to the reference, and then vice versa. You can enable such matchings so that they are performed from the first iteration or only for specific iterations. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to find point pairs in both directions for specific iterations based on an internal heuristic. M_DISABLE Specifies not to find point pairs in both directions. M_ENABLE Specifies to find point pairs in both directions. M_PAIRS_CREATION_MAX_POINT_DISTANCE Inquires the maximum Euclidean distance within which two points are considered paired. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies that there is no maximum distance. Value &gt; 0.0 Specifies the maximum distance. M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE Inquires whether to pair each point in the reference point cloud with a single point or multiple points in the target point cloud. You can also choose to allow multiple pairings for specific iterations only. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to allow multiple point pairings for specific iterations; the operation adjusts the number of paired points per reference point for each iteration based on an internal heuristic. M_MULTIPLE Specifies to pair each reference point with up to 6 neighbors in the target point cloud. M_SINGLE Specifies to pair each reference point with a single point in the target point cloud. M_PAIRS_LIMIT_PER_TARGET_POINT_MODE Inquires whether to limit the number of point pairs to which a target point can belong. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to allow every target point to be part of a variable number of point pairs, based on an internal heuristic. M_DISABLE Specifies not to limit the number of point pairs to which a target point can belong. M_SINGLE Specifies to allow every target point to be part of 1 point pair. M_PREREGISTRATION_MODE Inquires how to perform the preregistration step. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTROID Specifies to apply the preregistration transformation matrix, specified using M3dregSetLocation(); it then automatically registers the centroids (center of mass) of the two point clouds. M_USER_DEFINED Specifies to apply the preregistration transformation matrix in the first iteration of the registration operation. M_RMS_ERROR_RELATIVE_THRESHOLD Inquires the stop condition for the registration operation that tests the percentage change of the root-mean-square (RMS) error of successive iterations. The RMS error is calculated from the distance between all paired points. You can control how the distance is calculated using M_ERROR_MINIMIZATION_METRIC. If this stop condition is met, the registration is typically considered correct. Note that the specified value represents a percentage, so the default value of 0.1 represents 0.1%, not 10%. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the relative RMS error threshold. M_RMS_ERROR_THRESHOLD Inquires the stop condition for the registration operation that tests the root-mean-square (RMS) error of successive iterations. The RMS error is calculated from the distance between all paired points. You can control how the distance is calculated using M_ERROR_MINIMIZATION_METRIC. If this stop condition is met, the registration is typically considered correct. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the RMS error threshold. M_SAVE_PAIRS_INFO Inquires whether to save point pairs at each iteration. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies not to save point pairs at each iteration. M_TRUE Specifies to save point pairs at each iteration. M_SUBSAMPLE Inquires whether to subsample all point clouds before applying the registration. This subsampling is applied before any point cloud-specific subsampling is applied by M_SUBSAMPLE_REFERENCE or M_SUBSAMPLE_TARGET. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable subsampling before applying the registration. M_ENABLE Specifies to enable subsampling before applying the registration. M_SUBSAMPLE_CONTEXT_ID Inquires the ID of the subsampling context within the specified registration context. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID Subsample Context ID Specifies the MIL identifier of the subsampling context. For a 3D pairwise registration context, when Index is set to an index value or M_ALL, the InquireType parameter can be set to one of the following: For inquiring the registration elements of a 3D pairwise registration context InquireType Description UserVarPtr - Possible values returned M_OVERLAP Inquires the percentage of all possible point pairings to use in a single iteration of the registration operation. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the percentage of possible paired points included in each iteration of the registration operation. M_PAIRS_REJECTION_FACTOR Inquires the rejection factor when calculating the distance threshold (M_PAIRS_REJECTION_MODE set to M_ROBUST_STANDARD_DEVIATION). A larger rejection factor sets a larger distance threshold. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the rejection factor. M_PAIRS_REJECTION_MODE Inquires whether to reject point pairs that are too far apart, according to a distance threshold established from all point pair distances. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to use pairs rejection mode. M_ROBUST_STANDARD_DEVIATION Specifies to use pairs rejection mode with a robust estimate of the variance (standard deviation) of the distance between point pairs. M_SET_LOCATION_REFERENCE Inquires the index of the reference registration element, as set using M3dregSetLocation() when setting the rough location of a point cloud's working coordinate system. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_REGISTRATION_GLOBAL Specifies the global coordinate system. 0 &lt;= Value &lt; M3dregInquire(M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the reference registration element. M_SUBSAMPLE_REFERENCE Inquires whether to subsample the reference point cloud associated with the specified registration element before applying the registration. This subsampling is applied to the point cloud after any subsampling is applied by M_SUBSAMPLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable subsampling for the reference point cloud before applying the registration. M_ENABLE Specifies to enable subsampling for the reference point cloud before applying the registration. M_SUBSAMPLE_REFERENCE_CONTEXT_ID Inquires the ID of the subsampling context of the reference point cloud for the specified registration element. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID Subsample Context ID Specifies the MIL identifier of the subsampling context. M_SUBSAMPLE_TARGET Inquires whether to subsample the target point cloud associated with the specified registration element before applying the registration. This subsampling is applied to the point cloud after any subsampling is applied by M_SUBSAMPLE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable subsampling for the target point cloud before applying the registration. M_ENABLE Specifies to enable subsampling for the target point cloud before applying the registration. M_SUBSAMPLE_TARGET_CONTEXT_ID Inquires the ID of the subsampling context of the target point cloud for the specified registration element. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID Subsample Context ID Specifies the MIL identifier of the subsampling context. For a 3D pairwise registration result buffer, when Index is set to an index value or M_ALL, the InquireType parameter can be set to one of the following: For inquiring the registration elements of a 3D pairwise registration result buffer InquireType Description UserVarPtr - Possible values returned M_ITERATION_INDEX Inquires the index of the iteration from which to copy, get, or draw results. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_LAST_ITERATION Specifies the index of the final iteration of the registration process. 0 &lt;= Value &lt; M3dregGetResult(M_NB_ITERATIONS) Specifies the index of the iteration from which to copy, get, or draw results. M_PAIRS_RANK Inquires the point pair rank when using M3dregCopyResult() to create a distance, overlap, or pair index image. Note that pairings are ranked from nearest (rank 0) to farthest. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt; M3dregGetResult(M_MAX_PAIRS_RANK) Specifies the rank of the pairing from which to copy results. For a 3D pairwise registration result buffer, when Index is set to M_GENERAL, the InquireType parameter can be set to one of the following: For inquiring a pairwise 3D registration result buffer InquireType Description UserVarPtr - Possible values returned M_MERGE_LOCATION Inquires whether to transform the point clouds such that their working coordinate systems are aligned to the global coordinate system, or to transform (fixture) them such that their working coordinate systems are aligned with a specified point cloud's working coordinate system, for an M3dregMerge() operation. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_REGISTRATION_GLOBAL Specifies to transform the point clouds to the global coordinate system for the merging operation. 0 &lt;= Value &lt; M3dregInquire(M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the point cloud to which to fixture all point clouds; the point clouds will be aligned to the specified point cloud's working coordinate system. Combination values for the values listed in For inquiring the registration elements of a 3D pairwise registration result buffer, For inquiring a pairwise 3D registration result buffer; and for the following values: M_ERROR_MINIMIZATION_METRIC , M_MAX_ITERATIONS , M_PAIRS_CREATION_FROM_TARGET , M_PAIRS_CREATION_MAX_POINT_DISTANCE , M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE , M_PAIRS_LIMIT_PER_TARGET_POINT_MODE , M_PREREGISTRATION_MODE , M_RMS_ERROR_RELATIVE_THRESHOLD , M_RMS_ERROR_THRESHOLD , M_SAVE_PAIRS_INFO , M_SUBSAMPLE , M_OVERLAP , M_PAIRS_REJECTION_FACTOR , M_PAIRS_REJECTION_MODE , M_SUBSAMPLE_REFERENCE , M_SUBSAMPLE_TARGET. You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination values for Tables: For inquiring a pairwise 3D registration context or a pairwise 3D registration result buffer For inquiring a pairwise 3D registration context For inquiring the registration elements of a 3D pairwise registration context For inquiring the registration elements of a 3D pairwise registration result buffer For inquiring a pairwise 3D registration result buffer the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to determine whether an inquire type is supported. To inquire whether an inquire type is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported for the 3D registration context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for the values listed in For inquiring a pairwise 3D registration context or a pairwise 3D registration result buffer, For inquiring the registration elements of a 3D pairwise registration result buffer, For inquiring a pairwise 3D registration result buffer; and for the following values: M_ERROR_MINIMIZATION_METRIC , M_MAX_ITERATIONS , M_PAIRS_CREATION_FROM_TARGET , M_PAIRS_CREATION_MAX_POINT_DISTANCE , M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE , M_PAIRS_LIMIT_PER_TARGET_POINT_MODE , M_PREREGISTRATION_MODE , M_RMS_ERROR_RELATIVE_THRESHOLD , M_RMS_ERROR_THRESHOLD , M_SAVE_PAIRS_INFO , M_SUBSAMPLE , M_OVERLAP , M_PAIRS_REJECTION_FACTOR , M_PAIRS_REJECTION_MODE , M_SET_LOCATION_REFERENCE , M_SUBSAMPLE_REFERENCE , M_SUBSAMPLE_TARGET. You can add one of the following values to the above-mentioned values to cast the requested information to a required data type. To specify the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT Data type: address of a MIL_FLOAT M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 Data type: address of a MIL_INT32 M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - ContextOrResult3dregId - Index For specifying the registration element - InquireType - UserVarPtr Parameter Associations For inquiring a pairwise 3D registration context or a pairwise 3D registration result buffer For inquiring a pairwise 3D registration context For inquiring the registration elements of a 3D pairwise registration context For inquiring the registration elements of a 3D pairwise registration result buffer For inquiring a pairwise 3D registration result buffer + For inquiring about the default value + To inquire whether an inquire type is supported + To specify the data type Return value Compilation information ",
      "wordCount": 3144,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregInquireDraw",
      "version": null,
      "title": "M3dregInquireDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregInquireDraw.htm",
      "text": " M3dregInquireDraw Synopsis Inquire about a setting of a draw 3D registration context. Syntax MIL_INT64 M3dregInquireDraw( MIL_ID&nbsp;DrawContext3dregId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about a specified setting of a draw 3D registration context. These settings establish which pairwise 3D registration results to draw into the 3D graphics list (and how to draw them), when calling M3dregDraw3d(). You can control the draw 3D registration context settings using M3dregControlDraw(). Parameters Parameters DrawContext3dregId Specifies the identifier of the draw 3D registration context to inquire. The draw 3D registration context must have been previously allocated on the required system using M3dregAlloc() with M_DRAW_3D_CONTEXT. Operation Specifies the draw operation about which to inquire. See the Parameter associations section for possible values that can be specified. InquireType Specifies the type of setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_FLOAT MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the M3dregInquireDraw() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The table below lists possible values for the Operation and InquireType parameters and possible values returned to the UserVarPtr parameter. For inquiring a draw 3D registration context The following Operation and InquireType parameter settings are available to inquire about draw 3D registration contexts settings. For inquiring a draw 3D registration context Operation Description InquireType UserVarPtr - Possible values returned M_DRAW_EXCLUDED_POINTS Inquires whether and how to draw the points that are not paired to any other points. The resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M_ACTIVE Sets whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). This is the default value. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. This is the default value. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_OVERLAP_POINTS Inquires whether and how to draw overlapping (paired) points. Overlapping points are points in the reference point cloud that have been paired with at least one target point. The resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M_ACTIVE Sets whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). This is the default value. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each registration result element with a different color, according to the mapping between each registration result element's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. This is the default value. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_COLOR_COMPONENT Inquires the component used to color the point cloud(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_DISTANCE_IMAGE Specifies to color the point cloud according to an internally generated distance image; the distance image is created using the distances between paired points. This is the default value. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_COLOR_LIMITS Inquires the limits of the color component. Values beyond min/max are saturated. When using a LUT, the min/max get mapped to the LUT's extreme values. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DATA_EXTREMES_GLOBAL Specifies to use the global minimum and maximum of the buffer's data. This is the default value. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_COLOR_USE_LUT Inquires whether to color the point cloud(s) added to the 3D graphics list by mapping each value of the component specified by M_COLOR_COMPONENT to a color in a LUT, and then using that color to display the corresponding point. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies not to use a LUT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_TRUE Specifies to use a LUT. This is the default value. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . The default value is 100.0. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. The default value is 1 pixel. M_DRAW_PAIRS Inquires whether and how to draw lines between paired points, when calling M3dregDraw3d(). The resulting graphic(s) will be of type M_GRAPHIC_TYPE_LINE or M_GRAPHIC_TYPE_LINES. M_ACTIVE Sets whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). This is the default value. M_ENABLE Specifies to draw the graphic(s). M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. This is the default value. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . The default value is 100.0. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. The default value is 1 pixel. M_GLOBAL_DRAW_SETTINGS Inquires a global draw 3D registration context setting. M_PSEUDO_COLOR_OFFSET Inquires the offset to apply to the registration element result's index when drawing with M_PSEUDO_COLOR. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the offset to apply to the index. The default value is 0. Combination values for the values of the InquireType parameter listed in For inquiring a draw 3D registration context. You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination values for the values of the InquireType parameter listed in For inquiring a draw 3D registration context. You can add one of the following values to the above-mentioned values to determine whether an inquire type has a default value or whether it is supported. For inquiring whether an inquire type has a default value or whether it is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for the values of the InquireType parameter listed in For inquiring a draw 3D registration context. You can add one of the following values to the above-mentioned values to cast the requested information to the required data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT Data type: address of a MIL_FLOAT M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 Data type: address of a MIL_INT32 M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - DrawContext3dregId - Operation - InquireType - UserVarPtr Parameter Associations For inquiring a draw 3D registration context [M_DRAW_EXCLUDED_POINTS] [M_DRAW_OVERLAP_POINTS] [M_DRAW_PAIRS] [M_GLOBAL_DRAW_SETTINGS] + For inquiring about the default value + For inquiring whether an inquire type has a default value or whether it is supported + For specifying the data type Return value Compilation information ",
      "wordCount": 2281,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregMerge",
      "version": null,
      "title": "M3dregMerge",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregMerge.htm",
      "text": " M3dregMerge Synopsis Merge point clouds using the results of a previous call to M3dregCalculate(). Syntax void M3dregMerge( MIL_ID&nbsp;Result3dregId, //in const MIL_ID&nbsp;*ContainerBufIdArrayPtr, //in MIL_INT&nbsp;NumContainers, //in MIL_ID&nbsp;DstContainerBufId, //in MIL_ID&nbsp;SubsampleContext3dimId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function merges all the specified point clouds into a single point cloud. Prior to merging the point clouds, it transforms them such that their working coordinate system is aligned with the global coordinate system; it does so using the results that were stored in the 3D registration result buffer after a successful call to M3dregCalculate(). These transformations ensure that the points are all expressed relative to the same coordinate system. Note that, instead of aligning the point clouds to the global coordinate system, you can specify to align (fixture) the other point clouds to a specified point cloud's working coordinate system. To do so, use M3dregControl() with M_MERGE_LOCATION. Each point cloud in the array of containers is associated with the registration result element with the same index (for example, the third container in the array is associated with the third registration result element). For the point cloud to be transformed to the appropriate location in the global coordinate system, its index in the array must match the index of the registration result element containing the point cloud's transformation. Optionally, you can specify a subsampling context to subsample the point clouds after the merge has completed. Whether the merged point cloud is organized or unorganized depends on the subsampling mode of the subsampling context (specified using M3dimControl() with M_SUBSAMPLE_MODE). Note that this subsampling is unrelated to the subsampling done before calling M3dregCalculate() (specified using M3dregControl() with M_SUBSAMPLE). The latter defines which points are used in calculations for the registration operation, and does not specify which points are retained after calling this function. Note that for applications that are, for example, merging point clouds from multiple fixed 3D sensors into a single point cloud, you can save (M3dregSave()) and restore (M3dregRestore()) a 3D registration result buffer, and reuse it with M3dregMerge(). Parameters Parameters Result3dregId Specifies the identifier of the pairwise 3D registration result buffer. The pairwise 3D registration result buffer must have been successfully allocated using M3dregAllocResult(), and contain the result of a successful call to M3dregCalculate(). ContainerBufIdArrayPtr Accepts the address of one of the following: array of type MIL_ID [optionally, in C++: a reference to a constant std::vector&lt;MIL_ID&gt; ] (and a maximum array rank for C# of 1) Required array size:(NumContainers) Specifies the address of the array containing the identifiers of the point cloud containers. The point clouds must be 3D-processable. You can check that the point clouds are 3D-processable using MbufInquireContainer() with M_3D_PROCESSABLE. You can set some entries in the array to M_NULL to merge a subset of the point clouds. NumContainers Specifies the size of the array passed to ContainerBufIdArrayPtr. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the ContainerBufIdArrayPtr parameter. For specifying the number of containers in the array Value Description 2 &lt;= Value &lt;= M3dregInquire(Result3dregId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the size of the array. DstContainerBufId Specifies the identifier of the destination container in which to store the transformed and merged point clouds. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. SubsampleContext3dimId Specifies the identifier of a 3D image processing subsampling context. This context is used to subsample the resulting point cloud after the merging is complete. If no subsampling is required, set this parameter to M_NULL. ControlFlag Specifies which components will be affected by the operation. For specifying whether to merge points from all components Value Description M_DEFAULT Specifies that the operation will only affect the core components of a 3D-processable container. These core components are listed in the description of MbufInquireContainer() with M_3D_PROCESSABLE. All other components are copied to the destination container unmodified. M_APPLY_TO_ALL_COMPONENTS Specifies that the operation will affect the core components of a 3D-processable container, as well as any other component (including custom components) that has the same dimension as M_COMPONENT_RANGE. These components must not have a region of interest (ROI) associated with them. For example, using a component that is an image buffer with an ROI will cause an error. Note that if a custom component has an associated calibration context, the component is merged, but its context is discarded. To avoid ambiguity, within each source container, each component must be unique such that its data type and number of bands are not identical to any other component of the same type in the container. M_APPLY_TO_ALL_COMPONENTS does not support 1-bit buffers. If the resulting operation yields an empty container with 0 valid points, the components with the same dimensions are not created and will not exist in the destination container. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - Result3dregId - ContainerBufIdArrayPtr - NumContainers For specifying the number of containers in the array - DstContainerBufId - SubsampleContext3dimId - ControlFlag For specifying whether to merge points from all components Compilation information ",
      "wordCount": 855,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregRestore",
      "version": null,
      "title": "M3dregRestore",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregRestore.htm",
      "text": " M3dregRestore Synopsis Restore a 3D registration context or result buffer from disk. Syntax MIL_ID M3dregRestore( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*ContextOrResult3dregIdPtr //out ) Description This function restores a 3D registration context or 3D registration result buffer that was previously saved to a file, using M3dregSave() or M3dregStream(). This function restores all of the 3D registration context's or 3D registration result buffer's settings that were in effect when it was saved. When the 3D registration context or 3D registration result buffer is no longer required, release it using M3dregFree() unless M_UNIQUE_ID was specified during restoration; if M_UNIQUE_ID was specified, the smart identifier manages the 3D registration context or 3D registration result buffer's lifetime and you must not manually free it. Parameters Parameters FileName Specifies the name and path of the file from which to restore the 3D registration context or 3D registration result buffer. The function handles (internally) the opening and closing of the file. For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Open dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). Typically, 3D registration context files have an M3DREG extension. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). SysId Specifies the system on which to restore the 3D registration context or 3D registration result buffer. This parameter should be set to one of the following values: For specifying the system identifier Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. ContextOrResult3dregIdPtr Specifies the address of the variable in which to write the 3D registration context or 3D registration result buffer or specifies the data type that the function should use to return the 3D registration context or 3D registration result buffer identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D registration context or 3D registration result buffer ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D registration context or 3D registration result buffer ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DREG_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D registration context or 3D registration result buffer (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the 3D registration context identifier Specifies the address of a MIL_ID in which to write the identifier of the restored pairwise 3D registration context. If allocation fails, M_NULL is written as the identifier. Address in which to write the 3D registration result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the restored pairwise 3D result buffer. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D registration context or 3D registration result buffer identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_APP_ID). If restoration fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - FileName For specifying the file name and path - SysId For specifying the system identifier - ControlFlag - ContextOrResult3dregIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 717,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregSave",
      "version": null,
      "title": "M3dregSave",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregSave.htm",
      "text": " M3dregSave Synopsis Save a 3D registration context or 3D registration result buffer to a file. Syntax void M3dregSave( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;ContextOrResult3dregId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function saves all the information about a previously allocated 3D registration context or 3D registration result buffer to disk. To load a saved context or result, use either M3dregRestore() or M3dregStream(). Parameters Parameters FileName Specifies the name and path of the file in which to save the 3D registration context or 3D registration result buffer. It is recommended that you use the M3DREG file extension for easier use with other Matrox Imaging software products. The function handles (internally) the opening and closing of this file. If this file already exists, it will be overwritten. This parameter can be set to one of the following values: For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Save As dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). The recommended extension is M3DREG. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ContextOrResult3dregId Specifies the identifier of the 3D registration context or 3D registration result buffer to save. These must have been successfully allocated (using M3dregAlloc() or M3dregAllocResult()) prior to calling this function. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - FileName For specifying the file name and path - ContextOrResult3dregId - ControlFlag Compilation information ",
      "wordCount": 300,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregSetLocation",
      "version": null,
      "title": "M3dregSetLocation",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregSetLocation.htm",
      "text": " M3dregSetLocation Synopsis Sets the rough location of the working coordinate system of a point cloud with respect to either the working coordinate system of another point cloud, or the global coordinate system. Syntax void M3dregSetLocation( MIL_ID&nbsp;Context3dregId, //in MIL_INT&nbsp;Index, //in MIL_INT&nbsp;Reference, //in MIL_ID&nbsp;ParamId, //in MIL_INT&nbsp;ParamIndex, //in MIL_INT&nbsp;ParamReference, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function sets the rough location of the working coordinate system of a point cloud with respect to a specified reference. A point cloud's reference is either the working coordinate system of another point cloud, or the global coordinate system. The rough location is stored in the point cloud's corresponding registration element, in the pairwise 3D registration context. Each registration element contains the registration information for a single point cloud. The first iteration of the registration operation is called the preregistration. Specify the type of preregistration to perform using M3dregControl() with M_PREREGISTRATION_MODE. If M_PREREGISTRATION_MODE is set to M_USER_DEFINED, M3dregCalculate() will preregister a point cloud using the preregistration transformation matrix specified by this function. If M_PREREGISTRATION_MODE is set to M_CENTROID, the point cloud will be rotated according to the preregistration transformation matrix specified by this function, and translated so that the centroids of the two points clouds share the same coordinates. The translation component of the specified preregistration transformation matrix is ignored. This function can copy the rough location from another registration element, or from the results of a previous registration operation. You can set the rough location of several point clouds through repeated calls to M3dregSetLocation(), and perform all registrations with one call to M3dregCalculate(). Some restrictions apply when selecting references for point clouds. One point cloud must use the global coordinate system as its reference. Additionally, the references for points clouds cannot be circularly dependent. If you take a specific point cloud and look at its reference, and then at its reference's reference, and continue through the series of point clouds linked in this manner, the initial point cloud must never be another's reference. By default, in a pairwise 3D registration context, the first registration element has the global coordinate system as its reference, and the first registration element is the reference of all other registration elements. Parameters Parameters Context3dregId Specifies the identifier of the pairwise 3D registration context in which to store the rough location. Index Specifies the index of the registration element in the pairwise 3D registration context to set. For specifying the index Value Description M_ALL Specifies to set all registration elements in the pairwise 3D registration context. If ParamId is a pairwise 3D registration context or pairwise 3D registration result buffer, then the number of registration elements in the pairwise 3D registration context must be less than or equal to the number of registration elements in the object passed to ParamId. 0 &lt;= Value &lt; M3dregInquire(Context3dregId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration element in the pairwise 3D registration context. Reference Specifies the reference of the registration element in Context3dregId. For specifying the reference Value Description M_DEFAULT Same as M_PREVIOUS. M_COPY Specifies to copy the rough location of ParamReference. This setting is only available if ParamId specifies a pairwise 3D registration context or a pairwise 3D registration result buffer. M_LAST Specifies the index of the last registration element in the pairwise 3D registration context passed to Context3dregId. M_NEXT Specifies the index of the registration element after the one specified in Index, unless Index refers to the last registration element in the context. In this case, M_NEXT will specify the global coordinate system. M_PREVIOUS Specifies the index of the registration element before the one specified in Index, unless Index refers to the first registration element in the context. In this case, M_PREVIOUS will specify the global coordinate system. M_REGISTRATION_GLOBAL Specifies the global coordinate system. M_UNCHANGED Specifies not to modify the current reference of the registration element. 0 &lt;= Value &lt; M3dregInquire(Context3dregId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the reference registration element. This value should not equal the value specified for Index. ParamId Specifies the identifier of the MIL object from which to copy the rough location. See the Parameter associations section for possible values that can be specified. ParamIndex Specifies the index of the registration element or registration result element in the MIL object passed to the ParamId parameter. See the Parameter associations section for possible values that can be specified. ParamReference Specifies an attribute of the transformation that specifies a rough location. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the ParamId, ParamIndex, and ParamReference parameters. For specifying the reference point cloud Note that any unused parameters should be set to M_DEFAULT. For specifying the reference point cloud ParamId Description ParamIndex ParamReference M_IDENTITY_MATRIX Specifies to use an identity matrix for the preregistration iteration. This means the source point cloud will not be transformed or rotated in any way during the preregistration iteration. ParamIndex This parameter must be set to M_DEFAULT. MIL pairwise 3D registration context ID Specifies the identifier of a pairwise 3D registration context from which to copy the rough location. The context must have been previously allocated using M3dregAlloc() with M_PAIRWISE_REGISTRATION_CONTEXT. ParamIndex Specifies the index of the registration element in the pairwise 3D registration context passed to the ParamId parameter. M_DEFAULT Specifies the same value passed to the Index parameter. M_ALL Specifies to copy all registration elements. ParamIndex must be set to M_ALL if Index is set to M_ALL. 0 &lt;= Value &lt; M3dregInquire(ParamId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration element. MIL pairwise 3D registration result buffer ID Specifies the identifier of a pairwise 3D registration result buffer from which to copy the rough location. The result buffer must have been previously allocated using M3dregAllocResult() with M_PAIRWISE_REGISTRATION_RESULT. ParamIndex Specifies the index of the registration result element in the pairwise 3D registration result buffer passed to the ParamId parameter. M_DEFAULT Specifies the same value passed to the Index parameter. M_ALL Specifies to copy all registration result elements. ParamIndex must be set to M_ALL if Index is set to M_ALL. 0 &lt;= Value &lt; M3dregInquire(ParamId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration result element. ParamReference Specifies the index of another registration result element in the 3D registration result buffer passed to ParamId. The transformation that registers the point cloud associated with ParamIndex, to the point cloud associated with ParamReference, is used as the rough location. M_DEFAULT Specifies the same value passed to the Reference parameter. This parameter cannot be set to M_DEFAULT when the Reference parameter is set to M_COPY. M_REGISTRATION_GLOBAL Specifies the global coordinate system. 0 &lt;= Value &lt; M3dregInquire(ParamId, M_NUMBER_OF_REGISTRATION_ELEMENTS) Specifies the index of the registration result element. MIL transformation matrix object ID Specifies the identifier of a transformation matrix object from which to copy the rough location. The transformation matrix object must have been previously allocated with M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. ParamIndex This parameter must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - Context3dregId - Index For specifying the index - Reference For specifying the reference - ParamId - ParamIndex - ParamReference - ControlFlag Parameter Associations For specifying the reference point cloud Compilation information ",
      "wordCount": 1201,
      "subEntries": []
    },
    {
      "id": "Reference_3dreg_M3dregStream",
      "version": null,
      "title": "M3dregStream",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dreg\\M3dregStream.htm",
      "text": " M3dregStream Synopsis Load, restore, or save a 3D registration context or result buffer from/to a file or memory stream. Syntax void M3dregStream( MIL_TEXT_PTR&nbsp;MemPtrOrFileName, //in-out MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;StreamType, //in MIL_DOUBLE&nbsp;Version, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*ContextOrResult3dregIdPtr, //in-out MIL_INT&nbsp;*SizeByteVarPtr //out ) Description This function can load, restore, or save a 3D registration context and/or a 3D registration result buffer from/to a file or memory stream. To inquire the number of bytes necessary to save a registration context or result buffer to a memory stream, you should first call this function (M3dregStream()) with M_INQUIRE_SIZE_BYTE. The content saved to memory stream is equivalent to the content saved to file. This function is equivalent to a file saved using M3dregSave(). You can use this and other MIL stream functions, for example, to save all required MIL objects, as well as any other custom data, for your application to a memory stream. Once in a memory stream, you can write the stream to a single file or transfer it over a network. You are responsible for concatenating the streams and for saving the stream to file. Parameters Parameters MemPtrOrFileName Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_TEXT_PTR [optionally, in C++: a reference to a MIL_STRING] Optionally, in C++: a reference to a std::vector of type MIL_UINT8 Specifies the file or memory stream. See the Parameter associations section for possible values that can be returned/specified. SysId Specifies the system on which to restore the 3D registration context or 3D registration result buffer. See the Parameter associations section for possible values that can be specified. Operation Specifies the operation to perform. See the Parameter associations section for possible values that can be specified. StreamType Specifies the type of stream in which to store/from which to restore the pairwise 3D registration context or pairwise 3D registration result buffer. This parameter must be set to one of the following values: For specifying the type of stream Value Description M_FILE Specifies a file stream. M_MEMORY Specifies a memory stream. You are responsible for allocating a block of memory for the stream. Version Specifies the MIL version of the 3D registration context or result buffer. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. ContextOrResult3dregIdPtr Specifies the address of the variable in which to write or from which to read the identifier of the 3D registration context or result buffer. If the M_RESTORE operation is not successful, M_NULL is returned. See the Parameter associations section for possible values that can be returned/specified. SizeByteVarPtr Specifies the address of the variable in which to write the size of the 3D registration context or result buffer, in bytes. If the size is not required, you can set this parameter to M_NULL. Note that the size of the 3D registration context or result buffer will vary depending on the MIL version specified. Parameter associations The table below lists possible values for the MemPtrOrFileName, SysId, Operation, Version, and ContextOrResult3dregIdPtr parameters. For performing the stream operation. For performing the stream operation. Operation Description MemPtrOrFileName - Possible values passed or returned SysId Version ContextOrResult3dregIdPtr - Possible values passed or returned M_INQUIRE_SIZE_BYTE Inquires the number of bytes required to save a 3D registration context or result buffer to memory stream. This operation is not supported when the StreamType parameter is set to M_FILE. MemPtrOrFileName This parameter must be set to M_NULL. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D registration context or result buffer must be compatible when saved. The size of a 3D registration context or result buffer might differ from one MIL version to another. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP4 Specifies the version as being MIL 10 Service Pack 4. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. ContextOrResult3dregIdPtr Specifies the address of the variable containing the identifier of the 3D registration context or result buffer. M_LOAD Loads the content of a specified file or memory stream into a previously allocated 3D registration context or result buffer. MemPtrOrFileName Specifies the file or memory stream from which to load the context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D registration contexts or result buffers typically have an M3DREG file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version This parameter must be set to M_DEFAULT. ContextOrResult3dregIdPtr Specifies the address of the variable containing the identifier of the 3D registration context or result buffer. All previous settings are overwritten with those of the loaded context or result buffer, or are set to the default value if the settings didn't exist in the version of MIL from which the context or result buffer is being loaded. M_RESTORE Restores a 3D registration context or result buffer from a file or memory stream and assigns it a MIL identifier. MemPtrOrFileName Specifies the file or memory stream from which to restore the context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D registration contexts or result buffers typically have an M3DREG file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId Specifies the system on which to allocate the 3D registration context or result buffer. M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). Version This parameter must be set to M_DEFAULT. ContextOrResult3dregIdPtr Specifies the address of the variable in which to write the identifier of the 3D registration context or result buffer. If the operation is not successful, M_NULL is returned. M_SAVE Saves a 3D registration context or the contents of a registration result buffer to a specified file or memory stream. MemPtrOrFileName Specifies the file or memory stream. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. For easier use with other Matrox Imaging software products, when saving a 3D registration context or result to a file, use the M3DREG file extension. The function handles (internally) the opening and closing of the file. If the file already exists, it will be overwritten. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which to write, and the block of memory must be large enough to stream the entire object. To determine the required size, call this function with M_INQUIRE_SIZE_BYTE. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D registration context or result buffer must be compatible when saved. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP4 Specifies the version as being MIL 10 Service Pack 4. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. ContextOrResult3dregIdPtr Specifies the address of the variable containing the identifier of the 3D registration context or result buffer to save. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Compilation information Header Include mil.h. Library Use mil.lib; mil3dreg.lib. DLL Requires mil.dll; mil3dreg.dll. Syntax Description Parameters - MemPtrOrFileName - SysId - Operation - StreamType For specifying the type of stream - Version - ControlFlag - ContextOrResult3dregIdPtr - SizeByteVarPtr Parameter Associations For performing the stream operation. Compilation information ",
      "wordCount": 1657,
      "subEntries": []
    }
  ]
}]