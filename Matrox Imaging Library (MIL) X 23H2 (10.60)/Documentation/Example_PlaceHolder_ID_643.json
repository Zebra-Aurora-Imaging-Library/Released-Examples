[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_M3dmod_CPP_cdisplay_cpp",
      "version": "2024020714",
      "title": "cdisplay.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /*****************************************************************************/ /* /* File name: CDisplay.cpp /* Location: See Matrox Example Launcher in the MIL Control Center /* /* Synopsis: Class that manages the 2D/3D mil displays for 3D /* examples. /* /* Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. /* All Rights Reserved /******************************************************************************/ #include \"CDisplay.h\" CDisplay::CDisplay(MIL_ID MilSystem) :m_MilSystem(MilSystem) {} /* -------------------------------------------------------------- */ /* Allocates a 3D display and returns its MIL identifier. */ /* -------------------------------------------------------------- */ void CDisplay::Alloc3dDisplayId() { // Try to allocate a 3d display. MappControl(M_DEFAULT, M_ERROR, M_PRINT_DISABLE); m_MilDisplay = M3ddispAlloc(m_MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_NULL); MappControl(M_DEFAULT, M_ERROR, M_PRINT_ENABLE); if(m_MilDisplay == M_NULL) { MosPrintf(MIL_TEXT(\"\\n\") MIL_TEXT(\"The current system does not support the 3D display.\\n\") MIL_TEXT(\"A 2D display will be used instead.\\n\")); // Allocate a 2d display instead. m_MilDisplay = MdispAlloc(m_MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_NULL); m_Lut = MbufAllocColor(m_MilSystem, 3, 256, 1, M_UNSIGNED + 8, M_LUT, M_NULL); MgenLutFunction(m_Lut, M_COLORMAP_TURBO + M_FLIP, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); } MobjInquire(m_MilDisplay, M_OBJECT_TYPE, &amp;m_DisplayType); GetGraphicListId(); } /* ----------------------------------------------- */ /* Sets the window size. */ /* ----------------------------------------------- */ void CDisplay::Size(MIL_INT SizeX, MIL_INT SizeY) { if(m_DisplayType == M_3D_DISPLAY) { M3ddispControl(m_MilDisplay, M_SIZE_X, SizeX); M3ddispControl(m_MilDisplay, M_SIZE_Y, SizeY); } else { m_MilDepthMap = MbufAlloc2d (m_MilSystem, SizeX, SizeY, M_UNSIGNED + 8, M_IMAGE | M_PROC | M_DISP, M_NULL); m_IntensityMap = MbufAllocColor(m_MilSystem, 3, SizeX, SizeY, M_UNSIGNED + 8, M_IMAGE | M_PROC | M_DISP, M_NULL); } } /* ----------------------------------------------- */ /* Sets the window position x. */ /* ----------------------------------------------- */ void CDisplay::PositionX(MIL_INT PositionX) { if(m_DisplayType == M_3D_DISPLAY) { M3ddispControl(m_MilDisplay, M_WINDOW_INITIAL_POSITION_X, PositionX); } else { MdispControl(m_MilDisplay, M_WINDOW_INITIAL_POSITION_X, PositionX); } } /* -------------------------------------------------------------- */ /* Gets the display's graphic list, or allocates a standalone one.*/ /* -------------------------------------------------------------- */ void CDisplay::GetGraphicListId() { if(m_DisplayType == M_3D_DISPLAY) { m_MilGraphicList=(MIL_ID)M3ddispInquire(m_MilDisplay, M_3D_GRAPHIC_LIST_ID, M_NULL); } else // M_DISPLAY { // Associate a graphic list. m_MilGraphicList = MgraAllocList(m_MilSystem, M_DEFAULT, M_NULL); MdispControl(m_MilDisplay, M_ASSOCIATED_GRAPHIC_LIST_ID, m_MilGraphicList); } } /* -------------------------------------------------------------- */ /* Free the display. */ /* -------------------------------------------------------------- */ void CDisplay::FreeDisplay() { if(m_DisplayType == M_DISPLAY) { MdispFree(m_MilDisplay); MbufFree(m_Lut); MbufFree(m_MilDepthMap); MbufFree(m_IntensityMap); MgraFree(m_MilGraphicList); } else { M3ddispFree(m_MilDisplay); } } /* -------------------------------------------------------------- */ // Displays the container in the 3D or 2D display. /* -------------------------------------------------------------- */ void CDisplay::DisplayContainer(MIL_ID MilContainer, bool UseLut) { if(m_DisplayType == M_3D_DISPLAY) { MIL_INT64 Label = M3ddispSelect(m_MilDisplay, MilContainer, M_DEFAULT, M_DEFAULT); if(UseLut) { M3dgraCopy(M_COLORMAP_TURBO + M_FLIP, M_DEFAULT, m_MilGraphicList, Label, M_COLOR_LUT, M_DEFAULT); M3dgraControl(m_MilGraphicList, Label, M_COLOR_USE_LUT, M_TRUE); M3dgraControl(m_MilGraphicList, Label, M_COLOR_COMPONENT_BAND, 2); M3dgraControl(m_MilGraphicList, Label, M_COLOR_COMPONENT, M_COMPONENT_RANGE); } // Set the display's rotation axis center. This will keep the // behaviour of auto rotate consistent as we move its interest point. M3ddispCopy(M_VIEW_INTEREST_POINT, m_MilDisplay, M_ROTATION_AXIS_CENTER, M_DEFAULT); } else // M_DISPLAY { // Project into a depthmap. M3dimCalibrateDepthMap(MilContainer, m_MilDepthMap, m_IntensityMap, M_NULL, M_DEFAULT, M_DEFAULT, M_CENTER); if(UseLut) { // Associate a LUT. MbufControl(m_MilDepthMap, M_ASSOCIATED_LUT, m_Lut); M3dimProject(MilContainer, m_MilDepthMap, M_NULL, M_POINT_BASED, M_MAX_Z, M_DEFAULT, M_DEFAULT); MdispSelect(m_MilDisplay, m_MilDepthMap); } else { bool HasColor = MbufInquireContainer(MilContainer, M_COMPONENT_REFLECTANCE, M_COMPONENT_ID, M_NULL) != M_NULL || MbufInquireContainer(MilContainer, M_COMPONENT_INTENSITY , M_COMPONENT_ID, M_NULL) !=M_NULL; if(HasColor) { M3dimProject(MilContainer, m_MilDepthMap, m_IntensityMap, M_POINT_BASED, M_MAX_Z, M_DEFAULT, M_DEFAULT); MdispSelect(m_MilDisplay, m_IntensityMap); } else { M3dimProject(MilContainer, m_MilDepthMap, M_NULL, M_POINT_BASED, M_MAX_Z, M_DEFAULT, M_DEFAULT); MdispSelect(m_MilDisplay, m_MilDepthMap); } } } } /* -------------------------------------------------------------- */ /* Updates the displayed image. */ /* -------------------------------------------------------------- */ void CDisplay::UpdateDisplay(MIL_ID MilContainer, bool UseLut) { if(m_DisplayType == M_3D_DISPLAY) { return; // Containers are updated automatically in the 3D display } else { DisplayContainer(MilContainer, UseLut); } } /*--------------------------------------------------------------- */ /* Set the 3D disply view . */ /* -------------------------------------------------------------- */ void CDisplay::SetView(MIL_INT64 Mode, MIL_DOUBLE Param1, MIL_DOUBLE Param2, MIL_DOUBLE Param3) { if(m_DisplayType == M_3D_DISPLAY) { M3ddispSetView(m_MilDisplay, Mode, Param1, Param2, Param3, M_DEFAULT); // Set the display's rotation axis center. This will keep the // behaviour of auto rotate consistent as we move its interest point. M3ddispCopy(M_VIEW_INTEREST_POINT, m_MilDisplay, M_ROTATION_AXIS_CENTER, M_DEFAULT); } } void CDisplay::Title(MIL_STRING Title) { if(m_DisplayType == M_3D_DISPLAY) M3ddispControl(m_MilDisplay, M_TITLE, Title); else MdispControl(m_MilDisplay, M_TITLE, Title); } /*-------------------------------------------------------------- */ /* Draw the 3d model occurrences found. */ /* ------------------------------------------------------------- */ MIL_INT64 CDisplay::Draw(MIL_ID MilResult) { if(m_DisplayType == M_3D_DISPLAY) { return M3dmodDraw3d(M_DEFAULT, MilResult, M_ALL, m_MilGraphicList, M_DEFAULT, M_DEFAULT); } else { auto Mil3dGraphicList = M3dgraAlloc(m_MilSystem, M_DEFAULT, M_UNIQUE_ID); M3dmodDraw3d(M_DEFAULT, MilResult, M_ALL, Mil3dGraphicList, M_DEFAULT, M_DEFAULT); // Clear the graphic list. MgraControlList(m_MilGraphicList, M_ALL, M_DEFAULT, M_DELETE, M_DEFAULT); // Get all 3d graphics. std::vector&lt;MIL_DOUBLE&gt; PointsX, PointsY; std::vector&lt;MIL_INT64&gt; Labels; M3dgraInquire(Mil3dGraphicList, M_ROOT_NODE, M_CHILDREN + M_RECURSIVE, Labels); MIL_ID Matrix = M3dgeoAlloc(m_MilSystem, M_TRANSFORMATION_MATRIX, M_DEFAULT, M_NULL); auto MilContainer = MbufAllocContainer(m_MilSystem, M_PROC|M_DISP, M_DEFAULT, M_UNIQUE_ID); // Draw all 3d boxes and dots in the 2d display. for(MIL_UINT i = 0; i &lt; Labels.size(); i++) { MIL_INT64 GraphicType = M3dgraInquire(Mil3dGraphicList, Labels[i], M_GRAPHIC_TYPE, M_NULL); if(GraphicType == M_GRAPHIC_TYPE_DOTS) { // Dots. MIL_INT64 Color = M3dgraInquire(Mil3dGraphicList, Labels[i], M_COLOR, M_NULL); M3dgraInquire(Mil3dGraphicList, Labels[i], M_POINTS_X, PointsX); M3dgraInquire(Mil3dGraphicList, Labels[i], M_POINTS_Y, PointsY); MgraControl(M_DEFAULT, M_COLOR, (MIL_DOUBLE)Color); MgraControl(M_DEFAULT, M_INPUT_UNITS, M_WORLD); MgraDots(M_DEFAULT, m_MilGraphicList, M_DEFAULT, PointsX, PointsY, M_DEFAULT); } else if(GraphicType == M_GRAPHIC_TYPE_BOX) { // Boxes. MIL_DOUBLE RotX, RotY, RotZ, CenterX, CenterY, SizeX, SizeY; M3dgraInquire(Mil3dGraphicList, Labels[i], M_CENTER_X, &amp;CenterX); M3dgraInquire(Mil3dGraphicList, Labels[i], M_CENTER_Y, &amp;CenterY); M3dgraInquire(Mil3dGraphicList, Labels[i], M_SIZE_X, &amp;SizeX); M3dgraInquire(Mil3dGraphicList, Labels[i], M_SIZE_Y, &amp;SizeY); M3dgraCopy(Mil3dGraphicList, Labels[i], Matrix, M_DEFAULT, M_TRANSFORMATION_MATRIX, M_DEFAULT); M3dgeoMatrixGetTransform(Matrix, M_ROTATION_ZXY, &amp;RotZ, &amp;RotY, &amp;RotX, M_NULL, M_DEFAULT); MgraControl(M_DEFAULT, M_COLOR, M_COLOR_WHITE); MgraControl(M_DEFAULT, M_INPUT_UNITS, M_WORLD); MgraRectAngle(M_DEFAULT, m_MilGraphicList, CenterX, CenterY, SizeX, SizeY, -RotZ, M_CENTER_AND_DIMENSION); } } M3dgeoFree(Matrix); } return 0; } void CDisplay::Clear(MIL_INT64 Label) { if(m_DisplayType == M_3D_DISPLAY) M3dgraRemove(m_MilGraphicList, Label, M_DEFAULT); else { MgraControlList(m_MilGraphicList, M_ALL, M_DEFAULT, M_DELETE, M_DEFAULT); } } ",
      "wordCount": 834
    },
    {
      "id": "Examples_General_M3dmod_CPP_m3dmod_cpp",
      "version": "2024020714",
      "title": "m3dmod.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /******************************************************************************/ /* * File name: M3dmod.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This example demonstrates how to use the 3D model finder module * to define surface models and search for them in 3D scenes. * A simple single model search is presented first followed by a more * complex example of multiple occurrences in a complex scene. * * Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved /*******************************************************************************/ #include \"CDisplay.h\" /* -------------------------------------------------------------- */ /* Example description. */ /* -------------------------------------------------------------- */ void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\")); MosPrintf(MIL_TEXT(\"M3dmod\\n\\n\")); MosPrintf(MIL_TEXT(\"[SYNOPSIS]\\n\")); MosPrintf(MIL_TEXT(\"This example demonstrates how to use the 3D model finder module \\n\")); MosPrintf(MIL_TEXT(\"to define surface models and search for them in 3D scenes.\\n\")); MosPrintf(MIL_TEXT(\"\\n\")); MosPrintf(MIL_TEXT(\"[MODULES USED]\\n\")); MosPrintf(MIL_TEXT(\"Modules used: 3D Model Finder, 3D Display, 3D Graphics, and 3D Image\\n\" \"Processing.\\n\\n\")); } /* Input scanned point cloud files. */ static const MIL_STRING SINGLE_MODEL = M_IMAGE_PATH MIL_TEXT(\"SimpleModel.mbufc\"); static const MIL_STRING SINGLE_SCENE = M_IMAGE_PATH MIL_TEXT(\"SimpleScene.mbufc\"); static const MIL_STRING COMPLEX_MODEL1 = M_IMAGE_PATH MIL_TEXT(\"ComplexModel1.ply\"); static const MIL_STRING COMPLEX_MODEL2 = M_IMAGE_PATH MIL_TEXT(\"ComplexModel2.ply\"); static const MIL_STRING COMPLEX_SCENE = M_IMAGE_PATH MIL_TEXT(\"ComplexScene.ply\"); /* Constants. */ static const MIL_INT DISP_SIZE_X = 480; static const MIL_INT DISP_SIZE_Y = 420; /* functions. */ void SimpleSceneSurfaceFinder (MIL_ID MilSystem, CDisplay&amp; DisplayModel, CDisplay&amp; DisplayScene); void ComplexSceneSurfaceFinder(MIL_ID MilSystem, CDisplay&amp; DisplayModel, CDisplay&amp; DisplayScene); void AddComponentNormalsIfMissing(MIL_ID MilContainer); void ShowResults(MIL_ID MilResult, MIL_DOUBLE ComputationTime); /* -------------------------------------------------------------- */ int MosMain() { /* Print example information in console. */ PrintHeader(); MIL_UNIQUE_APP_ID MilApplication; /* MIL application identifier */ MIL_UNIQUE_SYS_ID MilSystem; /* MIL system identifier */ /* Allocate MIL objects. */ MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_DEFAULT, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); /* Allocate the display. */ CDisplay DisplayModel(MilSystem); DisplayModel.Alloc3dDisplayId(); DisplayModel.Size(DISP_SIZE_X/2, DISP_SIZE_Y/2); DisplayModel.Title(MIL_TEXT(\"Model Cloud\")); CDisplay DisplayScene(MilSystem); DisplayScene.Alloc3dDisplayId(); DisplayScene.Size(DISP_SIZE_X, DISP_SIZE_Y); DisplayScene.PositionX((MIL_INT)(1.04 * 0.5*DISP_SIZE_X)); DisplayScene.Title(MIL_TEXT(\"Scene Cloud\")); SimpleSceneSurfaceFinder(MilSystem, DisplayModel, DisplayScene); ComplexSceneSurfaceFinder(MilSystem, DisplayModel, DisplayScene); DisplayModel.FreeDisplay(); DisplayScene.FreeDisplay(); return 0; } /* -------------------------------------------------------------- */ /* Simple scene with a single occurrence. */ /* -------------------------------------------------------------- */ void SimpleSceneSurfaceFinder(MIL_ID MilSystem, CDisplay&amp; DisplayModel, CDisplay&amp; DisplayScene) { /* Allocate a surface Model Finder context. */ auto MilContext = M3dmodAlloc(MilSystem, M_FIND_SURFACE_CONTEXT, M_DEFAULT, M_UNIQUE_ID); /* Allocate a surface Model Finder result. */ auto MilResult = M3dmodAllocResult(MilSystem, M_FIND_SURFACE_RESULT, M_DEFAULT, M_UNIQUE_ID); /* Restore the model container and display it */ auto MilModelContainer = MbufRestore(SINGLE_MODEL, MilSystem, M_UNIQUE_ID); DisplayModel.SetView(M_AZIM_ELEV_ROLL, 45, -35, 180); DisplayModel.DisplayContainer(MilModelContainer, true); MosPrintf(MIL_TEXT(\"The 3D point cloud of the model is restored from a file and\" \" displayed.\\n\")); /* Load the single model scene point cloud. */ auto MilSceneContainer = MbufRestore(SINGLE_SCENE, MilSystem, M_UNIQUE_ID); DisplayScene.SetView(M_AZIM_ELEV_ROLL, 202, -20.0, 182.0); DisplayScene.DisplayContainer(MilSceneContainer, true); MosPrintf(MIL_TEXT(\"The 3D point cloud of the scene is restored from a file and\" \" displayed.\")); MosPrintf(MIL_TEXT(\"\\n\\nPress any key to start.\\n\\n\")); MosGetch(); /* Define the surface model. */ M3dmodDefine(MilContext, M_ADD_FROM_POINT_CLOUD, M_SURFACE, (MIL_DOUBLE)MilModelContainer, M_DEFAULT, M_DEFAULT,M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"Define the model using the given model point cloud.\\n\\n\")); /* Set the search perseverance. */ MosPrintf(MIL_TEXT(\"Set the lowest perseverance to increase the search speed for a simple\" \" scene.\\n\\n\")); M3dmodControl(MilContext, M_DEFAULT, M_PERSEVERANCE, 0.0); MosPrintf(MIL_TEXT(\"Set the scene complexity to low to increase the search speed for a \" \"simple scene.\\n\\n\")); M3dmodControl(MilContext, M_DEFAULT, M_SCENE_COMPLEXITY, M_LOW); /* Preprocess the search context. */ M3dmodPreprocess(MilContext, M_DEFAULT); MosPrintf(MIL_TEXT(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if not\" \" present.\\n\\n\")); /* The surface finder requires the existence of M_COMPONENT_NORMALS_MIL in the point cloud. */ AddComponentNormalsIfMissing(MilSceneContainer); MosPrintf(MIL_TEXT(\"3D surface finder is running..\\n\\n\")); /* Reset the timer. */ MIL_DOUBLE ComputationTime = 0.0; MappTimer(M_DEFAULT, M_TIMER_RESET + M_SYNCHRONOUS, M_NULL); /* Find the model. */ M3dmodFind(MilContext, MilSceneContainer, MilResult, M_DEFAULT); /* Read the find time. */ MappTimer(M_DEFAULT, M_TIMER_READ + M_SYNCHRONOUS, &amp;ComputationTime); ShowResults(MilResult, ComputationTime); DisplayScene.Draw(MilResult); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } /* -------------------------------------------------------------- */ /* Complex scene with multiple occurrences. */ /* -------------------------------------------------------------- */ void ComplexSceneSurfaceFinder(MIL_ID MilSystem, CDisplay&amp; DisplayModel, CDisplay&amp; DisplayScene) { /* Allocate a surface 3D Model Finder context. */ auto MilContext = M3dmodAlloc(MilSystem, M_FIND_SURFACE_CONTEXT, M_DEFAULT, M_UNIQUE_ID); /* Allocate a surface 3D Model Finder result. */ auto MilResult = M3dmodAllocResult(MilSystem, M_FIND_SURFACE_RESULT, M_DEFAULT, M_UNIQUE_ID); DisplayModel.Clear(M_ALL); DisplayScene.Clear(M_ALL); /* Restore the first model container and display it. */ auto MilModelContainer = MbufRestore(COMPLEX_MODEL1, MilSystem, M_UNIQUE_ID); DisplayModel.SetView(M_AZIM_ELEV_ROLL, 290, -67, 265); DisplayModel.DisplayContainer(MilModelContainer, false); DisplayModel.SetView(M_AUTO, M_DEFAULT, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"The 3D point cloud of the first model is restored from a file and\" \" displayed.\\n\")); /* Load the complex scene point cloud. */ auto MilSceneContainer = MbufRestore(COMPLEX_SCENE, MilSystem, M_UNIQUE_ID); DisplayScene.SetView(M_AZIM_ELEV_ROLL, 260, -72, 142); DisplayScene.DisplayContainer(MilSceneContainer, false); DisplayScene.SetView(M_AUTO, M_DEFAULT, M_DEFAULT, M_DEFAULT); DisplayScene.SetView(M_ZOOM, 1.2, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"The 3D point cloud of the scene is restored from a file and\" \" displayed.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to start.\\n\\n\")); MosGetch(); MosPrintf(MIL_TEXT(\"M_COMPONENT_NORMALS_MIL is added to the point cloud if\" \" not present.\\n\\n\")); /* The surface finder requires the existence of M_COMPONENT_NORMALS_MIL*/ /* in the point cloud.* / AddComponentNormalsIfMissing(MilSceneContainer); /* Define the surface model. */ M3dmodDefine(MilContext, M_ADD_FROM_POINT_CLOUD, M_SURFACE, (MIL_DOUBLE)MilModelContainer, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Find all ocurrences. */ M3dmodControl(MilContext, 0, M_NUMBER, M_ALL); M3dmodControl(MilContext, 0, M_COVERAGE_MAX, 75); M3dmodPreprocess(MilContext, M_DEFAULT); MosPrintf(MIL_TEXT(\"3D surface finder is running..\\n\\n\")); /* Reset the timer. */ MIL_DOUBLE ComputationTime = 0.0; MappTimer(M_DEFAULT, M_TIMER_RESET + M_SYNCHRONOUS, M_NULL); /* Find the model. */ M3dmodFind(MilContext, MilSceneContainer, MilResult, M_DEFAULT); /* Read the find time. */ MappTimer(M_DEFAULT, M_TIMER_READ + M_SYNCHRONOUS, &amp;ComputationTime); ShowResults(MilResult, ComputationTime); MIL_INT64 Label = DisplayScene.Draw(MilResult); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); DisplayScene.Clear(Label); MilModelContainer = MbufRestore(COMPLEX_MODEL2, MilSystem, M_UNIQUE_ID); DisplayModel.DisplayContainer(MilModelContainer, false); DisplayModel.SetView(M_AUTO, M_DEFAULT, M_DEFAULT, M_DEFAULT); MosPrintf(MIL_TEXT(\"The 3D point cloud of the second model is restored from file and\" \" displayed.\\n\\n\")); /* Delete the previous model. */ M3dmodDefine(MilContext, M_DELETE, M_DEFAULT, 0, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Define the surface model. */ M3dmodDefine(MilContext, M_ADD_FROM_POINT_CLOUD, M_SURFACE, (MIL_DOUBLE)MilModelContainer, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Find all ocurrences. */ M3dmodControl(MilContext, 0, M_NUMBER, M_ALL); M3dmodControl(MilContext, 0, M_COVERAGE_MAX, 95); M3dmodPreprocess(MilContext, M_DEFAULT); MosPrintf(MIL_TEXT(\"3D surface finder is running..\\n\\n\")); /* Reset the timer. */ MappTimer(M_DEFAULT, M_TIMER_RESET + M_SYNCHRONOUS, M_NULL); /* Find the model. */ M3dmodFind(MilContext, MilSceneContainer, MilResult, M_DEFAULT); /* Read the find time. */ MappTimer(M_DEFAULT, M_TIMER_READ + M_SYNCHRONOUS, &amp;ComputationTime); ShowResults(MilResult, ComputationTime); DisplayScene.Draw(MilResult); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } /* -------------------------------------------------------------- */ /* Adds the component M_COMPONENT_NORMALS_MIL if it's not found. */ /* -------------------------------------------------------------- */ void AddComponentNormalsIfMissing(MIL_ID MilContainer) { MIL_ID MilNormals = MbufInquireContainer(MilContainer, M_COMPONENT_NORMALS_MIL, M_COMPONENT_ID, M_NULL); if(MilNormals != M_NULL) return; MIL_INT SizeX = MbufInquireContainer(MilContainer, M_COMPONENT_RANGE, M_SIZE_X, M_NULL); MIL_INT SizeY = MbufInquireContainer(MilContainer, M_COMPONENT_RANGE, M_SIZE_Y, M_NULL); if(SizeX &lt; 50 || SizeY &lt; 50) M3dimNormals(M_NORMALS_CONTEXT_TREE, MilContainer, MilContainer, M_DEFAULT); else M3dimNormals(M_NORMALS_CONTEXT_ORGANIZED, MilContainer, MilContainer, M_DEFAULT); } /* --------------------------------------------------------- */ /* Shows the surface finder results. */ /* --------------------------------------------------------- */ void ShowResults(MIL_ID MilResult, MIL_DOUBLE ComputationTime) { MIL_INT Status; M3dmodGetResult(MilResult, M_DEFAULT, M_STATUS, &amp;Status); if(Status != M_COMPLETE) { MosPrintf(MIL_TEXT(\"The find process is not completed.\\n\")); } MIL_INT NbOcc = 0; M3dmodGetResult(MilResult, M_DEFAULT, M_NUMBER, &amp;NbOcc); MosPrintf(MIL_TEXT(\"Found %i occurrence(s) in %.2f s.\\n\\n\"), NbOcc, ComputationTime); if(NbOcc == 0) return; MosPrintf(MIL_TEXT(\"Index Score Score_Target\\n\")); MosPrintf(MIL_TEXT(\"------------------------------------------------------\\n\")); for(MIL_INT i = 0; i &lt; NbOcc; ++i) { MIL_DOUBLE ScoreTarget = M3dmodGetResult(MilResult, i, M_SCORE_TARGET, M_NULL); MIL_DOUBLE Score = M3dmodGetResult(MilResult, i, M_SCORE , M_NULL); MosPrintf(MIL_TEXT(\" %i %.4f %6.2f \\n\"), i, Score, ScoreTarget); } MosPrintf(MIL_TEXT(\"\\n\")); } ",
      "wordCount": 1116
    }
  ]
}]