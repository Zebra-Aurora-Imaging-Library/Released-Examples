[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_Region_arcregion_cpp",
      "version": "2024020714",
      "title": "arcregion.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ArcRegion.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CArcRegion class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ArcRegion.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CArcRegion::CArcRegion(MIL_INT InputUnits, MIL_DOUBLE CenterX, MIL_DOUBLE CenterY, MIL_DOUBLE RadiusX, MIL_DOUBLE RadiusY, MIL_DOUBLE StartAngle, MIL_DOUBLE EndAngle, MIL_DOUBLE XAxisAngle, CInspectionTask* RegionProvider /* = M_NULL */) : CGraphicRegion(InputUnits, RegionProvider), m_CenterX(CenterX), m_CenterY(CenterY), m_RadiusX(RadiusX), m_RadiusY(RadiusY), m_StartAngle(StartAngle), m_EndAngle(EndAngle), m_XAxisAngle(XAxisAngle) { } //***************************************************************************** // Destructor. //***************************************************************************** CArcRegion::~CArcRegion() { } //***************************************************************************** // Draw the region in the output region list //***************************************************************************** void CArcRegion::DrawGraphicRegionInRegionList(MIL_ID MilGraContext) { // Draw the arc region. MgraArcAngle(MilGraContext, GetOutputRegionList(), m_CenterX, m_CenterY, m_RadiusX, m_RadiusY, m_StartAngle, m_EndAngle, m_XAxisAngle, M_SECTOR+M_FILLED); } //***************************************************************************** // Draw output region function. //***************************************************************************** void CArcRegion::DrawOutputRegion(MIL_ID MilGraContext, MIL_ID MilDest) { CGraphicRegion::DrawOutputRegion(MilGraContext, MilDest); MgraArcAngle(MilGraContext, MilDest, m_CenterX, m_CenterY, m_RadiusX, m_RadiusY, m_StartAngle, m_EndAngle, m_XAxisAngle, M_SECTOR); } ",
      "wordCount": 156
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_Region_graphicregion_cpp",
      "version": "2024020714",
      "title": "graphicregion.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: GraphicRegion.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CGraphicRegion class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"GraphicRegion.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CGraphicRegion::CGraphicRegion(MIL_INT InputUnits, CInspectionTask* RegionProvider /* = M_NULL */) : CInspectionTask(M_NONE, M_NULL, M_NULL, RegionProvider), m_RegionInputUnits(InputUnits) { } //***************************************************************************** // Destructor. //***************************************************************************** CGraphicRegion::~CGraphicRegion() { } //***************************************************************************** // Init. //***************************************************************************** void CGraphicRegion::Init(MIL_ID MilSystem, MIL_INT ImageSizeX /* = 0 */, MIL_INT ImageSizeY /* = 0 */) { // Initialize the base classes. CInspectionTask::Init(MilSystem, ImageSizeX, ImageSizeY); // Allocate the region list if necessary. CInspectionTask::AllocateRegionGraList(MilSystem); // If there is a region provider copy the graphics list MIL_INT CurNbGraphics = 0; if(HasRegionProvider()) { MgraCopy(GetInputRegionList(), GetOutputRegionList(), M_COPY, M_DEFAULT, M_ALL, M_NULL, M_NULL, M_DEFAULT); MgraInquireList(GetInputRegionList(), M_LIST, M_DEFAULT, M_NUMBER_OF_GRAPHICS + M_TYPE_MIL_INT, &amp;CurNbGraphics); } // Allocate a graphic context. MIL_ID MilGraContext = MgraAlloc(MilSystem, M_NULL); // Set it to the correct input units. MgraControl(MilGraContext, M_INPUT_UNITS, (MIL_DOUBLE)m_RegionInputUnits); // Set the drawing color of the next primitive. MgraControl(MilGraContext, M_COLOR, (MIL_DOUBLE)(CurNbGraphics + 1)); // Draw the region. DrawGraphicRegionInRegionList(MilGraContext); // Free the graphic context MgraFree(MilGraContext); } //***************************************************************************** // Inspect. //***************************************************************************** ResultStatusEnum CGraphicRegion::Inspect(MIL_ID MilImage) { return eValid; } //***************************************************************************** // Draw output region function. //***************************************************************************** void CGraphicRegion::DrawOutputRegion(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the input region since the graphic region are combined DrawInputRegion(MilGraContext, MilDest); } //***************************************************************************** // Draw text result. //***************************************************************************** void CGraphicRegion::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CGraphicRegion::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { } ",
      "wordCount": 261
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_Region_polygonregion_cpp",
      "version": "2024020714",
      "title": "polygonregion.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: PolygonRegion.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CArcRegion class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"PolygonRegion.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CPolygonRegion::CPolygonRegion(MIL_INT InputUnits, MIL_INT NbPoints, const MIL_DOUBLE* pPosX, const MIL_DOUBLE* pPosY, CInspectionTask* RegionProvider /* = M_NULL */) : CGraphicRegion(InputUnits, RegionProvider), m_NbPoints(NbPoints), m_pPosX(pPosX), m_pPosY(pPosY) { } //***************************************************************************** // Destructor. //***************************************************************************** CPolygonRegion::~CPolygonRegion() { } //***************************************************************************** // Draw the region in the output region list //***************************************************************************** void CPolygonRegion::DrawGraphicRegionInRegionList(MIL_ID MilGraContext) { // Draw the polygon region. MgraLines(MilGraContext, GetOutputRegionList(), m_NbPoints, m_pPosX, m_pPosY, M_NULL, M_NULL, M_POLYGON + M_FILLED); } //***************************************************************************** // Draw output region function. //***************************************************************************** void CPolygonRegion::DrawOutputRegion(MIL_ID MilGraContext, MIL_ID MilDest) { CGraphicRegion::DrawOutputRegion(MilGraContext, MilDest); MgraLines(MilGraContext, MilDest, m_NbPoints, m_pPosX, m_pPosY, M_NULL, M_NULL, M_POLYGON); } ",
      "wordCount": 144
    },
    {
      "id": "Examples_Processing_ProductInspection_ExampleBase_CPP_InspectionTaskBase_Region_rectangleregion_cpp",
      "version": "2024020714",
      "title": "rectangleregion.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: RectangleRegion.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CRectangleRegion class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"RectangleRegion.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CRectangleRegion::CRectangleRegion(MIL_INT InputUnits, MIL_DOUBLE PositionX, MIL_DOUBLE PositionY, MIL_DOUBLE SizeX, MIL_DOUBLE SizeY, MIL_DOUBLE Angle, MIL_INT ControlFlag, CInspectionTask* RegionProvider /* = M_NULL */) : CGraphicRegion(InputUnits, RegionProvider), m_PositionX(PositionX), m_PositionY(PositionY), m_SizeX(SizeX), m_SizeY(SizeY), m_Angle(Angle), m_ControlFlag(ControlFlag) { } //***************************************************************************** // Destructor. //***************************************************************************** CRectangleRegion::~CRectangleRegion() { } //***************************************************************************** // Draw the region in the output region list. //***************************************************************************** void CRectangleRegion::DrawGraphicRegionInRegionList(MIL_ID MilGraContext) { // Draw the rectangle region. MgraRectAngle(MilGraContext, GetOutputRegionList(), m_PositionX, m_PositionY, m_SizeX, m_SizeY, m_Angle, m_ControlFlag + M_FILLED); } //***************************************************************************** // Draw output region function. //***************************************************************************** void CRectangleRegion::DrawOutputRegion(MIL_ID MilGraContext, MIL_ID MilDest) { CGraphicRegion::DrawOutputRegion(MilGraContext, MilDest); MgraRectAngle(MilGraContext, MilDest, m_PositionX, m_PositionY, m_SizeX, m_SizeY, m_Angle, m_ControlFlag); } ",
      "wordCount": 151
    }
  ]
}]