[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_ProductInspection_CenteredLabelInspection_CPP_centeredlabelinspection_cpp",
      "version": "2024020714",
      "title": "centeredlabelinspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //***************************************************************************************/ // // File name: CenteredLabelInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program contains an example of lid label inspection. // See the PrintHeader() function below for detailed description. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ExampleManager.h\" // Include the different tasks that can be performed. #include \"MetrologyAlignment.h\" #include \"LidColorsVerification.h\" #include \"LidIdentification.h\" #include \"SimpleFixture.h\" #include \"Region/ArcRegion.h\" #include \"Region/PolygonRegion.h\" //**************************************************************************** // Example description. //**************************************************************************** void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"CenteredLabelInspection\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This example shows the inspection of lid labels on three\\n\") MIL_TEXT(\"product lanes. The following features will be inspected:\\n\") MIL_TEXT(\" - Concentricity of the label and the lid\\n\") MIL_TEXT(\" - Correct label type for a given lane\\n\") MIL_TEXT(\" - Color of 2 regions of the label(background and fruit)\\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: Application, system, graphic, metrology\\n\") MIL_TEXT(\" color, pattern matching\\n\\n\") MIL_TEXT(\"[ADDITIONNAL INSTRUCTIONS]\\n\") MIL_TEXT(\"Left click on an image to view results in a zoomable display.\\n\\n\") MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } //**************************************************************************** // General Constants. //**************************************************************************** #define ARRAY_COUNT(x) (sizeof((x))/sizeof((x)[0])) // for array on the stack only // Root filename. #define EXAMPLE_IMAGE_PATH M_IMAGE_PATH MIL_TEXT(\"CenteredLabelInspection/\") //**************************************************************************** // Product 0 : Lid. //**************************************************************************** // Image path #define PRODUCT0_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Product0/\") //***************************************************************************** // Main. //***************************************************************************** int MosMain(void) { // Declare and the tasks associated to each image associated with the product. // Image 0: Banana lid of the product CMetrologyAlignment Prod0BananaMetAndAlignment (PRODUCT0_PATH MIL_TEXT(\"MetrologyAlignment.met\"), M_RGB_TO_L); CLidIdentification Prod0BananaPattern (PRODUCT0_PATH MIL_TEXT(\"BananaPattern.mpat\"), M_RGB_TO_L, &amp;Prod0BananaMetAndAlignment); CArcRegion Prod0BananaBackgroundRegion (M_WORLD, 0, 30, 179, 127, 0, 180, 0); static const MIL_DOUBLE BANANA_POSX[] = { -70, -76, -99, -106, -82, -8, 51, 76, 67, 76, 69, 61, 57, 47, 22, -15, -41}; static const MIL_DOUBLE BANANA_POSY[] = { 165, 183, 177, 189, 223, 251, 226, 192, 159, 135, 134, 141, 170, 167, 183, 188, 175}; CPolygonRegion Prod0BananaRegion (M_WORLD, ARRAY_COUNT(BANANA_POSX), BANANA_POSX, BANANA_POSY, &amp;Prod0BananaBackgroundRegion); static const MIL_INT BananaExpectedMatches[] = { 1, 0 }; CLidColorsVerification Prod0BananaColorMatch (PRODUCT0_PATH MIL_TEXT(\"BananaLid.mcol\"), BananaExpectedMatches, M_NONE, &amp;Prod0BananaPattern, M_NULL, &amp;Prod0BananaRegion); CInspectionTask* Prod0Image0Tasks[] = { &amp;Prod0BananaMetAndAlignment, &amp;Prod0BananaPattern, &amp;Prod0BananaBackgroundRegion, &amp;Prod0BananaRegion, &amp;Prod0BananaColorMatch }; // Image 1: Strawberry lid of the product CMetrologyAlignment Prod0StrawberryMetAndAlignment (PRODUCT0_PATH MIL_TEXT(\"MetrologyAlignment.met\"), M_RGB_TO_L); CLidIdentification Prod0StrawberryPattern (PRODUCT0_PATH MIL_TEXT(\"StrawberryPattern.mpat\"), M_RGB_TO_L, &amp;Prod0StrawberryMetAndAlignment); CArcRegion Prod0StrawberryBackgroundRegion (M_WORLD, 0, 30, 179, 127, 0, 180, 0); static const MIL_DOUBLE STRAWBERRY_POSX[] = { -39, -55, -53, -17, -11, 37, 55, 42, 40, 19, 13, 3, -9, -21}; static const MIL_DOUBLE STRAWBERRY_POSY[] = { 152, 168, 192, 247, 249, 215, 187, 150, 156, 165, 161, 175, 158, 159}; CPolygonRegion Prod0StrawberryRegion (M_WORLD, ARRAY_COUNT(STRAWBERRY_POSX), STRAWBERRY_POSX, STRAWBERRY_POSY, &amp;Prod0StrawberryBackgroundRegion); static const MIL_INT StrawberryExpectedMatches[] = { 1, 0 }; CLidColorsVerification Prod0StrawberryColorMatch (PRODUCT0_PATH MIL_TEXT(\"StrawberryLid.mcol\"), StrawberryExpectedMatches, M_NONE, &amp;Prod0StrawberryPattern, M_NULL, &amp;Prod0StrawberryRegion); CInspectionTask* Prod0Image1Tasks[] = { &amp;Prod0StrawberryMetAndAlignment, &amp;Prod0StrawberryPattern, &amp;Prod0StrawberryBackgroundRegion, &amp;Prod0StrawberryRegion, &amp;Prod0StrawberryColorMatch }; // Image 2: Blueberry lid of the product CMetrologyAlignment Prod0BlueberryMetAndAlignment (PRODUCT0_PATH MIL_TEXT(\"MetrologyAlignment.met\"), M_RGB_TO_L); CLidIdentification Prod0BlueberryPattern (PRODUCT0_PATH MIL_TEXT(\"BlueberryPattern.mpat\"), M_RGB_TO_L, &amp;Prod0BlueberryMetAndAlignment); CArcRegion Prod0BlueberryBackgroundRegion(M_WORLD, 0, 30, 179, 127, 0, 180, 0); CArcRegion Prod0BlueberryRegion (M_WORLD, 6, 175, 55, 55, 0, 360, 0, &amp;Prod0BlueberryBackgroundRegion); static const MIL_INT BlueberryExpectedMatches[] = { 1, 0 }; CLidColorsVerification Prod0BlueberryColorMatch (PRODUCT0_PATH MIL_TEXT(\"BlueberryLid.mcol\"), BlueberryExpectedMatches, M_NONE, &amp;Prod0BlueberryPattern, M_NULL, &amp;Prod0BlueberryRegion); CInspectionTask* Prod0Image2Tasks[] = { &amp;Prod0BlueberryMetAndAlignment, &amp;Prod0BlueberryPattern, &amp;Prod0BlueberryBackgroundRegion, &amp;Prod0BlueberryRegion, &amp;Prod0BlueberryColorMatch }; // Table of the task associated to each image. SImageTaskList Prod0ImagesTaskList[] = { CREATE_LIST(Prod0Image0Tasks, MIL_TEXT(\"BananaLid inspection\")), CREATE_LIST(Prod0Image1Tasks, MIL_TEXT(\"StrawberryLid inspection\")), CREATE_LIST(Prod0Image2Tasks, MIL_TEXT(\"BlueberryLid inspection\")) }; // The filenames of the avi files. static MIL_CONST_TEXT_PTR Prod0ImagesAvi[ARRAY_COUNT(Prod0ImagesTaskList)] = { PRODUCT0_PATH MIL_TEXT(\"View0.avi\"), PRODUCT0_PATH MIL_TEXT(\"View1.avi\"), PRODUCT0_PATH MIL_TEXT(\"View2.avi\") }; //***************************************************************************** // The product info structure that indicates the task and avi to load. SProductInfo ProductsInfoList[] = { { ARRAY_COUNT(Prod0ImagesTaskList), enParallel, Prod0ImagesAvi, Prod0ImagesTaskList } }; //***************************************************************************** // Allocate application. MIL_ID MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_NULL); // Allocate system. MIL_ID MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_NULL); MosPrintf(MIL_TEXT(\"CENTERED LABEL INSPECTION:\\n\")); MosPrintf(MIL_TEXT(\"---------------------------------------\\n\\n\")); // Print the header. PrintHeader(); // Allocate the example manager. CExampleMngr *pExampleManager = new CExampleMngr(MilSystem); // Run the example. pExampleManager-&gt;Run(ProductsInfoList, ARRAY_COUNT(ProductsInfoList)); // Free the example manager. delete pExampleManager; // Free the system. MsysFree(MilSystem); // Free the application. MappFree(MilApplication); return 0; } ",
      "wordCount": 642
    },
    {
      "id": "Examples_Processing_ProductInspection_CenteredLabelInspection_CPP_lidcolorsverification_cpp",
      "version": "2024020714",
      "title": "lidcolorsverification.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: LidColorsVerification.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the declaration of the CLidColorsVerification class // which is the inspection task used to verify the colors of the lid. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"LidColorsVerification.h\" //***************************************************************************** // Constructor. //***************************************************************************** CLidColorsVerification::CLidColorsVerification(MIL_CONST_TEXT_PTR ColContextPath, const MIL_INT* ExpectedMatches, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CColorMatchTask(ColContextPath, ExpectedMatches, ColorConversion, FixtureProvider, ImageProvider, RegionProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CLidColorsVerification::~CLidColorsVerification() { } //***************************************************************************** // Get the best match label //***************************************************************************** MIL_CONST_TEXT_PTR CLidColorsVerification::GetBestMatchLabel(MIL_INT MatchIdx) const { if(MatchIdx == -1) return MIL_TEXT(\"Color Fail\"); else return MIL_TEXT(\"Color Pass\"); } ",
      "wordCount": 137
    },
    {
      "id": "Examples_Processing_ProductInspection_CenteredLabelInspection_CPP_lididentification_cpp",
      "version": "2024020714",
      "title": "lididentification.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: LidColorsVerification.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the declaration of the CLidColorsVerification class // which is the inspection task used to verify the colors of the lid. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"LidIdentification.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CLidIdentification::CLidIdentification(MIL_CONST_TEXT_PTR PatContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */, CInspectionTask* RegionProvider /* = M_NULL */) : CPatMatchingTask(PatContextPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CLidIdentification::~CLidIdentification() { } //***************************************************************************** // Draw graphical result. //***************************************************************************** void CLidIdentification::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(IsResultValid()) { CPatMatchingTask::DrawGraphicalResult(MilGraContext, MilDest); MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MpatDraw(MilGraContext, MilResult(), MilDest, M_DRAW_BOX, M_DEFAULT, M_DEFAULT); } } //***************************************************************************** // Draw text result. //***************************************************************************** void CLidIdentification::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid pattern identification: UNKNOWN\")); } else { if(IsResultValid()) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid pattern identification: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid pattern identification: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 201
    },
    {
      "id": "Examples_Processing_ProductInspection_CenteredLabelInspection_CPP_metrologyalignment_cpp",
      "version": "2024020714",
      "title": "metrologyalignment.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: MetrologyAlignment.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CMetrologyAlignment class // which is the inspection task used check if the lid is present and ok // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"MetrologyAlignment.h\" //***************************************************************************** // Constants. //***************************************************************************** static const MIL_INT NB_FEATURE_TO_DRAW = 2; static MIL_CONST_TEXT_PTR FEATURES_TO_DRAW[NB_FEATURE_TO_DRAW] = { MIL_TEXT(\"InnerCircle\"), MIL_TEXT(\"OuterCircle\") }; static const MIL_INT NB_TOLERANCE_TO_DRAW = 1; static MIL_CONST_TEXT_PTR TOLERANCES_TO_DRAW[NB_TOLERANCE_TO_DRAW] = { MIL_TEXT(\"Concentricity\"), }; //***************************************************************************** // Constructor. //***************************************************************************** CMetrologyAlignment::CMetrologyAlignment(MIL_CONST_TEXT_PTR MetContextPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMetInspectionTask(MetContextPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CMetrologyAlignment::~CMetrologyAlignment() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CMetrologyAlignment::Calculate(MIL_ID MilImage) { if(CMetInspectionTask::Calculate(MilImage)) { // Get the status of the inner circle used as the fixture for the subsequent tests. MIL_INT Label; MmetName(MilContext(), M_GET_FEATURE_LABEL, M_DEFAULT, const_cast&lt;MIL_TEXT_PTR&gt;(MIL_TEXT(\"InnerCircle\")), &amp;Label, M_DEFAULT); MIL_INT Status; MmetGetResult(MilResult(), M_FEATURE_LABEL(Label), M_STATUS + M_TYPE_MIL_INT, &amp;Status); if(Status == M_PASS) return true; else return false; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CMetrologyAlignment::SetFixture() { // Get the label of the inner circle. MIL_INT Label; MmetName(MilContext(), M_GET_FEATURE_LABEL, M_DEFAULT, const_cast&lt;MIL_TEXT_PTR&gt;(MIL_TEXT(\"InnerCircle\")), &amp;Label, M_DEFAULT); // Get the center of the inner circle. MIL_DOUBLE CenterX, CenterY; MmetGetResult(MilResult(), M_FEATURE_LABEL(Label), M_POSITION_X, &amp;CenterX); MmetGetResult(MilResult(), M_FEATURE_LABEL(Label), M_POSITION_Y, &amp;CenterY); // Set the output fixture. SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, CenterX, CenterY, 0.0, M_DEFAULT); } //***************************************************************************** // Draw the graphical result. //***************************************************************************** void CMetrologyAlignment::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the features for(MIL_INT FeatureIdx = 0; FeatureIdx &lt; NB_FEATURE_TO_DRAW; FeatureIdx++) CMetInspectionTask::DrawFeatureByName(MilGraContext, FEATURES_TO_DRAW[FeatureIdx], MilDest, M_RGB888(64, 0, 128)); // Draw the tolerances for(MIL_INT ToleranceIdx = 0; ToleranceIdx &lt; NB_TOLERANCE_TO_DRAW; ToleranceIdx++) CMetInspectionTask::DrawToleranceByName(MilGraContext, TOLERANCES_TO_DRAW[ToleranceIdx], MilDest, M_COLOR_DARK_GREEN, M_COLOR_DARK_RED, M_COLOR_DARK_YELLOW); } //***************************************************************************** // Draw text result. //***************************************************************************** void CMetrologyAlignment::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid metrology: UNKNOWN\")); } else { if(IsResultValid()) { switch(GetOverallStatus()) { case M_PASS: MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid metrology: PASS\")); break; case M_WARNING: MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid metrology: WARNING\")); break; default: case M_FAIL: MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid metrology: FAIL\")); break; } } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Lid metrology: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 386
    }
  ]
}]