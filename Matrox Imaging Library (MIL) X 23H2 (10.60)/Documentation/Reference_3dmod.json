[{
  "id": "Reference_3dmod",
  "version": "2024020714",
  "title": "3dmod",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\3dmod\\ModuleInformation.htm",
  "text": " M3dmod functions Synopsis The functions prefixed with M3dmod make up the 3D model finder module. Functions M3dmodAlloc M3dmodAllocResult M3dmodControl M3dmodControlDraw M3dmodCopy M3dmodCopyResult M3dmodDefine M3dmodDraw3d M3dmodFind M3dmodFree M3dmodGetResult M3dmodInquire M3dmodInquireDraw M3dmodModifyResult M3dmodPreprocess M3dmodRestore M3dmodSave M3dmodStream ",
  "wordCount": 36,
  "subEntries": [
    {
      "id": "Reference_3dmod_M3dmodAlloc",
      "version": null,
      "title": "M3dmodAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodAlloc.htm",
      "text": " M3dmodAlloc Synopsis Allocate a 3D model finder context. Syntax MIL_ID M3dmodAlloc( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ContextType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dmodIdPtr //out ) Description This function allocates a 3D model finder context on the specified system. A 3D model finder context contains information needed to perform a M3dmodFind() search. You can also use M3dmodAlloc() to allocate a draw 3D model finder context for drawing results using M3dmodDraw3d(). Define and add a model to the model finder context using M3dmodControl(). You can define one model per model finder context. When the 3D model finder context is no longer required, release it using M3dmodFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D model finder context's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the identifier of the system on which to allocate the 3D model finder context. Set this parameter to one of the values below: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ContextType Specifies the type of 3D model finder context to allocate. Set this parameter to one of the values below: For specifying the type of 3D model context Value Description M_DRAW_3D_GEOMETRIC_CONTEXT Allocates a draw geometric 3D model finder context for use with M3dmodDraw3d(). M_DRAW_3D_SURFACE_CONTEXT Allocates a draw surface 3D model finder context for use with M3dmodDraw3d(). M_FIND_BOX_CONTEXT Allocates a find box 3D model finder context for use with M3dmodFind(). M_FIND_CYLINDER_CONTEXT Allocates a find cylinder 3D model finder context for use with M3dmodFind(). M_FIND_RECTANGULAR_PLANE_CONTEXT Allocates a find rectangular plane 3D model finder context for use with M3dmodFind(). M_FIND_SPHERE_CONTEXT Allocates a find sphere 3D model finder context for use with M3dmodFind(). M_FIND_SURFACE_CONTEXT Allocates a find surface 3D model finder context for use with M3dmodFind(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Context3dmodIdPtr Specifies the address of the variable in which to write the 3D model finder context identifier or specifies the data type that the function should use to return the 3D model finder context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D model finder context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D model finder context ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DMOD_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D model finder context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the draw geometric 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw geometric 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the draw surface 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated draw surface 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the find box 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated box 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the find cylinder 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated cylinder 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the find rectangular plane 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated rectangular plane 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the find sphere 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated sphere 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Address in which to write the find surface 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated sphere 3D model finder context identifier. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D model finder context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DMOD_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - SysId For specifying the system - ContextType For specifying the type of 3D model context - ControlFlag - Context3dmodIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 917,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodAllocResult",
      "version": null,
      "title": "M3dmodAllocResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodAllocResult.htm",
      "text": " M3dmodAllocResult Synopsis Allocate a 3D model finder result buffer. Syntax MIL_ID M3dmodAllocResult( MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ResultType, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Result3dmodIdPtr //out ) Description This function allocates a 3D model finder result buffer, on the specified system, to store results obtained from an M3dmodFind() operation. When the 3D model finder result buffer is no longer required, release it using M3dmodFree() unless M_UNIQUE_ID was specified during allocation; if M_UNIQUE_ID was specified, the smart identifier manages the 3D model finder result buffer's lifetime and you must not manually free it. Parameters Parameters SysId Specifies the system on which to allocate the result buffer. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ResultType Specifies the type of result buffer to allocate. For specifying the type of result buffer to allocate Value Description M_FIND_BOX_RESULT Specifies to allocate a box 3D model finder result buffer used to store M3dmodFind() results. M_FIND_CYLINDER_RESULT Specifies to allocate a cylinder 3D model finder result buffer used to store M3dmodFind() results. M_FIND_RECTANGULAR_PLANE_RESULT Specifies to allocate a rectangular plane 3D model finder result buffer used to store M3dmodFind() results. M_FIND_SPHERE_RESULT Specifies to allocate a sphere 3D model finder result buffer used to store M3dmodFind() results. M_FIND_SURFACE_RESULT Specifies to allocate a surface 3D model finder result buffer used to store M3dmodFind() results. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Result3dmodIdPtr Specifies the address of the variable in which to write the 3D model finder result buffer identifier or specifies the data type that the function should use to return the 3D model finder result buffer identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D model finder result buffer ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D model finder result buffer ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DMOD_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D model finder result buffer (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the box 3D model finder result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated box 3D model finder result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the cylinder 3D model finder result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated cylinder 3D model finder result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the rectangular plane 3D model finder result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated rectangular plane 3D model finder result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the sphere 3D model finder result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated sphere 3D model finder result buffer. If allocation fails, M_NULL is written as the identifier. Address in which to write the surface 3D model finder result buffer identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated surface 3D model finder result buffer. If allocation fails, M_NULL is written as the identifier. Return value The returned value is the 3D model finder result buffer identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DMOD_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - SysId For specifying the system - ResultType For specifying the type of result buffer to allocate - ControlFlag - Result3dmodIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 773,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodControl",
      "version": null,
      "title": "M3dmodControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodControl.htm",
      "text": " M3dmodControl Synopsis Control a setting of a find 3D model finder context or result buffer. Syntax void M3dmodControl( MIL_ID&nbsp;ContextOrResult3dmodId, //in MIL_INT64&nbsp;Index, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls a specified setting of a find 3D model finder context or result buffer. These settings control the execution of M3dmodFind(). You can inquire about most of these settings using M3dmodInquire(). Note that changing control type settings of a 3D model finder context requires preprocessing the context again, using M3dmodPreprocess(). To control draw 3D model finder context settings, use M3dmodControlDraw() instead. Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dmodControl() internally calls the MIL_DOUBLE version of this function (M3dmodControlDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (M3dmodControlInt64()). Parameters Parameters ContextOrResult3dmodId Specifies the identifier of the find 3D model finder context or result buffer to control. The find 3D model finder context or result buffer must have been previously allocated on the required system using M3dmodAlloc() with M_FIND_..._CONTEXT or M3dmodAllocResult(), respectively. See the Parameter associations section for possible values that can be specified. Index Specifies what to control. Set this parameter to one of the following values: For specifying a general context, result buffer or individual model Value Description M_DEFAULT Specifies the default value. If a find 3D model finder context is specified, same as M_CONTEXT. If a find 3D model finder result buffer is specified, same as M_GENERAL. M_CONTEXT Specifies to control a setting of a specified find 3D model finder context. M_GENERAL Specifies to control a general setting of a specified find 3D model finder result buffer. 0 Specifies to control the 3D model defined in the context. Note that the model must have been added to the context, using M3dmodDefine(), prior to calling M3dmodControl() with this value. ControlType Specifies the setting to change. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ContextOrResult3dmodId, ControlType, and ControlValue parameters. For controlling a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context For controlling a box, cylinder, rectangular plane, sphere, or surface 3D model For a 3D model finder result buffer The following ContextOrResult3dmodId, ControlType, and ControlValue parameter settings can be specified for a find 3D model finder context when Index is set to M_CONTEXT or M_DEFAULT. For controlling a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context ContextOrResult3dmodId Description ControlType ControlValue Find box 3D model finder context ID Specifies a find box 3D model finder context, allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT, and used in M3dmodFind() operations. M_DIRECTION_MODE Sets how to interpret the reference direction (M_DIRECTION_REFERENCE_...). The reference direction typically matches the position of your 3D sensor or the direction of the 3D sensor's line of sight. When you know the exact position of the 3D sensor, set this control type to M_AWAY_FROM_POSITION or M_TOWARDS_POSITION, and set M_DIRECTION_REFERENCE_... to the 3D sensor's position. When you only know the direction of the 3D sensor's line of sight, set this control type to M_TOWARDS_DIRECTION, and set M_DIRECTION_REFERENCE_... to the components of the vector that points in this direction. The reference direction establishes when a single plane should be considered a box occurrence (when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1), given the line of sight of the 3D sensor and the specified completion tolerance (M_COMPLETION_ANGLE_TOLERANCE). M_DIRECTION_MODE specifies how to interpret the reference direction and the direction in which the box should be extruded (typically, M_AWAY_FROM_POSITION or M_TOWARDS_DIRECTION). M_DEFAULT Same as M_TOWARDS_DIRECTION. M_AWAY_FROM_POSITION Specifies to interpret the reference direction as away from the position specified using M_DIRECTION_REFERENCE_.... M_TOWARDS_DIRECTION Specifies to interpret the reference direction as towards the direction specified using M_DIRECTION_REFERENCE_.... M_TOWARDS_POSITION Specifies to interpret the reference direction as towards the position specified using M_DIRECTION_REFERENCE_.... M_DIRECTION_REFERENCE_X Sets the X-coordinate of the position, or the X-component of the vector, that determines the reference direction, depending on M_DIRECTION_MODE. The reference direction is used to identify the location of the 3D sensor when it acquired the target point cloud, so the reference direction should match the position of your 3D sensor or the direction of the 3D sensor's line of sight. For a find box 3D model finder context, this control type is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the X-coordinate of the position or the X-component of the vector. M_DIRECTION_REFERENCE_Y Sets the Y-coordinate of the position, or the Y-component of the vector, that determines the reference direction, depending on M_DIRECTION_MODE. The reference direction is used to identify the location of the 3D sensor when it acquired the target point cloud, so the reference direction should match the position of your 3D sensor or the direction of the 3D sensor's line of sight. For a find box 3D model finder context, this control type is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the Y-coordinate of the position or the Y-component of the vector. M_DIRECTION_REFERENCE_Z Sets the Z-coordinate of the position, or the Z-component of the vector, that determines the reference direction, depending on M_DIRECTION_MODE. The reference direction is used to identify the location of the 3D sensor when it acquired the target point cloud, so the reference direction should match the position of your 3D sensor or the direction of the 3D sensor's line of sight. For a find box 3D model finder context, this control type is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Specifies the default value; the default value is -1.0. Value Specifies the Z-coordinate of the position or the Z-component of the vector. M_FIT_DISTANCE Sets the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. The fit distance is used when determining whether points belong to a certain occurrence. Typically, to set an appropriate value, use the automatic fit distance as a baseline and adjust accordingly. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Sets how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_SORT Sets the sorting key for result retrieval. This is useful, for example, to retrieve the results of the highest occurrence first (the one with the highest Z-coordinate), instead of retrieving those with the highest score first. M_DEFAULT Same as M_SCORE. M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_VOLUME Specifies to sort results by the volume of the occurrence. M_SORT_DIRECTION Sets whether results are sorted in ascending or descending order. M_DEFAULT Same as M_SORT_DOWN. M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Sets the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find cylinder 3D model finder context ID Specifies a find cylinder 3D model finder context, allocated using M3dmodAlloc() with M_FIND_CYLINDER_CONTEXT, and used in M3dmodFind() operations. M_FIT_DISTANCE Sets the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. The fit distance is used when determining whether points belong to a certain occurrence. Typically, to set an appropriate value, use the automatic fit distance as a baseline and adjust accordingly. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Sets how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_FIT_NORMALS_DISTANCE Sets the acceptable deviation between a given point's normal vector and the normal vector of the model at the same point, to decide which points are used when fitting. Model points whose normal vector falls outside the specified deviation are not used to perform the occurrence's fit operation. M_DEFAULT Specifies the default value; the default value is 10.0 degrees. 0.0 &lt; Value &lt;= 90.0 Specifies the acceptable deviation from the normal vector of the model at the same point, in degrees. M_PERSEVERANCE Sets the algorithm's search perseverance when searching for occurrences. This affects the number of times the algorithm tries to find occurrences before giving up. Increasing the perseverance will increase robustness and accuracy, but will increase search time. You should try increasing the perseverance if the search is not finding the specified number of occurrences or if the target is complex. M_DEFAULT Specifies the default value; the default value is 20.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the algorithm's search perseverance, as a percentage. M_SORT Sets the sorting key for result retrieval. This is useful, for example, to retrieve the results of the highest occurrence first (the one with the highest Z-coordinate), instead of retrieving those with the highest score first. M_DEFAULT Same as M_SCORE. M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. The center point of the cylinder occurrence is the center point on the cylinder's central axis. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. The center point of the cylinder occurrence is the center point on the cylinder's central axis. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. The center point of the cylinder occurrence is the center point on the cylinder's central axis. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_VOLUME Specifies to sort results by the volume of the occurrence. M_SORT_DIRECTION Sets whether results are sorted in ascending or descending order. M_DEFAULT Same as M_SORT_DOWN. M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Sets the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find rectangular plane 3D model finder context ID Specifies a find rectangular plane 3D model finder context, allocated using M3dmodAlloc() with M_FIND_RECTANGULAR_PLANE_CONTEXT, and used in M3dmodFind() operations. M_FIT_DISTANCE Sets the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. The fit distance is used when determining whether points belong to a certain occurrence. Typically, to set an appropriate value, use the automatic fit distance as a baseline and adjust accordingly. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Sets how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_SORT Sets the sorting key for result retrieval. This is useful, for example, to retrieve the results of the highest occurrence first (the one with the highest Z-coordinate), instead of retrieving those with the highest score first. M_DEFAULT Same as M_SCORE. M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. The center point of the rectangular plane occurrence is the center point of the rectangular plane's bounding box. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. The center point of the rectangular plane occurrence is the center point of the rectangular plane's bounding box. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. The center point of the rectangular plane occurrence is the center point of the rectangular plane's bounding box. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_SORT_DIRECTION Sets whether results are sorted in ascending or descending order. M_DEFAULT Same as M_SORT_DOWN. M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Sets the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find sphere 3D model finder context ID Specifies a find sphere 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SPHERE_CONTEXT, and used in M3dmodFind() operations. M_FIT_DISTANCE Sets the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. The fit distance is used when determining whether points belong to a certain occurrence. Typically, to set an appropriate value, use the automatic fit distance as a baseline and adjust accordingly. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Sets how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_FIT_ITERATIONS_MAX Sets the maximum number of fit iterations to perform, when finding a sphere occurrence. More iterations increase fit accuracy, but increase search times. For a very tight tolerance, you can use a wider range with an initial search, and then repeat using a tighter range. M_DEFAULT Specifies the default value; the default value is 1. Value &gt;= 1 Specifies the maximum number of sphere fit iterations. M_FIT_NORMALS_DISTANCE Sets the acceptable deviation between a given point's normal vector and the normal vector of the model at the same point, to decide which points are used when fitting. Model points whose normal vector falls outside the specified deviation are not used to perform the occurrence's fit operation. M_DEFAULT Specifies the default value; the default value is 10.0 degrees. 0.0 &lt; Value &lt;= 90.0 Specifies the acceptable deviation from the normal vector of the model at the same point, in degrees. M_PERSEVERANCE Sets the algorithm's search perseverance when searching for occurrences. This affects the number of times the algorithm tries to find occurrences before giving up. Increasing the perseverance will increase robustness and accuracy, but will increase search time. You should try increasing the perseverance if the search is not finding the specified number of occurrences or if the target is complex. M_DEFAULT Specifies the default value; the default value is 20.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the algorithm's search perseverance, as a percentage. M_SORT Sets the sorting key for result retrieval. This is useful, for example, to retrieve the results of the highest occurrence first (the one with the highest Z-coordinate), instead of retrieving those with the highest score first. M_DEFAULT Same as M_SCORE. M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_VOLUME Specifies to sort results by the volume of the occurrence. M_SORT_DIRECTION Sets whether results are sorted in ascending or descending order. M_DEFAULT Same as M_SORT_DOWN. M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Sets the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find surface 3D model finder context ID Specifies a find surface 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT, and used in M3dmodFind() operations. M_CONVERSION_GAMMA Sets whether to remove gamma correction before the match. Gamma correction refers to color data that has been processed, typically during data acquisition (that is, by the camera doing the grab), to compensate for a non-linear transformation between a point's component value and its displayed intensity. If gamma correction has been applied on the RGB source color data, you must remove it. Note that this control type is only used and should only be enabled when M_USE_COLOR is set to M_ENABLE. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to remove gamma correction. In this case, your RGB color data should not be in a corrected state (it should be linear). For example, the camera capturing the RGB color data has not applied a gamma correction. M_ENABLE Specifies to remove gamma correction. In this case, your RGB color data should be in a corrected state (it should be non-linear). For example, the camera capturing the RGB color data has applied a gamma correction. M_DIRECTION_MODE Sets how to interpret the reference direction (M_DIRECTION_REFERENCE_...). The reference direction typically matches the direction of the 3D sensor's line of sight. Set this control type to M_TOWARDS_DIRECTION, and set M_DIRECTION_REFERENCE_... to the components of the vector that points in this direction. For a find surface 3D model finder context, this control type establishes which part of the model would be occluded at the position of an occurrence when calculating the score and M_SCENE_PROJECTION is enabled, given the line of sight of 3D sensor. M_DIRECTION_MODE specifies how to interpret the reference direction and the direction of projection. M_DEFAULT Same as M_TOWARDS_DIRECTION. M_TOWARDS_DIRECTION Specifies to interpret the reference direction as towards the direction specified using M_DIRECTION_REFERENCE_.... M_DIRECTION_REFERENCE_X Sets the X-component of the vector that determines the reference direction, depending on M_DIRECTION_MODE. The reference direction is used to identify the location of the 3D sensor when it acquired the target point cloud, so the reference direction should match the direction of the 3D sensor's line of sight. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the X-component of the vector. M_DIRECTION_REFERENCE_Y Sets the Y-component of the vector that determines the reference direction, depending on M_DIRECTION_MODE. The reference direction is used to identify the location of the 3D sensor when it acquired the target point cloud, so the reference direction should match the direction of the 3D sensor's line of sight. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the Y-component of the vector. M_DIRECTION_REFERENCE_Z Sets the Z-component of the vector that determines the reference direction, depending on M_DIRECTION_MODE. The reference direction is used to identify the location of the 3D sensor when it acquired the target point cloud, so the reference direction should match the direction of the 3D sensor's line of sight. M_DEFAULT Specifies the default value; the default value is 1.0. Value Specifies the Z-component of the vector. M_EXHAUSTIVE_SEARCH Sets whether to perform very robust but slow exhaustive searching. When exhaustive searching is enabled, all possibilities are tried, and M_PERSEVERANCE is ignored. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to disable exhaustive searching. M_ENABLE Specifies to enable exhaustive searching. M_FIT_DISTANCE Sets the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. The fit distance is used when determining whether points belong to a certain occurrence. Typically, to set an appropriate value, use the automatic fit distance as a baseline and adjust accordingly. Note that for a find surface 3D model finder context, this control type is only used when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED and M_SAVE_FIT_INFO is enabled. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Sets how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. Note that for a find surface 3D model finder context, this control type is only used when M_SAVE_FIT_INFO is enabled. In this case, M_FIT_DISTANCE_MODE and, if applicable, M_FIT_DISTANCE only determine the fit distance when calculating the RMS error and the fit score. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_MODEL_NORMAL_SEARCH_MODE Sets the search mode for calculating model normals when the defined model has no normals component (M_COMPONENT_NORMALS_MIL). M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically set the search mode based on the point cloud's organization; either M_ORGANIZED if organized or M_TREE if unorganized. M_ORGANIZED Specifies to use the point cloud's organizational structure to determine the model normals. This option is supported only for an organized point cloud. M_TREE Specifies to use a KD tree search mode to determine the model normals. M_PERSEVERANCE Sets the algorithm's search perseverance when searching for occurrences. This affects the number of times the algorithm tries to find occurrences before giving up. Increasing the perseverance will increase robustness and accuracy, but will increase search time. You should try increasing the perseverance if the search is not finding the specified number of occurrences or if the target is complex and increasing the setting of M_SCENE_COMPLEXITY is insufficient. You should also try increasing perseverance if the model is not well-defined (for example, it has multiple areas that look alike). M_DEFAULT Specifies the default value; the default value is 20.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the algorithm's search perseverance, as a percentage. M_REFINE_REGISTRATION Sets whether and how to perform refine registration of each occurrence found. By default, for a surface model, MIL uses the features of the model and target to find occurrences, but it doesn't do any fitting. To get more accurate score and pose information, you should enable refine registration. When enabled, 3D registration is internally performed between the model and each of the found occurrences. You can set M_REFINE_REGISTRATION to use a predefined or a custom registration context. Note that enabling refine registration increases processing time. To calculate and retrieve the root-mean square (RMS) error and fit score of the occurrences, enable M_SAVE_FIT_INFO. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to disable refine registration. M_FIND_SURFACE_REFINEMENT_FAST Specifies to use a predefined registration context that prioritizes performance to fine-tune results. M_FIND_SURFACE_REFINEMENT_PRECISE Specifies to use a predefined registration context that prioritizes accuracy to fine-tune results. M_USER_DEFINED_REGISTRATION Specifies to use a custom registration context. Inquire the identifier of the internal registration context using M3dmodInquire() with M_USER_DEFINED_REGISTRATION_CONTEXT_ID, and then use M3dregControl() to configure the context. You can also use M3dmodCopy() with M_REFINE_REGISTRATION to initialize the internal context with the settings of a predefined registration context, and then adjust a few settings using M3dregControl. M_REMOVE_BACKGROUND Sets whether to remove background points from the target point cloud before performing the match. Background points include those of objects that are too big or too small to be part of an occurrence of the model. You should enable M_REMOVE_BACKGROUND for scenes that are very complex. Note that removing the background takes some time, but sometimes makes the match faster. You can use M3dmodDraw3d() to draw the points that were considered background points (M3dmodControlDraw() with M_DRAW_BACKGROUND_POINTS). Note that M_REMOVE_BACKGROUND does not currently use the floor plane nor the resting plane (M3dmodCopy() with M_FLOOR or M_RESTING_PLANE) to establish which points to remove. You can remove floor points, using M_REMOVE_FLOOR. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to remove background points. M_ENABLE Specifies to remove background points. M_REMOVE_BACKGROUND_SEARCH_MODE Sets the search mode for finding the background points when M_REMOVE_BACKGROUND is enabled. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically set the search mode based on the organization of the point clouds; either M_ORGANIZED if organized or M_TREE if unorganized. M_ORGANIZED Specifies to use the organizational structure of the point clouds to determine the background points. This option is supported only if the model and target point clouds are organized. M_TREE Specifies to use a KD tree search mode to determine the background points. M_REMOVE_FLOOR Sets whether to remove floor points from the target point cloud before performing the match. Points located either above or below (M_REMOVE_FLOOR_DIRECTION) the floor plane (M3dmodCopy() with M_FLOOR), that fall within the specified distance (M_REMOVE_FLOOR_OFFSET), are removed when this control type is enabled. Note that removing the floor points takes some time, but sometimes makes the match faster. You can use M3dmodDraw3d() to draw the points that were considered floor points (M3dmodControlDraw() with M_DRAW_FLOOR_POINTS). M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to remove floor points. M_ENABLE Specifies to remove floor points. M_REMOVE_FLOOR_DIRECTION Sets the direction, relative to the defined floor plane, in which to remove points when M_REMOVE_FLOOR is enabled. Use M_REMOVE_FLOOR_OFFSET to set the distance from the floor plane in which to remove points. You can use M3dmodDraw3d() to draw the points that were considered floor points (M3dmodControlDraw() with M_DRAW_FLOOR_POINTS). M_DEFAULT Same as M_AUTO. M_ABOVE Specifies to remove points above the floor plane. M_AUTO Specifies to remove points in the direction with the least number of valid points. The points on the side of the floor with the larger number of valid points are assumed to belong to actual objects, not noise. M_BELOW Specifies to remove points below the floor plane. M_REMOVE_FLOOR_OFFSET Sets the offset, relative to the defined floor plane, within which to remove points when M_REMOVE_FLOOR is enabled. Use M_REMOVE_FLOOR_DIRECTION to set whether to remove points above or below the floor plane. You can use M3dmodDraw3d() to draw the points that were considered floor points (M3dmodControlDraw() with M_DRAW_FLOOR_POINTS). M_DEFAULT Same as M_AUTO_VALUE. M_AUTO_VALUE Specifies to automatically determine the offset within which to remove points. Value &gt;= 0.0 Specifies the offset within which to remove points. M_REUSE_RESULT Sets whether to reuse the result of the previous search at the beginning of the current search. If you expect occurrences to be found in similar locations to the occurrences found in a previous search, you can enable this control and pass the result buffer containing the results to M3dmodFind() to speed up the operation. The algorithm will search for occurrences at the previously found positions, and then resume with the search if more occurrences are expected. Note that if you want to reuse the same results for multiple searches, you must avoid passing that result buffer to M3dmodFind() again, so as not to change the stored results. You should set up two result buffers: one for the initial search and another for use with subsequent searches. Before each subsequent search, copy into its result buffer the results from the initial search, using M3dmodCopyResult() with M_RESULT, and use this result buffer for the search. You can use M3dmodModifyResult() to modify or delete results before performing the next search. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to reuse the previous result. M_ENABLE Specifies to reuse the previous result. M_SAVE_FIT_INFO Sets whether to enable the calculation of the root-mean square (RMS) error and the fit score. When enabled, besides being able to obtain these results, you can filter out occurrences based on the minimum required fit score (M_FIT_SCORE_MIN) and the maximum fit distance (M_FIT_DISTANCE_MODE and M_FIT_DISTANCE). Note that M_SAVE_FIT_INFO and its related settings have no effect on M_REFINE_REGISTRATION, and vice versa. Even if refine registration is enabled, you must enable M_SAVE_FIT_INFO to calculate and retrieve the root-mean square (RMS) error and the fit score; when calculating these, M_FIT_DISTANCE_MODE and M_FIT_DISTANCE are used, and not the settings of the refine registration. M_DISABLE Specifies to disable the calculation of the root-mean square (RMS) error and the fit score. This is the default value. M_ENABLE Specifies to enable the calculation of the root-mean square (RMS) error and the fit score. M_SCENE_COMPLEXITY Sets the complexity of the scene. It sets how much of the target data belongs to the occurrence. For example, if the target scene contains one occurrence of the model on a simple background, setting M_SCENE_COMPLEXITY to M_LOW should be sufficient to find the occurrence. Whereas, if the target scene is busy and contains many similar features as the model, you should set M_SCENE_COMPLEXITY to M_MEDIUM or M_HIGH. Higher settings result in a more robust operation, but typically take more time. M_DEFAULT Same as M_MEDIUM. M_HIGH Specifies that the scene has a high complexity. M_LOW Specifies that the scene has a low complexity. M_MEDIUM Specifies that the scene has a medium complexity. M_SCENE_PROJECTION Sets whether to apply occlusion handling to the model. This discards points of the model that would be occluded at the position of an occurrence, given the line of sight of the 3D sensor, before comparing the model to the occurrence during the refine registration and score calculation. This prevents the occurrences' scores from being lowered due to how the scene was acquired. MIL uses the reference direction (M_DIRECTION_REFERENCE_...) to determine the line of sight and direction of projection. The default (0,0,1), provides a projection along the 3D sensor's Z-axis. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies to disable occlusion handling. M_ENABLE Specifies to enable occlusion handling. M_SORT Sets the sorting key for result retrieval. This is useful, for example, to retrieve the results of the highest occurrence first (the one with the highest Z-coordinate), instead of retrieving those with the highest score first. M_DEFAULT Same as M_SCORE. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. The center point of the surface occurrence is the center of the surface's bounding box. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. The center point of the surface occurrence is the center of the surface's bounding box. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. The center point of the surface occurrence is the center of the surface's bounding box. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NO_SORT Specifies not to sort the results; found occurrences are returned in an arbitrary order. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. Note that this control value is only available when M_SAVE_FIT_INFO is set to M_ENABLE. M_SCORE Specifies to sort the results by the score. M_SCORE_COLOR Specifies to sort results by the color score. Note that this control value is only available when M_USE_COLOR is set to M_ENABLE. M_SCORE_FIT Specifies to sort results by the fit score. Note that this control value is only available when M_SAVE_FIT_INFO is set to M_ENABLE. M_SCORE_TARGET Specifies to sort results by the target score. M_SORT_DIRECTION Sets whether results are sorted in ascending or descending order. M_DEFAULT Same as M_SORT_DOWN. M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Sets the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. M_USE_COLOR Sets whether to use the color information of the model and scene when searching for surface occurrences. This is useful when the model is similar in shape to other background objects in the scene, but has a different color distribution. When enabled, an occurrence will be returned only if its color score is greater than or equal to the color score acceptance level (M_ACCEPTANCE_COLOR). The color data is assumed to be in RGB format and stored in either the reflectance or intensity component of the respective point cloud container. The component must be a 3-band 8-bit unsigned buffer and have the same dimensions as the range component. The reflectance component is used if a valid reflectance component exists in the container. If a valid reflectance component does not exist and the container has a valid intensity component, the intensity component is used. Note that if gamma correction has been applied on the RGB source color data and you enable this control type, you must remove it, using M_CONVERSION_GAMMA set to M_ENABLE. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to use the color information. M_ENABLE Specifies to use the color information. The following ContextOrResult3dmodId, ControlType, and ControlValue parameter settings can be specified for a box, cylinder, rectangular plane, sphere, or surface 3D model when Index is set to 0. For controlling a box, cylinder, rectangular plane, sphere, or surface 3D model ContextOrResult3dmodId Description ControlType ControlValue Find box 3D model finder context ID with a box model Specifies a find box 3D model finder context, allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT, and used in M3dmodFind() operations. It must contain a box model. M_ACCEPTANCE Sets the acceptance level for the score. An occurrence will be returned only if the match score between the target and the model is greater than or equal to this level. The score is a measure, as a percentage, of the total coverage of the occurrence that matches the given model. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. Set the maximum expected coverage with M_COVERAGE_MAX. M_DEFAULT Specifies the default value; the default value is 60.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies an acceptable score, as a percentage. M_BOX_FACE_PARALLELISM_THRESHOLD Sets the maximum shear angle allowed between adjacent rectangles for them to be considered faces of the same box occurrence. M_DEFAULT Specifies the default value; the default value is 20.0. 0.0 &lt; Value &lt;= 45.0 Specifies the maximum angle, in degrees. M_BOX_FACE_PERPENDICULARITY_THRESHOLD Sets the maximum deviation from 90 degrees allowed between adjacent rectangles for them to be considered faces of the same box occurrence. M_DEFAULT Specifies the default value; the default value is 10.0. 0.0 &lt; Value &lt;= 90.0 Specifies the maximum angle, in degrees. M_CERTAINTY Sets the certainty level for the score, as a percentage. If the score is greater than or equal to the specified certainty level, the occurrence is considered a match, without searching the rest of the target for better matches (provided the specified number of occurrences has been found). The certainty level is defined relative to the maximum expected model coverage, such that setting M_CERTAINTY to 100% indicates that certain matches must have a total model coverage equal to the maximum expected model coverage. M_DEFAULT Specifies the default value; the default value is 90.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty level for the score, as a percentage. If you set the certainty level too high (close to 100.0%), you slow down the search because you force the search algorithm to check the whole point cloud for the best possible match(es). A good certainty level is slightly lower than the expected score, so that the search can finish as soon as a match is found. However, if you set the certainty level too low, false matches might be found. M_COMPLETION_ANGLE_TOLERANCE Sets the completion angular tolerance, when only one box face (plane) is found. MIL only extrudes the face if its normal is less than the specified number of degrees away from the reference direction (M_DIRECTION_REFERENCE_...). This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. Note that when only one box face is found, and the completion angular tolerance is not met, the occurrence is not returned as a match. M_DEFAULT Specifies the default value; the default value is 90.0. 0.0 &lt; Value &lt;= 90.0 Specifies the completion angular tolerance, when only one box face (plane) is found. M_COMPLETION_SIZE_X Sets the length along X to use to establish the missing dimension, when only one box face (plane) is found. MIL compares the plane's two dimensions (length and width) to the specified completion sizes (M_COMPLETION_SIZE_...). The most dissimilar size determines the missing dimension. If M_COMPLETION_TO_USER_SIZE is enabled, the M_COMPLETION_SIZE_... of the missing dimension will be the length to which MIL extrudes the visible face to complete the box, unless M_COMPLETION_TO_BACKGROUND and/or M_COMPLETION_TO_STAIRCASE are also enabled. If M_COMPLETION_TO_BACKGROUND and M_COMPLETION_TO_STAIRCASE are enabled, MIL will attempt to extrude the visible face to the background plane and, if not possible, then to an edge of a staircase plane before using the completion size to complete the box. The completion methods are attempted in the following order: M_COMPLETION_TO_BACKGROUND. M_COMPLETION_TO_STAIRCASE. M_COMPLETION_TO_USER_SIZE. Note that the completion sizes refer to the box model's dimensions and are not related to the axes of the working coordinate system. This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Same as M_SAME_AS_NOMINAL. M_SAME_AS_NOMINAL Specifies that the length along X, to use to establish the missing dimension, is the same as the nominal length in X of a nominal model. When searching for a range-type model, this corresponds to the middle of the specified size range (M_SIZE_X_MAX - M_SIZE_X_MIN). Value &gt; 0.0 Specifies the length along X to use to establish the missing dimension. M_COMPLETION_SIZE_Y Sets the length along Y to use to establish the missing dimension, when only one box face (plane) is found. MIL compares the plane's two dimensions (length and width) to the specified completion sizes (M_COMPLETION_SIZE_...). The most dissimilar size determines the missing dimension. If M_COMPLETION_TO_USER_SIZE is enabled, the M_COMPLETION_SIZE_... of the missing dimension will be the length to which MIL extrudes the visible face to complete the box, unless M_COMPLETION_TO_BACKGROUND and/or M_COMPLETION_TO_STAIRCASE are also enabled. If M_COMPLETION_TO_BACKGROUND and M_COMPLETION_TO_STAIRCASE are enabled, MIL will attempt to extrude the visible face to the background plane and, if not possible, then to an edge of a staircase plane before using the completion size to complete the box. The completion methods are attempted in the following order: M_COMPLETION_TO_BACKGROUND. M_COMPLETION_TO_STAIRCASE. M_COMPLETION_TO_USER_SIZE. Note that the completion sizes refer to the box model's dimensions and are not related to the axes of the working coordinate system. This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Same as M_SAME_AS_NOMINAL. M_SAME_AS_NOMINAL Specifies that the length along Y, to use to establish the missing dimension, is the same as the nominal length in Y of a nominal model. When searching for a range-type model, this corresponds to the middle of the specified size range (M_SIZE_Y_MAX - M_SIZE_Y_MIN). Value &gt; 0.0 Specifies the length along Y to use to establish the missing dimension. M_COMPLETION_SIZE_Z Sets the length along Z to use to establish the missing dimension, when only one box face (plane) is found. MIL compares the plane's two dimensions (length and width) to the specified completion sizes (M_COMPLETION_SIZE_...). The most dissimilar size determines the missing dimension. If M_COMPLETION_TO_USER_SIZE is enabled, the M_COMPLETION_SIZE_... of the missing dimension will be the length to which MIL extrudes the visible face to complete the box, unless M_COMPLETION_TO_BACKGROUND and/or M_COMPLETION_TO_STAIRCASE are also enabled. If M_COMPLETION_TO_BACKGROUND and M_COMPLETION_TO_STAIRCASE are enabled, MIL will attempt to extrude the visible face to the background plane and, if not possible, then to an edge of a staircase plane before using the completion size to complete the box. The completion methods are attempted in the following order: M_COMPLETION_TO_BACKGROUND. M_COMPLETION_TO_STAIRCASE. M_COMPLETION_TO_USER_SIZE. Note that the completion sizes refer to the box model's dimensions and are not related to the axes of the working coordinate system. This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Same as M_SAME_AS_NOMINAL. M_SAME_AS_NOMINAL Specifies that the length along Z, to use to establish the missing dimension, is the same as the nominal length in Z of a nominal model. When searching for a range-type model, this corresponds to the middle of the specified size range (M_SIZE_Z_MAX - M_SIZE_Z_MIN). Value &gt; 0.0 Specifies the length along Z to use to establish the missing dimension. M_COMPLETION_TO_BACKGROUND Sets whether the visible face can be extruded to a background plane to complete the box, when only one box face (plane) is found. When enabled, MIL will attempt to extrude the face to the closest background plane (includes the floor plane, if defined using M3dmodCopy() with M_FLOOR, and planes found in the scene) that intersects with the projection of the face. Note that the background plane must intersect with at least 80% of the projection of the face. If the closest background plane would yield an extrusion smaller than M_SIZE_..._MIN, the face cannot be extruded. In this case, no other completion methods will be attempted and the box is rejected. If no background plane intersects with the projection of the face, or the closest one would yield an extrusion larger than M_SIZE_..._MAX, MIL will attempt to extrude the face using another completion method, if one is enabled. The completion methods are attempted in the following order: M_COMPLETION_TO_BACKGROUND. M_COMPLETION_TO_STAIRCASE. M_COMPLETION_TO_USER_SIZE. This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to complete the box using a background plane. M_ENABLE Specifies to attempt to complete the box using a background plane. M_COMPLETION_TO_STAIRCASE Sets whether the visible face can be extruded to an edge of a staircase plane to complete the box, when only one box face (plane) is found. A staircase plane is any plane whose edge touches the extrusion of the face (if the box were extruded to this plane, the two would seem like a staircase). When enabled, if M_COMPLETION_TO_BACKGROUND was disabled, or the closest background plane was too far to complete the box, MIL will attempt to extrude the face to the farthest plane (includes the floor plane, if defined using M3dmodCopy() with M_FLOOR, and planes found in the scene) whose edge touches the projection of the face and falls inside the size range for the missing dimension (for example, for range-type models, M_SIZE_..._MIN to M_SIZE_..._MAX). If no plane meets these criteria, the face will be extruded to the completion size, if M_COMPLETION_TO_USER_SIZE is enabled. The completion methods are attempted in the following order: M_COMPLETION_TO_BACKGROUND. M_COMPLETION_TO_STAIRCASE. M_COMPLETION_TO_USER_SIZE. This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to complete the box using a staircase plane. M_ENABLE Specifies to attempt to complete the box using a staircase plane. M_COMPLETION_TO_USER_SIZE Sets whether the visible face can be extruded to the specified completion size to complete the box, when only one box face (plane) is found. When enabled, if no other completion method was successful, MIL will extrude the face to M_COMPLETION_SIZE_... for the missing dimension. The completion methods are attempted in the following order: M_COMPLETION_TO_BACKGROUND. M_COMPLETION_TO_STAIRCASE. M_COMPLETION_TO_USER_SIZE. Note that the completion sizes refer to the box model's dimensions and are not related to the axes of the working coordinate system. This control type is used only when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to complete the box using the completion size. M_ENABLE Specifies to complete the box using the completion size. M_COVERAGE_MAX Sets the maximum expected model coverage. The model coverage is the percentage of the model's surface covered with inlier points found in the occurrence. An occurrence with a model coverage greater than or equal to the maximum expected model coverage has a score of 100%. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_ELONGATION_MAX Sets the maximum elongation of the box occurrence. The elongation is defined as the maximum side/minimum side. This is used to prevent lines from being incorrectly identified as boxes when a very large size range is used. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the box occurrence has no maximum elongation. It can be infinitely long. Value &gt; 1.0 Specifies the box occurrence's maximum elongation, defined as maximum side / minimum side. M_ELONGATION_MIN Sets the minimum elongation of the box occurrence. The elongation is defined as the maximum side/minimum side. This is used to prevent lines from being incorrectly identified as boxes when a very large size range is used. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt;= 1.0 Specifies the box occurrence's minimum elongation, defined as maximum side / minimum side. M_NORMAL_ANGLE_TOLERANCE Sets the angular tolerance to use for M_NORMAL_CONDITION, when searching for box occurrences. MIL only returns a box occurrence as a match if the normal of one of its faces meets the specified M_NORMAL_CONDITION, +/- the specified angular tolerance, relative to the vector M_NORMAL_.... M_DEFAULT Specifies the default value; the default value is 10.0. 0.0 &lt; Value &lt;= 90.0 Specifies the normal angular tolerance, in degrees. M_NORMAL_CONDITION Sets whether to find only box occurrences that satisfy the specified condition, relative to the vector M_NORMAL_..., or to find any box occurrence. A box occurrence is only considered a match if the normal of one of its faces meets the specified parallel condition when compared to the vector specified with M_NORMAL_... (within the specified tolerance M_NORMAL_ANGLE_TOLERANCE). For example, you can set M_NORMAL_... to the normal of the floor plane and then set M_NORMAL_CONDITION to M_PARALLEL to find box occurrences parallel to the floor. If you know that your scene only contains parallel boxes, you should use this control to force the search algorithm to ignore non-parallel candidates. This can help to avoid false matches, particularly when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. It can also help to speed up the search, since candidates that do not meet the parallel condition will not be further examined. M_DEFAULT Same as M_UNCONDITIONAL. M_PARALLEL Specifies that the normal of one of the faces must be parallel to M_NORMAL_..., within the specified angular tolerance. M_UNCONDITIONAL Specifies that there is no constraint on the normal. M_VISIBLE_FACE_PARALLEL Specifies that the normal of one of the visible faces must be parallel to M_NORMAL_..., within the specified angular tolerance. If the face whose normal is parallel is inferred, the box occurrence is not selected as a match. M_NORMAL_X Sets the X-component of the vector against which to compare box occurrences, as specified using M_NORMAL_CONDITION. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the X-component of the vector. M_NORMAL_Y Sets the Y-component of the vector against which to compare box occurrences, as specified using M_NORMAL_CONDITION. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the Y-component of the vector. M_NORMAL_Z Sets the Z-component of the vector against which to compare box occurrences, as specified using M_NORMAL_CONDITION. M_DEFAULT Specifies the default value; the default value is 1.0. Value Specifies the Z-component of the vector. M_NUMBER Sets the maximum number of occurrences for which to search. Once the required number of occurrences with scores greater than or equal to M_CERTAINTY have been found, the search will stop to avoid exhaustive checking of all possible candidates. If not all the required number of occurrences have been found, MIL will continue to search for the required number of matches greater than or equal to the acceptance level and with the best score. M_DEFAULT Specifies the default value; the default value is 1. M_ALL Specifies to find all occurrences. Note that this setting can increase the search time; always set M_NUMBER to a specific number whenever possible. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Sets the minimum number of points per occurrence found. M_DEFAULT Specifies the default value; the default value is 50. Value &gt; 0 Specifies the minimum number of points per occurrence found. M_NUMBER_OF_VISIBLE_FACES_MAX Sets the maximum number of visible faces (planes) required for a box occurrence to be accepted. M_DEFAULT Specifies the default value; the default value is 6. 1 &lt;= Value &lt;= 6 Specifies the maximum number of visible faces (planes) required for a box occurrence to be accepted. M_NUMBER_OF_VISIBLE_FACES_MIN Sets the minimum number of visible faces (planes) required for a box occurrence to be accepted. If set to 1, a box can be extruded from a single plane according to the completion constraints (M_COMPLETION_...) and the reference direction (M_DIRECTION_REFERENCE_...). The plane will be extruded if its normal is less than M_COMPLETION_ANGLE_TOLERANCE away from the reference direction. If these constraints are not met, the plane is not considered a box occurrence. M_DEFAULT Specifies the default value; the default value is 2. 1 &lt;= Value &lt;= 6 Specifies the maximum number of visible faces (planes) required for a box occurrence to be accepted. M_PLANE_ACCEPTANCE Sets the acceptance level used for individual faces of the box occurrence. A plane will only be considered a visible face of the box occurrence if its score is greater than or equal to this level. You can set M_PLANE_ACCEPTANCE to a low value to detect very occluded faces, while maintaining a high acceptance level for the whole box occurrence using M_ACCEPTANCE. M_DEFAULT Specifies the default value; the default value is 60.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the acceptance level used for individual faces of the box occurrence. M_PLANE_CERTAINTY Sets the certainty level for individual faces of the box occurrence. If the score is greater than or equal to the specified certainty level, the plane is considered a visible face of the box, without searching for better faces. You can set M_PLANE_CERTAINTY to a low value to detect very occluded faces, while maintaining a high certainty level for the whole box occurrence using M_CERTAINTY. M_DEFAULT Specifies the default value; the default value is 90.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty value for individual faces of the box occurrence. M_PLANE_MAX_COVERAGE Sets the maximum expected coverage for individual faces of the box occurrence. A plane with a coverage greater than or equal to the maximum expected coverage has a score of 100%. You can set M_PLANE_MAX_COVERAGE to a low value to detect very occluded faces, while maintaining a high maximum expected coverage for the whole box occurrence using M_COVERAGE_MAX. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum coverage for individual faces of the box occurrence. M_POLARITY Sets whether the normals should point inside or outside the box occurrence. A box occurrence is only considered a match if its normals satisfy the specified condition. For example, you can set M_POLARITY to M_INSIDE to only accept box occurrences that the 3D sensor views from the inside. M_DEFAULT Same as M_SAME. M_ANY Specifies that the normals can point inside or outside. M_INSIDE Specifies that the normals must point inside. M_OUTSIDE Specifies that the normals must point outside. M_SAME Specifies that the normals can point either inside or outside, but the direction must be consistent for all faces. M_SIZE_X Sets the size of a nominal box model (M_BOX) along its X-axis, changing its originally defined size. Value &gt;= 0.0 Specifies the expected size along the X-axis. M_SIZE_X_MAX Sets the maximum size of a range-type box model (M_BOX_RANGE) along its X-axis, changing its originally defined maximum size. M_INFINITE Specifies no constraint on the maximum size along the X-axis. Value &gt; 0.0 Specifies the maximum size along the X-axis. M_SIZE_X_MIN Sets the minimum size of a range-type box model (M_BOX_RANGE) along its X-axis, changing its originally defined minimum size. Value &gt;= 0.0 Specifies the minimum size along the X-axis. M_SIZE_Y Sets the size of a nominal box model (M_BOX) along its Y-axis, changing its originally defined size. Value &gt;= 0.0 Specifies the expected size along the Y-axis. M_SIZE_Y_MAX Sets the maximum size of a range-type box model (M_BOX_RANGE) along its Y-axis, changing its originally defined maximum size. M_INFINITE Specifies no constraint on the maximum size along the Y-axis. Value &gt; 0.0 Specifies the maximum size along the Y-axis. M_SIZE_Y_MIN Sets the minimum size of a range-type box model (M_BOX_RANGE) along its Y-axis, changing its originally defined minimum size. Value &gt;= 0.0 Specifies the minimum size along the Y-axis. M_SIZE_Z Sets the size of a nominal box model (M_BOX) along its Z-axis, changing its originally defined size. Value &gt;= 0.0 Specifies the expected size along the Z-axis. M_SIZE_Z_MAX Sets the maximum size of a range-type box model (M_BOX_RANGE) along its Z-axis, changing its originally defined maximum size. M_INFINITE Specifies no constraint on the maximum size along the Z-axis. Value &gt; 0.0 Specifies the maximum size along the Z-axis. M_SIZE_Z_MIN Sets the minimum size of a range-type box model (M_BOX_RANGE) along its Z-axis, changing its originally defined minimum size. Value &gt;= 0.0 Specifies the minimum size along the Z-axis. M_TOLERANCE_X Sets the tolerance for the size of a nominal box model (M_BOX) along its X-axis, changing its originally defined tolerance. Occurrences must have a size, along their X-axis, within the specified nominal size (M_SIZE_X) +/- the specified tolerance. M_INFINITE Specifies no constraint on the size along the X-axis. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the size along the X-axis. M_TOLERANCE_Y Sets the tolerance for the size of a nominal box model (M_BOX) along its Y-axis, changing its originally defined tolerance. Occurrences must have a size, along their Y-axis, within the specified nominal size (M_SIZE_Y) +/- the specified tolerance. M_INFINITE Specifies no constraint on the size along the Y-axis. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the size along the Y-axis. M_TOLERANCE_Z Sets the tolerance for the size of a nominal box model (M_BOX) along its Z-axis, changing its originally defined tolerance. Occurrences must have a size, along their Z-axis, within the specified nominal size (M_SIZE_Z) +/- the specified tolerance. M_INFINITE Specifies no constraint on the size along the Z-axis. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the size along the Z-axis. Find cylinder 3D model finder context ID with a cylinder model Specifies a find cylinder 3D model finder context, allocated using M3dmodAlloc() with M_FIND_CYLINDER_CONTEXT, and used in M3dmodFind() operations. It must contain a cylinder model. M_ACCEPTANCE Sets the acceptance level for the score. An occurrence will be returned only if the match score between the target and the model is greater than or equal to this level. The score is a measure, as a percentage, of the total coverage of the occurrence that matches the given model. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. Set the maximum expected coverage with M_COVERAGE_MAX. M_DEFAULT Specifies the default value; the default value is 60.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies an acceptable score, as a percentage. A 100% score indicates that the total model coverage is equal to M_COVERAGE_MAX. M_BASES Sets whether the cylinder model includes bases. Setting this value reserves points corresponding to a found occurrence's bases. Note that points found on an occurrence's bases will not affect the fit regardless of this control type. M_WITH_BASES Specifies that the cylinder model includes bases. M_WITHOUT_BASES Specifies that the cylinder model does not include bases. M_CERTAINTY Sets the certainty level for the score, as a percentage. If the score is greater than or equal to the specified certainty level, the occurrence is considered a match, without searching the rest of the target for better matches (provided the specified number of occurrences has been found). The certainty level is defined relative to the maximum expected model coverage, such that setting M_CERTAINTY to 100% indicates that certain matches must have a total model coverage equal to the maximum expected model coverage. M_DEFAULT Specifies the default value; the default value is 90.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty level for the score, as a percentage. If you set the certainty level too high (close to 100.0%), you slow down the search because you force the search algorithm to check the whole point cloud for the best possible match(es). A good certainty level is slightly lower than the expected score, so that the search can finish as soon as a match is found. However, if you set the certainty level too low, false matches might be found. M_COVERAGE_MAX Sets the maximum expected model coverage. The model coverage is the percentage of the model's surface covered with inlier points found in the occurrence. An occurrence with a model coverage greater than or equal to the maximum expected model coverage has a score of 100%. M_DEFAULT Specifies the default value; the default value is 45.0%. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_LENGTH Sets the length of a nominal cylinder model (M_CYLINDER), changing its originally defined length. Value &gt;= 0.0 Specifies the length. M_LENGTH_MAX Sets the maximum length of a range-type cylinder model (M_CYLINDER_RANGE), changing its originally defined maximum length. M_INFINITE Specifies no constraint on the maximum length. Value &gt; 0.0 Specifies the maximum length. M_LENGTH_MIN Sets the minimum length of a range-type cylinder model (M_CYLINDER_RANGE), changing its originally defined minimum length. Value &gt;= 0.0 Specifies the minimum length. M_MIN_SEPARATION_DISTANCE Sets the minimum gap distance along the length of a cylinder before considering the cylinder as two separate occurrences of the cylinder model. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to split cylinders. Value &gt; 0.0 Specifies the minimum gap distance. M_NUMBER Sets the maximum number of occurrences for which to search. Once the required number of occurrences with scores greater than or equal to M_CERTAINTY have been found, the search will stop to avoid exhaustive checking of all possible candidates. If not all the required number of occurrences have been found, MIL will continue to search for the required number of matches greater than or equal to the acceptance level and with the best score. M_DEFAULT Specifies the default value; the default value is 1. M_ALL Specifies to find all occurrences. Note that this setting can increase the search time; always set M_NUMBER to a specific number whenever possible. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Sets the minimum number of points per occurrence found. M_DEFAULT Specifies the default value; the default value is 50. Value &gt; 0 Specifies the minimum number of points per occurrence found. M_RADIUS Sets the radius of a nominal cylinder model (M_CYLINDER), changing its originally defined radius. Value &gt;= 0.0 Specifies the radius of the model. M_RADIUS_MAX Sets the maximum radius of a range-type cylinder model (M_CYLINDER_RANGE), changing its originally defined maximum radius. M_INFINITE Specifies no constraint on the maximum radius. Value &gt; 0.0 Specifies the maximum radius. M_RADIUS_MIN Sets the minimum radius of a range-type cylinder model (M_CYLINDER_RANGE), changing its originally defined minimum radius. Value &gt;= 0.0 Specifies the minimum radius. M_RESERVED_POINTS_DISTANCE Sets the reserved area around the occurrence, defined as a percentage of the radius. Points found in this area are not considered in the fit, and cannot be considered for other occurrences. M_DEFAULT Specifies the default value; the default value is 10.0. 0.0 &lt;= Value &lt; 100.0 Specifies the reserved points distance for the model, as a percentage of its radius. M_TOLERANCE_LENGTH Sets the tolerance for the length of a nominal cylinder model (M_CYLINDER), changing its originally defined length tolerance. Occurrences must have a length within the specified nominal length (M_LENGTH) +/- the specified tolerance. M_INFINITE Specifies no constraint on the length. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the length. M_TOLERANCE_RADIUS Sets the tolerance for the radius of a nominal cylinder model (M_CYLINDER), changing its originally defined radius tolerance. Occurrences must have a radius within the specified nominal radius (M_RADIUS) +/- the specified tolerance. M_INFINITE Specifies no constraint on the radius. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the radius. Find rectangular plane 3D model finder context ID with a rectangular plane model Specifies a find rectangular plane 3D model finder context, allocated using M3dmodAlloc() with M_FIND_RECTANGULAR_PLANE_CONTEXT, and used in M3dmodFind() operations. It must contain a rectangular plane model. M_ACCEPTANCE Sets the acceptance level for the score. An occurrence will be returned only if the match score between the target and the model is greater than or equal to this level. The score is a measure, as a percentage, of the total coverage of the occurrence that matches the given model. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. Set the maximum expected coverage with M_COVERAGE_MAX. M_DEFAULT Specifies the default value; the default value is 60.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies an acceptable score, as a percentage. M_CERTAINTY Sets the certainty level for the score, as a percentage. If the score is greater than or equal to the specified certainty level, the occurrence is considered a match, without searching the rest of the target for better matches (provided the specified number of occurrences has been found). The certainty level is defined relative to the maximum expected model coverage, such that setting M_CERTAINTY to 100% indicates that certain matches must have a total model coverage equal to the maximum expected model coverage. M_DEFAULT Specifies the default value; the default value is 90.0%. 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty level for the score, as a percentage. M_COVERAGE_MAX Sets the maximum expected model coverage. The model coverage is the percentage of the model's surface covered with inlier points found in the occurrence. An occurrence with a model coverage greater than or equal to the maximum expected model coverage has a score of 100%. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_ELONGATION_MAX Sets the maximum elongation of the rectangular plane occurrence. The elongation is defined as the maximum side/minimum side. This is used to prevent lines from being incorrectly identified as rectangular planes when a very large size range is used. M_DEFAULT Same as M_INFINITE. M_INFINITE Specifies that the rectangular plane occurrence has no maximum elongation. It can be infinitely long. Value &gt; 1.0 Specifies the rectangular plane occurrence's maximum elongation, defined as maximum side / minimum side. M_ELONGATION_MIN Sets the minimum elongation of the rectangular plane occurrence. The elongation is defined as the maximum side/minimum side. This is used to prevent lines from being incorrectly identified as rectangular planes when a very large size range is used. M_DEFAULT Specifies the default value; the default value is 1.0. Value &gt;= 1.0 Specifies the rectangular plane occurrence's minimum elongation, defined as maximum side / minimum side. M_NORMAL_ANGLE_TOLERANCE Sets the angular tolerance to use for M_NORMAL_CONDITION, when searching for rectangular plane occurrences. MIL only returns the occurrence as a match if the normal of the rectangular plane meets the specified M_NORMAL_CONDITION, +/- the specified angular tolerance, relative to the vector M_NORMAL_.... M_DEFAULT Specifies the default value; the default value is 10.0. 0.0 &lt; Value &lt;= 90.0 Specifies the normal angular tolerance, in degrees. M_NORMAL_CONDITION Sets whether to find only rectangular plane occurrences that satisfy the specified condition, relative to the vector M_NORMAL_..., or to find any rectangular plane occurrence. A rectangular plane occurrence is only considered a match if its normal meets the specified condition when compared to the vector specified with M_NORMAL_... (within the specified tolerance M_NORMAL_ANGLE_TOLERANCE). For example, you can set M_NORMAL_... to the normal of the floor plane and then set M_NORMAL_CONDITION to M_PARALLEL to find rectangular plane occurrences parallel to the floor. If you know that your scene only contains parallel and/or perpendicular rectangular planes, you should use this control to force the search algorithm to ignore all other candidates. This can help to avoid false matches and speed up the search, since candidates that do not meet the specified condition will not be further examined. M_DEFAULT Same as M_UNCONDITIONAL. M_PARALLEL Specifies that the normal of the rectangular plane must be parallel to the vector specified using M_NORMAL_..., within the specified angular tolerance. M_PARALLEL_OR_PERPENDICULAR Specifies that the normal of the rectangular plane must be either parallel or perpendicular to the vector specified using M_NORMAL_..., within the specified angular tolerance. M_PERPENDICULAR Specifies that the normal of the rectangular plane must be perpendicular to the vector specified using M_NORMAL_..., within the specified angular tolerance. M_UNCONDITIONAL Specifies that there is no constraint on the normal of the rectangular plane. M_NORMAL_X Sets the X-component of the vector against which to compare rectangular plane occurrences, as specified using M_NORMAL_CONDITION. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the X-component of the vector. M_NORMAL_Y Sets the Y-component of the vector against which to compare rectangular plane occurrences, as specified using M_NORMAL_CONDITION. M_DEFAULT Specifies the default value; the default value is 0.0. Value Specifies the Y-component of the vector. M_NORMAL_Z Sets the Z-component of the vector against which to compare rectangular plane occurrences, as specified using M_NORMAL_CONDITION. M_DEFAULT Specifies the default value; the default value is 1.0. Value Specifies the Z-component of the vector. M_NUMBER Sets the maximum number of occurrences for which to search. Once the required number of occurrences with scores greater than or equal to M_CERTAINTY have been found, the search will stop to avoid exhaustive checking of all possible candidates. If not all the required number of occurrences have been found, MIL will continue to search for the required number of matches greater than or equal to the acceptance level and with the best score. M_DEFAULT Specifies the default value; the default value is 1. M_ALL Specifies to find all occurrences. Note that this setting can increase the search time; always set M_NUMBER to a specific number whenever possible. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Sets the minimum number of points per occurrence found. M_DEFAULT Specifies the default value; the default value is 50. Value &gt; 0 Specifies the minimum number of points per occurrence found. M_SIZE_X Sets the size of a nominal rectangular plane model (M_RECTANGLE) along its X-axis, changing its originally defined size. Value &gt;= 0.0 Specifies the expected size along the X-axis. M_SIZE_X_MAX Sets the maximum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its X-axis, changing its originally defined maximum size. M_INFINITE Specifies no constraint on the maximum size along the X-axis. Value &gt; 0.0 Specifies the maximum size along the X-axis. M_SIZE_X_MIN Sets the minimum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its X-axis, changing its originally defined minimum size. Value &gt;= 0.0 Specifies the minimum size along the X-axis. M_SIZE_Y Sets the size of a nominal rectangular plane model (M_RECTANGLE) along its Y-axis, changing its originally defined size. Value &gt;= 0.0 Specifies the expected size along the Y-axis. M_SIZE_Y_MAX Sets the maximum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its Y-axis, changing its originally defined maximum size. M_INFINITE Specifies no constraint on the maximum size along the Y-axis. Value &gt; 0.0 Specifies the maximum size along the Y-axis. M_SIZE_Y_MIN Sets the minimum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its Y-axis, changing its originally defined minimum size. Value &gt;= 0.0 Specifies the minimum size along the Y-axis. M_TOLERANCE_X Sets the tolerance for the size of a nominal rectangular plane model (M_RECTANGLE) along its X-axis, changing its originally defined tolerance. Occurrences must have a size, along their X-axis, within the specified nominal size (M_SIZE_X) +/- the specified tolerance. M_INFINITE Specifies no constraint on the size along the X-axis. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the size along the X-axis. M_TOLERANCE_Y Sets the tolerance for the size of a nominal rectangular plane model (M_RECTANGLE) along its Y-axis, changing its originally defined tolerance. Occurrences must have a size, along their Y-axis, within the specified nominal size (M_SIZE_Y) +/- the specified tolerance. M_INFINITE Specifies no constraint on the size along the Y-axis. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the size along the Y-axis. Find sphere 3D model finder context ID with a sphere model Specifies a find sphere 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SPHERE_CONTEXT, and used in M3dmodFind() operations. It must contain a sphere model. M_ACCEPTANCE Sets the acceptance level for the score. An occurrence will be returned only if the match score between the target and the model is greater than or equal to this level. The score is a measure, as a percentage, of the total coverage of the occurrence that matches the given model. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. Set the maximum expected coverage with M_COVERAGE_MAX. M_DEFAULT Specifies the default value; the default value is 60.0%. 0.0 &lt;= Value &lt; 100.0 Specifies an acceptable score, as a percentage. A 100% score indicates that the total model coverage is equal to M_COVERAGE_MAX. M_CERTAINTY Sets the certainty level for the score, as a percentage. If the score is greater than or equal to the specified certainty level, the occurrence is considered a match, without searching the rest of the target for better matches (provided the specified number of occurrences has been found). The certainty level is defined relative to the maximum expected model coverage, such that setting M_CERTAINTY to 100% indicates that certain matches must have a total model coverage equal to the maximum expected model coverage. M_DEFAULT Specifies the default value; the default value is 90.0%. 0.0 &lt;= Value &lt; 100.0 Specifies the certainty level for the score, as a percentage. If you set the certainty level too high (close to 100.0%), you slow down the search because you force the search algorithm to check the whole point cloud for the best possible match(es). A good certainty level is slightly lower than the expected score, so that the search can finish as soon as a match is found. However, if you set the certainty level too low, false matches might be found. M_COVERAGE_MAX Sets the maximum expected model coverage. The model coverage is the percentage of the model's surface covered with inlier points found in the occurrence. An occurrence with a model coverage greater than or equal to the maximum expected model coverage has a score of 100%. M_DEFAULT Specifies the default value; the default value is 45.0. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_NUMBER Sets the maximum number of occurrences for which to search. Once the required number of occurrences with scores greater than or equal to M_CERTAINTY have been found, the search will stop to avoid exhaustive checking of all possible candidates. If not all the required number of occurrences have been found, MIL will continue to search for the required number of matches greater than or equal to the acceptance level and with the best score. M_DEFAULT Specifies the default value; the default value is 1. M_ALL Specifies to find all occurrences. Note that this setting can increase the search time; always set M_NUMBER to a specific number whenever possible. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Sets the minimum number of points per occurrence found. M_DEFAULT Specifies the default value; the default value is 50. Value &gt; 0 Specifies the minimum number of points per occurrence found. M_RADIUS Sets the radius of a nominal cylinder model (M_SPHERE), changing its originally defined radius. Value &gt;= 0.0 Specifies the expected radius. M_RADIUS_MAX Sets the maximum radius of a range-type sphere model (M_SPHERE_RANGE), changing its originally defined maximum radius. M_INFINITE Specifies no constraint on the maximum radius. Value &gt; 0.0 Specifies the maximum radius. M_RADIUS_MIN Sets the minimum radius for a range-type sphere model (M_SPHERE_RANGE), changing its originally defined minimum radius. Value &gt;= 0.0 Specifies the minimum radius. M_RESERVED_POINTS_DISTANCE Sets the reserved area around the occurrence, defined as a percentage of the radius. Points found in this area are not considered in the fit, and cannot be considered for other occurrences. M_DEFAULT Specifies the default value; the default value is 10.0. 0.0 &lt;= Value &lt; 100.0 Specifies the reserved points distance for the model, as a percentage of its radius. M_TOLERANCE_RADIUS Sets the tolerance for the radius of a nominal sphere model (M_SPHERE), changing its originally defined radius tolerance. Occurrences must have a radius within the specified nominal radius (M_RADIUS) +/- the specified tolerance. M_INFINITE Specifies no constraint on the radius. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, since the algorithm used for this type of model is better suited. Value &gt;= 0.0 Specifies the tolerance for the radius. Find surface 3D model finder context ID with a surface model Specifies a find surface 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT, and used in M3dmodFind() operations. It must contain a surface model. M_ACCEPTANCE Sets the acceptance level for the score. An occurrence will be returned only if the match score between the target and the model is greater than or equal to this level. The score is a measure, as a percentage, of the total coverage of the occurrence that matches the given model. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. Set the maximum expected coverage with M_COVERAGE_MAX. M_DEFAULT Specifies the default value; the default value is 60.0%. 0.0 &lt;= Value &lt; 100.0 Specifies an acceptable score, as a percentage. A 100% score indicates that the total model coverage is equal to M_COVERAGE_MAX. M_ACCEPTANCE_COLOR Sets the acceptance level for the color score. An occurrence will be returned only if the color score between the target and the model is greater than or equal to this level. The color score is a measure, as a percentage, of the similarity between the color of the model and the color of the target. Note that this control type has no effect unless M_USE_COLOR is set to M_ENABLE. M_DEFAULT Specifies the default value; the default value is 0.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the acceptance level for the color score, as a percentage. M_ACCEPTANCE_TARGET Sets the acceptance level for the target score. An occurrence will be returned only if the target score between the target and the model is greater than or equal to this level. The target score is a measure, as a percentage, of the total points found in the occurrence that are not found in the model. M_DEFAULT Specifies the default value; the default value is 0.0. 0.0 &lt;= Value &lt; 100.0 Specifies the acceptance level for the target score, as a percentage. M_CERTAINTY Sets the certainty level for the score, as a percentage. If the score is greater than or equal to the specified certainty level, the occurrence is considered a match, without searching the rest of the target for better matches (provided the specified number of occurrences has been found). The certainty level is defined relative to the maximum expected model coverage, such that setting M_CERTAINTY to 100% indicates that certain matches must have a total model coverage equal to the maximum expected model coverage. M_DEFAULT Specifies the default value; the default value is 90.0%. 0.0 &lt;= Value &lt; 100.0 Specifies the certainty level for the score, as a percentage. If you set the certainty level too high (close to 100.0%), you slow down the search because you force the search algorithm to check the whole point cloud for the best possible match(es). A good certainty level is slightly lower than the expected score, so that the search can finish as soon as a match is found. However, if you set the certainty level too low, false matches might be found. M_COVERAGE_MAX Sets the maximum expected model coverage. The model coverage is the percentage of the model's surface covered with inlier points found in the occurrence. An occurrence with a model coverage greater than or equal to the maximum expected model coverage has a score of 100%. M_DEFAULT Specifies the default value; the default value is 100.0. 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_FIT_SCORE_MIN Sets the minimum expected occurrence fit score. Note that this control type has no effect unless M_SAVE_FIT_INFO is set to M_ENABLE. M_DEFAULT Specifies the default value; the default value is 0.0. 0.0 &lt;= Value &lt;= 100.0 Specifies the minimum expected fit score. M_NUMBER Sets the maximum number of occurrences for which to search. Once the required number of occurrences with scores greater than or equal to M_CERTAINTY have been found, the search will stop to avoid exhaustive checking of all possible candidates. If not all the required number of occurrences have been found, MIL will continue to search for the required number of matches greater than or equal to the acceptance level and with the best score. M_DEFAULT Specifies the default value; the default value is 1. M_ALL Specifies to find all occurrences. Note that this setting can increase the search time; always set M_NUMBER to a specific number whenever possible. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Sets the minimum number of points per occurrence found. M_DEFAULT Specifies the default value; the default value is 50. Value &gt; 0 Specifies the minimum number of points per occurrence found. M_REMOVE_OUTLIERS Sets whether to perform outlier removal on the model, changing the model's originally defined outlier removal setting. When enabled, MIL removes outliers such as clusters of points around the perimeter of the model. Enable outlier removal if the model contains stray points, especially if M_REFINE_REGISTRATION is enabled. The default for this control type is set when adding the surface model to the context using M3dmodDefine() with M_SURFACE. Note that you should not enable outlier removal if your model was defined from a point cloud created from a CAD file (using MbufImport() / MbufRestore()) since parts of the model can be removed, which can cause the search to fail/return false positives. You can use M3dmodDraw3d() to draw the remaining points after preprocessing (M3dmodControlDraw() with M_DRAW_MODEL_PREPROCESSED). M_DISABLE Specifies not to perform outlier removal on the model. M_ENABLE Specifies to perform outlier removal on the model. M_REMOVE_OUTLIERS_SEARCH_MODE Sets the search mode for finding outliers when M_REMOVE_OUTLIERS is enabled. M_DEFAULT Same as M_AUTO. M_AUTO Specifies to automatically set the search mode based on the point cloud's organization; either M_ORGANIZED if organized or M_TREE if unorganized. M_ORGANIZED Specifies to use the point cloud's organizational structure to determine the outliers. This option is supported only for an organized point cloud. M_TREE Specifies to use a KD tree search mode to determine the outliers. M_RESTING_PLANE_ANGLE_TOLERANCE Sets the angular tolerance for the resting plane constraint. The resting plane provides contextual information about how the occurrence lies within the scene. MIL will only return occurrences that rest on this plane, +/- the specified angular tolerance. Note that this does not affect any of the scores, but it filters occurrences that do not meet this constraint. It also does not decrease the search time because occurrences are filtered near the end of the search. You can copy the resting plane to or from the specified find surface 3D model finder context using M3dmodCopy() with M_RESTING_PLANE. Note that to use a resting plane, you must also copy a floor plane (M_FLOOR) to the find surface 3D model finder context. A small angular tolerance is typically required since the angle found is not always exact. M_DEFAULT Specifies the default value; the default value is 10.0. 0.0 &lt; Value &lt;= 180.0 Specifies the angular tolerance, in degrees. M_SEARCH_POINT_RESOLUTION Sets the resolution of the target point cloud (scene), where the resolution is expressed as the average distance between points. Very different resolutions between the scene and the model might cause missed occurrences. You should specify the resolution of the scene when it is incompatible with the resolution of the model. For example, if the distance between points in the scene is greater than that of the model, MIL will subsample the model to match the resolution of the target. If the distance between points in the scene is lower than that of the model's, MIL will upsample the model to match the resolution of the target, using its associated mesh. If there is no associated mesh in the find surface 3D model finder context when MIL attempts to upsample the model, an error is generated. After an M3dmodFind() operation, you can check whether the resolutions of the scene and model were compatible, using M3dmodGetResult() with M_STATUS_SCENE_RESOLUTION. You can inquire the resolution of the defined model (before preprocessing) using M_MODEL_RESOLUTION. M_DEFAULT Same as M_SAME_AS_MODEL. M_SAME_AS_MODEL Specifies that the target point cloud (scene) has the same resolution as the model. Value &gt; 0 Specifies the expected resolution of the target point cloud (scene), where the resolution is expressed as the average distance between points. M_SET_POSITION_X Changes the X-coordinate of the model's reference axis origin. A surface occurrence's found position is determined by the model's reference axis; position results return the coordinates of the model's reference axis origin transformed at the model occurrence. Note that this does not transform the model, but moves the origin of the model coordinate system to this position. Value Specifies the X-coordinate. M_SET_POSITION_Y Changes the Y-coordinate of the model's reference axis origin. A surface occurrence's found position is determined by the model's reference axis; position results return the coordinates of the model's reference axis origin transformed at the model occurrence. Note that this does not transform the model, but moves the origin of the model coordinate system to this position. Value Specifies the Y-coordinate. M_SET_POSITION_Z Changes the Z-coordinate of the model's reference axis origin. A surface occurrence's found position is determined by the model's reference axis; position results return the coordinates of the model's reference axis origin transformed at the model occurrence. Note that this does not transform the model, but moves the origin of the model coordinate system to this position. Value Specifies the Z-coordinate. M_TRANSFORM_MODEL Transforms the model (rotation and translation), including the model's reference axis, to a new position and orientation. When the transformation occurs, the orientation and position of the model's reference axis prior to the transformation is lost. Position results will now return the coordinates of the model's new reference axis origin transformed at the model occurrence. Note that a surface occurrence's found position is determined by the model's reference axis; position results return the coordinates of the model's reference axis origin transformed at the model occurrence. Transformation matrix object ID Specifies the identifier of a transformation matrix object. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. The transformation matrix must be of type M_RIGID. The following ContextOrResult3dmodId, ControlType, and ControlValue parameter settings can be specified for a 3D model finder result buffer when Index is set to M_GENERAL or M_DEFAULT. For a 3D model finder result buffer ContextOrResult3dmodId Description ControlType ControlValue 3D model finder result buffer ID Specifies a 3D model finder result buffer, allocated using M3dmodAllocResult(). M_RESET Removes all results from the 3D model finder result buffer. This does not delete the result buffer, unlike M3dmodFree(). M_DEFAULT Specifies the default behavior. M_STOP_FIND Stops the current execution of M3dmodFind() from another thread. Any completed results from the 3D model finder operation will be available. M_DEFAULT Specifies the default behavior. Type-specific versions of the function when using a C compiler under 64-bit void M3dmodControlInt64 (MIL_ID ContextOrResult3dmodId, MIL_INT64 Index, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters ContextOrResult3dmodId See ContextOrResult3dmodId of the main function for a description. Index See Index of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void M3dmodControlDouble (MIL_ID ContextOrResult3dmodId, MIL_INT64 Index, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters ContextOrResult3dmodId See ContextOrResult3dmodId of the main function for a description. Index See Index of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - ContextOrResult3dmodId - Index For specifying a general context, result buffer or individual model - ControlType - ControlValue Parameter Associations For controlling a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context [Find box 3D model finder context ID] [Find cylinder 3D model finder context ID] [Find rectangular plane 3D model finder context ID] [Find sphere 3D model finder context ID] [Find surface 3D model finder context ID] For controlling a box, cylinder, rectangular plane, sphere, or surface 3D model [Find box 3D model finder context ID with a box model] [Find cylinder 3D model finder context ID with a cylinder model] [Find rectangular plane 3D model finder context ID with a rectangular plane model] [Find sphere 3D model finder context ID with a sphere model] [Find surface 3D model finder context ID with a surface model] For a 3D model finder result buffer [3D model finder result buffer ID] Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 14786,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodControlDraw",
      "version": null,
      "title": "M3dmodControlDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodControlDraw.htm",
      "text": " M3dmodControlDraw Synopsis Control a setting of a draw 3D model finder context. Syntax void M3dmodControlDraw( MIL_ID&nbsp;DrawContext3dmodId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function controls a specified setting of a draw 3D model finder context. These settings establish which features of a model or which results of found model occurrences to draw into the 3D graphics list (and how to draw them), when calling M3dmodDraw3d(). You can inquire about most of these settings using M3dmodInquireDraw(). Note that when using a C compiler (not a C++ or other compiler) in 64-bit mode, M3dmodControlDraw() internally calls the MIL_DOUBLE version of this function (M3dmodControlDrawDouble()). If you need to pass large integer values (including pointers), call the MIL_INT64 version of this function (M3dmodControlDrawInt64()). Parameters Parameters DrawContext3dmodId Specifies the identifier of the draw 3D model finder context to control. The draw 3D model finder context must have been previously allocated on the required system using M3dmodAlloc() with either M_DRAW_3D_GEOMETRIC_CONTEXT (to draw occurrences of geometric models) or M_DRAW_3D_SURFACE_CONTEXT (to draw surface models or occurrences of surface models). Operation Specifies the draw operation. See the Parameter associations section for possible values that can be specified. ControlType Specifies the setting to change. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the Operation, ControlType, and ControlValue parameters. For a draw geometric or surface 3D model finder context For a draw surface 3D model finder context The following Operation, ControlType, and ControlValue parameter settings can be specified for a draw geometric or surface 3D model finder context. For a draw geometric or surface 3D model finder context Operation Description ControlType ControlValue M_ALL Applies the setting to all operations that support the control type. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets the appearance of the graphic(s) to solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies to use the default setting of the operation. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_AXES Sets whether and how to draw the axes of either the model or each specified occurrence when calling M3dmodDraw3d(), depending on whether a find 3D model finder context or result buffer is specified. The resulting graphic will be of type M_GRAPHIC_TYPE_AXIS. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_LENGTH Sets the length of the graphic(s). M_DEFAULT Same as M_DEFAULT_LENGTH. M_DEFAULT_LENGTH Specifies that the length is the default size of the 3D model. Value &gt; 0.0 Specifies the length, in world units. M_REFERENCE_X Sets the X-position of the graphic(s) origin, relative to the model or occurrence. Note that M_REFERENCE_X is only available for a draw surface 3D model finder context. M_DEFAULT Same as M_CENTER. M_CENTER Specifies to draw the graphic(s) at the center of the model or occurrence. M_MAX Specifies to draw the graphic(s) at the model's or occurrence's maximum X-coordinate. M_MIN Specifies to draw the graphic(s) at the model's or occurrence's minimum X-coordinate. M_REFERENCE_Y Sets the Y-position of the graphic(s) origin, relative to the model or occurrence. Note that M_REFERENCE_Y is only available for a draw surface 3D model finder context. M_DEFAULT Same as M_CENTER. M_CENTER Specifies to draw the graphic(s) at the center of the model or occurrence. M_MAX Specifies to draw the graphic(s) at the model's or occurrence's maximum Y-coordinate. M_MIN Specifies to draw the graphic(s) at the model's or occurrence's minimum Y-coordinate. M_REFERENCE_Z Sets the Z-position of the graphic(s) origin, relative to the model or occurrence. Note that M_REFERENCE_Z is only available for a draw surface 3D model finder context. M_DEFAULT Same as M_CENTER. M_CENTER Specifies to draw the graphic(s) at the center of the model or occurrence. M_MAX Specifies to draw the graphic(s) at the model's or occurrence's maximum Z-coordinate. M_MIN Specifies to draw the graphic(s) at the model's or occurrence's minimum Z-coordinate. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_BOX Sets whether and how to draw the bounding box of each specified occurrence when calling M3dmodDraw3d(). The bounding box is the smallest-axis aligned box that contains the ideal geometric shape or surface of the model at the location of the occurrence, depending on the model type. If you enable M_DRAW_MODEL, the bounding box is the smallest axis-aligned box that contains that graphic. Note that it does not necessarily contain all inlier points. The resulting graphic will be of type M_GRAPHIC_TYPE_BOX. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets the appearance of the graphic(s) to solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_WIREFRAME. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The 3D graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_WHITE. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_INLIER_POINTS Sets whether and how to draw the inlier points, based on M_FIT_DISTANCE, of each specified occurrence when calling M3dmodDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_DOTS. Note that for a surface model, M_SAVE_FIT_INFO must be enabled. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. The default value for draw geometric 3D model finder contexts is M_ENABLE. The default value for draw surface 3D model finder contexts is M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_PSEUDO_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_MODEL Sets whether and how to draw the defined model or each specified occurrence when calling M3dmodDraw3d(), depending on whether a find 3D model finder context or result buffer is specified. In the case of a geometric model occurrence, the resulting graphic will be of the same geometric type as the model. In the case of a surface model or surface model occurrence, the resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Same as M_ENABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Sets the appearance of the graphic(s) to solid surface, wireframe, or points. The color of the points, wireframe, or outline is determined by M_COLOR, while the color of the solid surface is determined by the default fill color of the 3D graphics list (M3dgraControl() with M_FILL_COLOR). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. The graphic(s) appear as a set of points representing its vertices. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. The graphic(s) appear as a set of lines connecting its vertices. M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Specifies the default value. The default value for draw geometric 3D model finder contexts is M_PSEUDO_COLOR. The default value for draw surface 3D model finder contexts is either M_AUTO_COLOR for a model in a find surface 3D model finder context or M_PSEUDO_COLOR for a result in a find surface 3D model finder result buffer. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_AUTO_COLOR Specifies to color the graphic according to specific components in the source container. If the container is a point cloud, the graphic is colored based on the reflectance component. If the reflectance component does not exist, the intensity component is used. If there is no reflectance or intensity, use M_PSEUDO_COLOR. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_OPACITY Sets the opacity of the 3D graphic(s) added to the 3D graphics list. M_DEFAULT Specifies the default value; the default value is 30. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . A graphic(s) with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_RESERVED_POINTS Sets whether and how to draw the reserved points of each specified occurrence when calling M3dmodDraw3d(). The resulting graphic will be of type M_GRAPHIC_TYPE_DOTS. Occurrences of all types of models have reserved points and you can draw them; only occurrences of cylinder and sphere models allow you to control the distance of reserved points (using M3dmodControl() with M_RESERVED_POINTS_DISTANCE). M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_PSEUDO_COLOR. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_GLOBAL_DRAW_SETTINGS Sets a global draw 3D model finder context setting. M_PSEUDO_COLOR_OFFSET Sets the offset to apply to either the model's or the occurrence's index when drawing with M_PSEUDO_COLOR. You can use this control type to prevent the same colors from being assigned to different occurrences when drawing several results at once. M_DEFAULT Specifies the default value; the default value is 0. Value &gt;= 0 Specifies the offset to apply to the index. The following Operation, ControlType, and ControlValue parameter settings can be specified for a draw surface 3D model finder context. For a draw surface 3D model finder context Operation Description ControlType ControlValue M_DRAW_AXES_POSITION Sets whether and how to draw the axes at either the model's or each specified occurrence's position when calling M3dmodDraw3d(), depending on whether a find 3D model finder context or result buffer is specified. The axes are drawn at the model's reference axis origin/the model's reference axis origin transformed at each occurrence. The resulting graphic will be of type M_GRAPHIC_TYPE_AXIS. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_LENGTH Sets the length of the graphic(s). M_DEFAULT Same as M_DEFAULT_LENGTH. M_DEFAULT_LENGTH Specifies that the length is the default size of the 3D model. Value &gt; 0.0 Specifies the length, in world units. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_BACKGROUND_POINTS Sets whether and how to draw the points that were considered part of the background during the search. Background points include those of objects that are too big or too small to be part of an occurrence of the model. The resulting graphic will be of type M_GRAPHIC_TYPE_DOTS. This drawing operation is only supported if M_REMOVE_BACKGROUND was enabled. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_GRAY. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FLOOR_POINTS Sets whether and how to draw the points that were considered part of the floor during the search. Floor points are determined using the floor plane, defined using M3dmodCopy() with M_FLOOR, and the floor removal direction and offset (M3dmodControl() with M_REMOVE_FLOOR_DIRECTION and M_REMOVE_FLOOR_OFFSET). The resulting graphic will be of type M_GRAPHIC_TYPE_DOTS. This drawing operation is only supported if M_REMOVE_FLOOR was enabled. M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_MAGENTA. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value; the default value is 1 pixel. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_MODEL_PREPROCESSED Sets whether and how to draw the preprocessed model that is in the specified find 3D model finder context. The resulting graphic will be of type M_GRAPHIC_TYPE_POINT_CLOUD. M3dmodPreprocess() must be called before calling M3dmodDraw3d(). M_ACTIVE Sets whether to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_DISABLE. M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Sets the color with which to draw the graphic(s). M_DEFAULT Same as M_COLOR_YELLOW. M_RGB888( MIL_INT Red, MIL_INT Green, MIL_INT Blue ) Specifies the RGB value to use as the color. Parameters Red Specifies the red component, as a value between 0 and 255. Green Specifies the green component, as a value between 0 and 255. Blue Specifies the blue component, as a value between 0 and 255. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. M_OPACITY Sets the opacity of the 3D graphic(s) added to the 3D graphics list. M_DEFAULT Specifies the default value; the default value is 30. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . A graphic(s) with an opacity of 100.0 is completely opaque, while an opacity of 0.0 makes it completely transparent (invisible). M_THICKNESS Sets the thickness with which to draw the graphic(s). M_DEFAULT Specifies the default value. Same as M_GRAPHIC_LIST_DEFAULT. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. Type-specific versions of the function when using a C compiler under 64-bit void M3dmodControlDrawInt64 (MIL_ID DrawContext3dmodId, MIL_INT64 Operation, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters DrawContext3dmodId See DrawContext3dmodId of the main function for a description. Operation See Operation of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void M3dmodControlDrawDouble (MIL_ID DrawContext3dmodId, MIL_INT64 Operation, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters DrawContext3dmodId See DrawContext3dmodId of the main function for a description. Operation See Operation of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - DrawContext3dmodId - Operation - ControlType - ControlValue Parameter Associations For a draw geometric or surface 3D model finder context [M_ALL] [M_DRAW_AXES] [M_DRAW_BOX] [M_DRAW_INLIER_POINTS] [M_DRAW_MODEL] [M_DRAW_RESERVED_POINTS] [M_GLOBAL_DRAW_SETTINGS] For a draw surface 3D model finder context [M_DRAW_AXES_POSITION] [M_DRAW_BACKGROUND_POINTS] [M_DRAW_FLOOR_POINTS] [M_DRAW_MODEL_PREPROCESSED] Type-specific versions of the function when using a C compiler under 64-bit Compilation information ",
      "wordCount": 4407,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodCopy",
      "version": null,
      "title": "M3dmodCopy",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodCopy.htm",
      "text": " M3dmodCopy Synopsis Copy data to or from a 3D model finder context. Syntax void M3dmodCopy( MIL_ID&nbsp;SrcContext3dmodId, //in MIL_INT64&nbsp;SrcIndex, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;DstIndex, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies data to or from a 3D model finder context. For example, you can copy the floor plane (M_FLOOR) or the resting plane (M_RESTING_PLANE) to the 3D model finder context. Parameters Parameters SrcContext3dmodId Specifies the identifier of the source find 3D model finder context or 3D geometry object depending on the type of copy operation. See the Parameter associations section for possible values that can be specified. SrcIndex Specifies the index of the model in the source find 3D model finder context, depending on the type of copy operation. See the Parameter associations section for possible values that can be specified. DstMilObjectId Specifies the identifier of the destination find 3D model finder context, 3D registration context, 3D geometry object, or a container, depending on the type of copy operation. See the Parameter associations section for possible values that can be specified. DstIndex Specifies the index of the model in the destination find surface 3D model finder context, depending on the type of copy operation. See the Parameter associations section for possible values that can be specified. CopyType Specifies the type of copy operation. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the SrcContext3dmodId, SrcIndex, DstMilObjectId, DstIndex, and CopyType parameters. For specifying the copy type For specifying the copy type CopyType Description SrcContext3dmodId SrcIndex DstMilObjectId DstIndex M_FLOOR Specifies to copy the plane that defines the floor of the scene to or from the specified find box or surface 3D model finder context. The floor plane provides contextual information about the position and orientation of objects within the scene. For a find surface 3D model finder context, you must copy a floor plane to the find surface 3D model finder context if you want to use a resting plane. The resting plane uses the floor plane as a reference when establishing the tilt angle of the occurrence. For a find box 3D model finder context, the floor plane is considered another possible background plane (M_COMPLETION_TO_BACKGROUND), so a single-faced box could be extruded to the floor plane in some situations. Refer to the Completion size when a single box face is found subsection of the Search settings specific to geometric models section of Chapter 37: 3D model finder for more information. Note that M_REMOVE_BACKGROUND does not use the specified plane to establish the background points to remove. You can remove floor points, using M_REMOVE_FLOOR. M_NULL Specifies to remove the plane that defines the floor of the scene from the specified find box or surface 3D model finder context. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of a find box or surface 3D model finder context from which to remove the plane that defines the floor of the scene. DstIndex This parameter must be set to M_DEFAULT. 3D plane geometry object ID from which to copy Specifies the identifier of a 3D plane geometry object from which to copy the floor plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a plane. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of a find box or surface 3D model finder context in which to copy the plane that defines the floor of the scene. DstIndex This parameter must be set to M_DEFAULT. Find box 3D model finder context ID from which to copy Specifies the identifier of a find box 3D model finder context from which to copy the floor plane. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the destination 3D geometry object in which to copy the floor plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. Note that after calling M3dmodCopy(), the destination 3D geometry object will return type M_PLANE if inquired using M3dgeoInquire() with M_GEOMETRY_TYPE. DstIndex This parameter must be set to M_DEFAULT. Find surface 3D model finder context ID from which to copy Specifies the identifier of a find surface 3D model finder context from which to copy the floor plane. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the destination 3D geometry object in which to copy the floor plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. Note that after calling M3dmodCopy(), the destination 3D geometry object will return type M_PLANE if inquired using M3dgeoInquire() with M_GEOMETRY_TYPE. DstIndex This parameter must be set to M_DEFAULT. M_MODEL Specifies to copy the point cloud of the model, as it was extracted before preprocessing, from the specified find surface 3D model finder context to the specified container. The model must have been previously defined with M3dmodDefine(). Find surface 3D model finder context ID from which to copy Specifies the identifier of the find surface 3D model finder context. SrcIndex Specifies the index of the model to copy from the source context. 0 &lt;= Value &lt;M_NUMBER_MODELS Specifies the index of the model to copy. DstMilObjectId Specifies the identifier of the container in which to copy the point cloud of the model. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. DstIndex This parameter must be set to M_DEFAULT. M_MODEL_PREPROCESSED Specifies to copy the point cloud of the preprocessed version of the model, from the specified find surface 3D model finder context to the specified container. The model must have been previously defined using M3dmodPreprocess(), and must have been called before this call. Find surface 3D model finder context ID from which to copy Specifies the identifier of the find surface 3D model finder context. SrcIndex Specifies the index of the model to copy from the source context. 0 &lt;= Value &lt;M_NUMBER_MODELS Specifies the index of the model to copy. DstMilObjectId Specifies the identifier of the container in which to copy the point cloud of the model. The container must have been previously allocated using MbufAllocContainer() with M_PROC, and must not be a child container. DstIndex This parameter must be set to M_DEFAULT. M_REFINE_REGISTRATION Specifies to copy the refine registration settings available for use by the specified find surface 3D model finder context. M_FIND_SURFACE_CONTEXT_REFINEMENT_FAST Specifies a predefined 3D registration context with settings that prioritize performance when fine-tuning results (M_REFINE_REGISTRATION with M_FIND_SURFACE_REFINEMENT_FAST). SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D registration context in which to copy the settings. Internal 3D registration context ID Specifies the internal 3D registration context used to perform the refine registration when M3dmodControl() with M_REFINE_REGISTRATION is set to M_USER_DEFINED_REGISTRATION. Retrieve this identifier by calling M3dmodInquire() with M_USER_DEFINED_REGISTRATION_CONTEXT_ID. MIL 3D registration context ID Specifies a MIL 3D registration context, allocated using M3dregAlloc(). DstIndex This parameter must be set to M_DEFAULT. M_FIND_SURFACE_CONTEXT_REFINEMENT_PRECISE Specifies a predefined 3D registration context with settings that prioritize accuracy when fine-tuning results (M_REFINE_REGISTRATION with M_FIND_SURFACE_REFINEMENT_PRECISE). SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D registration context in which to copy the settings. Internal 3D registration context ID Specifies the internal 3D registration context used to perform the refine registration when M3dmodControl() with M_REFINE_REGISTRATION is set to M_USER_DEFINED_REGISTRATION. Retrieve this identifier by calling M3dmodInquire() with M_USER_DEFINED_REGISTRATION_CONTEXT_ID. MIL 3D registration context ID Specifies a MIL 3D registration context, allocated using M3dregAlloc(). DstIndex This parameter must be set to M_DEFAULT. Find surface 3D model finder context ID from which to copy Specifies the identifier of the find surface 3D model finder context from which to copy the current refine registration settings. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of the 3D registration context in which to copy the settings. Internal 3D registration context ID Specifies the internal 3D registration context used to perform the refine registration when M3dmodControl() with M_REFINE_REGISTRATION is set to M_USER_DEFINED_REGISTRATION. Retrieve this identifier by calling M3dmodInquire() with M_USER_DEFINED_REGISTRATION_CONTEXT_ID. MIL 3D registration context ID Specifies a MIL 3D registration context, allocated using M3dregAlloc(). DstIndex This parameter must be set to M_DEFAULT. M_RESTING_PLANE Specifies to copy the resting plane to or from the specified find surface 3D model finder context. The resting plane is used to provide contextual information about how the model occurrence lies within the scene. When matching, MIL considers all poses of the occurrence unless a resting plane is specified. You can use M3dmodControl() with M_RESTING_PLANE_ANGLE_TOLERANCE to limit the acceptable angle of the model occurrence relative to the resting plane. This does not affect any of the scores, but it filters occurrences that do not sit on the resting plane, +/- the specified tolerance. Note that defining a resting plane does not decrease the search time because occurrences are filtered near the end of the search. Note that to use a resting plane, you must also copy a floor plane (M_FLOOR) to the find surface 3D model finder context; the floor plane denotes the base of the scene. The resting plane uses the floor plane as a reference when establishing the tilt angle of the occurrence. M_NULL Specifies to remove the resting plane from the specified find surface 3D model finder context. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of a surface 3D model finder context from which to remove the resting plane. DstIndex Specifies the index of the model in the destination context, from which to remove the resting plane. 0 &lt;= Value &lt;M_NUMBER_MODELS Specifies the index of the model. 3D plane geometry object ID from which to copy Specifies the identifier of a 3D plane geometry object from which to copy the resting plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY and defined as a plane. SrcIndex This parameter must be set to M_DEFAULT. DstMilObjectId Specifies the identifier of a find surface 3D model finder context in which to copy the resting plane. DstIndex Specifies the index of the model in the destination context in which to copy the plane. 0 &lt;= Value &lt;M_NUMBER_MODELS Specifies the index in which to copy the plane. Find surface 3D model finder context ID from which to copy Specifies the identifier of a find surface 3D model finder context from which to copy the resting plane. SrcIndex Specifies the index of the model in the source context, from which to copy the resting plane. 0 &lt;= Value &lt;M_NUMBER_MODELS Specifies the index of the model to copy. DstMilObjectId Specifies the identifier of the destination 3D geometry object in which to copy the resting plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. Note that after calling M3dmodCopy(), the destination 3D geometry object will return type M_PLANE if inquired using M3dgeoInquire() with M_GEOMETRY_TYPE. DstIndex This parameter must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - SrcContext3dmodId - SrcIndex - DstMilObjectId - DstIndex - CopyType - ControlFlag Parameter Associations For specifying the copy type [M_FLOOR] [M_MODEL] [M_MODEL_PREPROCESSED] [M_REFINE_REGISTRATION] [M_RESTING_PLANE] Compilation information ",
      "wordCount": 1870,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodCopyResult",
      "version": null,
      "title": "M3dmodCopyResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodCopyResult.htm",
      "text": " M3dmodCopyResult Synopsis Copy a group of results from a 3D model finder result buffer into a 3D geometry object, an image buffer, a transformation matrix object, a model in a find surface 3D model finder context, or a surface 3D model finder result buffer. Syntax void M3dmodCopyResult( MIL_ID&nbsp;SrcResult3dmodId, //in MIL_INT64&nbsp;SrcIndex, //in MIL_ID&nbsp;DstMilObjectId, //in MIL_INT64&nbsp;DstIndex, //in MIL_INT64&nbsp;CopyType, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function copies a group of results from a 3D model finder result buffer into a 3D geometry object, an image buffer, a transformation matrix object, a model in a find surface 3D model finder context, or a surface 3D model finder result buffer, according to the specified copy operation. For example, from a geometric 3D model finder result buffer, you can copy the geometry of the found occurrence (M_GEOMETRY), whereas from a surface 3D model finder result buffer, you can copy the matrix that transforms the model so that it is at the same location as the found occurrence (M_OCCURRENCE_MATRIX). Parameters Parameters SrcResult3dmodId Specifies the identifier of the 3D model finder result buffer from which to copy. The 3D model finder result buffer must have been allocated using M3dmodAllocResult() and must contain the results of a call to M3dmodFind(). SrcIndex Specifies the index of the model occurrence in the result buffer. For specifying the index of the model occurrence to copy Value Description M_DEFAULT Same as M_GENERAL. M_ALL Specifies to copy the result for all model occurrences. M_GENERAL Specifies to copy the result relating to the entire result buffer. 0 &lt;= Value &lt; M_NUMBER Specifies the index of the model occurrence for which to copy results. DstMilObjectId Specifies the identifier of the 3D geometry object, transformation matrix object, image buffer, find surface 3D model finder context, or surface 3D model finder result buffer in which to store the copied results. See the Parameter associations section for possible values that can be specified. DstIndex Specifies the index of the element in the destination object in which to copy. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. CopyType Specifies the type of copy operation to perform. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The tables below list possible values for the DstMilObjectId, DstIndex, and CopyType parameters. For copying general results from the source 3D model finder result buffer For copying the results of a specific occurrence or all occurrences from the source 3D model finder result buffer For copying the results of a specific occurrence from the source 3D model finder result buffer To copy general results, set the CopyType parameter to the following value. In this case, you must set SrcIndex to M_GENERAL or M_DEFAULT. Note that any unused parameters should be set to M_DEFAULT. For copying general results from the source 3D model finder result buffer CopyType Description DstMilObjectId DstIndex M_BACKGROUND_MASK Specifies to copy a non-zero value into an image buffer for each of the occurrence's background points and a 0 value elsewhere, creating a background mask image. Information about a point is set in the image buffer at the same location as the point's location in the range component of its point cloud container. Note that this is only available if M_REMOVE_BACKGROUND was enabled. MIL image buffer identifier in which to copy Specifies the identifier of the image buffer in which to copy results. The image buffer must be a 1-band buffer. The image buffer size must equal the size of the container used during the 3D model finder operation, in both X and Y. To retrieve the size, use M3dmodGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_FLOOR_MASK Specifies to copy a non-zero value into an image buffer for each of the floor points and a 0 value elsewhere, creating a floor mask image. Information about a point is set in the image buffer at the same location as the point's location in the range component of its point cloud container. Note that this is only available if M_REMOVE_FLOOR was enabled. Note that M_FLOOR_MASK is only available for surface results. MIL image buffer identifier in which to copy Specifies the identifier of the image buffer in which to copy results. The image buffer must be a 1-band buffer. The image buffer size must equal the size of the container used during the 3D model finder operation, in both X and Y. To retrieve the size, use M3dmodGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_RESULT Specifies to copy surface results into another surface 3D model finder result buffer to reuse them in subsequent searches. You should use this copy type when you want to reuse the results as an optimization to specify the approximate location for multiple searches. For example, if you expect occurrences to be found in similar locations in multiple future searches, set up two result buffers: one for the initial search and another for use with subsequent searches. Before each subsequent search, copy into its result buffer the results from the initial search (so as not to change the original results), and use M3dmodControl() with M_REUSE_RESULT set to M_ENABLE to reuse them at the beginning of the search to speed up the operation. M3dmodFind() will search for occurrences at the stored positions before searching the rest of the target. You can use M3dmodModifyResult() to modify or delete results before performing the search. Note that if you only want to reuse the results once, you don't need to use this copy type; if no results are copied and M3dmodControl() with M_REUSE_RESULT is enabled, M3dmodFind() will reuse the most recent results in the specified result buffer. Note that M_RESULT is only available for surface results. MIL surface 3D model finder result buffer identifier in which to copy Specifies the identifier of a surface 3D model finder result buffer in which to copy surface results. The result buffer must have been previously allocated using M3dmodAllocResult() with M_FIND_SURFACE_RESULT. To copy the results of a specific occurrence or all occurrences, set the CopyType parameter to one of the following values. In this case, you must set SrcIndex to M_ALL or the index of the occurrence. Note that any unused parameters should be set to M_DEFAULT. For copying the results of a specific occurrence or all occurrences from the source 3D model finder result buffer CopyType Description DstMilObjectId DstIndex M_INLIER_INDEX_IMAGE Specifies to copy the model occurrence's index into an image buffer for each of the occurrence's inlier points, creating an inlier area index image. The inlier points of the occurrence are based on M_FIT_DISTANCE. Information about a point is set in the image buffer at the same location as the point's location in the range component of its point cloud container. Points that are not part of any occurrence are given the value of -1 in signed buffers, and are set to the maximum buffer value in unsigned buffers. Note that for surface results, this is only available if M_SAVE_FIT_INFO was enabled. MIL image buffer identifier in which to copy Specifies the identifier of the image buffer in which to copy results. The image buffer must be a 1-band buffer. The image buffer size must equal the size of the container used during the 3D model finder operation, in both X and Y. To retrieve the size, use M3dmodGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_INLIER_MASK Specifies to copy a non-zero value into an image buffer for each of the occurrence's inlier points and a 0 value elsewhere, creating an inlier mask image. The non-zero value is 1 for floating-point image buffers and -1 for signed image buffers. For unsigned image buffers, the maximum buffer value is used. All other pixels in the buffer are set to 0. The inlier points of the occurrence are based on M_FIT_DISTANCE. Information about a point is set in the image buffer at the same location as the point's location in the range component of its point cloud container. Note that for surface results, this is only available if M_SAVE_FIT_INFO was enabled. MIL image buffer identifier in which to copy Specifies the identifier of the image buffer in which to copy results. The image buffer must be a 1-band buffer. The image buffer size must equal the size of the container used during the 3D model finder operation, in both X and Y. To retrieve the size, use M3dmodGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_RESERVED_INDEX_IMAGE Specifies to copy the model occurrence's index into the destination image buffer for each of the points in the reserved area of the occurrence, creating a reserved area index image. The points in the reserved area of the occurrence are based on M_RESERVED_POINTS_DISTANCE. Information about a point is set in the image buffer at the same location as the point's location in the range component of its point cloud container. Points that are not part of any occurrence are given the value of -1 in signed buffers, and are set to the maximum buffer value in unsigned buffers. MIL image buffer identifier in which to copy Specifies the identifier of the image buffer in which to copy results. The image buffer must be a 1-band buffer. The image buffer size must equal the size of the container used during the 3D model finder operation, in both X and Y. To retrieve the size, use M3dmodGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. M_RESERVED_MASK Specifies to copy a non-zero value into an image buffer for each of the occurrence's reserved points and a 0 value elsewhere, creating a reserved mask image. The non-zero value is 1 for floating-point image buffers and -1 for signed image buffers. For unsigned image buffers, the maximum buffer value is used. All other pixels in the buffer are set to 0. The points in the reserved area of the occurrence are based on M_RESERVED_POINTS_DISTANCE. Information about a point is set in the image buffer at the same location as the point's location in the range component of its point cloud container. Note that this copy type is useful for creating a mask image to use, for example, with M3dimCrop(). MIL image buffer identifier in which to copy Specifies the identifier of the image buffer in which to copy results. The image buffer must be a 1-band buffer. The image buffer size must equal the size of the container used during the 3D model finder operation, in both X and Y. To retrieve the size, use M3dmodGetResult() with M_RESULT_IMAGE_SIZE_X and M_RESULT_IMAGE_SIZE_Y. This image buffer must not have a region of interest (ROI) associated with it. Using an image buffer with an ROI will cause an error. To copy the results of a specific occurrence, set the CopyType parameter to one of the following values. In this case, you must set SrcIndex to the index of the occurrence. Note that any unused parameters should be set to M_DEFAULT. For copying the results of a specific occurrence from the source 3D model finder result buffer CopyType Description DstMilObjectId DstIndex M_BOUNDING_BOX Specifies to copy the oriented bounding box of the found model occurrence into the specified 3D geometry object, establishing a 3D box geometry. MIL 3D geometry object identifier in which to copy Specifies the identifier of a 3D geometry object in which to copy results. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. M_CENTER Specifies to copy, into a 3D geometry object, the center of the specified face of the box occurrence, establishing a point geometry. Note that M_CENTER is only available for box occurrences. You must specify a combination value from the following table: To specify for which face of the box occurrence to copy results MIL 3D geometry object identifier in which to copy Specifies the identifier of a 3D geometry object in which to copy results. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. Note that after calling M3dmodCopyResult(), the destination 3D geometry object will return type M_POINT if inquired using M3dgeoInquire() with M_GEOMETRY_TYPE. M_FACE Specifies to copy, into a 3D geometry object, the specified face of the box occurrence, establishing a plane geometry. Note that M_FACE is only available for box occurrences. You must specify a combination value from the following table: To specify for which face of the box occurrence to copy results MIL 3D geometry object identifier in which to copy Specifies the identifier of a 3D geometry object in which to copy results. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. Note that after calling M3dmodCopyResult(), the destination 3D geometry object will return type M_PLANE if inquired using M3dgeoInquire() with M_GEOMETRY_TYPE. M_FIXTURING_MATRIX Specifies to copy, into the transformation matrix, the transformation that can move the working coordinate system to the found model occurrence. For a box occurrence, the transformation moves the working coordinate system's origin to the box's center. The box's rotation is applied if there is one. You can add M_FACE_INDEX() to M_FIXTURING_MATRIX to copy the fixturing matrix for one or all faces of a box occurrence. For a face, the transformation moves the working coordinate system's X- and Y- axis to the center of the face, and the normal becomes the Z-axis. For a cylinder occurrence, the transformation moves the working coordinate system's origin to the cylinder's start point, and the cylinder's central axis becomes the positive Z-axis. The rotation of the X- and Y-axis is determined by the minimal rotation that must be applied to align the positive Z-axis with the cylinder's central axis. For a rectangular plane occurrence, the transformation moves the working coordinate system's X- and Y- axis to the rectangular plane, and the normal becomes the Z-axis. For a sphere occurrence, the transformation moves the working coordinate system's origin to the sphere's center. No rotation is applied. For a surface occurrence, the transformation moves the working coordinate system such that it aligns with the model's reference axis transformed at the occurrence. You can specify a combination value from the following table: To specify for which face of the box occurrence to copy results MIL transformation matrix object identifier in which to copy Specifies the identifier of the transformation matrix object in which to copy results. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_GEOMETRY Specifies to copy the geometry of the found model occurrence, into the specified 3D geometry object, establishing a 3D geometry of the same type. Note that M_GEOMETRY is only available for sphere, cylinder, and box model results. MIL 3D geometry object identifier in which to copy Specifies the identifier of a 3D geometry object in which to copy results. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. M_OCCURRENCE_MATRIX Specifies to copy, into the transformation matrix, the transformation that transforms the model to the same location as the found occurrence. Note that M_OCCURRENCE_MATRIX is only available for surface results. MIL transformation matrix object identifier in which to copy Specifies the identifier of the transformation matrix object in which to copy results. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_PLANE Specifies to copy into a 3D geometry object the infinite plane on which the rectangular plane occurrence is found. Note that M_PLANE is only available for rectangular plane results. MIL 3D geometry object identifier in which to copy Specifies the identifier of a 3D geometry object in which to copy results. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. M_RESTING_PLANE Specifies to copy the plane that the occurrence lies on (set using M3dmodCopy() with M_RESTING_PLANE), to the model in the specified find surface 3D model finder context or into the specified 3D geometry object. Note that M_RESTING_PLANE is only available for surface results. MIL 3D geometry object identifier in which to copy Specifies the identifier of a 3D geometry object in which to copy the resting plane. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY. MIL find surface 3D model finder context identifier in which to copy Specifies the identifier of a find surface 3D model finder context in which to copy the resting plane. The context must have been previously allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT. 0 &lt;= Value &lt; M_NUMBER_MODELS Specifies the index of the model in the find surface 3D model finder context in which to copy the resting plane. Combination value for M_CENTER , M_FACE , M_FIXTURING_MATRIX. You must add the following value to the above-mentioned values to specify for which face of the box occurrence to copy results. Note that this combination is optional for some values. Refer to the individual values to determine if this is the case. For specifying the box face's index Combination value Description M_FACE_INDEX( MIL_INT Index ) Specifies to copy results for a specific face of a box occurrence. Parameters Index Set this parameter to the following: 0 &lt;= Value &lt; 6 Specifies the index of the face for which to copy the result. Indices 0 and 5 correspond to the faces with the minimum XYZ and maximum XYZ coordinate values, respectively. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - SrcResult3dmodId - SrcIndex For specifying the index of the model occurrence to copy - DstMilObjectId - DstIndex - CopyType - ControlFlag Parameter Associations For copying general results from the source 3D model finder result buffer [M_BACKGROUND_MASK] [M_FLOOR_MASK] [M_RESULT] For copying the results of a specific occurrence or all occurrences from the source 3D model finder result buffer [M_INLIER_INDEX_IMAGE] [M_INLIER_MASK] [M_RESERVED_INDEX_IMAGE] [M_RESERVED_MASK] For copying the results of a specific occurrence from the source 3D model finder result buffer [M_BOUNDING_BOX] [M_CENTER] [M_FACE] [M_FIXTURING_MATRIX] [M_GEOMETRY] [M_OCCURRENCE_MATRIX] [M_PLANE] [M_RESTING_PLANE] + For specifying the box face's index Compilation information ",
      "wordCount": 3086,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodDefine",
      "version": null,
      "title": "M3dmodDefine",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodDefine.htm",
      "text": " M3dmodDefine Synopsis Add a model to, or delete a model from, a 3D model finder context. Syntax MIL_INT64 M3dmodDefine( MIL_ID&nbsp;Context3dmodId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;ModelType, //in MIL_DOUBLE&nbsp;Param1, //in MIL_DOUBLE&nbsp;Param2, //in MIL_DOUBLE&nbsp;Param3, //in MIL_DOUBLE&nbsp;Param4, //in MIL_DOUBLE&nbsp;Param5, //in MIL_DOUBLE&nbsp;Param6, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function allows you to add a model to, or remove a model from, a 3D model finder context. Note, when a model is added or deleted, the 3D model finder context must be preprocessed again, using M3dmodPreprocess(). You can define one model per model finder context. A geometric model can be defined either nominally or using a range of accepted values. Nominal models should be used when the expected occurrences are all approximately the same size; define models as ranges when you want to accept a variety of occurrences at different scales. Note that for range-type models, the proportions of the occurrences don't have to be the same as that of the model, as long as they are in the valid range. Models are defined from specified numeric constraints, from one or two specified 3D geometries, or from a point cloud. The search is performed according to the general search settings specified in the 3D model finder context (M_DEFAULT), as well as the individual model search settings. Both the context and individual model search settings can be specified using M3dmodControl(). Parameters Parameters Context3dmodId Specifies the 3D model finder context to which to add, or from which to delete, the model. The 3D model finder context must have been previously allocated using M3dmodAlloc() with M_FIND_..._CONTEXT. Operation Specifies whether to add or remove a model. See the Parameter associations section for possible values that can be specified. ModelType Specifies the type of model to define when adding models to the context. Note that the type of model specified must match the specified 3D model finder context. See the Parameter associations section for possible values that can be specified. Param1 Specifies the first parameter. Its definition is dependent on the model type chosen. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param2 Specifies the second parameter. Its definition is dependent on the model type chosen. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param3 Specifies the third parameter. Its definition is dependent on the model type chosen. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param4 Specifies the fourth parameter. Its definition is dependent on the model type chosen. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param5 Specifies the fifth parameter. Its definition is dependent on the model type chosen. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. Param6 Specifies the sixth parameter. Its definition is dependent on the model type chosen. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the Operation, ModelType, Param1, Param2, Param3, Param4, Param5, and Param6 parameters. For adding or removing a model from the context To add a model to the 3D model finder context, the Operation, ModelType, Param1, Param2, Param3, Param4, Param5, and Param6 parameters can be set to the following values. Note that any unused parameters should be set to M_DEFAULT. For adding or removing a model from the context Operation Description ModelType Param1 Param2 Param3 Param4 Param5 Param6 M_ADD Adds a model to the 3D model finder context. M_BOX Specifies to add a nominal box as the model. Param1 Specifies the nominal length of the box model along its first (X) axis. Param2 Specifies the nominal length of the box model along its second (Y) axis. Param3 Specifies the nominal length of the box model along its third (Z) axis. Param4 Specifies the tolerance for the length of the occurrences along their first (X) axis. Occurrences must have a length along their first axis within the specified nominal length (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param5 Specifies the tolerance for the length of the occurrences along their second (Y) axis. Occurrences must have a length along their second axis within the specified nominal length (Param2) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param6 Specifies the tolerance for the length of the occurrences along their third (Z) axis. Occurrences must have a length along their third axis within the specified nominal length (Param3) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. M_BOX_RANGE Specifies to add a box, defined with a range of possible values, as the model. Param1 Specifies the minimum length of the first (X) axis of the box model. Param2 Specifies the minimum length of the second (Y) axis of the box model. Param3 Specifies the minimum length of the third (Z) axis of the box model. Param4 Specifies the maximum length of the first (X) axis of the box model. Param5 Specifies the maximum length of the second (Y) axis of the box model. Param6 Specifies the maximum length of the third (Z) axis of the box model. M_CYLINDER Specifies to add a nominal cylinder as the model. Param1 Specifies the nominal radius of the cylinder model. Param2 Specifies the nominal length of the cylinder model. Param3 Specifies the tolerance for the radius of the occurrences. Occurrences must have a radius within the specified nominal radius (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param4 Specifies the tolerance for the length of occurrences. Occurrences must have a length within the specified nominal length (Param2) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param5 Specifies whether the cylinder model includes bases. Setting this value reserves points corresponding to a found occurrence's bases. Note that points found on an occurrence's bases will not affect the fit regardless of this setting. M_DEFAULT Same as M_WITH_BASES. M_WITH_BASES Specifies that the cylinder model includes bases. M_WITHOUT_BASES Specifies that the cylinder model does not include bases. M_CYLINDER_RANGE Specifies to add a cylinder, defined with a range of possible values, as the model. Param1 Specifies the minimum radius of the cylinder model. Param2 Specifies the minimum length of the cylinder model. Param3 Specifies the maximum radius of the cylinder model. Param4 Specifies the maximum length of the cylinder model. Param5 Specifies whether the cylinder model includes bases. Setting this value reserves points corresponding to a found occurrence's bases. Note that points found on an occurrence's bases will not affect the fit regardless of this setting. M_DEFAULT Same as M_WITH_BASES. M_WITH_BASES Specifies that the cylinder model includes bases. M_WITHOUT_BASES Specifies that the cylinder model does not include bases. M_RECTANGLE Specifies to add a nominal rectangular plane as the model. Param1 Specifies the nominal length of the rectangular plane model along its first (X) axis. Param2 Specifies the nominal length of the rectangular plane model along its second (Y) axis. Param3 Specifies the tolerance for the length of the occurrences along their first (X) axis. Occurrences must have a length along their first axis within the specified nominal length (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param4 Specifies the tolerance for the length of the occurrences along their second (Y) axis. Occurrences must have a length along their second axis within the specified nominal length (Param2) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. M_RECTANGLE_RANGE Specifies to add a rectangular plane, defined with a range of possible values, as the model. Param1 Specifies the minimum length of the first (X) axis of the rectangular plane model. Param2 Specifies the minimum length of the second (Y) axis of the rectangular plane model. Param3 Specifies the maximum length of the first (X) axis of the rectangular plane model. Param4 Specifies the maximum length of the second (Y) axis of the rectangular plane model. M_SPHERE Specifies to add a nominal sphere as the model. Param1 Specifies the nominal radius of the sphere model. Param2 Specifies the tolerance for the radius of the occurrences. Occurrences must have a radius within the specified nominal radius (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. M_SPHERE_RANGE Specifies to add a sphere, defined with a range of possible values, as the model. Param1 Specifies the minimum radius of the sphere model. Param2 Specifies the maximum radius of the sphere model. M_ADD_FROM_GEOMETRY Adds a model to the 3D model finder context using predefined 3D geometries. M_BOX Specifies to add a nominal box as the model, using a predefined 3D geometry. Param1 Specifies the identifier of a 3D box geometry object, previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a box. Param2 Specifies the tolerance for the length of the occurrences along their first (X) axis. Occurrences must have a length along their first axis within the specified 3D geometry's length (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param3 Specifies the tolerance for the length of the occurrences along their second (Y) axis. Occurrences must have a length along their second axis within the specified 3D geometry's length (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param4 Specifies the tolerance for the length of the occurrences along their third (Z) axis. Occurrences must have a length along their third axis within the specified 3D geometry's length (Param3) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. M_BOX_RANGE Specifies to add a box, defined with a range of possible sizes, as the model, using predefined 3D geometries. Param1 Specifies the identifier of a 3D box geometry object that defines the minimum lengths along the three axes (X, Y, Z). The geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a box. Param2 Specifies the identifier of a 3D box geometry object that defines the maximum lengths along the three axes (X, Y, Z). The geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a box. M_CYLINDER Specifies to add a nominal cylinder as the model, using a predefined 3D geometry. Param1 Specifies the identifier of a 3D cylinder geometry object, previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a cylinder. Param2 Specifies the tolerance for the radius of occurrences. Occurrences must have a radius within the specified 3D geometry's radius (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. Param3 Specifies the tolerance for the length of occurrences. Occurrences must have a length within the specified 3D geometry's length (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. M_CYLINDER_RANGE Specifies to add a cylinder, defined with a range of possible sizes, as the model, using predefined 3D geometries. Param1 Specifies the identifier of a 3D cylinder geometry object that defines the minimum radius and length. The geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a cylinder. Param2 Specifies the identifier of a 3D cylinder geometry object that defines the maximum radius and length. The geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a cylinder. M_SPHERE Specifies to add a nominal sphere as the model, using predefined 3D geometries. Param1 Specifies the identifier of a 3D sphere geometry object, previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a sphere. Param2 Specifies the tolerance for the radius of the occurrences. Occurrences must have a radius within the specified 3D geometry's radius (Param1) +/- the specified tolerance. Note that if you expect occurrences to have a significantly different size than the model, you should use a range-type model instead, as the algorithm used for this type of model is better suited. M_SPHERE_RANGE Specifies to add a sphere, defined with a range of possible sizes, as the model, using predefined 3D geometries. Param1 Specifies the identifier of a 3D sphere geometry object that defines the minimum radius. The geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a sphere. Param2 Specifies the identifier of a 3D sphere geometry object that defines the maximum radius. The geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and successfully defined as a sphere. M_ADD_FROM_POINT_CLOUD Adds a model to the 3D model finder context using the points in a point cloud. M_SURFACE Specifies to add an arbitrary surface, defined by a point cloud, as the model. Param1 Specifies the identifier of a container containing a point cloud of a surface. Param2 Specifies whether to remove outliers from the model. When enabled, MIL removes outliers such as clusters of points around the perimeter of the model. Enable outlier removal if the model contains stray points, especially if M_REFINE_REGISTRATION will be enabled. You can change this setting later, using M3dmodControl() with M_REMOVE_OUTLIERS. Note that you should not enable outlier removal if your model is defined from a point cloud created from a CAD file (using MbufImport() / MbufRestore()) since parts of the model can be removed, which can cause the search to fail/return false positives. M_DEFAULT Same as M_DISABLE. M_DISABLE Specifies not to perform outlier removal on the model. M_ENABLE Specifies to perform outlier removal on the model. Param3 Specifies the position of the model's reference axis origin. A surface occurrence's found position is determined by the model's reference axis; position results return the coordinates of the model's reference axis origin transformed at the model occurrence. By default, the reference axis origin is at the origin of the working coordinate system of the original point cloud from which the model is defined. This does not necessarily correspond to the center of the model. You can use this parameter to move the origin of the working coordinate system to the required position. M_DEFAULT Specifies the default behavior; the origin of the model's reference axis is at the origin of the working coordinate system of the original point cloud from which the model is defined. M_BOX_CENTER Specifies to move the origin of the working coordinate system to the center of the point cloud's bounding box, setting the model's reference axis origin to this position. M_CENTROID Specifies to move the origin of the working coordinate system to the point cloud's centroid (center of mass), setting the model's reference axis origin to this position. M_GEOMETRY_CENTER Specifies to move the origin of the working coordinate system to the center of the specified 3D geometry, setting the model's reference axis origin to this position. M_TRANSFORMATION_MATRIX Specifies to transform the point cloud according to the specified transformation matrix. Param4 Specifies the identifier of a transformation matrix object or a 3D geometry object. You must set this parameter to M_DEFAULT unless Param3 is set to M_GEOMETRY_CENTER or M_TRANSFORMATION_MATRIX. M_DEFAULT Specifies the default behavior. 3D geometry object ID Specifies the identifier of a 3D geometry object. The 3D geometry object must have been previously allocated using M3dgeoAlloc() with M_GEOMETRY, and must have been successfully defined as a box or a sphere. Transformation matrix object ID Specifies the identifier of a transformation matrix object. The transformation object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_DELETE Deletes a model from the 3D model finder context. M_DEFAULT Specifies the default behavior. Param1 Specifies the index of the model to delete. Return value Reserved for future expansion. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - Context3dmodId - Operation - ModelType - Param1 - Param2 - Param3 - Param4 - Param5 - Param6 - ControlFlag Parameter Associations For adding or removing a model from the context [M_ADD] [M_ADD_FROM_GEOMETRY] [M_ADD_FROM_POINT_CLOUD] [M_DELETE] Return value Compilation information ",
      "wordCount": 3015,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodDraw3d",
      "version": null,
      "title": "M3dmodDraw3d",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodDraw3d.htm",
      "text": " M3dmodDraw3d Synopsis Draw features of models, or results of found model occurrences, into a 3D graphics list. Syntax MIL_INT64 M3dmodDraw3d( MIL_ID&nbsp;OperationDraw3dContext3dmodId, //in MIL_ID&nbsp;SrcContextOrResult3dmodId, //in MIL_INT64&nbsp;SrcIndex, //in MIL_ID&nbsp;DstList3dgraId, //in MIL_INT64&nbsp;DstParentLabel, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function draws the specified feature of a surface model, or result of any found model occurrence(s), stored in the specified find surface 3D model finder context or find 3D model finder result buffer, into a 3D graphics list. Set the draw operations and options for the draw using M3dmodControlDraw(). Note that for a 3D model finder context, the model must be defined using M3dmodDefine() and, if M_DRAW_MODEL_PREPROCESSED is active, the context must be preprocessed using M3dmodPreprocess(), before calling this function. For a 3D model finder result buffer, M3dmodFind() must be called before calling this function. Parameters Parameters OperationDraw3dContext3dmodId Specifies the identifier of the draw 3D model finder context that specifies the annotations to draw and how to draw them. This parameter must be set to one of the following values: For specifying the draw 3D model finder context Value Description M_DEFAULT Specifies a predefined draw 3D model finder context with all draw operations (M3dmodControlDraw()) set to use default settings. MIL draw 3D model finder context identifier Specifies a valid draw 3D model finder context identifier, which you have allocated using M3dmodAlloc() with either M_DRAW_3D_GEOMETRIC_CONTEXT (to draw occurrences of geometric models) or M_DRAW_3D_SURFACE_CONTEXT (to draw occurrences of surface models or to draw features of surface models). SrcContextOrResult3dmodId Specifies the identifier of the 3D model finder context, previously allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT, or the identifier of the 3D model finder result buffer, previously allocated using M3dmodAllocResult() with M_FIND_BOX_RESULT, M_FIND_CYLINDER_RESULT, M_FIND_RECTANGULAR_PLANE_RESULT, M_FIND_SPHERE_RESULT, or M_FIND_SURFACE_RESULT. SrcIndex Specifies the index of the model in the 3D model finder context, or of the occurrence in the 3D model finder result buffer. For specifying the index of the model or occurrence to draw Value Description M_DEFAULT Same as M_ALL. M_ALL Draws the specified feature(s) of all models or all occurrences. A sub-parent label for each model or occurrence will be created under the parent label returned by this function. 0 &lt;= Value &lt; M_NUMBER Specifies the index of the model occurrence. 0 &lt;= Value &lt; M_NUMBER_MODELS Specifies the index of the model. DstList3dgraId Specifies the identifier of the 3D graphics list in which to draw. You can specify a 3D graphics list that you have previously allocated using M3dgraAlloc(), or you can specify the identifier of the 3D display's internal graphics list (inquired using M3ddispInquire() with M_3D_GRAPHIC_LIST_ID). DstParentLabel Specifies the label of the 3D graphic in the 3D graphics list to use as the model annotation's parent. For specifying the parent label Value Description M_DEFAULT Same as M_ROOT_NODE. M_ROOT_NODE Specifies the top-most node of the 3D graphics list. Value &gt;= 0 Specifies the label of the 3D graphic in the 3D graphics list. Label 0 is the 3D graphics list's root node. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Return value Returns the parent label of all 3D graphics that the function added to the 3D graphics list. If the specified 3D model finder result buffer contains no occurrences, a node 3D graphic is added to the graphics list and the node's label is returned. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - OperationDraw3dContext3dmodId For specifying the draw 3D model finder context - SrcContextOrResult3dmodId - SrcIndex For specifying the index of the model or occurrence to draw - DstList3dgraId - DstParentLabel For specifying the parent label - ControlFlag Return value Compilation information ",
      "wordCount": 596,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodFind",
      "version": null,
      "title": "M3dmodFind",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodFind.htm",
      "text": " M3dmodFind Synopsis Search for the model in the specified 3D model finder context in the specified point cloud. Syntax void M3dmodFind( MIL_ID&nbsp;Context3dmodId, //in MIL_ID&nbsp;ContainerBufId, //in MIL_ID&nbsp;Result3dmodId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function searches for the model in the specified 3D model finder context, in the specified point cloud. Results are stored in the specified 3D model finder result buffer. You can retrieve results using M3dmodGetResult(). To consider the color information of the surface model and target point cloud, set M3dmodControl() with M_USE_COLOR to M_ENABLE. If you expect occurrences to be found in similar locations to the occurrences found in the previous search, you can use M3dmodControl() with M_REUSE_RESULT set to M_ENABLE to reuse the previous results to speed up the current search. M3dmodFind() will search the target point cloud at the positions of the occurrences found during the previous search, before searching for occurrences in the rest of the point cloud. To reuse the same results for multiple searches, set up two result buffers: one for the initial search and another for use with subsequent searches. Before each subsequent search, copy into its result buffer the results from the initial search, using M3dmodCopyResult() with M_RESULT, and use this result buffer for the search. If there is a known movement between scans or an occurrence is not always present, you can use M3dmodModifyResult() to transform or delete results for an occurrence. A normals component (M_COMPONENT_NORMALS_MIL) must exist in the specified point cloud container. Otherwise, the M3dmodFind() operation will not complete successfully and M3dmodGetResult() with M_STATUS will return M_MISSING_COMPONENT_NORMALS_MIL. You can use M3dimNormals() to generate a normals component. If an occurrence has a score greater than or equal to its model's certainty level (specified using M3dmodControl() with M_CERTAINTY), it is automatically considered an occurrence (default 90%); the remaining occurrences will be the best of those greater than or equal to the model's acceptance level (specified using M3dmodControl() with M_ACCEPTANCE). The maximum number of occurrences found depends on the maximum number specified for the context (specified using M3dmodControl() with M_NUMBER). The 3D model finder context must be preprocessed with M3dmodPreprocess() before calling this function. Parameters Parameters Context3dmodId Specifies the identifier of the 3D model finder context to use for the search, and other settings related to the 3D model finder operation. The context must have been previously allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT, M_FIND_CYLINDER_CONTEXT, M_FIND_RECTANGULAR_PLANE_CONTEXT, M_FIND_SPHERE_CONTEXT, or M_FIND_SURFACE_CONTEXT and a corresponding model must have been previously defined using M3dmodDefine(). ContainerBufId Specifies the identifier of the 3D-processable point cloud container in which to search for the model. The container must be 3D-processable (that is, if you call MbufInquireContainer() with M_3D_PROCESSABLE, the function returns M_PROCESSABLE). Result3dmodId Specifies the 3D model finder result buffer identifier in which to store results. The result buffer must have been previously allocated using M3dmodAllocResult(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - Context3dmodId - ContainerBufId - Result3dmodId - ControlFlag Compilation information ",
      "wordCount": 503,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodFree",
      "version": null,
      "title": "M3dmodFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodFree.htm",
      "text": " M3dmodFree Synopsis Free a 3D model finder context or a 3D model finder result buffer. Syntax void M3dmodFree( MIL_ID&nbsp;ContextOrResult3dmodId //in ) Description This function deletes the specified 3D model finder context or 3D model finder result buffer, and releases any memory associated with it. All 3D model finder contexts and 3D model finder result buffers allocated on a particular system must be freed before the system can be freed, unless M_UNIQUE_ID was specified during allocation. Parameters Parameter ContextOrResult3dmodId Specifies the identifier of the 3D model finder context or 3D model finder result buffer to free. These must have been successfully allocated (using M3dmodAlloc() or M3dmodAllocResult()) prior to calling this function. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - ContextOrResult3dmodId Compilation information ",
      "wordCount": 132,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodGetResult",
      "version": null,
      "title": "M3dmodGetResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodGetResult.htm",
      "text": " M3dmodGetResult Synopsis Get the specified type of result(s) from a 3D model finder result buffer. Syntax MIL_DOUBLE M3dmodGetResult( MIL_ID&nbsp;Result3dmodId, //in MIL_INT64&nbsp;ResultIndex, //in MIL_INT64&nbsp;ResultType, //in void&nbsp;*ResultArrayPtr //out ) Description This function retrieves the result(s) of the specified type from a 3D model finder result buffer. Parameters Parameters Result3dmodId Specifies the identifier of the 3D model finder result buffer from which to retrieve results. The result buffer must have been previously allocated on the system using M3dmodAllocResult() with M_FIND_..._RESULT. See the Parameter associations section for possible values that can be specified. ResultIndex Specifies where to get results. This parameter must be set to one of the following values: For specifying the index of the 3D model Value Description M_DEFAULT Same as M_GENERAL. M_ALL Specifies to retrieve results for all model occurrences in the 3D model finder result buffer. M_GENERAL Specifies to retrieve general results from the 3D model finder result buffer. 0 &lt;= Value &lt; M_NUMBER Specifies the index of the model occurrence for which to retrieve results. ResultType Specifies the type of result to retrieve. See the Parameter associations section for possible values that can be specified. ResultArrayPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] MIL_DOUBLE MIL_INT MIL_INT32 MIL_INT64 Specifies the address of the array in which to write results. Since M3dmodGetResult() also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the Result3dmodId and ResultType parameters and possible values returned to the ResultArrayPtr parameter. For retrieving general results from the 3D model finder result buffer For retrieving a result of a single occurrence or all occurrences from the 3D model finder result buffer To retrieve a general result, the ResultType parameter should be set to one of the following values. In this case, you must set ResultIndex to M_GENERAL or M_DEFAULT. The following results are only available for retrieval after a 3D model finder operation, unless otherwise specified. For retrieving general results from the 3D model finder result buffer Result3dmodId Description ResultType ResultArrayPtr - Possible values returned 3D model finder result buffer ID Specifies a box, cylinder, rectangular plane, sphere, or surface 3D model finder result buffer, allocated using M3dmodAllocResult() with M_FIND_..._RESULT, and used to store M3dmodFind() results. M_FIT_DISTANCE_USED Retrieves the fit distance used during the 3D model finder operation. For a surface model, this result is only available if M_SAVE_FIT_INFO was enabled. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_NUMBER Retrieves the number of model occurrences found. This result is always available. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_RESULT_IMAGE_SIZE_X Retrieves the size in X of the range component of the target point cloud, in pixels. Note that you can use this value to allocate an image buffer of an appropriate size for M3dmodCopyResult() to create an occurrence index image or mask image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_RESULT_IMAGE_SIZE_Y Retrieves the size in Y of the range component of the target point cloud, in pixels. Note that you can use this value to allocate an image buffer of an appropriate size for M3dmodCopyResult() to create an occurrence index image or mask image. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_STATUS Retrieves the global status of the last M3dmodFind() operation. This result is always available. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL_POINTS_REPLICATED Specifies that all points of the scene were replicated. Note that this result is only available for surface 3D model finder result buffers. M_COMPLETE Specifies that the 3D model finder operation completed successfully. 3D model finder results are available. M_CURRENTLY_CALCULATING Specifies that the 3D model finder operation is ongoing. M_INTERNAL_ERROR Specifies that an unexpected internal error occurred during the 3D model finder operation. M_MISSING_COMPONENT_NORMALS_MIL Specifies that the source point cloud container does not have the M_COMPONENT_NORMALS_MIL component, so the 3D model finder operation was unable to be completed. You can use M3dimNormals() to generate a normals component. M_NOT_ENOUGH_FEATURES Specifies that the surface 3D model finder operation was not completed because of an insufficient number of unique features. M_NOT_ENOUGH_MEMORY Specifies that the 3D model finder operation was not completed because of a lack of available memory. M_NOT_ENOUGH_VALID_DATA Specifies that the 3D model finder operation failed because there were not enough valid points. M_NOT_INITIALIZED Specifies that the 3D model finder result buffer was not used in a call to M3dmodFind(), and contains no results. M_STOPPED_BY_REQUEST Specifies that the 3D model finder operation was stopped from another thread using M3dmodControl() with M_STOP_FIND. M_TIMEOUT_REACHED Specifies that the 3D model finder operation took longer than the allowed value, specified using M3dmodControl() with M_TIMEOUT, and stopped before completion. M_STATUS_REFINE_REGISTRATION Retrieves the global status of the refine registration applied to the different occurrences. This result is only available if M_REFINE_REGISTRATION was enabled. This result is only available for surface 3D model finder result buffers. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_APPLIED Specifies that refine registration was applied successfully to all occurrences. M_APPLIED_AND_REJECTED Specifies that even though M_REFINE_REGISTRATION was enabled, at least one registration was not applied successfully to an occurrence. M_NOT_APPLIED Specifies that refine registration was not enabled, so it was not applied to the occurrences. M_STATUS_SCENE_RESOLUTION Retrieves whether the resolution of the surface model was compatible with the resolution of the scene. If the resolution of the model was much lower or higher than that of the scene, this result type will return M_INCOMPATIBLE. You can use M3dmodInquire() with M_MODEL_RESOLUTION to inquire the resolution of the model. You can use M3dmodControl() with M_SEARCH_POINT_RESOLUTION to specify the resolution of the scene; MIL will attempt to increase or decrease the model's resolution accordingly. This result is only available for surface 3D model finder result buffers. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_COMPATIBLE Specifies that the resolution was compatible. M_INCOMPATIBLE Specifies that the resolution was not compatible. To retrieve a result for a single occurrence or for all occurrences, the ResultType parameter should be set to one of the following values. In this case, you must set ResultIndex to the index of the occurrence or M_ALL. The following results are only available for retrieval after a 3D model finder operation. For retrieving a result of a single occurrence or all occurrences from the 3D model finder result buffer Result3dmodId Description ResultType ResultArrayPtr - Possible values returned Box 3D model finder result buffer ID Specifies a box 3D model finder result buffer, allocated using M3dmodAllocResult() with M_FIND_BOX_RESULT, and used to store M3dmodFind() results. M_AREA Retrieves the surface area of the model occurrence. The surface area is calculated based on the parametric equation of a box. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_X Retrieves the X-coordinate of the center point of the box occurrence or its specified face (depending on whether you add M_FACE_INDEX() to M_CENTER_X), expressed in the working coordinate system. For a box occurrence, the X-coordinate of the box's center point is retrieved. For a box occurrence's face, the X-coordinate of the face's center point is retrieved. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences M_CENTER_Y Retrieves the Y-coordinate of the center point of the box occurrence or its specified face (depending on whether you add M_FACE_INDEX() to M_CENTER_Y), expressed in the working coordinate system. For a box occurrence, the Y-coordinate of the box's center point is retrieved. For a box occurrence's face, the Y-coordinate of the face's center point is retrieved. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences M_CENTER_Z Retrieves the Z-coordinate of the center point of the box occurrence or its specified face (depending on whether you add M_FACE_INDEX() to M_CENTER_Z), expressed in the working coordinate system. For a box occurrence, the Z-coordinate of the box's center point is retrieved. For a box occurrence's face, the Z-coordinate of the face's center point is retrieved. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences M_COMPLETION_STATUS Retrieves which method was used to complete the box. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_COMPLETION_TO_BACKGROUND Specifies that the face was extruded to a background plane. M_COMPLETION_TO_STAIRCASE Specifies that the face was extruded to an edge of a staircase plane. M_COMPLETION_TO_USER_SIZE Specifies that the face was extruded to the completion size. M_NONE Specifies that no completion method was used because an occurrence with more than 1 face was found. M_COVERAGE Retrieves the plane coverage of the box occurrence's specified face. The plane coverage is the percentage of a plane's surface found in the face and covered by inlier points. You must specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences 0.0 &lt;= Value &lt;= 100.0 Specifies the plane coverage, as a percentage. M_NORMAL_X Retrieves the X-component of the normal unit vector of the box occurrence's specified face. You must specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences -1.0 &lt;= Value &lt;= 1.0 Specifies the X-component of the box face's normal unit vector, expressed in the working coordinate system. M_NORMAL_Y Retrieves the Y-component of the normal unit vector of the box occurrence's specified face. You must specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences -1.0 &lt;= Value &lt;= 1.0 Specifies the Y-component of the box face's normal unit vector, expressed in the working coordinate system. M_NORMAL_Z Retrieves the Z-component of the normal unit vector of the box occurrence's specified face. You must specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences -1.0 &lt;= Value &lt;= 1.0 Specifies the Z-component of the box face's normal unit vector, expressed in the working coordinate system. M_NUMBER_OF_POINTS Retrieves the number of points in the box occurrence or its specified face, depending on whether you add M_FACE_INDEX() to M_NUMBER_OF_POINTS. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences Value &gt; 0 Specifies the number of points. M_NUMBER_OF_POINTS_RESERVED Retrieves the number of reserved points in the box occurrence or its specified face, depending on whether you add M_FACE_INDEX() to M_NUMBER_OF_POINTS_RESERVED. These are the points in the reserved area around the occurrence. They are not considered in the fit, are not included in the calculation of the score, and are not considered for other occurrences. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences Value &gt; 0 Specifies the number of points. M_NUMBER_OF_VISIBLE_FACES Retrieves the number of visible faces (planes) used to fit the box occurrence. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of visible faces (planes). M_RMS_ERROR Retrieves the root-mean-square (RMS) error between the points found in the box occurrence or its specified face (depending on whether you add M_FACE_INDEX() to M_RMS_ERROR) and the source model. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences M_SCORE Retrieves the score of the occurrence, where the score is based on the occurrence's model coverage. The model coverage is the percentage of the model's surface found in the occurrence and covered by inlier points. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. You can set the maximum expected model coverage, using M3dmodControl() with M_COVERAGE_MAX. You can add M_FACE_INDEX() to M_SCORE to retrieve this result for one or all of the box occurrence's faces. The score of a box face is defined relative to the maximum expected plane coverage. In this case, a face with a score of 100% has a plane coverage equal to the maximum expected plane coverage. You can set the maximum expected plane coverage, using M3dmodControl() with M_PLANE_MAX_COVERAGE. You can specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence or a single face of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences or a single face of all occurrences Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences 0.0 &lt;= Value &lt;= 100.0 Specifies the score of the occurrence, as a percentage. M_SIZE_X Retrieves the length of the box occurrence along its X-axis. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SIZE_Y Retrieves the length of the box occurrence along its Y-axis. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SIZE_Z Retrieves the length of the box occurrence along its Z-axis. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_UNROTATED_MAX_X Retrieves the box occurrence's maximum X-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_UNROTATED_MAX_Y Retrieves the box occurrence's maximum Y-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_UNROTATED_MAX_Z Retrieves the box occurrence's maximum Z-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_UNROTATED_MIN_X Retrieves the box occurrence's minimum X-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_UNROTATED_MIN_Y Retrieves the box occurrence's minimum Y-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_UNROTATED_MIN_Z Retrieves the box occurrence's minimum Z-coordinate, ignoring the box's rotation. The coordinate is returned as if the box is axis-aligned. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_VISIBLE Retrieves whether the box occurrence's specified face was visible in the target. A face is only considered a visible face of the box occurrence if its score is greater than or equal to M_PLANE_ACCEPTANCE. You must specify a combination value from the following table: To specify for which face of the box to retrieve results ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single face of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for a single face of all occurrences Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(6) Note: When retrieving the result for all faces of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:6 * M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all faces of all occurrences M_FALSE Specifies that the face was not visible. M_TRUE Specifies that the face was visible. M_VOLUME Retrieves the volume of the model occurrence. The volume is calculated based on the parametric equation of a box. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Cylinder 3D model finder result buffer ID Specifies a cylinder 3D model finder result buffer, allocated using M3dmodAllocResult() with M_FIND_CYLINDER_RESULT, and used to store M3dmodFind() results. M_AREA Retrieves the surface area of the model occurrence. The surface area is calculated based on the parametric equation of a cylinder. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_AXIS_X Retrieves the X-component of the cylinder occurrence's central axis unit vector. This vector does not reflect the cylinder's length. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the unit vector, expressed in the working coordinate system. M_AXIS_Y Retrieves the Y-component of the cylinder occurrence's central axis unit vector. This vector does not reflect the cylinder's length. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the unit vector, expressed in the working coordinate system. M_AXIS_Z Retrieves the Z-component of the cylinder occurrence's central axis unit vector. This vector does not reflect the cylinder's length. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the unit vector, expressed in the working coordinate system. M_CENTER_X Retrieves the X-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a cylinder model occurrence, the X-coordinate of the center point on the cylinder's central axis is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Y Retrieves the Y-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a cylinder model occurrence, the Y-coordinate of the center point on the cylinder's central axis is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Z Retrieves the Z-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a cylinder model occurrence, the Z-coordinate of the center point on the cylinder's central axis is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_END_POINT_X Retrieves the X-coordinate of the cylinder occurrence's end point, expressed in the working coordinate system. The end position is located at the center of the cylinder's second circular base. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_END_POINT_Y Retrieves the Y-coordinate of the cylinder occurrence's end point, expressed in the working coordinate system. The end position is located at the center of the cylinder's second circular base. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_END_POINT_Z Retrieves the Z-coordinate of the cylinder occurrence's end point, expressed in the working coordinate system. The end position is located at the center of the cylinder's second circular base. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_LENGTH Retrieves the length of the cylinder occurrence in world units. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_NUMBER_OF_POINTS Retrieves the number of points in the model occurrence. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_NUMBER_OF_POINTS_RESERVED Retrieves the number of reserved points in the model occurrence. These are the points in the reserved area around the occurrence (established using M3dmodControl() with M_RESERVED_POINTS_DISTANCE). They are not considered in the fit, are not included in the calculation of the score, and are not considered for other occurrences. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_RADIUS Retrieves the radius of the cylinder occurrence in world units. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_RMS_ERROR Retrieves the root-mean-square (RMS) error between the points found in the occurrence and the source model. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SCORE Retrieves the score of the occurrence, where the score is based on the occurrence's model coverage. The model coverage is the percentage of the model's surface found in the occurrence and covered by inlier points. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. You can set the maximum expected model coverage, using M3dmodControl() with M_COVERAGE_MAX. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the score of the occurrence, as a percentage. M_START_POINT_X Retrieves the X-coordinate of the cylinder occurrence's start point, expressed in the working coordinate system. The start position is located at the center of the cylinder's first circular base. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_START_POINT_Y Retrieves the Y-coordinate of the cylinder occurrence's start point, expressed in the working coordinate system. The start position is located at the center of the cylinder's first circular base. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_START_POINT_Z Retrieves the Z-coordinate of the cylinder's occurrence's start point, expressed in the working coordinate system. The start position is located at the center of the cylinder's first circular base. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_VOLUME Retrieves the volume of the model occurrence. The volume is calculated based on the parametric equation of a cylinder. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Rectangular plane 3D model finder result buffer ID Specifies a rectangular plane 3D model finder result buffer, allocated using M3dmodAllocResult() with M_FIND_RECTANGULAR_PLANE_RESULT, and used to store M3dmodFind() results. M_AREA Retrieves the surface area of the model occurrence. The surface area is calculated based on the parametric equation of a rectangular plane. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_X Retrieves the X-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a rectangular plane model occurrence, the X-coordinate of the center point of the rectangular plane's bounding box is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Y Retrieves the Y-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a rectangular plane model occurrence, the Y-coordinate of the center point of the rectangular plane's bounding box is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Z Retrieves the Z-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a rectangular plane model occurrence, the Z-coordinate of the center point of the rectangular plane's bounding box is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CLOSEST_TO_ORIGIN_X Retrieves the X-coordinate of the point on the rectangular plane occurrence closest to the origin of the working coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CLOSEST_TO_ORIGIN_Y Retrieves the Y-coordinate of the point on the rectangular plane occurrence closest to the origin of the working coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CLOSEST_TO_ORIGIN_Z Retrieves the Z-coordinate of the point on the rectangular plane occurrence closest to the origin of the working coordinate system. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_COEFFICIENT_A Retrieves the coefficient A of the plane equation, Ax + By + Cz + D = 0. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient A of the plane equation. M_COEFFICIENT_B Retrieves the coefficient B of the plane equation, Ax + By + Cz + D = 0. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient B of the plane equation. M_COEFFICIENT_C Retrieves the coefficient C of the plane equation, Ax + By + Cz + D = 0. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the coefficient C of the plane equation. M_COEFFICIENT_D Retrieves the coefficient D of the plane equation, Ax + By + Cz + D = 0. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value Specifies the coefficient D of the plane equation. M_NORMAL_X Retrieves the X-component of the rectangular plane occurrence's normal unit vector. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the X-component of the rectangular plane occurrence's normal unit vector, expressed in the working coordinate system. M_NORMAL_Y Retrieves the Y-component of the rectangular plane occurrence's normal unit vector. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the Y-component of the rectangular plane occurrence's normal unit vector, expressed in the working coordinate system. M_NORMAL_Z Retrieves the Z-component of the rectangular plane occurrence's normal unit vector. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences -1.0 &gt;= Value &gt;= 1.0 Specifies the Z-component of the rectangular plane occurrence's normal unit vector, expressed in the working coordinate system. M_NUMBER_OF_POINTS Retrieves the number of points in the model occurrence. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_NUMBER_OF_POINTS_RESERVED Retrieves the number of reserved points in the model occurrence. These are the points in the reserved area around the occurrence. They are not considered in the fit, are not included in the calculation of the score, and are not considered for other occurrences. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_RMS_ERROR Retrieves the root-mean-square (RMS) error between the points found in the occurrence and the source model. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SCORE Retrieves the score of the occurrence, where the score is based on the occurrence's model coverage. The model coverage is the percentage of the model's surface found in the occurrence and covered by inlier points. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. You can set the maximum expected model coverage, using M3dmodControl() with M_COVERAGE_MAX. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the score of the occurrence, as a percentage. M_SIZE_X Retrieves the length of the rectangular plane occurrence along its X-axis. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SIZE_Y Retrieves the length of the rectangular plane occurrence along its Y-axis. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Sphere 3D model finder result buffer ID Specifies a sphere 3D model finder result buffer, allocated using M3dmodAllocResult() with M_FIND_SPHERE_RESULT, and used to store M3dmodFind() results. M_AREA Retrieves the surface area of the model occurrence. The surface area is calculated based on the parametric equation of a sphere. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_X Retrieves the X-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a sphere model occurrence, the X-coordinate of the sphere's center point is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Y Retrieves the Y-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a sphere model occurrence, the Y-coordinate of the sphere's center point is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Z Retrieves the Z-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a sphere model occurrence, the Z-coordinate of the sphere's center point is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_NUMBER_OF_POINTS Retrieves the number of points in the model occurrence. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_NUMBER_OF_POINTS_RESERVED Retrieves the number of reserved points in the model occurrence. These are the points in the reserved area around the occurrence (established using M3dmodControl() with M_RESERVED_POINTS_DISTANCE). They are not considered in the fit, are not included in the calculation of the score, and are not considered for other occurrences. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_RADIUS Retrieves the radius of the sphere occurrence in world units. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_RMS_ERROR Retrieves the root-mean-square (RMS) error between the points found in the occurrence and the source model. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SCORE Retrieves the score of the occurrence, where the score is based on the occurrence's model coverage. The model coverage is the percentage of the model's surface found in the occurrence and covered by inlier points. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. You can set the maximum expected model coverage, using M3dmodControl() with M_COVERAGE_MAX. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the score of the occurrence, as a percentage. M_VOLUME Retrieves the volume of the model occurrence. The volume is calculated based on the parametric equation of a sphere. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Surface 3D model finder result buffer ID Specifies a surface 3D model finder result buffer, allocated using M3dmodAllocResult() with M_FIND_SURFACE_RESULT, and used to store M3dmodFind() results. M_CENTER_X Retrieves the X-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a surface model occurrence, the X-coordinate of the center of the surface's bounding box is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Y Retrieves the Y-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a surface model occurrence, the Y-coordinate of the center of the surface's bounding box is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_CENTER_Z Retrieves the Z-coordinate of the center point of the model occurrence, expressed in the working coordinate system. For a surface model occurrence, the Z-coordinate of the center of the surface's bounding box is retrieved. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_NUMBER_OF_POINTS Retrieves the number of points in the model occurrence. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_NUMBER_OF_POINTS_RESERVED Retrieves the number of reserved points in the model occurrence. These are the points in the reserved area around the occurrence. They are not considered in the fit, are not included in the calculation of the score, and are not considered for other occurrences. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences Value &gt; 0 Specifies the number of points. M_POSITION_X Retrieves the X-coordinate of the surface occurrence. This is the X-position of the model's reference axis transformed at the occurrence. Note, the origin of the model's reference axis is at the origin of the working coordinate system of the original point cloud from which the surface model was defined. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_POSITION_Y Retrieves the Y-coordinate of the surface occurrence. This is the Y-position of the model's reference axis transformed at the occurrence. Note, the origin of the model's reference axis is at the origin of the working coordinate system of the original point cloud from which the surface model was defined. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_POSITION_Z Retrieves the Z-coordinate of the surface occurrence. This is the Z-position of the model's reference axis transformed at the occurrence. Note, the origin of the model's reference axis is at the origin of the working coordinate system of the original point cloud from which the surface model was defined. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_RMS_ERROR Retrieves the root-mean-square (RMS) error between the points found in the occurrence and the source model. For a surface model, this result is only available if M_SAVE_FIT_INFO was enabled. To improve fit results, you should also enable refine registration (M3dmodControl() with M_REFINE_REGISTRATION) prior to performing the search. By default, MIL uses the features of the model and target to find occurrences, but it doesn't do any fitting. To get more accurate score and pose information, you should enable refine registration. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_SCORE Retrieves the score of the occurrence, where the score is based on the occurrence's model coverage. The model coverage is the percentage of the model's surface found in the occurrence and covered by inlier points. The score is defined relative to the maximum expected model coverage, such that an occurrence with a score of 100% has a model coverage equal to the maximum expected model coverage. You can set the maximum expected model coverage, using M3dmodControl() with M_COVERAGE_MAX. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the score of the occurrence, as a percentage. M_SCORE_COLOR Retrieves the color score of the occurrence, where the color score indicates the similarity between the color of the model and the color of the occurrence. This result is only available if M_USE_COLOR was enabled. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the color score of the occurrence, as a percentage. M_SCORE_FIT Retrieves the fit score of the occurrence, where the fit score is based on the Euclidean distance between the occurrence's points and the model. The score is calculated as follows: Fit Score = 1 - Normalized RMS error This result is only available if M_SAVE_FIT_INFO was enabled. To improve fit results, you should also enable refine registration (M3dmodControl() with M_REFINE_REGISTRATION) prior to performing the search. By default, MIL uses the features of the model and target to find occurrences, but it doesn't do any fitting. To get more accurate score and pose information, you should enable refine registration. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the fit score of the occurrence, as a percentage. M_SCORE_TARGET Retrieves the target score of the occurrence, where the target score is based on the target coverage. Target coverage is a measure of the points found in the occurrence that don't have matching points in the original model (that is, extra points), weighted by the deviation in position of the common points. Points found in the occurrence that are not present in the model will reduce the target score. For example, a target score of 100% means that there are no points in the occurrence that do not fit the model. ResultArrayPtr extra info Data type info: Data type: address of a MIL_DOUBLE &nbsp;|&nbsp; array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] MORE Data type: address of a MIL_DOUBLE Note: When retrieving the result of a single occurrence Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences 0.0 &lt;= Value &lt; 100.0 Specifies the target score of the occurrence, as a percentage. M_STATUS_REFINE_REGISTRATION Retrieves the status of the refine registration applied to the occurrence. This result is only available for surface model occurrences and only if M_REFINE_REGISTRATION was enabled. ResultArrayPtr extra info Data type info: Data type: address of a MIL_INT &nbsp;|&nbsp; array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] MORE Data type: address of a MIL_INT Note: When retrieving the result of a single occurrence Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size: M3dmodGetResult ( M_NUMBER ) Note: When retrieving the result for all occurrences M_APPLIED Specifies that refine registration was applied successfully to the occurrence. M_APPLIED_AND_REJECTED Specifies that even though M_REFINE_REGISTRATION was enabled, at least one registration was not applied successfully to the occurrence. M_NOT_APPLIED Specifies that refine registration was not enabled, so it was not applied to the occurrence. Combination value for [when Result3dmodId=Box 3D model finder result buffer ID: M_CENTER_X , M_CENTER_Y , M_CENTER_Z , M_COVERAGE , M_NORMAL_X , M_NORMAL_Y , M_NORMAL_Z , M_NUMBER_OF_POINTS , M_NUMBER_OF_POINTS_RESERVED , M_RMS_ERROR , M_SCORE , M_VISIBLE]. You must add the following value to the above-mentioned values to specify for which face of the box to retrieve results. Note that this combination is optional for some values. Refer to the individual values to determine if this is the case. For specifying the box face's index Combination value Description M_FACE_INDEX( MIL_INT Index ) Specifies to retrieve results for a specific face of a box occurrence. Parameters Index Set this parameter to one of the following: M_ALL Specifies to get the result for all 6 faces. 0 &lt;= Value &lt; 6 Specifies the index of the face for which to get the result. Indices 0 and 5 correspond to the faces with the minimum XYZ and maximum XYZ coordinate values, respectively. Combination values for the values of the ResultType parameter listed in For retrieving general results from the 3D model finder result buffer, For retrieving a result of a single occurrence or all occurrences from the 3D model finder result buffer. You can add one of the following values to the above-mentioned values to cast the requested information to a required data type. Note: In C++, when using a standard vector (std::vector) instead of an array, the values listed in this combination table must not be used. If you need to use a specific data type, instantiate the vector with the necessary data type. For specifying the data type ResultType Description ResultArrayPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. ResultArrayPtr extra info Data type info: Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] &nbsp;|&nbsp; address of a MIL_DOUBLE MORE Data type: array of type MIL_DOUBLE [optionally, in C++: a reference to a std::vector&lt;MIL_DOUBLE&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_DOUBLE Note: When a single result. M_TYPE_MIL_INT Casts the requested information to a MIL_INT. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] &nbsp;|&nbsp; address of a MIL_INT MORE Data type: array of type MIL_INT [optionally, in C++: a reference to a std::vector&lt;MIL_INT&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT Note: When a single result. M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] &nbsp;|&nbsp; address of a MIL_INT32 MORE Data type: array of type MIL_INT32 [optionally, in C++: a reference to a std::vector&lt;MIL_INT32&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT32 Note: When a single result. M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. ResultArrayPtr extra info Data type info: Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] &nbsp;|&nbsp; address of a MIL_INT64 MORE Data type: array of type MIL_INT64 [optionally, in C++: a reference to a std::vector&lt;MIL_INT64&gt; ] Required array size:(defined elsewhere) Note: When multiple results. Data type: address of a MIL_INT64 Note: When a single result. Return value The returned value is the requested information, cast to a MIL_DOUBLE. If the requested information does not fit into a MIL_DOUBLE, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - Result3dmodId - ResultIndex For specifying the index of the 3D model - ResultType - ResultArrayPtr Parameter Associations For retrieving general results from the 3D model finder result buffer [3D model finder result buffer ID] For retrieving a result of a single occurrence or all occurrences from the 3D model finder result buffer [Box 3D model finder result buffer ID] [Cylinder 3D model finder result buffer ID] [Rectangular plane 3D model finder result buffer ID] [Sphere 3D model finder result buffer ID] [Surface 3D model finder result buffer ID] + For specifying the box face's index + For specifying the data type Return value Compilation information ",
      "wordCount": 13000,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodInquire",
      "version": null,
      "title": "M3dmodInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodInquire.htm",
      "text": " M3dmodInquire Synopsis Inquire about a setting of a find 3D model finder context. Syntax MIL_INT64 M3dmodInquire( MIL_ID&nbsp;Context3dmodId, //in MIL_INT64&nbsp;Index, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about a specified setting of a find 3D model finder context. To inquire about draw 3D model finder context settings, use M3dmodInquireDraw() instead. Parameters Parameters Context3dmodId Specifies the identifier of the find 3D model finder context about which to inquire information. The find 3D model finder context must have been previously allocated on the required system using M3dmodAlloc() with M_FIND_..._CONTEXT. See the Parameter associations section for possible values that can be specified. Index Specifies what to inquire. Set this parameter to one of the following values. For specifying a general context or individual model Value Description M_DEFAULT Same as M_CONTEXT. M_CONTEXT Specifies to inquire information about the find 3D model finder context. 0 Specifies to inquire the 3D model defined in the context. Note that the model must have been added to the context, using M3dmodDefine(), prior to calling M3dmodControl() with this value. InquireType Specifies the type of setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_FLOAT MIL_ID MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the M3dmodInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the Context3dmodId and InquireType parameters and possible values returned to the UserVarPtr parameter. For inquiring a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context For inquiring the type of model in a find 3D model finder context For inquiring a box, cylinder, rectangular plane, sphere, or surface 3D model The following Context3dmodId and InquireType parameter settings can be specified for a 3D model finder context when Index is set to M_CONTEXT or M_DEFAULT. For inquiring a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context Context3dmodId Description InquireType UserVarPtr - Possible values returned Find box 3D model finder context ID Specifies a find box 3D model finder context, allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT, and used in M3dmodFind() operations. M_DIRECTION_MODE Inquires how to interpret the reference direction (M_DIRECTION_REFERENCE_...). For a find box 3D model finder context, this is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AWAY_FROM_POSITION Specifies to interpret the reference direction as away from the position specified using M_DIRECTION_REFERENCE_.... M_TOWARDS_DIRECTION Specifies to interpret the reference direction as towards the direction specified using M_DIRECTION_REFERENCE_.... M_TOWARDS_POSITION Specifies to interpret the reference direction as towards the position specified using M_DIRECTION_REFERENCE_.... M_DIRECTION_REFERENCE_X Inquires the X-coordinate of the position, or the X-component of the vector, that determines the reference direction, depending on M_DIRECTION_MODE. For a find box 3D model finder context, this is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-coordinate of the position or the X-component of the vector. M_DIRECTION_REFERENCE_Y Inquires the Y-coordinate of the position, or the Y-component of the vector, that determines the reference direction, depending on M_DIRECTION_MODE. For a find box 3D model finder context, this is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-coordinate of the position or the Y-component of the vector. M_DIRECTION_REFERENCE_Z Inquires the Z-coordinate of the position, or the Z-component of the vector, that determines the reference direction, depending on M_DIRECTION_MODE. For a find box 3D model finder context, this is only used when M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-coordinate of the position or the Z-component of the vector. M_FIT_DISTANCE Inquires the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Inquires how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_FLOOR_DEFINED Inquires whether a floor plane has been defined using M3dmodCopy() with M_FLOOR. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that a floor plane has not been defined. M_TRUE Specifies that a floor plane has been defined. M_NUMBER_MODELS Inquires the number of models in the context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value Specifies the number of models. M_PREPROCESSED Inquires whether the find 3D model finder context is preprocessed. The context must be preprocessed (using M3dmodPreprocess()) before calling M3dmodFind(). After certain settings of the context are changed using M3dmodControl(), a model is added or removed using M3dmodDefine(), or a floor plane is copied to the context using M3dmodCopy(), this inquire type will indicate that the context is no longer in its preprocessed state. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the context is not preprocessed. M_TRUE Specifies that the context is preprocessed. M_SORT Inquires the sorting key for result retrieval. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_VOLUME Specifies to sort results by the volume of the occurrence. M_SORT_DIRECTION Inquires whether results are sorted in ascending or descending order. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Inquires the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find cylinder 3D model finder context ID Specifies a find cylinder 3D model finder context, allocated using M3dmodAlloc() with M_FIND_CYLINDER_CONTEXT, and used in M3dmodFind() operations. M_FIT_DISTANCE Inquires the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Inquires how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_FIT_NORMALS_DISTANCE Inquires the acceptable deviation between a given point's normal vector and the normal vector of the model at the same point, to decide which points are used when fitting. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 90.0 Specifies the acceptable deviation from the normal vector of the model at the same point, in degrees. M_NUMBER_MODELS Inquires the number of models in the context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value Specifies the number of models. M_PERSEVERANCE Inquires the algorithm's search perseverance when searching for occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the algorithm's search perseverance, as a percentage. M_PREPROCESSED Inquires whether the find 3D model finder context is preprocessed. The context must be preprocessed (using M3dmodPreprocess()) before calling M3dmodFind(). After certain settings of the context are changed using M3dmodControl(), or a model is added or removed using M3dmodDefine(), this inquire type will indicate that the context is no longer in its preprocessed state. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the context is not preprocessed. M_TRUE Specifies that the context is preprocessed. M_SORT Inquires the sorting key for result retrieval. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_VOLUME Specifies to sort results by the volume of the occurrence. M_SORT_DIRECTION Inquires whether results are sorted in ascending or descending order. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Inquires the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find rectangular plane 3D model finder context ID Specifies a find rectangular plane 3D model finder context, allocated using M3dmodAlloc() with M_FIND_RECTANGULAR_PLANE_CONTEXT, and used in M3dmodFind() operations. M_FIT_DISTANCE Inquires the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Inquires how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_NUMBER_MODELS Inquires the number of models in the context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value Specifies the number of models. M_PREPROCESSED Inquires whether the find 3D model finder context is preprocessed. The context must be preprocessed (using M3dmodPreprocess()) before calling M3dmodFind(). After certain settings of the context are changed using M3dmodControl(), or a model is added or removed using M3dmodDefine(), this inquire type will indicate that the context is no longer in its preprocessed state. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the context is not preprocessed. M_TRUE Specifies that the context is preprocessed. M_SORT Inquires the sorting key for result retrieval. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_SORT_DIRECTION Inquires whether results are sorted in ascending or descending order. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Inquires the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find sphere 3D model finder context ID Specifies a find sphere 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SPHERE_CONTEXT, and used in M3dmodFind() operations. M_FIT_DISTANCE Inquires the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Inquires how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_FIT_ITERATIONS_MAX Inquires the maximum number of fit iterations to perform, when finding a sphere occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 1 Specifies the maximum number of sphere fit iterations. M_FIT_NORMALS_DISTANCE Inquires the acceptable deviation between a given point's normal vector and the normal vector of the model at the same point, to decide which points are used when fitting. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 90.0 Specifies the acceptable deviation from the normal vector of the model at the same point, in degrees. M_NUMBER_MODELS Inquires the number of models in the context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value Specifies the number of models. M_PERSEVERANCE Inquires the algorithm's search perseverance when searching for occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the algorithm's search perseverance, as a percentage. M_PREPROCESSED Inquires whether the find 3D model finder context is preprocessed. The context must be preprocessed (using M3dmodPreprocess()) before calling M3dmodFind(). After certain settings of the context are changed using M3dmodControl(), or a model is added or removed using M3dmodDefine(), this inquire type will indicate that the context is no longer in its preprocessed state. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the context is not preprocessed. M_TRUE Specifies that the context is preprocessed. M_SORT Inquires the sorting key for result retrieval. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AREA Specifies to sort results by the area of the occurrence. M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_TARGET Specifies to sort results by the target score. M_VOLUME Specifies to sort results by the volume of the occurrence. M_SORT_DIRECTION Inquires whether results are sorted in ascending or descending order. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Inquires the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. Find surface 3D model finder context ID Specifies a find surface 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT, and used in M3dmodFind() operations. M_CONVERSION_GAMMA Inquires whether to remove gamma correction before the match. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to remove gamma correction. M_ENABLE Specifies to remove gamma correction. M_DIRECTION_MODE Inquires how to interpret the reference direction (M_DIRECTION_REFERENCE_...). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TOWARDS_DIRECTION Specifies to interpret the reference direction as towards the direction specified using M_DIRECTION_REFERENCE_.... M_DIRECTION_REFERENCE_X Inquires the X-component of the vector that determines the reference direction, depending on M_DIRECTION_MODE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-component of the vector. M_DIRECTION_REFERENCE_Y Inquires the Y-component of the vector that determines the reference direction, depending on M_DIRECTION_MODE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-component of the vector. M_DIRECTION_REFERENCE_Z Inquires the Z-component of the vector that determines the reference direction, depending on M_DIRECTION_MODE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-component of the vector. M_EXHAUSTIVE_SEARCH Inquires whether to perform very robust but slow exhaustive searching. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable exhaustive searching. M_ENABLE Specifies to enable exhaustive searching. M_FIT_DISTANCE Inquires the fit distance when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED. Note that for a find surface 3D model finder context, this is only used when M_FIT_DISTANCE_MODE is set to M_USER_DEFINED and M_SAVE_FIT_INFO is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the fit distance. M_FIT_DISTANCE_MODE Inquires how MIL establishes the fit distance, which is used when determining whether points belong to a certain occurrence. Note that for a find surface 3D model finder context, this is only used when M_SAVE_FIT_INFO is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically calculate the fit distance. M_USER_DEFINED Specifies to use the value set with M_FIT_DISTANCE as the fit distance. M_FLOOR_DEFINED Inquires whether a floor plane has been defined using M3dmodCopy() with M_FLOOR. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that a floor plane has not been defined. M_TRUE Specifies that a floor plane has been defined. M_MODEL_NORMAL_SEARCH_MODE Inquires the search mode for calculating model normals when the defined model has no normals component (M_COMPONENT_NORMALS_MIL). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically set the search mode based on the point cloud's organization; either M_ORGANIZED if organized or M_TREE if unorganized. M_ORGANIZED Specifies to use the point cloud's organizational structure to determine the model normals. M_TREE Specifies to use a KD tree search mode to determine the model normals. M_NUMBER_MODELS Inquires the number of models in the context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value Specifies the number of models. M_PERSEVERANCE Inquires the algorithm's search perseverance when searching for occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the algorithm's search perseverance, as a percentage. M_PREPROCESSED Inquires whether the find 3D model finder context is preprocessed. The context must be preprocessed (using M3dmodPreprocess()) before calling M3dmodFind(). After certain settings of the context are changed using M3dmodControl(), a model is added or removed using M3dmodDefine(), or a floor plane or resting plane is copied to the context using M3dmodCopy(), this inquire type will indicate that the context is no longer in its preprocessed state. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the context is not preprocessed. M_TRUE Specifies that the context is preprocessed. M_REFINE_REGISTRATION Inquires whether and how to perform refine registration of each occurrence found. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable refine registration. M_FIND_SURFACE_REFINEMENT_FAST Specifies to use a predefined registration context that prioritizes performance to fine-tune results. M_FIND_SURFACE_REFINEMENT_PRECISE Specifies to use a predefined registration context that prioritizes accuracy to fine-tune results. M_USER_DEFINED_REGISTRATION Specifies to use a custom registration context. M_REMOVE_BACKGROUND Inquires whether to remove background points from the target point cloud before performing the match. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to remove background points. M_ENABLE Specifies to remove background points. M_REMOVE_BACKGROUND_SEARCH_MODE Inquires the search mode for finding the background points when M_REMOVE_BACKGROUND is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically set the search mode based on the organization of the point clouds; either M_ORGANIZED if organized or M_TREE if unorganized. M_ORGANIZED Specifies to use the organizational structure of the point clouds to determine the background points. M_TREE Specifies to use a KD tree search mode to determine the background points. M_REMOVE_FLOOR Inquires whether to remove floor points from the target point cloud before performing the match. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to remove floor points. M_ENABLE Specifies to remove floor points. M_REMOVE_FLOOR_DIRECTION Inquires the direction, relative to the defined floor plane, in which to remove points when M_REMOVE_FLOOR is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ABOVE Specifies to remove points above the floor plane. M_AUTO Specifies to remove points in the direction with the least number of valid points. M_BELOW Specifies to remove points below the floor plane. M_REMOVE_FLOOR_OFFSET Inquires the offset, relative to the defined floor plane, within which to remove points when M_REMOVE_FLOOR is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_AUTO_VALUE Specifies to automatically determine the offset within which to remove points. Value &gt;= 0.0 Specifies the offset within which to remove points. M_REUSE_RESULT Inquires whether to reuse the result of the previous search at the beginning of the current search. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to reuse the previous result. M_ENABLE Specifies to reuse the previous result. M_SAVE_FIT_INFO Inquires whether to enable the calculation of the root-mean square (RMS) error and the fit score. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable the calculation of the root-mean square (RMS) error and the fit score. M_ENABLE Specifies to enable the calculation of the root-mean square (RMS) error and the fit score. M_SCENE_COMPLEXITY Inquires the complexity of the scene. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_HIGH Specifies that the scene has a high complexity. M_LOW Specifies that the scene has a low complexity. M_MEDIUM Specifies that the scene has a medium complexity. M_SCENE_PROJECTION Inquires whether to apply occlusion handling to the model, which discards points of the model that are not visible to the 3D sensor at the position of the occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies to disable occlusion handling. M_ENABLE Specifies to enable occlusion handling. M_SORT Inquires the sorting key for result retrieval. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTER_X Specifies to sort the results by the X-coordinate of the occurrence's center point. M_CENTER_Y Specifies to sort the results by the Y-coordinate of the occurrence's center point. M_CENTER_Z Specifies to sort the results by the Z-coordinate of the occurrence's center point. M_MAX_X Specifies to sort the results by the maximum X-coordinate of the occurrence. M_MAX_Y Specifies to sort the results by the maximum Y-coordinate of the occurrence. M_MAX_Z Specifies to sort the results by the maximum Z-coordinate of the occurrence. M_MIN_X Specifies to sort the results by the minimum X-coordinate of the occurrence. M_MIN_Y Specifies to sort the results by the minimum Y-coordinate of the occurrence. M_MIN_Z Specifies to sort the results by the minimum Z-coordinate of the occurrence. M_NO_SORT Specifies not to sort the results; found occurrences are returned in an arbitrary order. M_NUMBER_OF_POINTS Specifies to sort the results by the number of points in the occurrence. M_SCORE Specifies to sort the results by the score. M_SCORE_COLOR Specifies to sort results by the color score. M_SCORE_FIT Specifies to sort results by the fit score. M_SCORE_TARGET Specifies to sort results by the target score. M_SORT_DIRECTION Inquires whether results are sorted in ascending or descending order. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_SORT_DOWN Specifies to sort the results in descending order. M_SORT_UP Specifies to sort the results in ascending order. M_TIMEOUT Inquires the maximum amount of time for M3dmodFind() to complete the 3D model finder operation before generating a time-out error. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies that there is no timeout value. Value &gt; 0.0 Specifies the timeout value, in msec. M_USE_COLOR Inquires whether to use the color information of the model and scene when searching for surface occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to use the color information. M_ENABLE Specifies to use the color information. M_USER_DEFINED_REGISTRATION_CONTEXT_ID Inquires the identifier of the internal registration context to use for fine tuning when M_REFINE_REGISTRATION is set to M_USER_DEFINED_REGISTRATION. UserVarPtr extra info Data type info: Data type: address of a MIL_ID Data type: address of a MIL_ID The following Context3dmodId and InquireType parameter settings can be specified for a model in a 3D model finder context when Index is set to 0. For inquiring the type of model in a find 3D model finder context Context3dmodId Description InquireType UserVarPtr - Possible values returned Find 3D model finder context ID with a model Specifies a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context, allocated using M3dmodAlloc() with M_FIND_..._CONTEXT, and used in M3dmodFind() operations. It must contain a model. M_MODEL_TYPE Inquires the type of model in the find 3D model finder context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_BOX Specifies that the model is a nominal box model. M_BOX_RANGE Specifies that the model is a range-type box model. M_CYLINDER Specifies that the model is a nominal cylinder model. M_CYLINDER_RANGE Specifies that the model is a range-type cylinder model. M_RECTANGLE Specifies that the model is a nominal rectangular plane model. M_RECTANGLE_RANGE Specifies that the model is a range-type rectangular-plane model. M_SPHERE Specifies that the model is a nominal sphere model. M_SPHERE_RANGE Specifies that the model is a range-type sphere model. M_SURFACE Specifies that the model is a surface model, defined by a point cloud. The following Context3dmodId and InquireType parameter settings can be specified for a box, cylinder, rectangular plane, sphere, or surface 3D model when Index is set to 0. For inquiring a box, cylinder, rectangular plane, sphere, or surface 3D model Context3dmodId Description InquireType UserVarPtr - Possible values returned Find box 3D model finder context ID with a box model Specifies a find box 3D model finder context, allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT, and used in M3dmodFind() operations. It must contain a box model. M_ACCEPTANCE Inquires the acceptance level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies an acceptable score, as a percentage. M_BOX_FACE_PARALLELISM_THRESHOLD Inquires the maximum shear angle allowed between adjacent rectangles for them to count as the same box. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 45.0 Specifies the maximum angle, in degrees. M_BOX_FACE_PERPENDICULARITY_THRESHOLD Inquires the maximum deviation from 90 degrees allowed between adjacent rectangles for them to count as the same box. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 90.0 Specifies the maximum angle, in degrees. M_CERTAINTY Inquires the certainty level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty level for the score, as a percentage. M_COMPLETION_ANGLE_TOLERANCE Inquires the completion angular tolerance, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 90.0 Specifies the completion angular tolerance, when only one box face (plane) is found. M_COMPLETION_SIZE_X Inquires the length along X to use to establish the missing dimension, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_SAME_AS_NOMINAL Specifies that the length along X, to use to establish the missing dimension, is the same as the nominal length in X of a nominal model. When searching for a range-type model, this corresponds to the middle of the specified size range (M_SIZE_X_MAX - M_SIZE_X_MIN). Value &gt; 0.0 Specifies the length along X to use to establish the missing dimension. M_COMPLETION_SIZE_Y Inquires the length along Y to use to establish the missing dimension, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_SAME_AS_NOMINAL Specifies that the length along Y, to use to establish the missing dimension, is the same as the nominal length in Y of a nominal model. When searching for a range-type model, this corresponds to the middle of the specified size range (M_SIZE_Y_MAX - M_SIZE_Y_MIN). Value &gt; 0.0 Specifies the length along Y to use to establish the missing dimension. M_COMPLETION_SIZE_Z Inquires the length along Z to use to establish the missing dimension, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_SAME_AS_NOMINAL Specifies that the length along Z, to use to establish the missing dimension, is the same as the nominal length in Z of a nominal model. When searching for a range-type model, this corresponds to the middle of the specified size range (M_SIZE_Z_MAX - M_SIZE_Z_MIN). Value &gt; 0.0 Specifies the length along Z to use to establish the missing dimension. M_COMPLETION_TO_BACKGROUND Inquires whether the visible face could be extruded to a background plane to complete the box, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to complete the box using a background plane. M_ENABLE Specifies to attempt to complete the box using a background plane. M_COMPLETION_TO_STAIRCASE Inquires whether the visible face could be extruded to an edge of a staircase plane to complete the box, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to complete the box using a staircase plane. M_ENABLE Specifies to attempt to complete the box using a staircase plane. M_COMPLETION_TO_USER_SIZE Inquires whether the visible face could be extruded to the specified completion size to complete the box, when only one box face (plane) is found. Note that the corresponding control type has no effect unless M_NUMBER_OF_VISIBLE_FACES_MIN is set to 1. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to complete the box using the completion size. M_ENABLE Specifies to complete the box using the completion size. M_COVERAGE_MAX Inquires the maximum expected model coverage. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_ELONGATION_MAX Inquires the maximum elongation of the box occurrence. The elongation is defined as the maximum side/minimum side. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies that the box occurrence has no maximum elongation. Value &gt; 1.0 Specifies the box occurrence's maximum elongation, defined as maximum side / minimum side. M_ELONGATION_MIN Inquires the minimum elongation of the box occurrence. The elongation is defined as the maximum side/minimum side. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 1.0 Specifies the box occurrence's minimum elongation, defined as maximum side / minimum side. M_NORMAL_ANGLE_TOLERANCE Inquires the angular tolerance to use for M_NORMAL_CONDITION, when searching for box occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 90.0 Specifies the normal angular tolerance, in degrees. M_NORMAL_CONDITION Inquires whether to find only box occurrences that satisfy the specified condition, relative to the vector M_NORMAL_..., or to find any box occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PARALLEL Specifies that the normal of one of the faces must be parallel to M_NORMAL_..., within the specified angular tolerance. M_UNCONDITIONAL Specifies that there is no constraint on the normal. M_VISIBLE_FACE_PARALLEL Specifies that the normal of one of the visible faces must be parallel to M_NORMAL_..., within the specified angular tolerance. M_NORMAL_X Inquires the X-component of the vector against which to compare box occurrences, as specified using M_NORMAL_CONDITION. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-component of the vector. M_NORMAL_Y Inquires the Y-component of the vector against which to compare box occurrences, as specified using M_NORMAL_CONDITION. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-component of the vector. M_NORMAL_Z Inquires the Z-component of the vector against which to compare box occurrences, as specified using M_NORMAL_CONDITION. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-component of the vector. M_NUMBER Inquires the maximum number of occurrences for which to search. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL Specifies to find all occurrences. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Inquires the minimum number of points per occurrence found. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the minimum number of points per occurrence found. M_NUMBER_OF_VISIBLE_FACES_MAX Inquires the maximum number of visible faces (planes) required for a box occurrence to be accepted. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 1 &lt;= Value &lt;= 6 Specifies the maximum number of visible faces (planes) required for a box occurrence to be accepted. M_NUMBER_OF_VISIBLE_FACES_MIN Inquires the minimum number of visible faces (planes) required for a box occurrence to be accepted. If set to 1, a box can be extruded from a single plane according to the completion constraints (M_COMPLETION_...) and the reference direction (M_DIRECTION_REFERENCE_...). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 1 &lt;= Value &lt;= 6 Specifies the maximum number of visible faces (planes) required for a box occurrence to be accepted. M_PLANE_ACCEPTANCE Inquires the acceptance level used for individual faces of the box occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the acceptance level used for individual faces of the box occurrence. M_PLANE_CERTAINTY Inquires the certainty level for individual faces of the box occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty value for individual faces of the box occurrence. M_PLANE_MAX_COVERAGE Inquires the maximum expected coverage for individual faces of the box occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the maximum coverage for individual faces of the box occurrence. M_POLARITY Inquires whether the normals should point inside or outside the box occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ANY Specifies that the normals can point inside or outside. M_INSIDE Specifies that the normals must point inside. M_OUTSIDE Specifies that the normals must point outside. M_SAME Specifies that the normals can point either inside or outside, but the direction must be consistent for all faces. M_SIZE_X Inquires the size of a nominal box model (M_BOX) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the expected size along the X-axis. M_SIZE_X_MAX Inquires the maximum size of a range-type box model (M_BOX_RANGE) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum size along the X-axis. Value &gt; 0.0 Specifies the maximum size along the X-axis. M_SIZE_X_MIN Inquires the minimum size of a range-type box model (M_BOX_RANGE) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum size along the X-axis. M_SIZE_Y Inquires the size of a nominal box model (M_BOX) along its Y-axis, changing its originally defined size. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the expected size along the Y-axis. M_SIZE_Y_MAX Inquires the maximum size of a range-type box model (M_BOX_RANGE) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum size along the Y-axis. Value &gt; 0.0 Specifies the maximum size along the Y-axis. M_SIZE_Y_MIN Inquires the minimum size of a range-type box model (M_BOX_RANGE) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum size along the Y-axis. M_SIZE_Z Inquires the size of a nominal box model (M_BOX) along its Z-axis, changing its originally defined size. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the expected size along the Z-axis. M_SIZE_Z_MAX Inquires the maximum size of a range-type box model (M_BOX_RANGE) along its Z-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum size along the Z-axis. Value &gt; 0.0 Specifies the maximum size along the Z-axis. M_SIZE_Z_MIN Inquires the minimum size of a range-type box model (M_BOX_RANGE) along its Z-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum size along the Z-axis. M_TOLERANCE_X Inquires the tolerance for the size of a nominal box model (M_BOX) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the size along the X-axis. Value &gt;= 0.0 Specifies the tolerance for the size along the X-axis. M_TOLERANCE_Y Inquires the tolerance for the size of a nominal box model (M_BOX) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the size along the Y-axis. Value &gt;= 0.0 Specifies the tolerance for the size along the Y-axis. M_TOLERANCE_Z Inquires the tolerance for the size of a nominal box model (M_BOX) along its Z-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the size along the Z-axis. Value &gt;= 0.0 Specifies the tolerance for the size along the Z-axis. Find cylinder 3D model finder context ID with a cylinder model Specifies a find cylinder 3D model finder context, allocated using M3dmodAlloc() with M_FIND_CYLINDER_CONTEXT, and used in M3dmodFind() operations. It must contain a cylinder model. M_ACCEPTANCE Inquires the acceptance level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies an acceptable score, as a percentage. M_BASES Inquires whether the cylinder model includes bases. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_WITH_BASES Specifies that the cylinder model includes bases. M_WITHOUT_BASES Specifies that the cylinder model does not include bases. M_CERTAINTY Inquires the certainty level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty level for the score, as a percentage. M_COVERAGE_MAX Inquires the maximum expected model coverage. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_LENGTH Inquires the length of a nominal cylinder model (M_CYLINDER). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the length. M_LENGTH_MAX Inquires the maximum length of a range-type cylinder model (M_CYLINDER_RANGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum length. Value &gt; 0.0 Specifies the maximum length. M_LENGTH_MIN Inquires the minimum length of a range-type cylinder model (M_CYLINDER_RANGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum length. M_MIN_SEPARATION_DISTANCE Inquires the minimum gap distance along the length of a cylinder before considering the cylinder as two separate occurrences of the cylinder model. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_DISABLE Specifies not to split cylinders. Value &gt; 0.0 Specifies the minimum gap distance. M_NUMBER Inquires the maximum number of occurrences for which to search. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL Specifies to find all occurrences. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Inquires the minimum number of points per occurrence found. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the minimum number of points per occurrence found. M_RADIUS Inquires the radius of a nominal cylinder model (M_CYLINDER). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the radius of the model. M_RADIUS_MAX Inquires the maximum radius of a range-type cylinder model (M_CYLINDER_RANGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum radius. Value &gt; 0.0 Specifies the maximum radius. M_RADIUS_MIN Inquires the minimum radius of a range-type cylinder model (M_CYLINDER_RANGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum radius. M_RESERVED_POINTS_DISTANCE Inquires the reserved distance around the occurrence, defined as a percentage of the radius. Points found in this area are not considered in the fit, and cannot be considered for other occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies the reserved points distance for the model, as a percentage of its radius. M_TOLERANCE_LENGTH Inquires the tolerance for the length of a nominal cylinder model (M_CYLINDER). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the length. Value &gt;= 0.0 Specifies the tolerance for the length. M_TOLERANCE_RADIUS Inquires the tolerance for the radius of a nominal cylinder model (M_CYLINDER). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the radius. Value &gt;= 0.0 Specifies the tolerance for the radius. Find rectangular plane 3D model finder context ID with a rectangular plane model Specifies a find rectangular plane 3D model finder context, allocated using M3dmodAlloc() with M_FIND_RECTANGULAR_PLANE_CONTEXT, and used in M3dmodFind() operations. It must contain a rectangular plane model. M_ACCEPTANCE Inquires the acceptance level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies an acceptable score, as a percentage. M_CERTAINTY Inquires the certainty level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the certainty level for the score, as a percentage. M_COVERAGE_MAX Inquires the maximum expected model coverage. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_ELONGATION_MAX Inquires the maximum elongation of the rectangular plane occurrence. The elongation is defined as the maximum side/minimum side. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies that the rectangular plane occurrence has no maximum elongation. Value &gt; 1.0 Specifies the rectangular plane occurrence's maximum elongation, defined as maximum side / minimum side. M_ELONGATION_MIN Inquires the minimum elongation of the rectangular plane occurrence. The elongation is defined as the maximum side/minimum side. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 1.0 Specifies the rectangular plane occurrence's minimum elongation, defined as maximum side / minimum side. M_NORMAL_ANGLE_TOLERANCE Inquires the angular tolerance to use for M_NORMAL_CONDITION, when searching for rectangular plane occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 90.0 Specifies the normal angular tolerance, in degrees. M_NORMAL_CONDITION Inquires whether to find only rectangular plane occurrences that satisfy the specified condition, relative to the vector M_NORMAL_..., or to find any rectangular plane occurrence. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PARALLEL Specifies that the normal of the rectangular plane must be parallel to the vector specified using M_NORMAL_..., within the specified angular tolerance. M_PARALLEL_OR_PERPENDICULAR Specifies that the normal of the rectangular plane must be either parallel or perpendicular to the vector specified using M_NORMAL_..., within the specified angular tolerance. M_PERPENDICULAR Specifies that the normal of the rectangular plane must be perpendicular to the vector specified using M_NORMAL_..., within the specified angular tolerance. M_UNCONDITIONAL Specifies that there is no constraint on the normal of the rectangular plane. M_NORMAL_X Inquires the X-component of the vector against which to compare rectangular plane occurrences, as specified using M_NORMAL_CONDITION. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the X-component of the vector. M_NORMAL_Y Inquires the Y-component of the vector against which to compare rectangular plane occurrences, as specified using M_NORMAL_CONDITION. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Y-component of the vector. M_NORMAL_Z Inquires the Z-component of the vector against which to compare rectangular plane occurrences, as specified using M_NORMAL_CONDITION. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value Specifies the Z-component of the vector. M_NUMBER Inquires the maximum number of occurrences for which to search. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL Specifies to find all occurrences. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Inquires the minimum number of points per occurrence found. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the minimum number of points per occurrence found. M_SIZE_X Inquires the size of a nominal rectangular plane model (M_RECTANGLE) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the expected size along the X-axis. M_SIZE_X_MAX Inquires the maximum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum size along the X-axis. Value &gt; 0.0 Specifies the maximum size along the X-axis. M_SIZE_X_MIN Inquires the minimum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum size along the X-axis. M_SIZE_Y Inquires the size of a nominal rectangular plane model (M_RECTANGLE) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the expected size along the Y-axis. M_SIZE_Y_MAX Inquires the maximum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum size along the Y-axis. Value &gt; 0.0 Specifies the maximum size along the Y-axis. M_SIZE_Y_MIN Inquires the minimum size of a range-type rectangular plane model (M_RECTANGLE_RANGE) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum size along the Y-axis. M_TOLERANCE_X Inquires the tolerance for the size of a nominal rectangular plane model (M_RECTANGLE) along its X-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the size along the X-axis. Value &gt;= 0.0 Specifies the tolerance for the size along the X-axis. M_TOLERANCE_Y Inquires the tolerance for the size of a nominal rectangular plane model (M_RECTANGLE) along its Y-axis. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the size along the Y-axis. Value &gt;= 0.0 Specifies the tolerance for the size along the Y-axis. Find sphere 3D model finder context ID with a sphere model Specifies a find sphere 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SPHERE_CONTEXT, and used in M3dmodFind() operations. It must contain a sphere model. M_ACCEPTANCE Inquires the acceptance level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies an acceptable score, as a percentage. M_CERTAINTY Inquires the certainty level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies the certainty level for the score, as a percentage. M_COVERAGE_MAX Inquires the maximum expected model coverage. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_NUMBER Inquires the maximum number of occurrences for which to search. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL Specifies to find all occurrences. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Inquires the minimum number of points per occurrence found. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the minimum number of points per occurrence found. M_RADIUS Inquires the radius of a nominal sphere model (M_SPHERE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the expected radius. M_RADIUS_MAX Inquires the maximum radius of a range-type sphere model (M_SPHERE_RANGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the maximum radius. Value &gt; 0.0 Specifies the maximum radius. M_RADIUS_MIN Inquires the minimum radius of a range-type sphere model (M_SPHERE_RANGE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt;= 0.0 Specifies the minimum radius. M_RESERVED_POINTS_DISTANCE Inquires the reserved distance around the occurrence, defined as a percentage of the radius. Points found in this area are not considered in the fit, and cannot be considered for other occurrences. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies the reserved points distance for the model, as a percentage of its radius. M_TOLERANCE_RADIUS Inquires the tolerance for the radius of a nominal sphere model (M_SPHERE). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_INFINITE Specifies no constraint on the radius. Value &gt;= 0.0 Specifies the tolerance for the radius. Find surface 3D model finder context ID with a surface model Specifies a find surface 3D model finder context, allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT, and used in M3dmodFind() operations. It must contain a surface model. M_ACCEPTANCE Inquires the acceptance level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies an acceptable score, as a percentage. M_ACCEPTANCE_COLOR Inquires the acceptance level for the color score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the acceptance level for the color score, as a percentage. M_ACCEPTANCE_TARGET Inquires the acceptance level for the target score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies the acceptance level for the target score, as a percentage. M_CERTAINTY Inquires the certainty level for the score. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt; 100.0 Specifies the certainty level for the score, as a percentage. M_COVERAGE_MAX Inquires the maximum expected model coverage. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 100.0 Specifies the maximum expected model coverage, as a percentage. M_FIT_SCORE_MIN Inquires the minimum expected occurrence fit score. Note that the corresponding control type has no effect unless M_SAVE_FIT_INFO is set to M_ENABLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt;= Value &lt;= 100.0 Specifies the minimum expected fit score. M_MODEL_RESOLUTION Inquires the resolution of the model when it was originally defined (before preprocessing); the resolution is expressed as the average distance between points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE Value &gt; 0.0 Specifies the resolution of the defined model, where the resolution is expressed as the average distance between points. M_NUMBER Inquires the maximum number of occurrences for which to search. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_ALL Specifies to find all occurrences. Value &gt; 0 Specifies the number of occurrences for which to search. M_NUMBER_OF_POINTS_MIN Inquires the minimum number of points per occurrence found. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt; 0 Specifies the minimum number of points per occurrence found. M_NUMBER_RESTING_PLANE Inquires the number of resting planes defined using M3dmodCopy() with M_RESTING_PLANE. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 0 &lt;= Value &lt;= 1 Specifies the number of resting planes. M_REMOVE_OUTLIERS Inquires whether to perform outlier removal on the model. This inquire type is only supported for surface type models. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to perform outlier removal on the model. M_ENABLE Specifies to perform outlier removal on the model. M_REMOVE_OUTLIERS_SEARCH_MODE Inquires the search mode for finding outliers when M_REMOVE_OUTLIERS is enabled. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_AUTO Specifies to automatically set the search mode based on the point cloud's organization; either M_ORGANIZED if organized or M_TREE if unorganized. M_ORGANIZED Specifies to use the point cloud's organizational structure to determine the outliers. M_TREE Specifies to use a KD tree search mode to determine the outliers. M_RESTING_PLANE_ANGLE_TOLERANCE Inquires the angular tolerance for the resting plane constraint. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE 0.0 &lt; Value &lt;= 180.0 Specifies the angular tolerance, in degrees. M_SEARCH_POINT_RESOLUTION Inquires the resolution of the target point cloud (scene), where the resolution is expressed as the average distance between points. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_SAME_AS_MODEL Specifies that the target point cloud (scene) has the same resolution as the model. Value &gt; 0 Specifies the expected resolution of the target point cloud (scene), where the resolution is expressed as the average distance between points. Combination values for Tables: For inquiring a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context For inquiring the type of model in a find 3D model finder context For inquiring a box, cylinder, rectangular plane, sphere, or surface 3D model the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination values for Tables: For inquiring a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context For inquiring the type of model in a find 3D model finder context For inquiring a box, cylinder, rectangular plane, sphere, or surface 3D model the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to determine whether an inquire type has a default value or whether it is supported. For inquiring whether an inquire type has a default value or whether it is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for Tables: For inquiring a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context For inquiring the type of model in a find 3D model finder context For inquiring a box, cylinder, rectangular plane, sphere, or surface 3D model the values listed in all the parameter association tables. You can add one of the following values to the above-mentioned values to cast the requested information to the required data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT Data type: address of a MIL_FLOAT M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 Data type: address of a MIL_INT32 M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - Context3dmodId - Index For specifying a general context or individual model - InquireType - UserVarPtr Parameter Associations For inquiring a find box, cylinder, rectangular plane, sphere, or surface 3D model finder context [Find box 3D model finder context ID] [Find cylinder 3D model finder context ID] [Find rectangular plane 3D model finder context ID] [Find sphere 3D model finder context ID] [Find surface 3D model finder context ID] For inquiring the type of model in a find 3D model finder context [Find 3D model finder context ID with a model] For inquiring a box, cylinder, rectangular plane, sphere, or surface 3D model [Find box 3D model finder context ID with a box model] [Find cylinder 3D model finder context ID with a cylinder model] [Find rectangular plane 3D model finder context ID with a rectangular plane model] [Find sphere 3D model finder context ID with a sphere model] [Find surface 3D model finder context ID with a surface model] + For inquiring about the default value + For inquiring whether an inquire type has a default value or whether it is supported + For specifying the data type Return value Compilation information ",
      "wordCount": 11290,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodInquireDraw",
      "version": null,
      "title": "M3dmodInquireDraw",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodInquireDraw.htm",
      "text": " M3dmodInquireDraw Synopsis Inquire about a setting of a draw 3D model finder context. Syntax MIL_INT64 M3dmodInquireDraw( MIL_ID&nbsp;DrawContext3dmodId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function inquires about a specified setting of a draw 3D model finder context. These settings establish which features of a model or which results of found model occurrences to draw into the 3D graphics list when calling M3dmodDraw3d() and how to draw them. You can control the draw 3D model finder context settings using M3dmodControlDraw(). Parameters Parameters DrawContext3dmodId Specifies the identifier of the draw 3D model finder context to inquire. The draw 3D model finder context must have been previously allocated on the required system using M3dmodAlloc() with either M_DRAW_3D_GEOMETRIC_CONTEXT (to draw occurrences of geometric models) or M_DRAW_3D_SURFACE_CONTEXT (to draw surface models or occurrences of surface models). Operation Specifies the draw operation about which to inquire. See the Parameter associations section for possible values that can be specified. InquireType Specifies the type of setting about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_DOUBLE MIL_FLOAT MIL_INT MIL_INT32 MIL_INT64 Specifies the address in which to write the requested information. Since the M3dmodInquireDraw() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the Operation and InquireType parameters and possible values returned to the UserVarPtr parameter. For inquiring a draw geometric or surface 3D model finder context For inquiring a draw surface 3D model finder context The following Operation and InquireType parameter settings can be specified for a draw 3D model finder context. For inquiring a draw geometric or surface 3D model finder context Operation Description InquireType UserVarPtr - Possible values returned M_DRAW_AXES Inquires whether and how to draw the axes of either the model or each specified occurrence when calling M3dmodDraw3d(), depending on whether a find 3D model finder context or result buffer is specified. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_LENGTH Inquires the length of the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT_LENGTH Specifies that the length is the default size of the 3D model. Value &gt; 0.0 Specifies the length, in world units. M_REFERENCE_X Inquires the X-position of the graphic(s) origin, relative to the model or occurrence. Note that M_REFERENCE_X is only available for a draw surface 3D model finder context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTER Specifies to draw the graphic(s) at the center of the model or occurrence. M_MAX Specifies to draw the graphic(s) at the model's or occurrence's maximum X-coordinate. M_MIN Specifies to draw the graphic(s) at the model's or occurrence's minimum X-coordinate. M_REFERENCE_Y Inquires the Y-position of the graphic(s) origin, relative to the model or occurrence. Note that M_REFERENCE_Y is only available for a draw surface 3D model finder context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTER Specifies to draw the graphic(s) at the center of the model or occurrence. M_MAX Specifies to draw the graphic(s) at the model's or occurrence's maximum Y-coordinate. M_MIN Specifies to draw the graphic(s) at the model's or occurrence's minimum Y-coordinate. M_REFERENCE_Z Inquires the Z-position of the graphic(s) origin, relative to the model or occurrence. Note that M_REFERENCE_Z is only available for a draw surface 3D model finder context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_CENTER Specifies to draw the graphic(s) at the center of the model or occurrence. M_MAX Specifies to draw the graphic(s) at the model's or occurrence's maximum Z-coordinate. M_MIN Specifies to draw the graphic(s) at the model's or occurrence's minimum Z-coordinate. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_BOX Inquires whether and how to draw the bounding box of each specified occurrence when calling M3dmodDraw3d(). The bounding box is the smallest-axis aligned box that contains the ideal geometric shape or surface of the model at the location of the occurrence, depending on the model type. If you enable M_DRAW_MODEL, the bounding box is the smallest axis-aligned box that contains that graphic. Note that it does not necessarily contain all inlier points. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_INLIER_POINTS Inquires whether and how to draw the inlier points, based on M_FIT_DISTANCE, of each specified occurrence when calling M3dmodDraw3d(). Note that for a surface model, M_SAVE_FIT_INFO must be enabled. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_MODEL Inquires whether and how to draw either the defined model or each specified occurrence when calling M3dmodDraw3d(), depending on whether a find 3D model finder context or result buffer is specified. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_APPEARANCE Inquires whether to draw the graphic(s) as a solid surface, wireframe, or points. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_POINTS Specifies a points appearance. M_SOLID Specifies a solid appearance. M_SOLID_WITH_POINTS Specifies a solid appearance with points. M_SOLID_WITH_WIREFRAME Specifies a solid appearance with a wireframe. M_WIREFRAME Specifies a wireframe appearance. M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_AUTO_COLOR Specifies to color the graphic according to specific components in the source container. M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_RESERVED_POINTS Inquires whether and how to draw the reserved points of each specified occurrence when calling M3dmodDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_GLOBAL_DRAW_SETTINGS Inquires a global draw 3D model finder context setting. M_PSEUDO_COLOR_OFFSET Inquires the offset to apply to either the model's or the occurrence's index when drawing with M_PSEUDO_COLOR. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value &gt;= 0 Specifies the offset to apply to the index. The following Operation and InquireType parameter settings can be specified for a draw surface 3D model finder context. For inquiring a draw surface 3D model finder context Operation Description InquireType UserVarPtr - Possible values returned M_DRAW_AXES_POSITION Inquires whether and how to draw the axes at either the model's or each specified occurrence's position when calling M3dmodDraw3d(), depending on whether a find 3D model finder context or result buffer is specified. The axes are drawn at the model's reference axis origin/the model's reference axis origin transformed at each occurrence. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_LENGTH Inquires the length of the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DEFAULT_LENGTH Specifies that the length is the default size of the 3D model. Value &gt; 0.0 Specifies the length, in world units. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_BACKGROUND_POINTS Inquires whether and how to draw the points that were considered part of the background during the search. Background points include those of objects that are too big or too small to be part of an occurrence of the model. The corresponding drawing operation is only supported if M_REMOVE_BACKGROUND was enabled. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_FLOOR_POINTS Inquires whether and how to draw the points that were considered part of the floor during the search. Floor points are determined using the floor plane, defined using M3dmodCopy() with M_FLOOR, and the floor removal direction and offset (M3dmodControl() with M_REMOVE_FLOOR_DIRECTION and M_REMOVE_FLOOR_OFFSET). The corresponding drawing operation is only supported if M_REMOVE_FLOOR was enabled. M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. M_DRAW_MODEL_PREPROCESSED Inquires whether and how to draw the preprocessed model that is in the specified find 3D model finder context. M3dmodPreprocess() must be called before calling M3dmodDraw3d(). M_ACTIVE Inquires whether to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_DISABLE Specifies not to draw the graphic(s). M_ENABLE Specifies to draw the graphic(s). M_COLOR Inquires the color with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 M_COLOR_BLACK Specifies the color black. M_COLOR_BLUE Specifies the color blue. M_COLOR_BRIGHT_GRAY Specifies the color bright gray. M_COLOR_CYAN Specifies the color cyan. M_COLOR_DARK_BLUE Specifies the color dark blue. M_COLOR_DARK_CYAN Specifies the color dark cyan. M_COLOR_DARK_GREEN Specifies the color dark green. M_COLOR_DARK_MAGENTA Specifies the color dark magenta. M_COLOR_DARK_RED Specifies the color dark red. M_COLOR_DARK_YELLOW Specifies the color dark yellow. M_COLOR_GRAY Specifies the color gray. M_COLOR_GREEN Specifies the color green. M_COLOR_LIGHT_BLUE Specifies the color light blue. M_COLOR_LIGHT_GRAY Specifies the color light gray. M_COLOR_LIGHT_GREEN Specifies the color light green. M_COLOR_LIGHT_WHITE Specifies the color light white. M_COLOR_MAGENTA Specifies the color magenta. M_COLOR_RED Specifies the color red. M_COLOR_WHITE Specifies the color white. M_COLOR_YELLOW Specifies the color yellow. M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. M_PSEUDO_COLOR Specifies to draw the graphic for each occurrence with a different color, according to the mapping between each occurrence's index and a distinct color in the M_COLORMAP_DISTINCT_256 colormap. Byte-encoded RGB value Specifies an encoded RGB value. To verify if the value is a byte-encoded RGB value, use the M_IS_RGB888 macro. To retrieve the R, G, and B components, use the M_RGB888_R, M_RGB888_G, and M_RGB888_B macros. M_OPACITY Inquires the opacity with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. 0.0 &lt;= Value &lt;= 100.0 Specifies the opacity of the graphic(s) . M_THICKNESS Inquires the thickness with which to draw the graphic(s). UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_GRAPHIC_LIST_DEFAULT Specifies to use the 3D graphics list's default setting. Value &gt; 0.0 Specifies the point/line thickness, in pixels. Combination values for the values of the InquireType parameter listed in For inquiring a draw geometric or surface 3D model finder context, For inquiring a draw surface 3D model finder context. You can add one of the following values to the above-mentioned values to get information about the default value of an inquire type, regardless of the current value of the inquire type. For inquiring about the default value InquireType Description UserVarPtr - Possible values returned M_DEFAULT Inquires the default value of the specified inquire type. UserVarPtr extra info Data type info: Data type: defined elsewhere Data type: defined elsewhere M_IS_SET_TO_DEFAULT Inquires whether the specified inquire type is set to its default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not set to its default value. M_TRUE Specifies that the inquire type is set to its default value. Combination values for the values of the InquireType parameter listed in For inquiring a draw geometric or surface 3D model finder context, For inquiring a draw surface 3D model finder context. You can add one of the following values to the above-mentioned values to determine whether an inquire type has a default value or whether it is supported. For inquiring whether an inquire type has a default value or whether it is supported InquireType Description UserVarPtr - Possible values returned M_HAS_DEFAULT Inquires whether the specified inquire type has a default value. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type does not have a default value. M_TRUE Specifies that the inquire type has a default value. M_SUPPORTED Inquires whether the specified inquire type is supported. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_FALSE Specifies that the inquire type is not supported. M_TRUE Specifies that the inquire type is supported. Combination values for the values of the InquireType parameter listed in For inquiring a draw geometric or surface 3D model finder context, For inquiring a draw surface 3D model finder context. You can add one of the following values to the above-mentioned values to cast the requested information to the required data type. For specifying the data type InquireType Description UserVarPtr - Possible values returned M_TYPE_MIL_DOUBLE Casts the requested information to a MIL_DOUBLE. UserVarPtr extra info Data type info: Data type: address of a MIL_DOUBLE Data type: address of a MIL_DOUBLE M_TYPE_MIL_FLOAT Casts the requested information to a MIL_FLOAT. UserVarPtr extra info Data type info: Data type: address of a MIL_FLOAT Data type: address of a MIL_FLOAT M_TYPE_MIL_INT Casts the requested information to a MIL_INT. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_TYPE_MIL_INT32 Casts the requested information to a MIL_INT32. UserVarPtr extra info Data type info: Data type: address of a MIL_INT32 Data type: address of a MIL_INT32 M_TYPE_MIL_INT64 Casts the requested information to a MIL_INT64. UserVarPtr extra info Data type info: Data type: address of a MIL_INT64 Data type: address of a MIL_INT64 Return value The returned value is the requested information, cast to a MIL_INT64. If the requested information does not fit into a MIL_INT64, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - DrawContext3dmodId - Operation - InquireType - UserVarPtr Parameter Associations For inquiring a draw geometric or surface 3D model finder context [M_DRAW_AXES] [M_DRAW_BOX] [M_DRAW_INLIER_POINTS] [M_DRAW_MODEL] [M_DRAW_RESERVED_POINTS] [M_GLOBAL_DRAW_SETTINGS] For inquiring a draw surface 3D model finder context [M_DRAW_AXES_POSITION] [M_DRAW_BACKGROUND_POINTS] [M_DRAW_FLOOR_POINTS] [M_DRAW_MODEL_PREPROCESSED] + For inquiring about the default value + For inquiring whether an inquire type has a default value or whether it is supported + For specifying the data type Return value Compilation information ",
      "wordCount": 4312,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodModifyResult",
      "version": null,
      "title": "M3dmodModifyResult",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodModifyResult.htm",
      "text": " M3dmodModifyResult Synopsis Modify or delete surface results from a surface 3D model finder result buffer. Syntax void M3dmodModifyResult( MIL_ID&nbsp;SrcResult3dmodId, //in MIL_INT64&nbsp;SrcIndex, //in MIL_ID&nbsp;DstResult3dmodId, //in MIL_INT64&nbsp;DstIndex, //in MIL_INT64&nbsp;ModifyType, //in MIL_DOUBLE&nbsp;ModifyParam, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function modifies or deletes surface results and stores them in the destination result buffer. You can only modify results after calling M3dmodFind(). M3dmodModifyResult() is useful when reusing surface results to speed up the next search (M3dmodControl() with M_REUSE_RESULT set to M_ENABLE); in this case, M3dmodFind() will search for occurrences at the stored positions before searching the rest of the target. M3dmodModifyResult() allows you to transform results if there was a known movement between scans, or to delete results for occurrences you don't expect to find in the next scan. Note that if you want to reuse the same results for multiple searches and you want the modification to be present for each search, you should perform the modifications on the result buffer with the original results, in-place (the same result buffer for the source and the destination). Then, before each search, you should copy the results to a separate result buffer, using M3dmodCopyResult() with M_RESULT, and use the separate result buffer for the search. If you want to reuse the original (unmodified) results in a future search, you must specify different result buffers for the source and destination to avoid overwriting the original results. Note that if you only want to reuse the results once, you do not need to copy the results to a separate result buffer; you can call M3dmodFind() with the original result buffer. This function supports in-place processing; the source and destination result buffer identifiers can refer to the same result buffer. Parameters Parameters SrcResult3dmodId Specifies the identifier of the source surface 3D model finder result buffer from which to modify results. The surface 3D model finder result buffer must have been allocated using M3dmodAllocResult() with M_FIND_SURFACE_RESULT and must contain the results of a call to M3dmodFind(). SrcIndex Specifies the index of the surface occurrence in the source surface 3D model finder result buffer. For specifying the index of the surface occurrence to modify Value Description M_ALL Specifies to modify the result for all surface occurrences. 0 &lt;= Value &lt; M_NUMBER Specifies the index of the surface occurrence for which to modify results. DstResult3dmodId Specifies the identifier of the destination surface 3D model finder result buffer in which to store the modified results. The surface 3D model finder result buffer must have been allocated using M3dmodAllocResult() with M_FIND_SURFACE_RESULT. DstIndex Reserved for future expansion and must be set to M_DEFAULT. ModifyType Specifies the type of modification to perform. See the Parameter associations section for possible values that can be specified. ModifyParam Specifies an attribute of the modification. Set this parameter to M_DEFAULT if not used. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Parameter associations The table below lists possible values for the ModifyType and ModifyParam parameters. For specifying the type of modification Note that any unused parameters should be set to M_DEFAULT. For specifying the type of modification ModifyType Description ModifyParam M_DELETE Specifies to delete results for the specified surface occurrence from the surface 3D model finder result buffer. This is useful if you don't need to reuse the results of all of the found occurrences. You should delete results for an occurrence if you don't expect to find an occurrence at the same position in the next scene. M_TRANSFORM Specifies to translate or rotate the specified surface occurrence in the surface 3D model finder result buffer. This is useful if there was a known movement between the scans. You should transform results for an occurrence if you expect the occurrence to be displaced in the next scene. Note that this modification type will invalidate all results related to the target point cloud, such as reserved points. Transformation matrix object ID Specifies the identifier of the transformation matrix object used to transform the surface occurrence. The transformation matrix object must have been previously allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. You can use M3dgeoMatrixSetTransform() to generate the required transformation matrix. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - SrcResult3dmodId - SrcIndex For specifying the index of the surface occurrence to modify - DstResult3dmodId - DstIndex - ModifyType - ModifyParam - ControlFlag Parameter Associations For specifying the type of modification Compilation information ",
      "wordCount": 744,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodPreprocess",
      "version": null,
      "title": "M3dmodPreprocess",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodPreprocess.htm",
      "text": " M3dmodPreprocess Synopsis Preprocess a 3D model finder context. Syntax void M3dmodPreprocess( MIL_ID&nbsp;Context3dmodId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function preprocesses the specified 3D model finder context. It sets internal search settings so that future searches will be optimized for speed and robustness. This function must be called before performing the first M3dmodFind() search. Call this function after all search settings have been set. When you save the 3D model finder context, the model's preprocessing changes are not stored with the model. Upon restoration, the model must be preprocessed again. Note that if some of the model's search settings are changed after a call to M3dmodPreprocess(), the model must be preprocessed again. Parameters Parameters Context3dmodId Specifies the identifier of the 3D model finder context to preprocess. The context must have been previously allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT, M_FIND_CYLINDER_CONTEXT, M_FIND_RECTANGULAR_PLANE_CONTEXT, M_FIND_SPHERE_CONTEXT, or M_FIND_SURFACE_CONTEXT. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - Context3dmodId - ControlFlag Compilation information ",
      "wordCount": 176,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodRestore",
      "version": null,
      "title": "M3dmodRestore",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodRestore.htm",
      "text": " M3dmodRestore Synopsis Restore a 3D model finder context from disk. Syntax MIL_ID M3dmodRestore( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dmodIdPtr //out ) Description This function restores a 3D model finder context that was previously saved to a file, using M3dmodSave() or M3dmodStream(). This function restores all of the 3D model finder context's settings that were in effect when it was saved. When the restored 3D model finder context is no longer required, release it using M3dmodFree() unless M_UNIQUE_ID was specified during restoration; if M_UNIQUE_ID was specified, the smart identifier manages the 3D model finder context's lifetime and you must not manually free it. Parameters Parameters FileName Specifies the name and path of the file from which to restore the 3D model finder context. The function handles (internally) the opening and closing of the file. For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Open dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). Typically, 3D model finder files have an M3DMOD extension. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). SysId Specifies the system on which to restore the 3D model finder context. This parameter should be set to one of the following values: For specifying the system Value Description M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Context3dmodIdPtr Specifies the address of the variable in which to write the 3D model finder context identifier or specifies the data type that the function should use to return the 3D model finder context identifier. For retrieving the identifier or specifying how to return it Value Description M_NULL Specifies that you will use this function's return value to obtain the identifier of the allocated 3D model finder context ; in this case, a standard MIL identifier of type MIL_ID is returned. M_UNIQUE_ID Specifies that you will use this function's return value to obtain the identifier of the allocated 3D model finder context ; in this case, a MIL smart identifier of type MIL_UNIQUE_3DMOD_ID is returned instead of a standard MIL identifier. This setting is only available when using C++11 (or later). A MIL smart identifier manages the lifespan of the MIL object it owns (similar to a std::unique_ptr). Note, you can use a MIL smart identifier as though it were a standard MIL identifier, except that you cannot use it to manually free the 3D model finder context (it is freed automatically). For more information, see the MIL smart identifiers subsection of the MIL custom data types, void pointers, extensions, and portability functions section of Chapter 2: Building an application. Address in which to write the draw 3D model finder context identifier Specifies the address of a draw MIL_ID in which to write the identifier of the allocated draw 3D model finder context. If restoration fails, M_NULL is written as the identifier. Address in which to write the find 3D model finder context identifier Specifies the address of a MIL_ID in which to write the identifier of the allocated find 3D model finder context. If restoration fails, M_NULL is written as the identifier. Return value The returned value is the 3D model finder context identifier either as a standard identifier (MIL_ID) or a smart identifier (MIL_UNIQUE_3DMOD_ID). If allocation fails, M_NULL is returned (or nullptr if M_UNIQUE_ID was specified). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - FileName For specifying the file name and path - SysId For specifying the system - ControlFlag - Context3dmodIdPtr For retrieving the identifier or specifying how to return it Return value Compilation information ",
      "wordCount": 673,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodSave",
      "version": null,
      "title": "M3dmodSave",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodSave.htm",
      "text": " M3dmodSave Synopsis Save a 3D model finder context to a file. Syntax void M3dmodSave( MIL_CONST_TEXT_PTR&nbsp;FileName, //in MIL_ID&nbsp;Context3dmodId, //in MIL_INT64&nbsp;ControlFlag //in ) Description This function saves all the information about a previously allocated 3D model finder context to disk. To load a saved context, use either M3dmodRestore() or M3dmodStream(). Parameters Parameters FileName Specifies the name and path of the file in which to save the 3D model finder context; it is recommended that you use the M3DMOD file extension for easier use with other Matrox Imaging software products. The function internally handles the opening and closing of this file. If this file already exists, it will be overwritten. This parameter can be set to one of the following values: For specifying the file name and path Value Description M_INTERACTIVE [This is only applicable to Windows] Opens the File Save As dialog box from which you can interactively specify the drive, directory, and name of the file. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"). The recommended extension is M3DMOD. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Context3dmodId Specifies the identifier of the 3D model finder context to save. The context must have been successfully allocated (using M3dmodAlloc()) prior to calling this function. ControlFlag Reserved for future expansion and must be set to M_DEFAULT. Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - FileName For specifying the file name and path - Context3dmodId - ControlFlag Compilation information ",
      "wordCount": 281,
      "subEntries": []
    },
    {
      "id": "Reference_3dmod_M3dmodStream",
      "version": null,
      "title": "M3dmodStream",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\3dmod\\M3dmodStream.htm",
      "text": " M3dmodStream Synopsis Load, restore, or save a 3D model finder context from/to a file or memory stream. Syntax void M3dmodStream( MIL_TEXT_PTR&nbsp;MemPtrOrFileName, //in-out MIL_ID&nbsp;SysId, //in MIL_INT64&nbsp;Operation, //in MIL_INT64&nbsp;StreamType, //in MIL_DOUBLE&nbsp;Version, //in MIL_INT64&nbsp;ControlFlag, //in MIL_ID&nbsp;*Context3dmodIdPtr, //in-out MIL_INT&nbsp;*SizeByteVarPtr //out ) Description This function can load, restore, or save a 3D model finder context from/to a file or memory stream. To inquire the number of bytes necessary to save a 3D model finder context to a memory stream, you should first call M3dmodStream() with M_INQUIRE_SIZE_BYTE. The content saved to memory stream is equivalent to the content saved to file. This function is equivalent to a file saved using M3dmodSave(). You can use this and other MIL stream functions, for example, to save all required MIL objects, as well as any other custom data, for your application to a memory stream. Once in a memory stream, you can write the stream to a single file or transfer it over a network. You are responsible for concatenating the streams and for saving the stream to file. All of the 3D model finder context's settings that were in effect when the 3D model finder context was saved will be restored. A loaded or restored 3D model finder context is not preprocessed, therefore you must call M3dmodPreprocess() before performing a search with M3dmodFind(). Parameters Parameters MemPtrOrFileName Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): MIL_TEXT_PTR [optionally, in C++: a reference to a MIL_STRING] Optionally, in C++: a reference to a std::vector of type MIL_UINT8 Specifies the file or memory stream. See the Parameter associations section for possible values that can be returned/specified. SysId Specifies the system on which to restore the 3D model finder context. See the Parameter associations section for possible values that can be specified. Operation Specifies the operation to perform. See the Parameter associations section for possible values that can be specified. StreamType Specifies the type of stream in which to store/from which to restore the 3D model finder context. This parameter must be set to one of the following values: For specifying the type of stream Value Description M_FILE Specifies a file stream. M_MEMORY Specifies a memory stream. You are responsible for allocating a block of memory for the stream. Version Specifies the MIL version of the 3D model finder context. See the Parameter associations section for possible values that can be specified. ControlFlag Reserved for future expansion. This parameter must be set to M_DEFAULT. Context3dmodIdPtr Specifies the address of the variable in which to write or from which to read the identifier of the 3D model finder context. If the M_RESTORE operation is not successful, M_NULL is returned. See the Parameter associations section for possible values that can be returned/specified. SizeByteVarPtr Specifies the address of the variable in which to write the size of the 3D model finder context, in bytes. If the size is not required, you can set this parameter to M_NULL. Note that the size of the 3D model finder context will vary depending on the MIL version specified. Parameter associations The table below lists possible values for the MemPtrOrFileName, SysId, Operation, Version, and Context3dmodIdPtr parameters. For performing the stream operation. For performing the stream operation. Operation Description MemPtrOrFileName - Possible values passed or returned SysId Version Context3dmodIdPtr - Possible values passed or returned M_INQUIRE_SIZE_BYTE Inquires the number of bytes required to save a 3D model finder context to memory stream. This operation is not supported when the StreamType parameter is set to M_FILE. MemPtrOrFileName This parameter must be set to M_NULL. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D model finder context must be compatible when saved. The size of a 3D model finder context might differ from one MIL version to another. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. Context3dmodIdPtr Specifies the address of the variable containing the identifier of the 3D model finder context. M_LOAD Loads the content of a specified file or memory stream into a previously allocated 3D model finder context. MemPtrOrFileName Specifies the file or memory stream from which to load the 3D model finder context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D model finder contexts typically have an M3DMOD file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version This parameter must be set to M_DEFAULT. Context3dmodIdPtr Specifies the address of the variable containing the identifier of the 3D model finder context. All previous settings are overwritten with those of the loaded 3D model finder context, or are set to the default value if the settings didn't exist in the version of MIL from which the 3D model finder context is being loaded. M_RESTORE Restores a 3D model finder context from a file or memory stream and assigns it a MIL identifier. MemPtrOrFileName Specifies the file or memory stream from which to restore the 3D model finder context. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. 3D model finder contexts typically have an M3DMOD file extension. The function handles (internally) the opening and closing of the file. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which the object is located, and the block of memory must contain the entire object. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId Specifies the system on which to allocate the 3D model finder context. M_DEFAULT_HOST Specifies the default Host system of the current MIL application. MIL system identifier Specifies a valid system identifier, previously allocated using MsysAlloc(). Version This parameter must be set to M_DEFAULT. Context3dmodIdPtr Specifies the address of the variable in which to write the identifier of the 3D model finder context. If the operation is not successful, M_NULL is returned. M_SAVE Saves a 3D model finder context to a specified file or memory stream. MemPtrOrFileName Specifies the file or memory stream. M_INTERACTIVE [This is only applicable to Windows] Opens a dialog box from which you can interactively specify the drive, directory, and name of the file, when the StreamType parameter is set to M_FILE. MIL_TEXT(\"FileName\") 1 Specifies the drive, directory, and name of the file (for example, \"C:\\mydirectory\\myfile\"), when the StreamType parameter is set to M_FILE. For easier use with other Matrox Imaging software products, when saving a 3D model context to a file, use the M3DMOD file extension. The function handles (internally) the opening and closing of the file. If the file already exists, it will be overwritten. To specify a file on a remote computer (under Distributed MIL), prefix the specified file name string with \"remote:///\" (for example, \"remote:///C:\\mydirectory\\myfile\"). MemPtr Specifies the address of the block of memory, when the StreamType parameter is set to M_MEMORY. The block of memory should be of type MIL_UINT8. The specified address must correspond to the first memory address in which to write, and the block of memory must be large enough to stream the entire object. To determine the required size, call this function with M_INQUIRE_SIZE_BYTE. Note that when using a C compiler (not a C++ or other compiler), you must cast the MIL_UINT8 pointer to a MIL_TEXT_PTR. SysId This parameter must be set to M_NULL. Version Specifies the MIL version with which the 3D model finder context must be compatible when saved. M_DEFAULT Specifies the current version of MIL. M_PROC_VERSION_100_SP5 Specifies the version as being MIL 10.0 Service Pack 5. M_PROC_VERSION_100_SP6 Specifies the version as being MIL 10.0 Service Pack 6. M_PROC_VERSION_100_SP7 Specifies the version as being MIL 10.0 Service Pack 7. Context3dmodIdPtr Specifies the address of the variable containing the identifier of the 3D model finder context to save. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Compilation information Header Include mil.h. Library Use mil.lib; mil3dmod.lib. DLL Requires mil.dll; mil3dmod.dll. Syntax Description Parameters - MemPtrOrFileName - SysId - Operation - StreamType For specifying the type of stream - Version - ControlFlag - Context3dmodIdPtr - SizeByteVarPtr Parameter Associations For performing the stream operation. Compilation information ",
      "wordCount": 1623,
      "subEntries": []
    }
  ]
}]