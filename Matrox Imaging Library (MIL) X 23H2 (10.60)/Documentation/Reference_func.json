[{
  "id": "Reference_func",
  "version": "2024020714",
  "title": "func",
  "subTitles": null,
  "location": "MIL Reference",
  "pageURL": "content\\Reference\\func\\ModuleInformation.htm",
  "text": " Mfunc functions Synopsis The functions prefixed with Mfunc make up the Function Development module. The Function Development module allows programmers to define functions to extend MIL's functionality. Using this toolkit, you can implement functions and integrate them directly into MIL, where they behave like standard MIL functions (for example, respecting error handling and tracing). Functions MfuncAlloc MfuncAllocId MfuncAllocScript MfuncBufAncestorId MfuncBufAncestorOffsetBand MfuncBufAncestorOffsetBit MfuncBufAncestorOffsetX MfuncBufAncestorOffsetY MfuncBufAttribute MfuncBufFormat MfuncBufHostAddress MfuncBufHostAddressBand MfuncBufId MfuncBufMaxValue MfuncBufMinValue MfuncBufOwnerSystemId MfuncBufOwnerSystemType MfuncBufParentId MfuncBufParentOffsetBand MfuncBufParentOffsetX MfuncBufParentOffsetY MfuncBufPhysicalAddress MfuncBufPhysicalAddressBand MfuncBufPitch MfuncBufPitchByte MfuncBufSizeBand MfuncBufSizeBit MfuncBufSizeX MfuncBufSizeY MfuncBufType MfuncCall MfuncControl MfuncErrorReport MfuncFree MfuncFreeId MfuncInquire MfuncParam MfuncParamCheck MfuncParamValue ",
  "wordCount": 96,
  "subEntries": [
    {
      "id": "Reference_func_MfuncAlloc",
      "version": null,
      "title": "MfuncAlloc",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncAlloc.htm",
      "text": " MfuncAlloc Synopsis Allocate a MIL function context for your user-defined function. Syntax MIL_ID MfuncAlloc( MIL_CONST_TEXT_PTR&nbsp;FunctionName, //in MIL_INT&nbsp;ParameterNum, //in MIL_FUNC_FUNCTION_PTR&nbsp;SlaveFunctionPtr, //in MIL_CONST_TEXT_PTR&nbsp;SlaveFunctionDLLName, //in MIL_CONST_TEXT_PTR&nbsp;SlaveFunctionName, //in MIL_INT&nbsp;SlaveFunctionOpcode, //in MIL_INT64&nbsp;InitFlag, //in MIL_ID&nbsp;*CBasedContextFuncIdPtr //out ) Description This function allows you to allocate a MIL function context for the current user-defined function. Call MfuncAlloc() in the master function of the user-defined function. MfuncAlloc() signals the creation of a user-defined MIL function context, and should be the first MIL function called in the master function. Once the function context is allocated, your function is known as a user-defined MIL function. A user-defined MIL function is considered a standard MIL function, respecting all MIL environment controls, such as tracing and error handling. When defining the function context, you must specify a unique opcode for the user-defined function. The opcode is used to locate the slave function when an application executes the user-defined function. MIL user-defined functions can be grouped into user-defined modules or remain ungrouped. To specify whether a user-defined function is grouped or not, and if grouped, assign it to a specific user-defined module, pass an appropriate opcode to the SlaveFunctionOpcode parameter. Specify the opcode as a combination of two values: an offset from 0 to 63 and a label either identifying the module in which to group the function (M_USER_MODULE_n, where n is a number between 1 and 7) or identifying that the function is ungrouped (M_USER_FUNCTION). A user-defined module can have up to 64 functions, and there can be up to 64 ungrouped functions. Parameters Parameters FunctionName Specifies the name of the user-defined function. For specifying the name of the user-defined function Value Description MIL_TEXT(\"FunctionName\") 1 Specifies the name of the user-defined function. This is the same as the name of the current master function. This is also the name that you will use to call the user-defined MIL function in your application. The name of the function must be a null-terminated string. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ParameterNum Specifies the number of parameters passed to the current user-defined function. Note that the number of parameters should not exceed 16. SlaveFunctionPtr Specifies the address of the slave function. The slave function must be declared as follows: void MFTYPE SlaveFunction( MIL_ID FunctionId ) Parameters FunctionId Specifies the identifier of the user-defined MIL function that references this slave function. This is the identifier returned by the MfuncAlloc() function. If your slave function will be executed by a system with an on-board processor or if the your slave function's code will be compiled into a library file, you can set this parameter to M_NULL. SlaveFunctionDLLName Specifies the name of the library file which contains the slave function's code. The library file must be visible to the system executing the slave function. When developing a user-defined MIL function which will be used in a Distributed MIL application, it is recommended that a copy of the library file be placed on all the remote systems in the cluster, in a directory which is part of the system's path environment variable. If the library file is not located in a directory which is part of the path environment variable, you can alternatively provide the full path to the file. If your slave function will be executed by a system with an on-board processor or if the your slave function's code will be included in your application, you can set this parameter to M_NULL. SlaveFunctionName Specifies the name of the slave function to export from the library file. This parameter must be set if a library file is provided to the SlaveFunctionDLLName parameter. If your slave function will be executed by a system with an on-board processor or if the your slave function's code will be included in your application, you can set this parameter to M_NULL. SlaveFunctionOpcode Specifies the opcode to use to locate the slave function when an application executes the user-defined MIL function. The slave function's opcode also serves to identify which user-defined module, if any, the user-defined function belongs to. To specify a label identifying that the function is ungrouped, or a label identifying the module in which the function is grouped, specify one of the following: For specifying the label identifying that the function is grouped or ungrouped Value Description M_USER_FUNCTION Specifies that the user-defined function is an ungrouped user-defined function. You must specify a combination value from the following table: To specify the offset M_USER_MODULE_n Specifies the module in which to group the user-defined function, where n is a value between 1 and 7, inclusive. You must specify a combination value from the following table: To specify the offset Combination value for any of the possible values of the SlaveFunctionOpcode parameter. You must add the following value to the above-mentioned values to specify the offset. For specifying the offset Combination value Description 0 &lt;= Value &lt;= 63 Specifies the offset of the user-defined function among the ungrouped functions or among the functions in a specified group. When allocating multiple user-defined functions in a single user-defined module, you must set a different offset for each new function in the module. For example, M_USER_MODULE_3 + 12. To allocate a user-defined function that is not grouped in a user-defined module, use M_USER_FUNCTION + the offset; you must set a different offset for each new ungrouped function. InitFlag Specifies more information about the user-defined MIL function. The values below allow you to set whether the slave function is executed asynchronously or synchronously. For specifying whether the slave function is executed asynchronously or synchronously Value Description M_DEFAULT Specifies the default value. If the system on which the function context is allocated has a remote processor, the default is the same as M_ASYNCHRONOUS_FUNCTION + M_REMOTE, if the system does not have a remote processor, the default is the same as M_SYNCHRONOUS_FUNCTION + M_LOCAL. M_ASYNCHRONOUS_FUNCTION Specifies that the user-defined function will not wait for the slave function to finish executing before executing the next function (typically MfuncFree()) in the master function. You must specify a combination value from the following table: To set whether the slave function can be executed remotely M_SYNCHRONOUS_FUNCTION Specifies that the user-defined function will wait for the slave function to finish executing before executing the next function in the master function. You must specify a combination value from the following table: To set whether the slave function can be executed remotely Combination values for M_ASYNCHRONOUS_FUNCTION , M_SYNCHRONOUS_FUNCTION. You must add one of the following values to the above-mentioned values to set whether the slave function can be executed remotely. For specifying whether the slave function can be executed remotely Combination value Description M_LOCAL Specifies that the slave function must be executed by the Host processor. Note that MIL functions called from the slave function will still be executed on their target system. This value cannot be added to M_ASYNCHRONOUS_FUNCTION. M_REMOTE Specifies that the slave function will be executed remotely, if possible. If you select M_REMOTE, but do not compile your slave function with a cross-compiler specific to the target processor, an error will be generated. For more information, see the Steps to create a user-defined MIL function section of Chapter 67: The MIL function development module. Combination values for M_SYNCHRONOUS_FUNCTION. You can add one of the following values to the above-mentioned value to set the type of the user-defined MIL function. Note that both M_ALLOC and M_FREE imply that the user-defined function is M_SYNCHRONOUS_FUNCTION, and cannot be added to M_ASYNCHRONOUS_FUNCTION. For setting the type of user-defined MIL function Combination value Description M_ALLOC Specifies that the user-defined function is an allocation function, used to allocate a user-defined MIL object on a required system. M_FREE Specifies that the user-defined function frees an object allocated using a user-defined MIL allocation function. Note that when this value is used, the user-defined MIL function must accept the MIL identifier of the object to free as its only parameter. CBasedContextFuncIdPtr Specifies the address of the variable in which to store the MIL identifier provided for the user-defined function. Since the MfuncAlloc() function also returns the MIL identifier, you can set this parameter to M_NULL. Return value The returned value is the function context identifier if the allocation is successful. If allocation fails, M_NULL is returned. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - FunctionName For specifying the name of the user-defined function - ParameterNum - SlaveFunctionPtr - SlaveFunctionDLLName - SlaveFunctionName - SlaveFunctionOpcode For specifying the label identifying that the function is grouped or ungrouped + For specifying the offset - InitFlag For specifying whether the slave function is executed asynchronously or synchronously + For specifying whether the slave function can be executed remotely + For setting the type of user-defined MIL function - CBasedContextFuncIdPtr Return value Compilation information M_USER_MODULE_n ",
      "wordCount": 1464,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncAllocId",
      "version": null,
      "title": "MfuncAllocId",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncAllocId.htm",
      "text": " MfuncAllocId Synopsis Associate a MIL identifier with a user-defined object. Syntax MIL_ID MfuncAllocId( MIL_ID&nbsp;ContextFuncId, //in MIL_INT64&nbsp;MilObjectType, //in void&nbsp;*UserObjectPtr //in ) Description This function allows you to associate a MIL identifier with a user-defined object (such as, a structure or an array). You can associate a MIL identifier with a user object so that it is recognized by MIL and treated as a standard MIL object during tracing or error handling. Once the object is associated with an identifier, the object is known as a user-defined MIL object. The parameters passed to MfuncAllocId() do not allow you to specify whether the user-defined object is allocated on the Host or on a system with an on-board processor. For information on creating user-defined objects on systems with on-board processors and associating these object with MIL identifiers, see the Associating a MIL identifier with a user-defined object section of Chapter 67: The MIL function development module. You must also specify a MIL type for your object (MilObjectType parameter). MIL allows up to 32 different user-defined MIL object types. Use the MIL identifier to refer to the user-defined MIL object. To refer to the actual data grouped into this user-defined object, use the pointer to the object (UserObjectPtr parameter). To inquire about the type of this object, or the pointer to it, use the MfuncInquire() function. Parameters Parameters ContextFuncId Specifies a MIL function identifier. This parameter can be set to the following values: For a MIL function identifier Value Description M_DEFAULT Specifies the default MIL function identifier. Use this value to create user-defined MIL objects outside of a user-defined MIL function. MIL function identifier Specifies the identifier of a user-defined MIL function. MilObjectType Specifies the MIL type of the user-defined object to be associated with a MIL identifier. To specify the type, you must specify one of the groups listed in the table below and combine it with an offset. The two object groups allow you to distinguish between custom created objects, especially when the created objects are to be used in different MIL modules. For specifying the MIL type of user-defined object Value Description M_USER_OBJECT_1 Specifies that the user object falls under the first group of user object types. You must specify a combination value from the following table: To set the offset M_USER_OBJECT_2 Specifies that the user object falls under the second group of user object types. You must specify a combination value from the following table: To set the offset Combination value for any of the possible values of the MilObjectType parameter. You must add the following value to the above-mentioned values to set the offset. The offset allows you to distinguish between the different object types of the same group (for example, M_USER_OBJECT_1 + 0x0001). For distinguishing between the different object types Combination value Description Value Specifies the offset within the selected object type group. The value must have only one of its 16 least significant bits set. UserObjectPtr Specifies the address of the user-defined object that is to be associated with a MIL identifier. Note that user-defined objects stored in the memory of an on-board processor are not accessible from Host, and vice versa. This object can be a structure, an array, or any other data type. Return value The returned value is the MIL identifier associated with the object if the allocation is successful. If allocation fails, M_NULL is returned. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId For a MIL function identifier - MilObjectType For specifying the MIL type of user-defined object + For distinguishing between the different object types - UserObjectPtr Return value Compilation information ",
      "wordCount": 608,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncAllocScript",
      "version": null,
      "title": "MfuncAllocScript",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncAllocScript.htm",
      "text": " MfuncAllocScript Synopsis Allocate a MIL function context for your script-based user-defined MIL function. Syntax MIL_ID MfuncAllocScript( MIL_CONST_TEXT_PTR&nbsp;FunctionName, //in MIL_INT&nbsp;ParameterNum, //in MIL_CONST_TEXT_PTR&nbsp;InterpreterLanguage, //in MIL_CONST_TEXT_PTR&nbsp;ScriptFileName, //in MIL_CONST_TEXT_PTR&nbsp;ScriptFunctionName, //in MIL_INT&nbsp;ScriptFunctionOpcode, //in MIL_INT64&nbsp;InitFlag, //in MIL_ID&nbsp;*ScriptBasedContextFuncIdPtr //out ) Description This function allows you to allocate a MIL function context for the current script-based user-defined MIL function. Being script-based, the function will, instead of calling a C function, run a function in a script. Call MfuncAllocScript() in the master function of the user-defined function. MfuncAllocScript() signals the creation of a user-defined MIL function, and should be the first MIL function called in the master function. It will also allocate a MIL function context identifier for the current function. You should use this MIL function context identifier as an argument for other Mfunc...() functions used during the user-defined function's execution. Once the function context is allocated, your function is known as a script-based user-defined MIL function. A script-based user-defined MIL function is considered a standard MIL function, respecting all MIL environment controls, such as tracing and error handling. The script that you provided as the slave-portion of the function is compiled/interpreted at runtime. When defining the function context, you must specify a unique opcode for the script-based user-defined function. The opcode is used to locate the script-based user-defined function when an application calls the script-based user-defined function. You must also specify the language in which the script is written. Script-based user-defined MIL functions can be grouped into user-defined script modules or remain ungrouped. To specify whether a user-defined function is grouped or not, and if grouped, assign it to a specific user-defined script module, pass an appropriate opcode to the ScriptFunctionOpcode parameter. Specify the opcode as a combination of two values: an offset from 0 to 63 and a label either identifying the module in which to group the function (M_SCRIPT_MODULE...) or identifying that the function is ungrouped (M_SCRIPT_FUNCTION). A user-defined script module can have up to 64 functions, and there can be up to 64 ungrouped functions. Parameters Parameters FunctionName Specifies the name of the script-based user-defined MIL function. For specifying the name of the user-defined function Value Description MIL_TEXT(\"FunctionName\") 1 Specifies the name of the script-based user-defined MIL function. This is the same as the name of the current master function. This is also the name that you will use to call the user-defined function in your application. The name of the function must be a null-terminated string. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ParameterNum Specifies the number of parameters to be registered for the current user-defined function. For specifying the number of parameters Value Description 0 &lt;= Value &lt;= 15 Specifies the number of parameters that you register for the function using MfuncParam() (or one of the type-specific versions of this function such as MfuncParamMILInt()). This should correspond to the number of parameters passed to the current user-defined function. InterpreterLanguage Specifies the language and language version in which the script is written. For specifying the path to the language interpreter. Value Description M_INTERPRETER_C_PYTHON3X Specifies that the first successfully loaded 3.X version of CPython is used. MIL will attempt to load the most recent 3.X version of CPython among the supported versions. Note that the script must be written using this version of the language. M_INTERPRETER_C_PYTHON36 [This is only applicable to Linux] Specifies that a CPython 3.6 based script is used. This is only supported if CPython 3.6 is the default Python version for the Linux distribution where MIL is installed. Note that the script must be written using this version of the language. M_INTERPRETER_C_PYTHON37 Specifies that a CPython 3.7 based script is used. Note that the script must be written using this version of the language. Operating system specific [This is only applicable to Linux] For MIL under Linux, this version is only supported if CPython 3.7 is the default Python version for the Linux distribution where MIL is installed. M_INTERPRETER_C_PYTHON38 [This is only applicable to Linux] Specifies that a CPython 3.8 based script is used. This is only supported if CPython 3.8 is the default Python version for the Linux distribution where MIL is installed. Note that the script must be written using this version of the language. M_INTERPRETER_C_PYTHON39 Specifies that a CPython 3.9 based script is used. Note that the script must be written using this version of the language. Operating system specific [This is only applicable to Linux] For MIL under Linux, this version is only supported if CPython 3.9 is the default Python version for the Linux distribution where MIL is installed. M_INTERPRETER_C_PYTHON310 [This is only applicable to Linux] Specifies that a CPython 3.10 based script is used. This is only supported if CPython 3.10 is the default Python version for the Linux distribution where MIL is installed. Note that the script must be written using this version of the language. M_INTERPRETER_C_PYTHON311 Specifies that a CPython 3.11 based script is used. Note that the script must be written using this version of the language. Operating system specific [This is only applicable to Linux] For MIL under Linux, this version is only supported if CPython 3.11 is the default Python version for the Linux distribution where MIL is installed. M_INTERPRETER_CSHARP Specifies that C# based code is used. ScriptFileName Specifies the name and path of the file containing the user-defined script. The script file must be accessible to the computer executing the script. If the script file is not located in the current directory, the full path to the file is required. When developing a script-based user-defined MIL function that will be used in a Distributed MIL application, you must specify the full path to the location of the scripts on the remote computer. Ensure that all included scripts are located together on the remote computer. ScriptFunctionName Specifies the name of the function to export from the script file. Note that an error is generated if no function name is provided. ScriptFunctionOpcode Specifies the opcode to use to locate the script-based user-defined MIL function when an application calls the function. The opcode also serves to identify the module in which to group the function, if any. To set a label identifying that the script-based user-defined MIL function is ungrouped, or a label identifying the module in which it is grouped, set one of the following: For setting the label identifying that the function is grouped or ungrouped Value Description M_SCRIPT_FUNCTION Specifies that the script-based user-defined MIL function is an ungrouped user-defined MIL function. You must specify a combination value from the following table: To set the offset M_SCRIPT_MODULE_1 Specifies that the script-based user-defined MIL function will be grouped in the first module. You must specify a combination value from the following table: To set the offset M_SCRIPT_MODULE_2 Specifies that the script-based user-defined MIL function will be grouped in the second module. You must specify a combination value from the following table: To set the offset Combination value for any of the possible values of the ScriptFunctionOpcode parameter. You must add the following value to the above-mentioned values to set the offset. For setting the offset Combination value Description 0 &lt;= Value &lt;= 63 Sets the offset of the script-based user-defined MIL function among the ungrouped user-defined MIL functions or among those in the specified group. When allocating multiple user-defined MIL functions in a single user-defined module, you must set a different offset for each new user-defined MIL function in the module (for example, M_SCRIPT_MODULE_1 + 12). To allocate a script-based user-defined MIL function that is not grouped in a user-defined module, use M_SCRIPT_FUNCTION + the offset; you must set a different offset for each new ungrouped user-defined MIL function. InitFlag Specifies more information about the script-based user-defined MIL function. The values below allow you to set whether the script-based user-defined MIL function is executed asynchronously or synchronously. For specifying whether the script-based user-defined MIL function is executed asynchronously or synchronously Value Description M_DEFAULT Specifies the default value. If the system on which the function context is allocated has a remote processor, the default is the same as M_ASYNCHRONOUS_FUNCTION + M_REMOTE, if the system does not have a remote processor, the default is the same as M_SYNCHRONOUS_FUNCTION + M_LOCAL. M_ASYNCHRONOUS_FUNCTION Specifies that the script-based user-defined MIL function will not wait for the slave script/function to finish executing before executing the next function (typically MfuncFree()) in the master function. You must specify a combination value from the following table: To set whether the script-based user-defined MIL function can be executed remotely M_SYNCHRONOUS_FUNCTION Specifies that the script-based user-defined MIL function will wait for the slave script/function to finish executing before executing the next function in the master function. You must specify a combination value from the following table: To set whether the script-based user-defined MIL function can be executed remotely Combination values for M_ASYNCHRONOUS_FUNCTION , M_SYNCHRONOUS_FUNCTION. You must add one of the following values to the above-mentioned values to set whether the script-based user-defined MIL function can be executed remotely. For specifying whether the script-based user-defined MIL function can be executed remotely Combination value Description M_LOCAL Specifies that the script-based user-defined MIL function must be executed by the Host processor. Note that MIL functions called from the script-based user-defined MIL function will still be executed on their target system. This value cannot be added to M_ASYNCHRONOUS_FUNCTION. M_REMOTE Specifies that the script-based user-defined MIL function will be executed remotely, if possible. For more information, see the Steps to create a user-defined MIL function section of Chapter 67: The MIL function development module. Combination values for M_SYNCHRONOUS_FUNCTION. You can add one of the following values to the above-mentioned value to set the type of the script-based user-defined MIL function. Note that both M_ALLOC and M_FREE imply that the script-based user-defined MIL function is M_SYNCHRONOUS_FUNCTION, and cannot be added to M_ASYNCHRONOUS_FUNCTION. For setting the type of script-based user-defined MIL function Combination value Description M_ALLOC Specifies that the script-based user-defined MIL function is an allocation function, used to allocate a user-defined MIL object on a required system. M_FREE Specifies that the script-based user-defined MIL function frees an object allocated using a user-defined MIL allocation function. Note that when this value is used, the user-defined MIL function must accept the MIL identifier of the object to free as its only parameter. ScriptBasedContextFuncIdPtr Specifies the address of the variable in which to store the MIL identifier of the allocated MIL function context. Since the MfuncAllocScript() function also returns the MIL identifier, you can set this parameter to M_NULL. Return value The returned value is the MIL function context identifier if the allocation is successful. If allocation fails, M_NULL is returned. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - FunctionName For specifying the name of the user-defined function - ParameterNum For specifying the number of parameters - InterpreterLanguage For specifying the path to the language interpreter. - ScriptFileName - ScriptFunctionName - ScriptFunctionOpcode For setting the label identifying that the function is grouped or ungrouped + For setting the offset - InitFlag For specifying whether the script-based user-defined MIL function is executed asynchronously or synchronously + For specifying whether the script-based user-defined MIL function can be executed remotely + For setting the type of script-based user-defined MIL function - ScriptBasedContextFuncIdPtr Return value Compilation information ",
      "wordCount": 1879,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufAncestorId",
      "version": null,
      "title": "MfuncBufAncestorId",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufAncestorId.htm",
      "text": " MfuncBufAncestorId Synopsis Return the MIL identifier of the ancestor buffer. Syntax MIL_ID MfuncBufAncestorId( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the MIL identifier of the ancestor buffer. Only child buffers have an ancestor buffer. The ancestor buffer is the buffer from which the specified buffer (BufferInfoHandle) ultimately originated. It is the root buffer; it does not have a parent buffer (it is not a child buffer of another buffer). Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the MIL identifier of the specified MIL buffer's ancestor buffer. Remark This function is equivalent to using MbufInquire() with M_ANCESTOR_ID, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 146,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufAncestorOffsetBand",
      "version": null,
      "title": "MfuncBufAncestorOffsetBand",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufAncestorOffsetBand.htm",
      "text": " MfuncBufAncestorOffsetBand Synopsis Return the band offset relative to the ancestor buffer. Syntax MIL_INT MfuncBufAncestorOffsetBand( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the band offset of the specified buffer relative to its ancestor buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the band offset of the specified MIL buffer relative to its ancestor buffer. Remark This function is equivalent to using MbufInquire() with M_ANCESTOR_OFFSET_BAND, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 113,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufAncestorOffsetBit",
      "version": null,
      "title": "MfuncBufAncestorOffsetBit",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufAncestorOffsetBit.htm",
      "text": " MfuncBufAncestorOffsetBit Synopsis Return the bit offset relative to the ancestor buffer. Syntax MIL_INT MfuncBufAncestorOffsetBit( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the bit offset of the specified MIL buffer relative its ancestor buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the bit offset of the specified MIL buffer relative its ancestor buffer. Remark This function is equivalent to using MbufInquire() with M_ANCESTOR_OFFSET_BIT, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 112,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufAncestorOffsetX",
      "version": null,
      "title": "MfuncBufAncestorOffsetX",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufAncestorOffsetX.htm",
      "text": " MfuncBufAncestorOffsetX Synopsis Return the X-offset relative to the ancestor buffer. Syntax MIL_INT MfuncBufAncestorOffsetX( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the X-offset of the specified MIL buffer relative its ancestor buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the X-offset of the specified MIL buffer relative its ancestor buffer. Remark This function is equivalent to using MbufInquire() with M_ANCESTOR_OFFSET_X, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 109,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufAncestorOffsetY",
      "version": null,
      "title": "MfuncBufAncestorOffsetY",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufAncestorOffsetY.htm",
      "text": " MfuncBufAncestorOffsetY Synopsis Return the Y-offset relative to the ancestor buffer. Syntax MIL_INT MfuncBufAncestorOffsetY( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the Y-offset of the specified MIL buffer relative its ancestor buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the Y-offset of the specified MIL buffer relative its ancestor buffer. Remark This function is equivalent to using MbufInquire() with M_ANCESTOR_OFFSET_Y, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 109,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufAttribute",
      "version": null,
      "title": "MfuncBufAttribute",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufAttribute.htm",
      "text": " MfuncBufAttribute Synopsis Return the requested format of the specified buffer as set using MbufAlloc...() with Attribute. Syntax MIL_INT64 MfuncBufAttribute( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the requested format of the specified buffer as set using MbufAlloc...() with Attribute. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is a bit-encoded value that specifies the buffer's attributes, set at allocation. Remark This function is equivalent to using MbufInquire() with M_EXTENDED_ATTRIBUTE, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 117,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufFormat",
      "version": null,
      "title": "MfuncBufFormat",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufFormat.htm",
      "text": " MfuncBufFormat Synopsis Return the actual format of the specified buffer. Syntax MIL_INT64 MfuncBufFormat( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the requested format of the specified buffer as set using MbufAlloc...() with Attribute. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is a bit-encoded value that specifies the buffer's current formatting. Remark This function is equivalent to using MbufInquire() with M_EXTENDED_FORMAT, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 109,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufHostAddress",
      "version": null,
      "title": "MfuncBufHostAddress",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufHostAddress.htm",
      "text": " MfuncBufHostAddress Synopsis Returns the Host address of the buffer. Syntax void *MfuncBufHostAddress( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the Host address of the specified MIL buffer, if the buffer is visible from the Host address space and is not a planar 3-band buffer. For a planar 3-band buffer, you can determine its Host address using MfuncBufHostAddressBand(). Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the Host address of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_HOST_ADDRESS, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 132,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufHostAddressBand",
      "version": null,
      "title": "MfuncBufHostAddressBand",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufHostAddressBand.htm",
      "text": " MfuncBufHostAddressBand Synopsis Returns the Host address of a band of the buffer. Syntax void *MfuncBufHostAddressBand( MIL_BUFFER_INFO&nbsp;BufferInfoHandle, //in MIL_INT&nbsp;Band //in ) Description This function returns the Host address of a band of the specified MIL buffer, if the buffer is a planar 3-band buffer. Parameters Parameters BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Band Specifies which band's address to return. Return value The returned value is the Host address of a band of the specified MIL buffer. Remark This function provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle - Band Return value Remarks Compilation information ",
      "wordCount": 122,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufId",
      "version": null,
      "title": "MfuncBufId",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufId.htm",
      "text": " MfuncBufId Synopsis Return the MIL identifier of the buffer. Syntax MIL_ID MfuncBufId( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the MIL identifier of the specified buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the MIL identifier of the specified MIL buffer. Remark This function provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 93,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufMaxValue",
      "version": null,
      "title": "MfuncBufMaxValue",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufMaxValue.htm",
      "text": " MfuncBufMaxValue Synopsis Return the maximum pixel value possible in the buffer. Syntax MIL_DOUBLE MfuncBufMaxValue( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the maximum pixel value possible in the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the maximum pixel value possible in the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_MAX, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 108,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufMinValue",
      "version": null,
      "title": "MfuncBufMinValue",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufMinValue.htm",
      "text": " MfuncBufMinValue Synopsis Return the minimum pixel value possible in the buffer. Syntax MIL_DOUBLE MfuncBufMinValue( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the minimum pixel value possible in the specified buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the minimum pixel value possible in the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_MIN, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 107,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufOwnerSystemId",
      "version": null,
      "title": "MfuncBufOwnerSystemId",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufOwnerSystemId.htm",
      "text": " MfuncBufOwnerSystemId Synopsis Return the MIL identifier of the system on which the buffer has been allocated. Syntax MIL_ID MfuncBufOwnerSystemId( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the MIL identifier of the system on which the specified MIL buffer has been allocated. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the MIL identifier of the system on which the specified MIL buffer has been allocated. Remark This function is equivalent to using MbufInquire() with M_OWNER_SYSTEM, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 123,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufOwnerSystemType",
      "version": null,
      "title": "MfuncBufOwnerSystemType",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufOwnerSystemType.htm",
      "text": " MfuncBufOwnerSystemType Synopsis Return the type of system on which the buffer has been allocated. Syntax MIL_INT MfuncBufOwnerSystemType( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the type of system on which the specified MIL buffer has been allocated. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the type of system on which the specified MIL buffer has been allocated. Remark This function is equivalent to using MbufInquire() with M_OWNER_SYSTEM_TYPE, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 117,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufParentId",
      "version": null,
      "title": "MfuncBufParentId",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufParentId.htm",
      "text": " MfuncBufParentId Synopsis Return the MIL identifier of the parent buffer. Syntax MIL_ID MfuncBufParentId( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the MIL identifier of the specified MIL buffers' parent buffer. Only child buffers have a parent buffer. The parent buffer is the buffer from which the specified buffer was defined. The parent buffer can itself have a parent buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the MIL identifier of the specified MIL buffers' parent buffer. Remark This function is equivalent to using MbufInquire() with M_PARENT_ID, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 136,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufParentOffsetBand",
      "version": null,
      "title": "MfuncBufParentOffsetBand",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufParentOffsetBand.htm",
      "text": " MfuncBufParentOffsetBand Synopsis Return the band offset relative to the parent buffer. Syntax MIL_INT MfuncBufParentOffsetBand( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the band offset of the specified buffer relative to its parent buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the band offset of the specified MIL buffer relative to its parent buffer. Remark This function is equivalent to using MbufInquire() with M_PARENT_OFFSET_BAND, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 113,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufParentOffsetX",
      "version": null,
      "title": "MfuncBufParentOffsetX",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufParentOffsetX.htm",
      "text": " MfuncBufParentOffsetX Synopsis Return the X-offset relative to the parent buffer. Syntax MIL_INT MfuncBufParentOffsetX( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the X-offset of the specified MIL buffer relative its parent buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the X-offset of the specified MIL buffer relative its parent buffer. Remark This function is equivalent to using MbufInquire() with M_PARENT_OFFSET_X, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 109,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufParentOffsetY",
      "version": null,
      "title": "MfuncBufParentOffsetY",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufParentOffsetY.htm",
      "text": " MfuncBufParentOffsetY Synopsis Return the Y-offset relative to the parent buffer. Syntax MIL_INT MfuncBufParentOffsetY( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function returns the Y-offset of the specified MIL buffer relative its parent buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the Y-offset of the specified MIL buffer relative its ancestor buffer. Remark This function is equivalent to using MbufInquire() with M_PARENT_OFFSET_Y, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 109,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufPhysicalAddress",
      "version": null,
      "title": "MfuncBufPhysicalAddress",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufPhysicalAddress.htm",
      "text": " MfuncBufPhysicalAddress Synopsis Return the physical address of the buffer. Syntax MIL_UINT64 MfuncBufPhysicalAddress( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the physical address of the specified MIL buffer, if it is not a planar 3-band buffer. For a planar 3-band buffer, you can determine its physical address using MfuncBufPhysicalAddressBand(). Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the physical address of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_PHYSICAL_ADDRESS, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 123,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufPhysicalAddressBand",
      "version": null,
      "title": "MfuncBufPhysicalAddressBand",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufPhysicalAddressBand.htm",
      "text": " MfuncBufPhysicalAddressBand Synopsis Returns the physical address of a band of the buffer. Syntax MIL_UINT64 MfuncBufPhysicalAddressBand( MIL_BUFFER_INFO&nbsp;BufferInfoHandle, //in MIL_INT&nbsp;Band //in ) Description This function returns the physical address of a band of the specified MIL buffer, if the buffer is a planar 3-band buffer. Parameters Parameters BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Band Specifies which band's address to return. Return value The returned value is the physical address of a band of the specified MIL buffer. Remark This function provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle - Band Return value Remarks Compilation information ",
      "wordCount": 122,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufPitch",
      "version": null,
      "title": "MfuncBufPitch",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufPitch.htm",
      "text": " MfuncBufPitch Synopsis Return the number of pixels between the beginnings of any two adjacent lines of the buffer. Syntax MIL_INT MfuncBufPitch( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the number of pixels between the beginnings of any two adjacent lines of the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the number of pixels between the beginnings of any two adjacent lines of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_PITCH, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 129,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufPitchByte",
      "version": null,
      "title": "MfuncBufPitchByte",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufPitchByte.htm",
      "text": " MfuncBufPitchByte Synopsis Return the number of bytes between the beginnings of any two adjacent lines of the buffer. Syntax MIL_INT MfuncBufPitchByte( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the number of bytes between the beginnings of any two adjacent lines of the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the number of bytes between the beginnings of any two adjacent lines of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_PITCH_BYTE, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 129,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufSizeBand",
      "version": null,
      "title": "MfuncBufSizeBand",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufSizeBand.htm",
      "text": " MfuncBufSizeBand Synopsis Return the number of buffer color bands. Syntax MIL_INT MfuncBufSizeBand( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the number of color bands in the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the number of color bands in the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_SIZE_BAND, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 106,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufSizeBit",
      "version": null,
      "title": "MfuncBufSizeBit",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufSizeBit.htm",
      "text": " MfuncBufSizeBit Synopsis Return the depth per band, in bits. Syntax MIL_INT MfuncBufSizeBit( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the depth per band, in bits, of the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the depth per band, in bits, of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_SIZE_BIT, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 108,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufSizeX",
      "version": null,
      "title": "MfuncBufSizeX",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufSizeX.htm",
      "text": " MfuncBufSizeX Synopsis Return the width of the buffer, in pixels. Syntax MIL_INT MfuncBufSizeX( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the width, in pixels, of the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the width, in pixels, of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_SIZE_X, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 105,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufSizeY",
      "version": null,
      "title": "MfuncBufSizeY",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufSizeY.htm",
      "text": " MfuncBufSizeY Synopsis Return the height of the buffer, in pixels. Syntax MIL_INT MfuncBufSizeY( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the height, in pixels, of the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the height, in pixels, of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_SIZE_Y, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 105,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncBufType",
      "version": null,
      "title": "MfuncBufType",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncBufType.htm",
      "text": " MfuncBufType Synopsis Return the buffer data type and depth. Syntax MIL_INT MfuncBufType( MIL_BUFFER_INFO&nbsp;BufferInfoHandle //in ) Description This function retrieves the data type and depth, in bits, of the specified MIL buffer. Parameters Parameter BufferInfoHandle Specifies the handle of the MIL buffer. The buffer handle must be obtained using MfuncInquire() with M_BUFFER_INFO. Return value The returned value is the buffer data type and depth, in bits, of the specified MIL buffer. Remark This function is equivalent to using MbufInquire() with M_TYPE, but provides no parameter checking or error reporting. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - BufferInfoHandle Return value Remarks Compilation information ",
      "wordCount": 111,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncCall",
      "version": null,
      "title": "MfuncCall",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncCall.htm",
      "text": " MfuncCall Synopsis Execute the slave function. Syntax MIL_INT MfuncCall( MIL_ID&nbsp;ContextFuncId //in ) Description This function executes the slave function of the user-defined MIL function on the target system. The target system is determined by the values of the user-defined MIL function parameters, registered in the master function. (For more information, see the Master/slave dynamics on a remote system section of Chapter 67: The MIL function development module.) Call MfuncCall() from the master function of the user-defined MIL function. Note that you must call MfuncCall() from the same thread as MfuncAlloc() and MfuncFree(). If tracing and error reporting are enabled, the tracing and error messages will be reported to screen. You can control the error handling and tracing behavior as you would with other MIL functions, using MappControl(). Note that if a MIL_ID parameter was registered in the master function with MfuncParamMilId(), the validity of that identifier will be checked during the execution of MfuncCall(). If the identifier is not valid, the slave function is not executed. Parameters Parameter ContextFuncId Specifies the identifier of the user-defined MIL function. The slave function executed using MfuncCall() must be declared as follows: void MFTYPE SlaveFunction( MIL_ID ContextFuncId ) Parameters ContextFuncId Specifies the identifier of the user-defined MIL function that references this slave function. This is the identifier returned by the MfuncAlloc() function. Return value The returned value is M_NULL if an error occurred; otherwise, not null. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId Return value Compilation information ",
      "wordCount": 254,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncControl",
      "version": null,
      "title": "MfuncControl",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncControl.htm",
      "text": " MfuncControl Synopsis Control a user-defined MIL function context. Syntax void MfuncControl( MIL_ID&nbsp;ContextFuncId, //in MIL_INT64&nbsp;ControlType, //in MIL_DOUBLE&nbsp;ControlValue //in ) Description This function allows you to control the specified user-defined MIL function context. Note that presented above is an example prototype of this function. You can call MfuncControl() with the same prototype as any of the type-specific functions below, without using the function's type-specific name; that is, use MfuncControl() and not, for example, MfuncControlInt64(). MIL automatically casts the data into the appropriate type. This is true except when using a C compiler. When using a C compiler, you must always call this function with its type-specific name (you cannot use the standard name of this function). Parameters Parameters ContextFuncId Specifies the identifier of the user-defined MIL function context. Depending on the control type, the context must have been allocated using a specific MIL allocation function. ControlType Specifies the user-defined MIL function context setting to control. See the Parameter associations section for possible values that can be specified. ControlValue Specifies the setting's new value. See the Parameter associations section for possible values that can be specified. Parameter associations The table below lists possible values for the ControlType and ControlValue parameters. For script-based user-defined MIL functions The following ControlType and ControlValue parameter settings can be specified when the function context being controlled is a script-based user-defined MIL function context allocated using MfuncAllocScript(). For script-based user-defined MIL functions ControlType Description ControlValue M_ADD_SCRIPT_REFERENCE Adds the specified DLL to the list of DLLs that are referred to during runtime. This control type is not relevant for Python. MIL_TEXT(\"String\") 1 Specifies the path and file name of the DLL your script/function requires to run. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"String\")). M_COMPILE Sets when the script is reloaded from disk and recompiled. M_MODIFIED Specifies that the script is recompiled only if the file on disk has changed. This is the default value. M_ONCE Specifies that the script is only compiled once. M_DEBUG_INFORMATION Sets if the interpreter interface DLL must generate debug information for the script. This control type is not relevant for Python. M_NO Specifies that the script is compiled in release mode, using optimization flags. This is the default value. M_YES Specifies that the script is compiled in debug mode, and that the necessary debug information is generated. When choosing this control value, you must specifiy the directory in which to save the debug information using the M_DEBUG_INFORMATION_PATH control type. M_DEBUG_INFORMATION_PATH Sets the path of the directory in which the compiled version of the script and other files are created, if they are relevant for the scripting language. This control type is not relevant for Python. MIL_TEXT(\"String\") 1 Specifies the path of the directory in which the debug information will be stored. This is also the directory in which the compiled version of the script is created. Note, if using a C compiler, you must pass the value as M_PTR_TO_MIL_INT(MIL_TEXT(\"String\")). The compiled version of the script (assembly file) will only be created in the specified directory if you choose to generate debug information using M_DEBUG_INFORMATION. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Type-specific versions of the function when using a C compiler void MfuncControlInt64 (MIL_ID ContextFuncId, MIL_INT64 ControlType, MIL_INT64 ControlValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. void MfuncControlDouble (MIL_ID ContextFuncId, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ControlType See ControlType of the main function for a description. ControlValue See ControlValue of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId - ControlType - ControlValue Parameter Associations For script-based user-defined MIL functions Type-specific versions of the function when using a C compiler Compilation information ",
      "wordCount": 660,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncErrorReport",
      "version": null,
      "title": "MfuncErrorReport",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncErrorReport.htm",
      "text": " MfuncErrorReport Synopsis Report an error message. Syntax MIL_INT MfuncErrorReport( MIL_ID&nbsp;ContextFuncId, //in MIL_INT&nbsp;ErrorCode, //in MIL_CONST_TEXT_PTR&nbsp;ErrorMessage, //in MIL_CONST_TEXT_PTR&nbsp;ErrorSubMessage1, //in MIL_CONST_TEXT_PTR&nbsp;ErrorSubMessage2, //in MIL_CONST_TEXT_PTR&nbsp;ErrorSubMessage3 //in ) Description This function allows you to log an error message in a user-defined MIL function using the MIL error handling mechanism. You can call the MfuncErrorReport() function from both the slave and the master functions of your user-defined MIL function, but only after a call to MfuncAlloc() and before a call to MfuncFree(). When MfuncErrorReport() is called, MIL will treat your error as a normal MIL error. To report the logged messages to screen, you must enable error reporting using the MappControl() function. These errors can also be read using the standard MIL error functions (MappGetError()), which is especially useful when you want to keep error reporting disabled. If you report an error with an error code set to M_NULL, you will reset any pending internal error that a MIL function call might have generated inside the user-defined MIL function. You must reset the pending error if you don't want the MIL error message to be reported. If you don't reset the pending error at the end of the slave function, and you don't report your own error, MIL will detect any pending error and report the error message, prefixed with the name of the user-defined MIL function. Parameters Parameters ContextFuncId Specifies the MIL function identifier. This parameter can be set to the following values: For the MIL function identifier Value Description M_DEFAULT Specifies the default MIL function identifier. Use this value when MfuncErrorReport() is called from within a slave function. MIL function identifier Specifies the identifier of a user-defined function. ErrorCode Specifies a numeric code to the user-defined MIL function's group of error messages. To specify the error code, combine the value in the table below with an offset. For example, M_FUNC_ERROR + 65. For assigning a numeric code Value Description M_NULL Specifies that no error message will be returned. Any pending internal error generated by a MIL function call inside the user-defined MIL function will be reset. M_FUNC_ERROR Specifies a numeric code to a group of error messages. By specifying this value, you ensure that the error messages of the user-defined MIL function do not conflict with MIL specific errors. Combination value for M_FUNC_ERROR. You can add the following value to the above-mentioned value to specify the offset. For specifying the offset Combination value Description 0 &lt;= Value &lt;= 99 Specifies the value of the offset. ErrorMessage Specifies the text of your error message to report. For specifying the text of the error message Value Description MIL_TEXT(\"ErrorMessage\") 1 Specifies the text of your error message; this is a null-terminated string. The error message, including the terminating null character (\"\\0\"), must not be longer than M_ERROR_MESSAGE_SIZE (320) characters. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ErrorSubMessage1 Specifies the text of your first error sub-message to report. For specifying the text of the first error sub-message Value Description M_NULL Specifies that you do not want to use this error sub-message. MIL_TEXT(\"ErrorMessage\") 1 Specifies the text of your error message; this is a null-terminated string. The error message, including the terminating null character (\"\\0\"), must not be longer than M_ERROR_MESSAGE_SIZE (320) characters. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ErrorSubMessage2 Specifies the text of your second error sub-message to report. For specifying the text of the second error sub-message Value Description M_NULL Specifies that you do not want to use this error sub-message. MIL_TEXT(\"ErrorMessage\") 1 Specifies the text of your second error sub-message. For details on creating appropriate error sub-messages, see the description of the ErrorSubMessage1 parameter. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). ErrorSubMessage3 Specifies the text of your third error sub-message to report. For specifying the text of the third error sub-message Value Description M_NULL Specifies that you do not want to use this error sub-message. MIL_TEXT(\"ErrorMessage\") 1 Specifies the text of your third error sub-message. For details on creating appropriate error sub-messages, see the description of the ErrorSubMessage1 parameter. 1 If you are passing the value in a variable, don't enclose it in MIL_TEXT(). Return value The returned value is M_NULL if an error occurred during the error log operation; otherwise, not M_NULL. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId For the MIL function identifier - ErrorCode For assigning a numeric code + For specifying the offset - ErrorMessage For specifying the text of the error message - ErrorSubMessage1 For specifying the text of the first error sub-message - ErrorSubMessage2 For specifying the text of the second error sub-message - ErrorSubMessage3 For specifying the text of the third error sub-message Return value Compilation information ",
      "wordCount": 803,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncFree",
      "version": null,
      "title": "MfuncFree",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncFree.htm",
      "text": " MfuncFree Synopsis Free a MIL function context. Syntax void MfuncFree( MIL_ID&nbsp;ContextFuncId //in ) Description This function frees the function context allocated for a user-defined MIL function. MfuncFree() must be the last MIL function called in the master function. Note that you must call MfuncFree() from the same thread as MfuncAlloc() and MfuncCall(). All MIL function contexts allocated on a particular system must be freed before the system can be freed. Parameters Parameter ContextFuncId Specifies the identifier of the user-defined MIL function whose function context you want to free. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId Compilation information ",
      "wordCount": 108,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncFreeId",
      "version": null,
      "title": "MfuncFreeId",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncFreeId.htm",
      "text": " MfuncFreeId Synopsis Free the MIL identifier associated with a user-defined MIL object. Syntax void MfuncFreeId( MIL_ID&nbsp;ContextFuncId, //in MIL_ID&nbsp;UserObjectFuncId //in ) Description This function frees a MIL identifier associated with a user-defined object using the MfuncAllocId() function. Parameters Parameters ContextFuncId Specifies a MIL function identifier. This parameter can be set to the following values: For the MIL function identifier Value Description M_DEFAULT Specifies the default MIL function identifier. Use M_DEFAULT to free user-defined MIL objects created outside of any particular user-defined MIL function. MIL function identifier Specifies the identifier of a user-defined MIL function. UserObjectFuncId Specifies the MIL identifier of the user-defined MIL object to free. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId For the MIL function identifier - UserObjectFuncId Compilation information ",
      "wordCount": 132,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncInquire",
      "version": null,
      "title": "MfuncInquire",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncInquire.htm",
      "text": " MfuncInquire Synopsis Retrieve information about a MIL object. Syntax MIL_INT MfuncInquire( MIL_ID&nbsp;MilObjectId, //in MIL_INT64&nbsp;InquireType, //in void&nbsp;*UserVarPtr //out ) Description This function retrieves information about the specified MIL object. Parameters Parameters MilObjectId Specifies the identifier of the MIL object. Depending on the inquire type, this object must have been allocated using a specific MIL allocation function. InquireType Specifies the MIL object feature about which to inquire. See the Parameter associations section for possible values that can be specified. UserVarPtr Accepts the address of one of the following (see the Parameter associations section for specifics on which is expected): array of type MIL_TEXT_CHAR [optionally, in C++: a reference to a MIL_STRING] a pointer MIL_BUFFER_INFO MIL_INT Specifies the address in which to write the requested information. Since the MfuncInquire() function also returns the requested information, you can set this parameter to M_NULL. See the Parameter associations section for possible values that can be returned. Parameter associations The tables below list possible values for the InquireType parameter and possible values returned to the UserVarPtr parameter. For different MIL object types For user-defined MIL functions For the script-based user-defined MIL object feature The following InquireType parameter settings can be specified for different MIL object types. For different MIL object types InquireType Description UserVarPtr - Possible values returned M_BUFFER_INFO Inquires the handle of the MIL buffer. This buffer must have been allocated using one of the MbufAlloc...() functions. UserVarPtr extra info Data type info: Data type: address of a MIL_BUFFER_INFO Data type: address of a MIL_BUFFER_INFO M_OBJECT_PTR Inquires the address of the user-defined MIL object allocated using MfuncAllocId(). UserVarPtr extra info Data type info: Data type: address of a pointer Data type: address of a pointer The following InquireType parameter settings can be specified when the object passed to MilObjectId is a user-defined MIL function context allocated using MfuncAlloc() or MfuncAllocScript(). For user-defined MIL functions InquireType Description UserVarPtr - Possible values returned M_CALLER_BITNESS Inquires the bitness of the operating system on which the function context was created. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT 32 Specifies a 32-bit platform. 64 Specifies a 64-bit platform. M_PARAM_NUMBER Inquires the number of parameters associated with the specified user-defined MIL function context. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PARAM_SIZE Inquires the size, in bytes, of the specified parameter. For an array parameter, the size is: Number of items in the array X Size of the item. You must specify a combination value from the following table: To determine the number of the parameter for which to receive the information UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PARAM_TYPE_INFO Inquires the data type of the specified parameter. You must specify a combination value from the following table: To determine the number of the parameter for which to receive the information UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_PARAM_TYPE_ARRAY_MIL_DOUBLE Specifies that the parameter is an array of type MIL_DOUBLE. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_ID Specifies that the parameter is an array of type MIL_ID. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_INT Specifies that the parameter is an array of type MIL_INT. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_INT32 Specifies that the parameter is an array of type MIL_INT32. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_INT64 Specifies that the parameter is an array of type MIL_INT64. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_UINT Specifies that the parameter is an array of type MIL_UINT. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_UINT32 Specifies that the parameter is an array of type MIL_UINT32. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_ARRAY_MIL_UINT64 Specifies that the parameter is an array of type MIL_UINT64. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_DOUBLE Specifies that the parameter is a constant array of type MIL_DOUBLE. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_ID Specifies that the parameter is a constant array of type MIL_ID. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_INT Specifies that the parameter is a constant array of type MIL_INT. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_INT32 Specifies that the parameter is a constant array of type MIL_INT32. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_INT64 Specifies that the parameter is a constant array of type MIL_INT64. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_UINT Specifies that the parameter is a constant array of type MIL_UINT. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_UINT32 Specifies that the parameter is a constant array of type MIL_UINT32. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_ARRAY_MIL_UINT64 Specifies that the parameter is a constant array of type MIL_UINT64. Note that the pointer to the data stored in the array is unavailable after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_DATA_PTR Specifies that the parameter is a constant data pointer. Note that the pointer to the data is invalid after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_CONST_MIL_TEXT Specifies that the parameter is a constant of type MIL_TEXT. This implies that the character encoding scheme of the MIL_TEXT parameter is the scheme you are currently using. M_PARAM_TYPE_CONST_MIL_TEXT_ASCII Specifies that the parameter is a constant of type MIL_TEXT_ASCII. This only appears when you are currently using a character encoding scheme other than ASCII, and the parameter you are inquiring is specifically in ASCII. M_PARAM_TYPE_CONST_MIL_TEXT_UNICODE Specifies that the parameter is a constant of type MIL_TEXT_UNICODE. This only appears when you are currently using a character encoding scheme other than unicode, and the parameter you are inquiring is specifically in unicode. M_PARAM_TYPE_DATA_PTR Specifies that the parameter is a data pointer. Note that the pointer to the data is invalid after exiting the user-defined function. For future use, copy and save the data. M_PARAM_TYPE_FILENAME Specifies that the parameter is of type FILENAME. This implies that the character encoding scheme of the FILENAME parameter is the scheme you are currently using. M_PARAM_TYPE_FILENAME_ASCII Specifies that the parameter is of type FILENAME_ASCII. This only appears when you are currently using a character encoding scheme other than ASCII, and the parameter you are inquiring is specifically in ASCII. M_PARAM_TYPE_FILENAME_UNICODE Specifies that the parameter is of type FILENAME_UNICODE. This only appears when you are currently using a character encoding scheme other than unicode, and the parameter you are inquiring is specifically in unicode. M_PARAM_TYPE_MIL_DOUBLE Specifies that the parameter is of type MIL_DOUBLE. M_PARAM_TYPE_MIL_ID Specifies that the parameter is of type MIL_ID. M_PARAM_TYPE_MIL_INT Specifies that the parameter is of type MIL_INT. M_PARAM_TYPE_MIL_INT32 Specifies that the parameter is of type MIL_INT32. M_PARAM_TYPE_MIL_INT64 Specifies that the parameter is of type MIL_INT64. M_PARAM_TYPE_MIL_TEXT Specifies that the parameter is of type MIL_TEXT. This implies that the character encoding scheme of the MIL_TEXT parameter is the scheme you are currently using. M_PARAM_TYPE_MIL_TEXT_ASCII Specifies that the parameter is of type MIL_TEXT_ASCII. This only appears when you are currently using a character encoding scheme other than ASCII, and the parameter you are inquiring is specifically in ASCII. M_PARAM_TYPE_MIL_TEXT_UNICODE Specifies that the parameter is of type MIL_TEXT_UNICODE. This only appears when you are currently using a character encoding scheme other than unicode, and the parameter you are inquiring is specifically in unicode. M_PARAM_TYPE_MIL_UINT Specifies that the parameter is of type MIL_UINT. M_PARAM_TYPE_MIL_UINT32 Specifies that the parameter is of type MIL_UINT32. M_PARAM_TYPE_MIL_UINT64 Specifies that the parameter is of type MIL_UINT64. Combination value for M_PARAM_SIZE , M_PARAM_TYPE_INFO. You must add the following value to the above-mentioned values to determine the number of the parameter for which to receive the information. For specifying the number of the parameter for which to inquire the information Combination value Description Value &gt;= 1 Specifies the number of the parameter for which to inquire the information. This value must be a positive integer, and should not exceed the number of parameters associated with the MIL function context (M_PARAM_NUMBER). The following InquireType parameter settings can be specified when the object passed to MilObjectId is a script-based user-defined MIL function context allocated using MfuncAllocScript(). For the script-based user-defined MIL object feature InquireType Description UserVarPtr - Possible values returned M_COMPILE Inquires whether the script must be reloaded from disk and recompiled. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_MODIFIED Specifies that the script is recompiled only if the file on disk has changed. M_ONCE Specifies that the script is only compiled once. M_DEBUG_INFORMATION Inquires whether the interpreter interface DLL generates debug information for the script. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT M_NO Specifies that the script is compiled in release mode, using optimization flags. M_YES Specifies that the script is compiled in debug mode, and that the necessary debug information is generated. M_DEBUG_INFORMATION_PATH Inquires the path of the directory in which the compiled version of the script and other files are created, if they are relevant for the scripting language. UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfuncInquire ( M_DEBUG_INFORMATION_PATH + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. M_NUMBER_OF_SCRIPT_REFERENCES Inquires the number of DLLs that are included in the list of DLLs referred to during runtime. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Value Specifies the number of DLLs in the list. M_SCRIPT_REFERENCE Inquires the path of the specified DLL in the list of DLLs referred to during runtime. You must specify a combination value from the following table: To specify the index number of the script reference to be inquired UserVarPtr extra info Data type info: Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] MORE Data type: array of type MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ] Required array size: MfuncInquire ( M_SCRIPT_REFERENCE + M_STRING_SIZE ) Note: When using C++, you can pass a reference to a MIL_STRING instead. In this case, the function will automatically determine the correct string size. Combination value for M_SCRIPT_REFERENCE. You must add the following value to the above-mentioned value to specify the index number of the script reference to be inquired. For specifying the index number of the script reference to be inquired. Combination value Description Value &gt;= 1 Specifies the index of the script reference about which to inquire. This value must be a positive integer. Combination value for M_DEBUG_INFORMATION_PATH , M_SCRIPT_REFERENCE. You can add the following value to the above-mentioned values to get the string's length. For inquiring the size of a string InquireType Description UserVarPtr - Possible values returned M_STRING_SIZE Inquires the number of characters in the string. This number accounts for every character, including the terminating null character. UserVarPtr extra info Data type info: Data type: address of a MIL_INT Data type: address of a MIL_INT Return value The returned value is the requested information, cast to a MIL_INT. If the requested information does not fit into a MIL_INT, this function will return M_NULL or truncate the information. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - MilObjectId - InquireType - UserVarPtr Parameter Associations For different MIL object types For user-defined MIL functions + For specifying the number of the parameter for which to inquire the information For the script-based user-defined MIL object feature + For specifying the index number of the script reference to be inquired. + For inquiring the size of a string Return value Compilation information ",
      "wordCount": 2256,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncParam",
      "version": null,
      "title": "MfuncParam",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncParam.htm",
      "text": " MfuncParam Synopsis Register a parameter. Syntax void MfuncParam( MIL_ID&nbsp;ContextFuncId, //in MIL_INT&nbsp;ParamIndex, //in const void&nbsp;*ParamValuePtr, //in MIL_UINT&nbsp;ParamType, //in MIL_INT&nbsp;NumOfItems, //in MIL_INT64&nbsp;MilObjectType, //in MIL_INT&nbsp;Attribute //in ) Description This function allows you to register a parameter of any data type to the current user-defined MIL function. The MfuncParam() function should be called in the master function after a call to MfuncAlloc() and before a call to MfuncCall(). MfuncParam() calls an explicitly named type-specific variation of this function. For example, to register a MIL_INT, it calls MfuncParamMilInt(). Note that, for execution efficiency, you can call the appropriate, explicitly named, type-specific variation of MfuncParam() directly. When registering parameters using the explicitly named type-specific variation of MfuncParam(), you must use that function's specific signature, found below. Parameters Parameters ContextFuncId Specifies the identifier of the user-defined MIL function. ParamIndex Specifies the index of the parameter within the user-defined MIL function's parameter list. The index of the first parameter is considered to be one. ParamValuePtr Specifies the address of the array or variable to register. Note that for non-arrays, you must pass a reference to the variable. For arrays, you just pass the array name. ParamType Specifies the parameter type of the parameter in the user-defined MIL function. Parameter types include data types, arrays of data types, void pointers, strings, and file names. See the Parameter associations section for possible values that can be specified. NumOfItems Specifies the size of the data pointed to by the ParamValuePtr parameter. When the data is an array, the size is the number of elements. When the data is a string, the size is the number of characters in the string. When the data is a pointer, the size is in bytes. For all other types of data, set this parameter to M_DEFAULT. This value must be greater than 0 in all cases other than M_DEFAULT. See the Parameter associations section for possible values that can be specified. MilObjectType Specifies the type of the MIL object when the data type of the parameter of the user-defined function is MIL_ID. The available object types are divided into two groups. When the specified object is of a type listed in the first group, you can specify a single or multiple object type(s) from this group. The object types of the second group cannot be used in combination with each other. When the data type of the parameter of the user-defined function is not MIL_ID or an array of MIL_ID s, set MilObjectType to M_NULL. The following value specifies the type of MIL objects that the MIL identifier type parameter will accept. Any value in this table can be combined with one or more values in this table. For example, if the MIL object is expected to be of type M_ARRAY or M_COUNT_LIST, set the MilObjectType parameter to M_ARRAY + M_COUNT_LIST. For specifying the type of MIL object accepted by the MIL identifier type parameter (one or multiple) Value Description M_APPLICATION Specifies a MIL application context allocated using MappAlloc(). M_ARRAY Specifies a MIL array buffer allocated using MbufAlloc2d() with M_ARRAY. M_AUGMENTATION_RESULT Specifies a MIL augmentation result buffer allocated using MimAllocResult() with M_AUGMENTATION_RESULT. M_CONTAINER Specifies a MIL container buffer allocated using MbufAllocContainer(). M_COUNT_LIST Specifies a MIL count list result buffer allocated using MimAllocResult() with M_COUNT_LIST. M_DIGITIZER Specifies a MIL digitizer allocated using MdigAlloc(). M_DISPLAY Specifies a MIL display allocated using MdispAlloc(). M_EVENT Specifies a MIL event allocated using MthrAlloc() with M_EVENT. M_EVENT_LIST Specifies a MIL event list result buffer allocated using MimAllocResult() with M_EVENT_LIST. M_EXTREME_LIST Specifies a MIL extreme list result buffer allocated using MimAllocResult() with M_EXTREME_LIST. M_FIND_ORIENTATION_LIST Specifies a MIL find orientation list result buffer allocated using MimAllocResult() with M_FIND_ORIENTATION_LIST. M_GRAPHIC_CONTEXT Specifies a MIL 2D graphics context allocated using MgraAlloc(). M_GRAPHIC_LIST Specifies a MIL 2D graphics list allocated using MgraAllocList(). M_HIST_LIST Specifies a MIL histogram list result buffer allocated using MimAllocResult() with M_HIST_LIST. M_HTTP_SERVER Specifies an HTTP server allocated using MobjAlloc() with M_HTTP_SERVER. M_IM_CONTEXT Specifies a MIL image processing context allocated using MimAlloc(). M_IMAGE Specifies a MIL image buffer allocated using MbufAllocColor() with M_IMAGE. M_KERNEL Specifies a MIL kernel buffer allocated using MbufAlloc2d() with M_KERNEL. M_LOCATE_PEAK_1D_RESULT Specifies a MIL locate 1D peak result buffer allocated using MimAllocResult() with M_LOCATE_PEAK_1D_RESULT. M_LUT Specifies a MIL LUT buffer allocated using MbufAlloc2d() with M_LUT. M_MESSAGE_MAILBOX Specifies a MIL message mailbox allocated using MobjAlloc(). M_PROJ_LIST Specifies a MIL project list result buffer allocated using MimAllocResult() with M_PROJ_LIST. M_SEQUENCE_CONTEXT Specifies a MIL sequence context allocated using MseqAlloc(). M_STATISTICS_RESULT Specifies a MIL MimStatCalculate() result buffer allocated using MimAllocResult() with M_STATISTICS_RESULT. M_STRUCT_ELEMENT Specifies a MIL structuring element buffer allocated using MbufAlloc2d() with M_STRUCT_ELEMENT. M_SYS_IO_CONTEXT Specifies a MIL system I/O context allocated using MsysIoAlloc(). M_SYSTEM Specifies a MIL system context allocated using MsysAlloc(). M_WAVELET_TRANSFORM_RESULT Specifies a MIL wavelet transform result buffer allocated using MimAllocResult() with M_WAVELET_TRANSFORM_RESULT. The following value specifies the type of MIL objects that the MIL identifier type parameter will accept. No value in this table can be combined with any other value in this table, though a value in this table can be combined with one or more values from the above table. For specifying the type of MIL object accepted by the MIL identifier type parameter (only one) Value Description M_3D_DISPLAY Specifies a MIL 3D display allocated using M3ddispAlloc(). M_3D_DISPLAY_PICKING_CONTEXT Specifies a MIL picking context allocated using M3ddispAlloc() with M_PICKING_CONTEXT. M_3D_DISPLAY_PICKING_RESULT Specifies a MIL picking result buffer allocated using M3ddispAllocResult() with M_PICKING_RESULT. M_3D_GRAPHIC_LIST Specifies a MIL 3D graphics list allocated using M3dgraAlloc(). M_3DBLOB_CALCULATE_CONTEXT Specifies a MIL 3D blob context that can be used with M3dblobCalculate(), allocated using M3dblobAlloc() with M_CALCULATE_CONTEXT. M_3DBLOB_DRAW_3D_CONTEXT Specifies a MIL 3D blob context that can be used with M3dblobDraw3d(), allocated using M3dblobAlloc() with M_DRAW_3D_CONTEXT. M_3DBLOB_SEGMENTATION_CONTEXT Specifies a MIL 3D blob context that can be used with M3dblobSegment(), allocated using M3dblobAlloc() with M_SEGMENTATION_CONTEXT. M_3DBLOB_SEGMENTATION_RESULT Specifies a MIL 3D blob result buffer for segmentation results, allocated using M3dblobAllocResult() with M_SEGMENTATION_RESULT. M_3DGEO_GEOMETRY Specifies a MIL 3D geometry object allocated using M3dgeoAlloc() with M_GEOMETRY. M_3DGEO_TRANSFORMATION_MATRIX Specifies a MIL 3D transformation matrix object allocated using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX. M_3DIM_CALCULATE_MAP_SIZE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimCalculateMapSize(), allocated using M3dimAlloc() with M_CALCULATE_MAP_SIZE_CONTEXT. M_3DIM_FILL_GAPS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimFillGaps(), allocated using M3dimAlloc() with M_FILL_GAPS_CONTEXT. M_3DIM_FILTER_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimFilter(), allocated using M3dimAlloc() with M_FILTER_CONTEXT. M_3DIM_FIND_TRANSFORMATION_RESULT Specifies a MIL 3D image processing result buffer for find transformation results, allocated using M3dimAllocResult() with M_FIND_TRANSFORMATION_RESULT. M_3DIM_LATTICE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimLattice(), allocated using M3dimAlloc() with M_LATTICE_CONTEXT. M_3DIM_LATTICE_RESULT Specifies a MIL 3D image processing result buffer for lattice results, allocated using M3dimAllocResult() with M_LATTICE_RESULT. M_3DIM_MESH_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimMesh(), allocated using M3dimAlloc() with M_MESH_CONTEXT. M_3DIM_NORMALS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimNormals(), allocated using M3dimAlloc() with M_NORMALS_CONTEXT. M_3DIM_OUTLIERS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimOutliers(), allocated using M3dimAlloc() with M_OUTLIERS_CONTEXT. M_3DIM_PROFILE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimProfileEx(), allocated using M3dimAlloc() with M_PROFILE_CONTEXT. M_3DIM_PROFILE_RESULT Specifies a MIL 3D image processing result buffer for profile results, allocated using M3dimAllocResult() with M_PROFILE_RESULT. M_3DIM_REMAP_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimRemapDepthMap(), allocated using M3dimAlloc() with M_REMAP_CONTEXT. M_3DIM_STATISTICS_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimStat(), allocated using M3dimAlloc() with M_STATISTICS_CONTEXT. M_3DIM_STATISTICS_RESULT Specifies a MIL 3D image processing result buffer used to store M3dimStat() results, and is allocated using M3dimAllocResult() with M_STATISTICS_RESULT. M_3DIM_STITCH_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimMerge(), allocated using M3dimAlloc() with M_STITCH_CONTEXT. M_3DIM_SUBSAMPLE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimSample(), allocated using M3dimAlloc() with M_SUBSAMPLE_CONTEXT. M_3DIM_SURFACE_SAMPLE_CONTEXT Specifies a MIL 3D image processing context that can be used with M3dimSample(), allocated using M3dimAlloc() with M_SURFACE_SAMPLE_CONTEXT. M_3DMAP_ALIGN_CONTEXT Specifies a MIL 3D align context allocated using M3dmapAlloc() with M_ALIGN_CONTEXT. M_3DMAP_ALIGN_RESULT Specifies a MIL 3D align result buffer allocated using M3dmapAllocResult() with M_ALIGN_RESULT. M_3DMAP_DEPTH_CORRECTED_DATA Specifies a MIL 3D reconstruction result buffer allocated using M3dmapAllocResult() with M_DEPTH_CORRECTED_DATA. M_3DMAP_DRAW_3D_CONTEXT Specifies a MIL 3D draw context allocated using M3dmapAlloc() with M_DRAW_3D_CONTEXT. M_3DMAP_LASER_CALIBRATION_DATA Specifies a MIL 3D reconstruction result buffer allocated using M3dmapAllocResult() with M_LASER_CALIBRATION_DATA. M_3DMAP_LASER_CONTEXT Specifies a MIL 3D reconstruction context allocated using M3dmapAlloc() with M_LASER. M_3DMAP_POINT_CLOUD_RESULT Specifies a MIL 3D reconstruction result buffer allocated using M3dmapAllocResult() with M_POINT_CLOUD_RESULT. M_3DMEAS_DRAW_3D_PATH_CONTEXT Specifies a MIL draw path 3D measurement context allocated using M3dmeasAlloc() with M_DRAW_3D_PATH_CONTEXT. M_3DMEAS_DRAW_3D_PROFILE_CONTEXT Specifies a MIL draw profile 3D measurement context allocated using M3dmeasAlloc() with M_DRAW_3D_PROFILE_CONTEXT. M_3DMEAS_DRAW_3D_TEMPLATE_CONTEXT Specifies a MIL draw template 3D measurement context allocated using M3dmeasAlloc() with M_DRAW_3D_TEMPLATE_CONTEXT. M_3DMEAS_FIND_MARKER_PATH_CONTEXT Specifies a MIL path 3D measurement context allocated using M3dmeasAlloc() with M_FIND_MARKER_PATH_CONTEXT. M_3DMEAS_FIND_MARKER_PATH_RESULT Specifies a MIL path 3D measurement result allocated using M3dmeasAllocResult() with M_FIND_MARKER_PATH_RESULT. M_3DMEAS_FIND_MARKER_PROFILE_CONTEXT Specifies a MIL profile 3D measurement context allocated using M3dmeasAlloc() with M_FIND_MARKER_PROFILE_CONTEXT. M_3DMEAS_FIND_MARKER_PROFILE_RESULT Specifies a MIL profile 3D measurement result allocated using M3dmeasAllocResult() with M_FIND_MARKER_PROFILE_RESULT. M_3DMEAS_FIND_MARKER_TEMPLATE_CONTEXT Specifies a MIL template 3D measurement context allocated using M3dmeasAlloc() with M_FIND_MARKER_TEMPLATE_CONTEXT. M_3DMEAS_FIND_MARKER_TEMPLATE_RESULT Specifies a MIL template 3D measurement result allocated using M3dmeasAllocResult() with M_FIND_MARKER_TEMPLATE_RESULT. M_3DMEAS_FIT_CONTEXT Specifies a MIL fit 3D measurement context allocated using M3dmeasAlloc() with M_FIT_CONTEXT. M_3DMET_CALCULATE_RESULT Specifies a MIL calculate 3D metrology result buffer allocated using M3dmetAllocResult() with M_CALCULATE_RESULT. M_3DMET_DISTANCE_CONTEXT Specifies a MIL distance 3D metrology context allocated using M3dmetAlloc() with M_DISTANCE_CONTEXT. M_3DMET_DRAW_3D_CONTEXT Specifies a MIL draw 3D metrology context allocated using M3dmetAlloc() with M_DRAW_3D_CONTEXT. M_3DMET_FIT_CONTEXT Specifies a MIL fit 3D metrology context allocated using M3dmetAlloc() with M_FIT_CONTEXT. M_3DMET_FIT_RESULT Specifies a MIL fit 3D metrology result buffer allocated using M3dmetAllocResult() with M_FIT_RESULT. M_3DMET_STATISTICS_CONTEXT Specifies a MIL statistics 3D metrology context allocated using M3dmetAlloc() with M_STATISTICS_CONTEXT. M_3DMET_STATISTICS_RESULT Specifies a MIL statistics 3D metrology result buffer allocated using M3dmetAllocResult() with M_STATISTICS_RESULT. M_3DMET_VOLUME_CONTEXT Specifies a MIL calculate volume 3D metrology context allocated using M3dmetAlloc() with M_VOLUME_CONTEXT. M_3DMOD_DRAW_3D_CONTEXT Specifies a MIL draw 3D model finder context that can be allocated using M3dmodAlloc() with M_DRAW_3D_GEOMETRIC_CONTEXT (to draw occurrences of geometric models). M_3DMOD_DRAW_3D_SURFACE_CONTEXT Specifies a MIL draw 3D model finder context that can be allocated using M3dmodAlloc() with M_DRAW_3D_SURFACE_CONTEXT (to draw occurrences of surface models). M_3DMOD_FIND_BOX_CONTEXT Specifies a MIL box 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_BOX_CONTEXT. M_3DMOD_FIND_BOX_RESULT Specifies a MIL box 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_BOX_RESULT. M_3DMOD_FIND_CYLINDER_CONTEXT Specifies a MIL cylinder 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_CYLINDER_CONTEXT. M_3DMOD_FIND_CYLINDER_RESULT Specifies a MIL cylinder 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_CYLINDER_RESULT. M_3DMOD_FIND_RECTANGULAR_PLANE_CONTEXT Specifies a MIL rectangular plane 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_RECTANGULAR_PLANE_CONTEXT. M_3DMOD_FIND_RECTANGULAR_PLANE_RESULT Specifies a MIL rectangular plane 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_RECTANGULAR_PLANE_RESULT. M_3DMOD_FIND_SPHERE_CONTEXT Specifies a MIL sphere 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_SPHERE_CONTEXT. M_3DMOD_FIND_SPHERE_RESULT Specifies a MIL sphere 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_SPHERE_RESULT. M_3DMOD_FIND_SURFACE_CONTEXT Specifies a MIL surface 3D model finder context that can be allocated using M3dmodAlloc() with M_FIND_SURFACE_CONTEXT. M_3DMOD_FIND_SURFACE_RESULT Specifies a MIL surface 3D model finder result buffer allocated using M3dmodAllocResult() with M_FIND_SURFACE_RESULT. M_3DREG_DRAW_3D_CONTEXT Specifies a MIL draw 3D registration context that can be used with M3dregDraw3d(), allocated using M3dregAlloc() with M_DRAW_3D_CONTEXT. M_3DREG_PAIRWISE_REGISTRATION_CONTEXT Specifies a MIL pairwise 3D registration context allocated using M3dregAlloc() with M_PAIRWISE_REGISTRATION_CONTEXT. M_3DREG_PAIRWISE_REGISTRATION_RESULT Specifies a MIL pairwise 3D registration result buffer allocated using M3dregAllocResult() with M_PAIRWISE_REGISTRATION_RESULT. M_AGM_EDGE_BASED_FIND_CONTEXT Specifies a MIL Advanced Geometric Matching context allocated using MagmAlloc() with M_GLOBAL_EDGE_BASED_FIND. M_AGM_EDGE_BASED_FIND_RESULT Specifies a MIL Advanced Geometric Matching result buffer allocated using MagmAllocResult() with M_GLOBAL_EDGE_BASED_FIND_RESULT. M_AGM_EDGE_BASED_TRAIN_CONTEXT Specifies a MIL Advanced Geometric Matching context allocated using MagmAlloc() with M_GLOBAL_EDGE_BASED_TRAIN. M_AGM_EDGE_BASED_TRAIN_RESULT Specifies a MIL Advanced Geometric Matching result buffer allocated using MagmAllocResult() with M_GLOBAL_EDGE_BASED_TRAIN_RESULT. M_BEAD_CONTEXT Specifies a MIL bead context allocated using MbeadAlloc(). M_BEAD_RESULT Specifies a MIL bead result buffer allocated using MbeadAllocResult(). M_BLOB_CONTEXT Specifies a MIL blob analysis context allocated using MblobAlloc(). M_BLOB_RESULT Specifies a MIL blob analysis result buffer allocated using MblobAllocResult(). M_CAL_CALCULATE_HAND_EYE_CONTEXT Specifies a MIL calculate hand-eye context (hand-eye calibration) allocated using McalAlloc() with M_CALCULATE_HAND_EYE_CONTEXT. M_CAL_CALCULATE_HAND_EYE_RESULT Specifies a MIL calculate hand-eye result buffer allocated using McalAllocResult() with M_CALCULATE_HAND_EYE_RESULT. M_CAL_CONTEXT Specifies a MIL camera calibration context allocated using McalAlloc(). M_CAL_DRAW_3D_CONTEXT Specifies a MIL 3D draw calibration context allocated using McalAlloc() with M_DRAW_3D_CONTEXT. M_CAL_FIXTURING_OFFSET Specifies a MIL fixturing offset object allocated using McalAlloc() with M_FIXTURING_OFFSET. M_CLASS_CLASSIFIER_ANO_PREDEFINED_CONTEXT Specifies a MIL predefined anomaly detection classifier context, allocated using MclassAlloc() with M_CLASSIFIER_ANO_PREDEFINED. M_CLASS_CLASSIFIER_CNN_PREDEFINED_CONTEXT Specifies a MIL predefined CNN classifier context, allocated using MclassAlloc() with M_CLASSIFIER_CNN_PREDEFINED. M_CLASS_CLASSIFIER_DET_PREDEFINED_CONTEXT Specifies a MIL predefined object detection classifier context, allocated using MclassAlloc() with M_CLASSIFIER_DET_PREDEFINED. M_CLASS_CLASSIFIER_ONNX_CONTEXT Specifies a MIL ONNX classifier context, allocated using MclassAlloc() with M_CLASSIFIER_ONNX. M_CLASS_CLASSIFIER_SEG_PREDEFINED_CONTEXT Specifies a MIL predefined segmentation classifier context, allocated using MclassAlloc() with M_CLASSIFIER_SEG_PREDEFINED. M_CLASS_CLASSIFIER_TREE_ENSEMBLE_CONTEXT Specifies a MIL tree ensemble classifier context, allocated using MclassAlloc() with M_CLASSIFIER_TREE_ENSEMBLE. M_CLASS_DATASET_FEATURES Specifies a MIL features dataset context, allocated using MclassAlloc() with M_DATASET_FEATURES. M_CLASS_DATASET_IMAGES Specifies a MIL images dataset context, allocated using MclassAlloc() with M_DATASET_IMAGES. M_CLASS_PREDICT_ANO_RESULT Specifies a MIL anomaly detection prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_ANO_RESULT. M_CLASS_PREDICT_CNN_RESULT Specifies a MIL CNN prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_CNN_RESULT. M_CLASS_PREDICT_DET_RESULT Specifies a MIL object detection prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_DET_RESULT. M_CLASS_PREDICT_ONNX_RESULT Specifies an ONNX prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_ONNX_RESULT. M_CLASS_PREDICT_SEG_RESULT Specifies a MIL segmentation prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_SEG_RESULT. M_CLASS_PREDICT_TREE_ENSEMBLE_RESULT Specifies a MIL tree ensemble prediction result buffer, allocated using MclassAllocResult() with M_PREDICT_TREE_ENSEMBLE_RESULT. M_CLASS_PREPARE_IMAGES_CNN Specifies a MIL CNN data preparation context, allocated using MclassAlloc() with M_PREPARE_IMAGES_CNN. M_CLASS_PREPARE_IMAGES_DET Specifies a MIL object detection data preparation context, allocated using MclassAlloc() with M_PREPARE_IMAGES_DET. M_CLASS_PREPARE_IMAGES_SEG Specifies a MIL segmentation data preparation context, allocated using MclassAlloc() with M_PREPARE_IMAGES_SEG. M_CLASS_STAT_ANO_CONTEXT Specifies a MIL statistics classification context for anomaly detection, allocated using MclassAlloc() with M_STAT_ANO. M_CLASS_STAT_ANO_RESULT Specifies a MIL statistics classification result buffer for anomaly detection, allocated using MclassAllocResult() with M_STAT_ANO_RESULT. M_CLASS_STAT_CNN_CONTEXT Specifies a MIL statistics classification context for image classification, allocated using MclassAlloc() with M_STAT_CNN. M_CLASS_STAT_CNN_RESULT Specifies a MIL statistics classification result buffer for image classification, allocated using MclassAllocResult() with M_STAT_CNN_RESULT. M_CLASS_STAT_DET_CONTEXT Specifies a MIL statistics classification context for object detection, allocated using MclassAlloc() with M_STAT_DET. M_CLASS_STAT_DET_RESULT Specifies a MIL statistics classification result buffer for object detection, allocated using MclassAllocResult() with M_STAT_DET_RESULT. M_CLASS_STAT_SEG_CONTEXT Specifies a MIL statistics classification context for segmentation, allocated using MclassAlloc() with M_STAT_SEG. M_CLASS_STAT_SEG_RESULT Specifies a MIL statistics classification result buffer for segmentation, allocated using MclassAllocResult() with M_STAT_SEG_RESULT. M_CLASS_STAT_TREE_ENSEMBLE_CONTEXT Specifies a MIL statistics classification context for feature classification, allocated using MclassAlloc() with M_STAT_TREE_ENSEMBLE. M_CLASS_STAT_TREE_ENSEMBLE_RESULT Specifies a MIL statistics classification result buffer for feature classification, allocated using MclassAllocResult() with M_STAT_TREE_ENSEMBLE_RESULT. M_CLASS_TRAIN_ANO_CONTEXT Specifies a MIL anomaly detection training context, allocated using MclassAlloc() with M_TRAIN_ANO. M_CLASS_TRAIN_ANO_RESULT Specifies a MIL anomaly detection training result buffer, allocated using MclassAllocResult() with M_TRAIN_ANO_RESULT. M_CLASS_TRAIN_CNN_CONTEXT Specifies a MIL CNN training context, allocated using MclassAlloc() with M_TRAIN_CNN. M_CLASS_TRAIN_CNN_RESULT Specifies a MIL CNN training result buffer, allocated using MclassAllocResult() with M_TRAIN_CNN_RESULT. M_CLASS_TRAIN_DET_CONTEXT Specifies a MIL object detection training context, allocated using MclassAlloc() with M_TRAIN_DET. M_CLASS_TRAIN_DET_RESULT Specifies a MIL object detection training result buffer, allocated using MclassAllocResult() with M_TRAIN_DET_RESULT. M_CLASS_TRAIN_SEG_CONTEXT Specifies a MIL segmentation training context, allocated using MclassAlloc() with M_TRAIN_SEG. M_CLASS_TRAIN_SEG_RESULT Specifies a MIL segmentation training result buffer, allocated using MclassAllocResult() with M_TRAIN_CNN_RESULT. M_CLASS_TRAIN_TREE_ENSEMBLE_CONTEXT Specifies a MIL tree ensemble training context, allocated using MclassAlloc() with M_TRAIN_TREE_ENSEMBLE. M_CLASS_TRAIN_TREE_ENSEMBLE_RESULT Specifies a MIL tree ensemble training result buffer, allocated using MclassAllocResult() with M_TRAIN_TREE_ENSEMBLE_RESULT. M_CODE_CONTEXT Specifies a MIL code context allocated using McolAlloc(). M_CODE_DETECT_RESULT Specifies a MIL code detect result buffer allocated using McodeAllocResult(). M_CODE_GRADE_RESULT Specifies a MIL code grade result buffer allocated using McodeAllocResult(). M_CODE_MODEL Specifies a MIL code model allocated using McodeModel() with M_ADD. M_CODE_READ_RESULT Specifies a MIL code read result buffer allocated using McodeAllocResult(). M_CODE_TRAIN_RESULT Specifies a MIL code train result buffer allocated using McodeAllocResult(). M_CODE_WRITE_RESULT Specifies a MIL code write result buffer allocated using McodeAllocResult(). M_COL_MATCH_CONTEXT Specifies a MIL color analysis context (for matching) allocated using McolAlloc() with M_COLOR_MATCHING. M_COL_MATCH_RESULT Specifies a MIL color analysis result buffer (for matching) allocated using McolAllocResult() with M_COLOR_MATCHING_RESULT. M_COL_RELATIVE_CALIBRATION_CONTEXT Specifies a MIL relative color calibration context allocated using McolAlloc() with M_COLOR_CALIBRATION_RELATIVE. M_COM_CONTEXT Specifies a MIL industrial communication context allocated using McomAlloc(). M_DLOCR_READ_CONTEXT Specifies a MIL Deep Learning OCR context allocated using MdlocrAlloc(). M_DLOCR_READ_RESULT Specifies a MIL Deep Learning OCR result buffer allocated using MdlocrAllocResult(). M_DMR_CONTEXT Specifies a MIL SureDotOCR context allocated using MdmrAlloc(). M_DMR_RESULT Specifies a MIL SureDotOCR result buffer allocated using MdmrAllocResult(). M_EDGE_CONTOUR Specifies a MIL edge contour context allocated using MedgeAlloc() with M_CONTOUR. M_EDGE_CREST Specifies a MIL edge crest context allocated using MedgeAlloc() with M_CREST. M_EDGE_RESULT Specifies a MIL edge result buffer allocated using MedgeAllocResult(). M_MEAS_CONTEXT Specifies a MIL measurement context allocated using MmeasAllocContext(). M_MEAS_MARKER Specifies a MIL measurement marker allocated using MmeasAllocMarker(). M_MEAS_RESULT Specifies a MIL measurement result buffer allocated using MmeasAllocResult(). M_MET_CONTEXT Specifies a MIL metrology context allocated using MmetAlloc() with M_CONTEXT. M_MET_DERIVED_GEOMETRY_REGION Specifies a MIL metrology derived geometry region object allocated using MmetAlloc() with M_DERIVED_GEOMETRY_REGION. M_MET_RESULT Specifies a MIL metrology result buffer allocated using MmetAllocResult(). M_MOD_GEOMETRIC Specifies a MIL Model Finder context allocated using MmodAlloc() with M_GEOMETRIC. M_MOD_GEOMETRIC_CONTROLLED Specifies a MIL Model Finder context allocated using MmodAlloc() with M_GEOMETRIC_CONTROLLED. M_MOD_RESULT Specifies a MIL Model Finder result buffer allocated using MmodAllocResult() with M_DEFAULT. M_MOD_SHAPE_CIRCLE_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_CIRCLE. M_MOD_SHAPE_ELLIPSE_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_ELLIPSE. M_MOD_SHAPE_RECTANGLE_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_RECTANGLE. M_MOD_SHAPE_RESULT Specifies a MIL Model Finder result buffer allocated using MmodAllocResult() with M_SHAPE_.... M_MOD_SHAPE_SEGMENT_CONTEXT Specifies a MIL Model Finder context allocated using MmodAlloc() with M_SHAPE_SEGMENT. M_MUTEX Specifies a MIL mutex allocated using MthrAlloc() with M_MUTEX. M_OCR_FONT Specifies a MIL character recognition font context allocated using MocrAllocFont(). M_OCR_RESULT Specifies a MIL character recognition result buffer allocated using MocrAllocResult(). M_PAT_CONTEXT Specifies a MIL pattern matching context allocated using MpatAlloc(). M_PAT_RESULT Specifies a MIL pattern matching result buffer allocated using MpatAllocResult(). M_REG_DFF_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_DEPTH_FROM_FOCUS. M_REG_DFF_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_DEPTH_FROM_FOCUS_RESULT. M_REG_EDOF_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_EXTENDED_DEPTH_OF_FIELD. M_REG_EDOF_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_EXTENDED_DEPTH_OF_FIELD_RESULT. M_REG_HDR_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_HIGH_DYNAMIC_RANGE. M_REG_HDR_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_HIGH_DYNAMIC_RANGE_RESULT. M_REG_PHOTOMETRIC_STEREO_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_PHOTOMETRIC_STEREO. M_REG_PHOTOMETRIC_STEREO_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_PHOTOMETRIC_STEREO_RESULT. M_REG_STITCHING_CONTEXT Specifies a MIL registration context allocated using MregAlloc() with M_STITCHING. M_REG_STITCHING_RESULT Specifies a MIL registration result buffer allocated using MregAllocResult() with M_STITCHING_RESULT. M_SELECTABLE_THREAD Specifies a MIL selectable thread allocated using MthrAlloc() with M_SELECTABLE_THREAD. M_STR_CONTEXT Specifies a MIL string context allocated using MstrAlloc(). M_STR_RESULT Specifies a MIL string result buffer allocated using MstrAllocResult(). M_SYSTEM_THREAD Specifies a MIL thread allocated using MthrAlloc() with M_THREAD. M_THREAD Specifies a MIL thread context object allocated using MthrAlloc() with M_THREAD. M_USER_OBJECT_1 Specifies a MIL object from group one of the user-defined object types allocated using MfuncAllocId() with M_USER_OBJECT_1. You must specify a combination value from the following table: To set the offset M_USER_OBJECT_2 Specifies a MIL object from group two of the user-defined object types allocated using MfuncAllocId() with M_USER_OBJECT_2. You must specify a combination value from the following table: To set the offset Combination value for M_USER_OBJECT_1 , M_USER_OBJECT_2. You must add the following value to the above-mentioned values to set the offset. The offset allows you to distinguish between the different object types of the same group (for example, M_USER_OBJECT_1 + 0x0001). For distinguishing between the different object types Combination value Description Value Specifies the offset within the selected object type group. The value must have only one of its 16 least significant bits set. Attribute Specifies whether the parameter will be used for data input or to store new data. When registering a const array type parameter, Attribute must be set to M_IN. See the Parameter associations section for possible values that can be specified. Parameter associations The tables below list possible values for the ParamType, NumOfItems, and Attribute parameters. For registering a primitive data-type parameter in a MIL user-defined function For registering a primitive data-type array parameter in a MIL user-defined function For registering a const array of primitive data-types parameter in a MIL user-defined function For registering a string or file name type parameter in a MIL user-defined function For registering a pointer type parameter in a MIL user-defined function For registering a MIL identifier type parameter in a MIL user-defined function The following values specify to call type-specific variations of MfuncParam() that register parameters that handle primitive MIL data types, such as, MIL_DOUBLE, MIL_INT, and MIL_UINT64, as well as strings, void pointers and file names. Unless otherwise specified, when specifying values from this table, you must set the NumOfItems parameter to M_DEFAULT, the MilObjectType parameter to M_NULL, and the Attribute parameter to M_NULL. For registering a primitive data-type parameter in a MIL user-defined function ParamType Description NumOfItems Attribute M_PARAM_TYPE_MIL_DOUBLE Specifies to call MfuncParamMilDouble(), which then registers a type MIL_DOUBLE parameter for the current user-defined MIL function. M_PARAM_TYPE_MIL_INT Specifies to call MfuncParamMilInt(), which then registers a type MIL_INT parameter for the current user-defined MIL function. M_PARAM_TYPE_MIL_INT32 Specifies to call MfuncParamMilInt32(), which then registers a type MIL_INT32 parameter for the current user-defined MIL function. M_PARAM_TYPE_MIL_INT64 Specifies to call MfuncParamMilInt64(), which then registers a type MIL_INT64 parameter for the current user-defined MIL function. M_PARAM_TYPE_MIL_UINT Specifies to call MfuncParamMilUint(), which then registers a type MIL_UINT parameter for the current user-defined MIL function. M_PARAM_TYPE_MIL_UINT32 Specifies to call MfuncParamMilUint32(), which then registers a type MIL_UINT32 parameter for the current user-defined MIL function. M_PARAM_TYPE_MIL_UINT64 Specifies to call MfuncParamMilUint64(), which then registers a type MIL_INT64 parameter for the current user-defined MIL function. The following values specify to call type-specific variations of MfuncParam() that register parameters that handle arrays of primitive MIL data types, such as, MIL_DOUBLE, MIL_INT, and MIL_UINT64. When specifying values from this table, you must set the NumOfItems parameter to the number of items in the array, and you must set the MilObjectType parameter to M_NULL. For registering a primitive data-type array parameter in a MIL user-defined function ParamType Description NumOfItems Attribute M_PARAM_TYPE_ARRAY_MIL_DOUBLE Specifies to call MfuncParamArrayMilDouble(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_DOUBLE. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. M_PARAM_TYPE_ARRAY_MIL_INT Specifies to call MfuncParamArrayMilInt(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_INT. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. M_PARAM_TYPE_ARRAY_MIL_INT32 Specifies to call MfuncParamArrayMilInt32(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_INT32. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. M_PARAM_TYPE_ARRAY_MIL_INT64 Specifies to call MfuncParamArrayMilInt64(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_INT64. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. M_PARAM_TYPE_ARRAY_MIL_UINT Specifies to call MfuncParamArrayMilUint(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_UINT. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. M_PARAM_TYPE_ARRAY_MIL_UINT32 Specifies to call MfuncParamArrayMilUint32(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_UINT32. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. M_PARAM_TYPE_ARRAY_MIL_UINT64 Specifies to call MfuncParamArrayMilUint64(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_UINT64. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. The following values specify to call type-specific variations of MfuncParam() that register parameters that handle const arrays of primitive MIL data types, such as, MIL_DOUBLE, MIL_INT, and MIL_UINT64, as well as const pointers and const strings. Unless otherwise specified, when specifying values from this table, you must set the NumOfItems parameter to the number of items in the array, and you must set the MilObjectType parameter to M_NULL. For registering a const array of primitive data-types parameter in a MIL user-defined function ParamType Description NumOfItems Attribute M_PARAM_TYPE_CONST_ARRAY_MIL_DOUBLE Specifies to call MfuncParamConstArrayMilDouble(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_DOUBLE. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_PARAM_TYPE_CONST_ARRAY_MIL_INT Specifies to call MfuncParamConstArrayMilInt(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_INT. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_PARAM_TYPE_CONST_ARRAY_MIL_INT32 Specifies to call MfuncParamConstArrayMilInt32(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_INT32. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_PARAM_TYPE_CONST_ARRAY_MIL_INT64 Specifies to call MfuncParamConstArrayMilInt64(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_INT64. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_PARAM_TYPE_CONST_ARRAY_MIL_UINT Specifies to call MfuncParamConstArrayMilUint(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_UINT. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_PARAM_TYPE_CONST_ARRAY_MIL_UINT32 Specifies to call MfuncParamConstArrayMilUint32(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_UINT32. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_PARAM_TYPE_CONST_ARRAY_MIL_UINT64 Specifies to call MfuncParamConstArrayMilUint64(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_UINT64. Attribute Specifies the following. M_IN Specifies that the array passed to ParamValuePtr is used for data input. The following values specify to call type-specific variations of MfuncParam() that register a string or file name parameter. Unless otherwise specified, when specifying values from this table, you must set the MilObjectType parameter to M_NULL. For registering a string or file name type parameter in a MIL user-defined function ParamType Description NumOfItems Attribute M_PARAM_TYPE_CONST_MIL_TEXT Specifies to call MfuncParamConstMilText(), which then registers a parameter of the current user-defined MIL function that handles a const string. NumOfItems Specifies one of the following. M_DEFAULT Specifies for MIL to auto-calculate the number of characters in the string. Value Specifies the number of characters in the string. Attribute Specifies the following. M_IN Specifies that the object passed to ParamValuePtr is used for data input. M_PARAM_TYPE_FILENAME Specifies to call MfuncParamFilename(), which then registers a parameter of the current user-defined MIL function that handles a file name. NumOfItems Specifies one of the following. M_DEFAULT Specifies for MIL to auto-calculate the number of characters in the string. Value Specifies the number of characters in the string. Attribute Specifies one of the following. M_IN Specifies that the parameter of the current user-defined MIL function will be registered for file reading only. M_OUT Specifies that the parameter of the current user-defined MIL function will be registered for file writing only. M_PARAM_TYPE_MIL_TEXT Specifies to call MfuncParamMilText(), which then registers a parameter of the current user-defined MIL function that handles a string. NumOfItems Specifies one of the following. M_DEFAULT Specifies for MIL to auto-calculate the number of characters in the string. Value Specifies the number of characters in the string. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the array passed to ParamValuePtr is used for data input. M_OUT Specifies that the array passed to ParamValuePtr is used to store new data from the user-defined function. The following values specify to call type-specific variations of MfuncParam() that register pointer parameters, including arrays and const arrays of pointers. Unless otherwise specified, when specifying values from this table, you must set the MilObjectType parameter to M_NULL. For registering a pointer type parameter in a MIL user-defined function ParamType Description NumOfItems Attribute M_PARAM_TYPE_CONST_DATA_PTR Specifies to call MfuncParamConstDataPointer(), which then registers a parameter of the current user-defined MIL function that handles a const data pointer. NumOfItems Specifies the number of bytes in the pointer. Attribute Specifies the following. M_IN Specifies that the object passed to ParamValuePtr is used for data input. M_PARAM_TYPE_DATA_PTR Specifies to call MfuncParamDataPointer(), which then registers a parameter of the current user-defined MIL function that handles a data pointer. NumOfItems Specifies the number of bytes in the pointer. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the object passed to ParamValuePtr is used for data input. M_OUT Specifies that the object passed to ParamValuePtr is used to store new data from the user-defined function. The following values specify to call type-specific variations of MfuncParam() that register parameters that handle a MIL_ID, including arrays and const arrays of MIL_ID s. When registering MIL_ID parameters, you must specify a value for MilObjectType. For registering a MIL identifier type parameter in a MIL user-defined function ParamType Description NumOfItems Attribute M_PARAM_TYPE_ARRAY_MIL_ID Specifies to call MfuncParamArrayMilId(), which then registers a parameter of the current user-defined MIL function that handles an array of type MIL_ID. NumOfItems Specify the number of elements in the array. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the objects referenced in the array passed to ParamValuePtr are used for data input. M_OUT Specifies that the objects referenced by the MIL_ID passed to ParamValuePtr are used to store new data from the user-defined function. M_PARAM_TYPE_CONST_ARRAY_MIL_ID Specifies to call MfuncParamConstArrayMilId(), which then registers a parameter of the current user-defined MIL function that handles a const array of type MIL_ID. NumOfItems Specify the number of elements in the array. Attribute Specifies the following. M_IN Specifies that the objects referenced in the array passed to ParamValuePtr are used for data input. M_PARAM_TYPE_MIL_ID Specifies to call MfuncParamMilId(), which then registers a type MIL_ID parameter of the current user-defined MIL function. NumOfItems This parameter must be set to M_DEFAULT. Attribute This parameter should be set to one or both (M_IN + M_OUT) of the following values. M_IN Specifies that the object referenced by the MIL_ID passed to ParamValuePtr is used for data input. M_OUT Specifies that the object referenced by the MIL_ID passed to ParamValuePtr is used to store new data from the user-defined function. Combination values for the values listed in For registering a MIL identifier type parameter in a MIL user-defined function. You can add one or more of the following values to the above-mentioned values to specify the optional settings for a MIL identifier type parameter. When you register a MIL identifier type of parameter, the user-defined function will throw an error if a value other than a MIL_ID is passed to it. There are, however, non-standard identifier values that can be accepted. The values specified below specify which non-standard identifier values are valid in addition to a MIL_ID. There is also the optional of specifying that a MIL identifier will not be internally modified or compensated during the execution of the user-defined function. For specifying optional settings for a MIL identifier type parameter Combination value Description M_ALLOW_DEFAULT_ID Specifies that this parameter will accept M_DEFAULT as a valid MIL_ID. M_ALLOW_NULL_ID Specifies that this parameter will accept M_NULL as a valid MIL_ID. M_AS_VALUE Specifies that this parameter will accept any valid MIL_ID, but will not internally modify it. This means different things depending on if this value is added to M_IN or M_OUT. For a MIL identifier type parameter set to M_IN, the buffer specified by the user is used as the source of information for the user-defined function. When that source buffer is on a different system, the MIL identifier for that buffer is internally modified if the content of the buffer needs to be copied to another system for processing. This modification is called compensation. If your application uses the MIL identifiers exactly as specified by the user, your application could crash by inadvertently pointing to a buffer whose content has been copied to another buffer with a compensated MIL identifier. You can avoid this by adding M_AS_VALUE to M_IN when registering your parameter. This has the effect of keeping the specific value of the MIL identifier specified by the user, without compensating it. For a MIL identifier type parameter set to M_OUT, the buffer specified by the user is used as the destination of information for the user-defined function. When you register this parameter without M_AS_VALUE, the user must specify the MIL_ID of a previously allocated buffer. When the user-defined function is called, the content of that destination buffer will be filled with new data. When you register this parameter as M_OUT + M_AS_VALUE, the user must specify a pointer. When the user-defined function is called, the pointer will be filled with a MIL_ID. The MIL_ID could be, for example, a newly-allocated buffer or the result of an inquire. Combination values for the values listed in For registering a MIL identifier type parameter in a MIL user-defined function. You can add one or more of the following values to the above-mentioned values to specify the image buffer type, if MilObjectType is set to M_IMAGE. If you specify an M_IMAGE object (from the ParamValuePtr parameter) that does not correspond to any of the type(s) selected from the values listed below, an error is returned. If none of the values specified below are added, any M_IMAGE object will be accepted. Note that you cannot specify any of the following if the MilObjectType parameter is set to a combination of values. For specifying the type of image buffer when the MilObjectType is set to M_IMAGE Combination value Description M_DISP Specifies that the buffer can be displayed. M_GRAB Specifies that the buffer can have data grabbed into it. M_PROC Specifies that the buffer can be processed. Type-specific versions of the function void MfuncParamArrayMilDouble (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_DOUBLE *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilId (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_ID *ParamValuePtr, MIL_INT NumOfItems, MIL_INT64 MilObjectType, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. MilObjectType See MilObjectType of the main function for a description. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilInt (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilInt32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT32 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilInt64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT64 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilUint (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilUint32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT32 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamArrayMilUint64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT64 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilDouble (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_DOUBLE *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilId (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_ID *ParamValuePtr, MIL_INT NumOfItems, MIL_INT64 MilObjectType, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. MilObjectType See MilObjectType of the main function for a description. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilInt (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_INT *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilInt32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_INT32 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilInt64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_INT64 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilUint (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_UINT *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilUint32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_UINT32 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstArrayMilUint64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_UINT64 *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. Specifies the value of the type MIL_UINT64 parameter. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstDataPointer (MIL_ID ContextFuncId, MIL_INT ParamIndex, const void *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the number of elements in the array. Attribute See Attribute of the main function for a description. void MfuncParamConstMilText (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_CONST_TEXT_PTR ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the length of the string in characters, including the null terminator. Attribute See Attribute of the main function for a description. void MfuncParamDataPointer (MIL_ID ContextFuncId, MIL_INT ParamIndex, void *ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the size of the data, in bytes, pointed to by ParamValuePtr. Attribute See Attribute of the main function for a description. void MfuncParamFilename (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_CONST_TEXT_PTR ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the length of the string in characters, including the null terminator. Attribute See Attribute of the main function for a description. void MfuncParamMilDouble (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_DOUBLE ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_DOUBLE parameter. void MfuncParamMilId (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_ID ParamValue, MIL_INT64 MilObjectType, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_ID parameter. MilObjectType See MilObjectType of the main function for a description. Attribute See Attribute of the main function for a description. void MfuncParamMilInt (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_INT parameter. void MfuncParamMilInt32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT32 ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_INT32 parameter. void MfuncParamMilInt64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT64 ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_INT64 parameter. void MfuncParamMilText (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_TEXT_PTR ParamValuePtr, MIL_INT NumOfItems, MIL_INT Attribute) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. NumOfItems See NumOfItems of the main function for a description. Specifies the length of the string in characters, including the null terminator. Attribute See Attribute of the main function for a description. void MfuncParamMilUint (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_UINT parameter. void MfuncParamMilUint32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT32 ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_UINT32 parameter. void MfuncParamMilUint64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT64 ParamValue) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValue Specifies the value of the type MIL_UINT64 parameter. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId - ParamIndex - ParamValuePtr - ParamType - NumOfItems - MilObjectType For specifying the type of MIL object accepted by the MIL identifier type parameter (one or multiple) For specifying the type of MIL object accepted by the MIL identifier type parameter (only one) + For distinguishing between the different object types - Attribute Parameter Associations For registering a primitive data-type parameter in a MIL user-defined function For registering a primitive data-type array parameter in a MIL user-defined function For registering a const array of primitive data-types parameter in a MIL user-defined function For registering a string or file name type parameter in a MIL user-defined function For registering a pointer type parameter in a MIL user-defined function For registering a MIL identifier type parameter in a MIL user-defined function + For specifying optional settings for a MIL identifier type parameter + For specifying the type of image buffer when the MilObjectType is set to M_IMAGE Type-specific versions of the function Compilation information ",
      "wordCount": 7992,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncParamCheck",
      "version": null,
      "title": "MfuncParamCheck",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncParamCheck.htm",
      "text": " MfuncParamCheck Synopsis Verify whether parameter checking is required. Syntax MIL_INT MfuncParamCheck( MIL_ID&nbsp;ContextFuncId //in ) Description This function allows you to verify, from within your user-defined MIL function, whether parameter checking is enabled or disabled. To enable or disable the checking of parameters, use the MappControl() M_PARAMETER control type. Call the MfuncParamCheck() function prior to checking the parameters of the specified user-defined MIL function. The return value of the MfuncParamCheck() function should dictate whether to execute the functions that perform the parameter checking, or not. Then, to save the parameter checking time for a time-critical user-defined MIL function, it is sufficient to disable parameter checking using MappControl() with M_CHECK_DISABLE. Parameters Parameter ContextFuncId Specifies the identifier of the user-defined MIL function. Return value The returned value is M_NULL if no parameter checking is required; otherwise, checking is required. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId Return value Compilation information ",
      "wordCount": 158,
      "subEntries": []
    },
    {
      "id": "Reference_func_MfuncParamValue",
      "version": null,
      "title": "MfuncParamValue",
      "subTitles": null,
      "location": "MIL Reference",
      "pageURL": "content\\Reference\\func\\MfuncParamValue.htm",
      "text": " MfuncParamValue Synopsis Read the value of the specified MIL function parameter. Syntax void MfuncParamValue( MIL_ID&nbsp;ContextFuncId, //in MIL_INT&nbsp;ParamIndex, //in void&nbsp;*ParamValuePtr //out ) Description This function allows you to read the value of a parameter registered in the master function of your user-defined MIL function, from the slave function. The requested value is written to the address specified by the ParamValuePtr parameter. Parameters Parameters ContextFuncId Specifies the identifier of the user-defined MIL function. ParamIndex Specifies the index of the parameter within the user-defined MIL function's parameter list. The index of the first parameter is considered to be one. ParamValuePtr Specifies the address of the variable in which to write the value of the specified parameter. The type of the variable depends on the type of the parameter registered in the master function. Return value Returns the value of the specified parameter. Type-specific versions of the function void MfuncParamValueArrayMilDouble (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_DOUBLE **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilId (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_ID **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilInt (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilInt32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT32 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilInt64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT64 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilUint (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilUint32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT32 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueArrayMilUint64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT64 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilDouble (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_DOUBLE **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilId (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_ID **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilInt (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_INT **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilInt32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_INT32 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilInt64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_INT64 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilUint (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_UINT **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilUint32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_UINT32 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstArrayMilUint64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, const MIL_UINT64 **ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueConstMilText (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_CONST_TEXT_PTR *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueFilename (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_CONST_TEXT_PTR *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilDouble (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_DOUBLE *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilId (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_ID *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilInt (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilInt32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT32 *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilInt64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_INT64 *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilText (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_TEXT_PTR *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilUint (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilUint32 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT32 *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. void MfuncParamValueMilUint64 (MIL_ID ContextFuncId, MIL_INT ParamIndex, MIL_UINT64 *ParamValuePtr) Details Parameters ContextFuncId See ContextFuncId of the main function for a description. ParamIndex See ParamIndex of the main function for a description. ParamValuePtr See ParamValuePtr of the main function for a description. Compilation information Header Include mil.h. Library Use mil.lib. DLL Requires mil.dll. Syntax Description Parameters - ContextFuncId - ParamIndex - ParamValuePtr Return value Type-specific versions of the function Compilation information ",
      "wordCount": 1263,
      "subEntries": []
    }
  ]
}]