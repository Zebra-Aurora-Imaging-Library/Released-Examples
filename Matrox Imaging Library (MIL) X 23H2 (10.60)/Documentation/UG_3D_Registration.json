[{
  "id": "UG_3D_Registration",
  "version": "2024020714",
  "title": "3D registration",
  "subTitles": null,
  "location": "MIL UG P05: 3D processing and analysis",
  "pageURL": "content\\UserGuide\\3D_Registration\\ChapterInformation.htm",
  "text": " Chapter 40: 3D registration This chapter explains how to use the MIL 3D Registration module to register point clouds to other point clouds, and to merge two or more point clouds using the registration results. MIL 3D Registration module Steps to perform the pairwise 3D registration operation Basic concepts for the MIL 3D Registration module 3D Registration using the Iterative Closest Point algorithm Subsampling point clouds Point pair refinements Preregistration Preregistration with a transformation matrix Preregistration with centroids Specifying the reference point cloud Stop conditions Merging point clouds, retrieving specific results, and drawing results Retrieving specific registration results Drawing results 3D Registration example Detecting defects Merging two point clouds Merging multiple point clouds ",
  "wordCount": 115,
  "subEntries": [
    {
      "id": "UG_3D_Registration_3D_Registration_overview",
      "version": null,
      "title": "MIL 3D Registration module",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\3D_Registration_overview.htm",
      "text": " MIL 3D Registration module The MIL 3D Registration module allows you to calculate the optimal pairwise registration of two or more point clouds, and defines the transformation matrices required to align the working coordinate systems of the point clouds. This is useful in many applications where you have multiple point clouds, with overlapping representations of the same 3D object, and you want the same points on the 3D object to be represented with the same coordinate values in every point cloud. This is important when you want to detect defects in a scanned object, determine an object's pose, or merge multiple point clouds into one single point cloud that represents a 3D object. This module registers each point cloud to a specified other point cloud (reference point cloud) in the list to register. Once the module establishes the transformation that registers each point cloud with its reference point cloud, you can also retrieve the transformation that registers it to any other in the list. The module uses the Iterative Closest Point (ICP) algorithm to measure the root-mean-square (RMS) error between points it automatically pairs with those in the reference point cloud (closest points are paired first); it iteratively tries to transform the point cloud so that this measurement decreases. In each iteration, the points are paired and transformed again. The following animation shows how the algorithm pairs points and transforms the point cloud repeatedly, over several iterations: The registration operation continually iterates until a stop condition is met. The registration operation is considered successful (or not) depending on which stop condition is met. The stop conditions are set to default values that should suit the majority of applications, but they rely on an effective preregistration. Preregistering a point cloud requires specifying either to register the centroids of the two point clouds, or to use a user-defined transformation matrix that moves a point cloud to a rough location that is close enough to the other point cloud for the algorithm to start. You can copy results to perform diagnostic analysis. For example, you can copy a subsampled reference or target point cloud into a container for later analysis. Subsampling is a recommended way to speed up the pairwise registration process. Since subsampling can differ for each point cloud, copying lets you examine a particular point cloud that has undergone subsampling. You can also copy results to create a distance image, overlap mask, or pair index image, which allow you to examine the results of specific iterations (including the last iteration) of the registration process. The pixels in the resulting image show specific point pair relationships. A distance image gives numerical distances for paired points, while an overlap mask image depicts pairings using a binary representation. In a pair index image, each pixel's position and value reflect the respective indices of a paired reference and target point. MIL 3D Registration module ",
      "wordCount": 481,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Steps_to_perform_3D_registration",
      "version": null,
      "title": "Steps to perform the pairwise 3D registration operation",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Steps_to_perform_3D_registration.htm",
      "text": " Steps to perform the pairwise 3D registration operation To perform pairwise 3D registration, you must: Allocate a pairwise 3D registration context using M3dregAlloc() with M_PAIRWISE_REGISTRATION_CONTEXT. Allocate a pairwise 3D registration result buffer using M3dregAllocResult() with M_PAIRWISE_REGISTRATION_RESULT. The registration results will be written to this result buffer. Specify the number of registration elements in your pairwise 3D registration context using M3dregControl() with M_NUMBER_OF_REGISTRATION_ELEMENTS. Each registration element controls how to perform the registration of its associated point cloud container. The number of registration elements should correspond to the number of containers with 3D-processible point clouds that you intend to register. Define the mode of preregistration using M3dregControl() with M_PREREGISTRATION_MODE. For the ICP algorithm to begin, a point cloud must initially be positioned relatively close to its reference point cloud; otherwise, the points will be too far apart to be paired. The different preregistration modes offer different ways to specify a rough location for your point cloud. If necessary, adjust the default settings and stop conditions of the iterative pairwise 3D registration operation, using M3dregControl(). For example, you can specify the registration operation to stop after a certain number of iterations. You can also specify to subsample all point clouds prior to registration. If necessary, specify to save pairs information at each iteration, using M3dregControl() with M_SAVE_PAIRS_INFO set to M_TRUE. You must save pairs information if you intend to draw results, or copy results into an image buffer or container. Saving pairs information is not necessary if you only need to copy results into a transformation matrix. Call M3dregCalculate(), specifying the previously allocated pairwise 3D registration context and pairwise 3D registration result buffer in which to write the registration results. Retrieve the required results from the pairwise 3D registration result buffer, using M3dregGetResult() and M3dregCopyResult(). You can retrieve the transformation matrix that aligns any point cloud in the pairwise 3D registration context to any other point cloud from the same pairwise 3D registration context. If necessary, use M3dregCopyResult() to create a distance image, overlap mask, or pair index image, which contain data associated with (respectively) the distance between points, overlapping (paired) points, or indices of paired reference and target points. You can also use M3dregCopyResult() to copy the subsampled version of the reference or target point cloud into a container. Note that to copy into an image buffer or container, you must have set M_SAVE_PAIRS_INFO to M_TRUE prior to the registration operation. If necessary, use the results to merge the points clouds into one new point cloud using M3dregMerge(). Before merging, M3dregMerge() can either transform the point clouds such that their working coordinate systems are aligned to the global coordinate system or aligned (fixtured) to a specified point cloud's working coordinate system. To draw a result of the 3D registration operation into a 3D graphics list, perform the following: Ensure that you have set M_SAVE_PAIRS_INFO to M_TRUE prior to the registration operation. Allocate a draw 3D registration context to hold the settings for the draw, using M3dregAlloc() with M_DRAW_3D_CONTEXT. Note that you can skip this step and use a default context instead. Specify the draw operations and options for the draw, using M3dregControlDraw(). Draw the points and/or other features of the required result, using M3dregDraw3d(). If necessary, save your pairwise 3D registration context and pairwise 3D registration result buffer using M3dregSave() or M3dregStream(). Free your pairwise 3D registration context and pairwise 3D registration result buffer using M3dregFree(), unless M_UNIQUE_ID was specified during allocation. Note that for applications that are merging point clouds from multiple fixed 3D sensors into a single point cloud, you can avoid performing steps 1-8 multiple times. To do so, save (M3dregSave()) the result buffer, and then restore (M3dregRestore()) and reuse it with M3dregMerge(). Steps to perform the pairwise 3D registration operation ",
      "wordCount": 624,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Basic_concepts",
      "version": null,
      "title": "Basic concepts for the MIL 3D Registration module",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Basic_concepts.htm",
      "text": " Basic concepts for the MIL 3D Registration module The basic concepts and vocabulary conventions for using the MIL 3D Registration module are: Preregistration. The first iteration of the registration operation, where a point cloud is moved to a specified rough location close to its reference. Pose. The established position and orientation of an object in space. Reference point cloud. The point cloud to which another point cloud is registered. Registration. The registration operation defines a transformation that aligns the working coordinate systems of different point clouds. Registration divergence and sliding. Depending on several factors (for example, the shape of the point clouds, their density, amount of overlap, initial rough location), with each iteration of the registration operation, a point cloud might not move closer to its reference, or ever find the optimal pose relative to its reference. Divergence occurs when the point clouds move apart. Sliding occurs when the registration algorithm cannot find a singular optimal pose for the point cloud, and instead shifts between several eligible poses. Registration element. A data structure that is located in a 3D registration context. Registration elements store the settings that control the registration of a specific point cloud. This includes information about the point cloud's reference and its rough location in that reference. Registration element's point cloud. The point cloud, whose index in the point cloud container array, is the same as the index of a particular registration element. The registration of a point cloud is controlled by the contents of its associated registration element. Registration result element. A data structure that is located in a 3D registration result buffer. Registration result elements store the results of a specific point cloud. This includes information about the result status of the registration operation for that specific point cloud, and the transformation matrix calculated in the registration operation. Root-mean-square (RMS) error. In the MIL 3D Registration module, the RMS error is a measure of the overall distance between all paired points in two point clouds. A lower error indicates a smaller overall distance between the two point clouds, and vice versa. Topology. In the MIL 3D Registration module, topology refers to the defined relationship between all points clouds involved in the registration operation. Basic concepts for the MIL 3D Registration module ",
      "wordCount": 378,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Pairwise_alignment",
      "version": null,
      "title": "3D Registration using the Iterative Closest Point algorithm",
      "subTitles": [
        "Subsampling point clouds",
        "Point pair refinements"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Pairwise_alignment.htm",
      "text": " 3D Registration using the Iterative Closest Point algorithm The MIL 3D Registration module registers point clouds using the Iterative Closest Point algorithm. The function M3dregCalculate() internally iterates through successive estimates of the transformation required to align the working coordinate systems of two point clouds, until a specified stop condition is reached. Once a stop condition is reached, M3dregCalculate() returns the transformation matrix that transforms the points of one point cloud such that the average overall distance between its points, and the reference point cloud's points, is as low as possible. With these results, you can then use M3dregMerge() to combine the point clouds into a single point cloud. With each iteration, points from one point cloud are paired with the closest points in the reference point cloud, and the distance between the points is minimized using a transformation. New point pairs are made with each iteration. After several iterations, if the registration was successful, then the point clouds should, at least partially, overlap. This means that the transformation that moves the points of a point cloud, to its reference point cloud, is also the transformation that aligns the point cloud's working coordinate system with the reference point cloud's working coordinate system. As a result, the same coordinate values are used to describe equivalent points from each point cloud. Consider the following animation: Note that the 3D Registration module only works on point clouds, not depth maps. To convert a depth map into a point cloud, use MbufConvert3d(). Subsampling point clouds Optionally, you can subsample point clouds prior to registration. This can speed up the registration. You can enable subsampling for all point clouds involved in the registration operation using M3dregControl() with M_SUBSAMPLE, or enable subsampling for a point cloud associated with a specific registration element with M_SUBSAMPLE_REFERENCE or M_SUBSAMPLE_TARGET. Subsampling for all point clouds is applied before any subsampling for a point cloud associated with a specific registration element. A point cloud will be subsampled twice if both are enabled. For example, you can first apply a general subsampling to all point clouds, and then apply a more specific subsampling to individual point clouds, if needed. Registration contexts and registration elements have internal sumbsampling contexts for controlling the subsampling techniques. You can control the subsampling techniques by calling M3dimControl() with the identifier of the internal subsampling context (which you can inquire using M3dregInquire() with M_SUBSAMPLE_CONTEXT_ID, M_SUBSAMPLE_REFERENCE_CONTEXT_ID, or M_SUBSAMPLE_TARGET_CONTEXT_ID). For example, you can set the subsampling mode (M_SUBSAMPLE_MODE) to M_SUBSAMPLE_GEOMETRIC. This mode can help the registration reach convergence by removing points that contribute to sliding or unstable transformations. For more information about subsampling modes, see the Sampling a point cloud or a 3D geometry subsection of the Working with points in a point cloud section of Chapter 35: 3D image processing. Point pair refinements During the pairwise 3D registration process, MIL pairs points between the target and reference point clouds. You can control how the operation establishes these pairings, to help reduce divergence and minimize inclusion of outlier points. For example, you can set a distance beyond which points will not be paired (M_PAIRS_CREATION_MAX_POINT_DISTANCE), or you can decide how many pairings are permitted per reference point (M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE). Note that if the point pairing is already known, you should use M3dimFindTransformation() to find the transformation between the point clouds. For more information, see the Finding the transformation between 2 sets of points with a known pairing section of Chapter 35: 3D image processing. When the distance between the reference and target point clouds is significant, you should enable M_PAIRS_CREATION_FROM_TARGET to help prevent divergence. This setting performs a bidirectional comparison, first finding target points relative to reference points, and then vice versa. Doing so increases processing time. However, if you choose M_AUTO, this will limit the increase in processing time since MIL applies the setting to certain iterations only. When point clouds are far apart, besides enabling M_PAIRS_CREATION_FROM_TARGET, you can set M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE to M_AUTO. This will automatically adjust the number of created pairs per reference point at each iteration, so that, as the point clouds converge, there are fewer pairs per reference point. By default, M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE is set to M_SINGLE. If for any reason you want to always have multiple pairs created regardless of point cloud proximity, you can use M_MULTIPLE, which will create up to 6 pairs per reference point for each iteration. To limit the number of pairings to which a target point can belong, use M_PAIRS_LIMIT_PER_TARGET_POINT_MODE. If set to M_AUTO, this setting adjusts the number of pairings based on point cloud proximity, permitting fewer pairings when the distance is slight. When point clouds are very close, the ideal setting for M_PAIRS_LIMIT_PER_TARGET_POINT_MODE is M_SINGLE. If you are expecting a limited number of outliers or minimal noise in your scene, use M_PAIRS_REJECTION_MODE. This setting uses a statistical calculation to reject pairs that are too far apart. However, if the scene contains a lot of outliers, M_PAIRS_REJECTION_MODE might not be enough, and you should set a maximum distance with M_PAIRS_CREATION_MAX_POINT_DISTANCE. For example, when the scene is not cropped for whatever reason but you have an initial guess of the target's location, registration could diverge if a maximum distance is not set. Default settings find a single pairing per reference point (M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE set to M_DEFAULT or M_SINGLE). Each blue line represents a pairing. Setting M_PAIRS_CREATION_PER_REFERENCE_POINT_MODE to M_AUTO permits the pairing of each reference point to multiple target points. Green lines represent the additional pairings. Enabling M_PAIRS_CREATION_FROM_TARGET finds pairings from target points to reference points. Orange dashed lines represent the pairings from target to reference. Note that every point in the target is accounted for. 3D Registration using the Iterative Closest Point algorithm Subsampling point clouds Point pair refinements ",
      "wordCount": 946,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Preregistration",
      "version": null,
      "title": "Preregistration",
      "subTitles": [
        "Preregistration with a transformation matrix",
        "Preregistration with centroids"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Preregistration.htm",
      "text": " Preregistration The registration operation begins with a preregistration iteration, iteration 0. This transforms a point cloud so that the distance between its points, and the reference point cloud's points, is small enough for the ICP algorithm to start. There are two possible modes for performing the preregistration iteration, specified using M3dregControl() with M_PREREGISTRATION_MODE. Preregistration with a transformation matrix If M_PREREGISTRATION_MODE is set to M_USER_DEFINED, the specified preregistration transformation matrix that is stored in the pairwise 3D registration context will be applied to the point cloud during the preregistration iteration. By default, the pairwise registration context does not contain a preregistration transformation matrix; you need to specify one using M3dregSetLocation(). There are two common ways to specify the transformation matrix for the preregistration: Copy the results from a previous call to M3dregCalculate() using M3dregSetLocation(). Manually define the values of the transformation matrix. To do so, allocate a transformation matrix object using M3dgeoAlloc() with M_TRANSFORMATION_MATRIX, and then set the matrix's values using M3dgeoMatrixPut() or M3dgeoMatrixSetTransform(). Then, copy the transformation matrix object into the pairwise 3D registration context using M3dregSetLocation(). Preregistration with centroids If M_PREREGISTRATION_MODE is set to M_CENTROID, the point cloud is translated so that the mean position of all its points, called its centroid, overlaps the reference point cloud's centroid. By default, this preregistration transformation only consists of a translation; there is no rotation. However, if a preregistration transformation matrix is supplied using M3dregSetLocation(), and M_PREREGISTRATION_MODE is set to M_CENTROID, the point cloud will be rotated according to the specified preregistration transformation matrix and translated so that the centroids share the same coordinates. The translation component of the specified preregistration matrix is ignored. Preregistration Preregistration with a transformation matrix Preregistration with centroids ",
      "wordCount": 283,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Reference_pointcloud",
      "version": null,
      "title": "Specifying the reference point cloud",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Reference_pointcloud.htm",
      "text": " Specifying the reference point cloud The pairwise 3D registration context should contain one registration element for each point cloud that you want to register, and each registration element should contain information on how to preregister it, and which other point cloud is its reference. Once all the preregistration and registration settings are specified after multiple calls to M3dregSetLocation() and M3dregControl(), only one call to M3dregCalculate() is required. There are some limits on how you can define the topology of, or the relationship between, the point clouds in the registration context. One point cloud must use the global coordinate system as its reference (set using M3dregSetLocation() with M_REGISTRATION_GLOBAL). Additionally, the references for points clouds cannot be circularly defined. If you take a specific point cloud and look at its reference, and then at its reference's reference, and continue through the series of point clouds linked in this manner, the first point cloud must never appear as another's reference. In the following image, the topology has been incorrectly specified because it forms a loop: After a successful call to M3dregCalculate(), you can retrieve the transformation matrix that specifies the alignment for any point cloud in the topology to any other point cloud in the topology. Note, however, only the point clouds originally paired for registration in the context will have a fully optimized transformation. Small errors in the transformation can be propagated down long chains in the topology, affecting other registrations. Furthermore, if these point clouds were merged, the merged point cloud will contain all of the propagated errors as well. In the following image, the topology has been correctly specified, but errors in the registration will be propagated down the long chain: If the chain is kept short, the propagation error will be minimized, increasing the overall accuracy of any retrieved transformations or merged point clouds. In the following image, the topology has been correctly specified, and propagation errors are minimized because there are no long chains: Specifying the reference point cloud ",
      "wordCount": 333,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Stop_conditions",
      "version": null,
      "title": "Stop conditions",
      "subTitles": null,
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Stop_conditions.htm",
      "text": " Stop conditions There are three stop conditions that can be specified using M3dregControl(), and a fourth which is internally set. When one of the stop conditions is met, the registration operation stops. The stop conditions are: Root-mean-square (RMS) error threshold, set with M_RMS_ERROR_THRESHOLD. The registration operation stops when the last iteration's RMS error is lower than the specified threshold. By default, this value is set to 0.0. Relative RMS error threshold, set with M_RMS_ERROR_RELATIVE_THRESHOLD. The registration operation stops when the change in RMS error between the last two iterations, expressed as a percentage, is lower than the specified threshold. The change in RMS error is typically larger in the first iterations, and smaller in the final iterations. More specifically, where Ei is the RMS error of iteration i, the relative RMS error is calculated as: [(Ei-1 - Ei )/ Ei-1 ]*100. By default, this value is set to 0.1 (that is, 0.1%). Maximum number of iterations, set with M_MAX_ITERATIONS. The registration operation stops when the maximum number of iterations is reached. By default, this value is set to 20. Minimum number of paired points, set internally. The registration operation stops when there are too few paired points between the two point clouds. Typically, this occurs before the registration operation starts because the point clouds are too far away. This can also occur when the point clouds diverge rather than converge over several iterations. For example, you could keep the default values for M_RMS_ERROR_THRESHOLD and M_MAX_ITERATIONS, and set M_RMS_ERROR_RELATIVE_THRESHOLD to 0.15 (that is, 0.15%). In this scenario, during the registration process, the RMS error could be 1.0 after the first iteration, 0.998 after the second, and 0.997 after the third. This means that the relative RMS error from the first to the second iteration is 0.2% ([(1.0-0.998)/1.0]*100) and from the second to the third iteration is about 0.1% ([(0.998-0.997)/0.998]*100). After the third iteration, the registration operation stops because the third iteration's relative RMS error is lower than the specified threshold of 0.15%. This means that the iterative refinements of the transformation were sufficiently small. However, if the relative RMS error never decreased below the specified threshold of 0.15%, the registration operation would stop after the default maximum number of iterations, which is 20. If the point clouds started to diverge, and there were insufficient point pairs to calculate an RMS error, the registration operation would also stop. Each of these four stop conditions has an associated result which can be retrieved using M3dregGetResult() with M_STATUS_REGISTRATION_ELEMENT. Typically, the pairwise 3D registration operation is considered a success if its status is M_RMS_ERROR_RELATIVE_THRESHOLD_REACHED or M_RMS_ERROR_THRESHOLD_REACHED. Depending on your application, M_MAX_ITERATIONS_REACHED can be considered a success or a timeout. Stop conditions ",
      "wordCount": 448,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_Using_Result_Merge",
      "version": null,
      "title": "Merging point clouds, retrieving specific results, and drawing results",
      "subTitles": [
        "Retrieving specific registration results",
        "Drawing results"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\Using_Result_Merge.htm",
      "text": " Merging point clouds, retrieving specific results, and drawing results From a group of point clouds, the MIL 3D Registration module can create a single point cloud that contains all the transformed points of the original point clouds using the M3dregMerge() function. Essentially, the working coordinate systems of all point clouds are aligned using the results of the registration operation, and their points are merged in a single point cloud container. By default, they are aligned to the global coordinate system; you can optionally specify to align the working coordinate systems of all point clouds to a specified point cloud using M3dregControl() with M_MERGE_LOCATION. If you want to merge multiple point clouds without performing any transformations, or without using any registration results, you can use M3dimMerge() instead. Merging point clouds with M3dregMerge() requires the registration results of a successful call to M3dregCalculate(). These results are stored in a pairwise 3D registration result buffer; the results specify the transformations that will be applied to the point clouds during the merge operation. Optionally, you can specify a subsample 3D image processing context to subsample the merged point cloud. This is useful for removing any duplicate points in overlapping regions of the merged point cloud. For this application, it is recommended that you specify M_SUBSAMPLE_GRID as the subsampling operation (using M3dimControl() with M_SUBSAMPLE_MODE), and specify values for M_GRID_SIZE_... according to your application. Retrieving specific registration results After a successful call to M3dregCalculate(), you can retrieve any of the individual transformations from the pairwise 3D registration result buffer, using M3dregCopyResult() with M_REGISTRATION_MATRIX. These transformations specify how to align the working coordinate system of one point cloud to another point cloud. For example, in the following topology, each point cloud is the reference for only one other point cloud: However, it is possible to retrieve the transformation that aligns the working coordinate system of any point cloud, to any other point cloud in the topology: These individual transformations can be useful if, for example, you want to use one of them for the preregistration iteration in a different registration operation. Drawing results The M3dregControlDraw() function provides several operations for drawing results into a 3D graphics list; for each registration result element, you can draw: Points that overlap reference points. Excluded points. Lines between paired points. By default, MIL draws all overlapping and excluded points for the specified registration result element(s). To draw other results (such as lines between paired points), you must explicitly enable the relevant draw operation (using M3dregControlDraw()). You can specify how to draw the above graphics. For example, you can set the color, thickness, and opacity of most features. Optionally, for overlapping points, you can use one of the point cloud container's components to set the color of the points. When doing so, you can also map the specified component's values to a color in a LUT. For a complete description of all possible options for the draw, refer to the description of M3dregControlDraw() in the MIL Reference. Note that points are represented as squares in a 3D display. You can specify the thickness of overlapping or excluded points in number of pixels, and they will always be shown with sides of this length when displayed, regardless of their distance from the 3D display's viewpoint. To perform a draw operation, you typically allocate a draw 3D registration context to hold the settings for the draw, using M3dregAlloc() with M_DRAW_3D_CONTEXT. You then specify draw operations and options for the draw with successive calls to M3dregControlDraw(). Finally, you call M3dregDraw3d() to perform the draw. Alternatively, you can skip allocating a draw 3D registration context and instead use a predefined draw 3D registration context with default draw settings. To do so, directly call M3dregDraw3d() with M_DEFAULT. Note that the default settings specify to draw points with a thickness of one pixel. Merging point clouds, retrieving specific results, and drawing results Retrieving specific registration results Drawing results ",
      "wordCount": 652,
      "subEntries": []
    },
    {
      "id": "UG_3D_Registration_3D_Registration_example",
      "version": null,
      "title": "3D Registration example",
      "subTitles": [
        "Detecting defects",
        "Merging two point clouds",
        "Merging multiple point clouds"
      ],
      "location": "MIL UG P05: 3D processing and analysis",
      "pageURL": "content\\UserGuide\\3D_Registration\\3D_Registration_example.htm",
      "text": " 3D Registration example The following MIL examples illustrate two of the main applications of the 3D Registration module. The first main application of the module is to detect defects in a scanned object. This is typically done by comparing a perfect model with the point cloud of the scanned object. The perfect model and the scanned object need to be correctly aligned to quickly detect any defects. The resulting transformation matrix gives you information on the pose of the scanned object. Therefore, you could also use it as a 3D model finder in, for example, a robotic bin picking application (assuming the object's approximate location and orientation is known beforehand). The second main application is to merge multiple overlapping point clouds into a single point cloud that represents a 3D object. You can use multiple point clouds of the object to represent an object from many different angles, but if the working coordinate systems of the different point clouds are not aligned and you try to merge the point clouds, the final point cloud will not be an accurate representation of the object. If you align overlapping point clouds before merging them, the final merged point cloud will be a more accurate representation of the entire object. Furthermore, once the alignment of the different cameras has been determined, the registration results can be saved and reused for merging newly acquired point clouds without performing the registration operation again. Detecting defects The example below uses 3D registration to detect defects in a scanned object by registering the point cloud of the scanned to a perfect model, and comparing their differences. 3dmodelheightdefect.cpp Merging two point clouds The example below uses 3D registration to align the working coordinate system of two point clouds of a 3D object, and merge them into a single point cloud. simple3dstitching.cpp Merging multiple point clouds The example below uses 3D registration to align the working coordinate system of multiple point clouds of a 3D object, and merge them into a single point cloud. m3dreg.cpp 3D Registration example Detecting defects Merging two point clouds Merging multiple point clouds ",
      "wordCount": 351,
      "subEntries": []
    }
  ]
}]