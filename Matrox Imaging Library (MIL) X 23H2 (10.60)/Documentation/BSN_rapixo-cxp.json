[{
  "id": "BSN_rapixo-cxp",
  "version": "2024020714",
  "title": "Matrox Rapixo CXP",
  "subTitles": null,
  "location": "MIL Hardware-specific Notes",
  "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\ChapterInformation.htm",
  "text": " Matrox Rapixo CXP This section discusses features of MIL that are particular to Matrox Rapixo CXP family of boards and ways that optimize their performance. Matrox Rapixo CXP family specific information regarding specific functions is integrated into the functions' reference topics. Refer to the Maxtro Rapixo CXP release notes for any additions/modifications to this chapter or the MIL Reference. Matrox Rapixo CXP overview Summary of Matrox Rapixo CXP features Note on nomenclature Using Matrox Rapixo CXP with MIL Grabbing and the MIL buffer formats to use for each camera pixel format Using the CoaXPress trigger signal on Matrox Rapixo CXP Performing Bayer color conversion in hardware Using frame burst with a multi-frame buffer Using on-board flat-field correction Extracting peaks from an on-board multi-frame image buffer Data forwarding with Matrox Rapixo CXP Allocating independent MIL digitizers on Matrox Rapixo CXP boards Minimum latency and grabbing all frames Detecting missed frames Efficiently copying an on-board buffer to a destination buffer in Host memory Efficiently converting buffer formats while copying Using Matrox Rapixo CXP data latches Steps to configure and retrieve data from a data latch Triggering a data latch Data latch limitations Retrieving data latch information Data latch example Matrox Rapixo CXP utilities and tools Matrox Usage Meter utility Matrox Rapixo CXP Performance Monitor utility Matrox Rapixo CXP Bench utility Matrox Rapixo CXP EyeScan Matrox Rapixo CXP PCIe Information tool Matrox Rapixo CXP System Monitor tool Matrox Rapixo CXP connectors and signal names Board connectors Signal names and their matching MIL constants Matrox Rapixo CXP board flow diagrams Matrox Rapixo CXP Single and Dual model Matrox Rapixo CXP Quad CXP-6 and Quad CXP-12 model Matrox Rapixo CXP Quad Data Forwarding model Matrox Rapixo CXP Pro model ",
  "wordCount": 286,
  "subEntries": [
    {
      "id": "BSN_rapixo-cxp_Matrox_Rapixo-CXP_specific_features",
      "version": null,
      "title": "Matrox Rapixo CXP overview",
      "subTitles": [
        "Summary of Matrox Rapixo CXP features",
        "Note on nomenclature"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Matrox_Rapixo-CXP_specific_features.htm",
      "text": " Matrox Rapixo CXP overview Matrox Rapixo CXP is a family of high-performance PCIe frame grabbers. There are two models: Matrox Rapixo CXP base model. Matrox Rapixo CXP base model supports image capture from up to 4 high-resolution, high-speed video sources that use the CoaXPress (CXP) communication standard. There are five versions of the Matrox Rapixo CXP base model: Single, Dual, Quad CXP-6, Quad CXP-12, and Quad Data Forwarding. Matrox Rapixo CXP Pro. Matrox Rapixo CXP Pro supports the same functionality as the base model, as well as FPGA-based processing offload capabilities (Processing FPGA). There is only one version of this model: Pro Quad CXP-12. Matrox Rapixo CXP supports frame and line-scan, monochrome and color video sources. The color video sources can be RGB video sources or video sources with a Bayer color filter. Matrox Rapixo CXP can decode Bayer color-encoded images and perform color space conversions while transferring the images to the Host. In addition, it can vertically and horizontally flip them and perform subsampling. Matrox Rapixo CXP can receive images from each video source at up to the maximum CXP-6 or CXP-12 speed (depending on the model of the board and camera). Using link aggregation, the bandwidth of a link can be increased to 4 times the maximum CXP-6 and CXP-12 speeds for a single video source. Matrox Rapixo CXP provides up to 13 W of power per CoaXPress connection to any device that supports power-over-CoaXPress (PoCXP). Summary of Matrox Rapixo CXP features The following table outlines the features currently available for Matrox Rapixo CXP. Matrox Rapixo CXP Can access GenICam camera features using MdigControlFeature() / MdigInquireFeature() Yes On-board memory 1 Gbytes DDR3 SDRAM (Matrox Rapixo CXP Single base model) 2 Gbytes DDR3 SDRAM (Matrox Rapixo CXP Dual base model) 4 Gbytes DDR4 SDRAM (Matrox Rapixo CXP Quad CXP-6/CXP-12 base model) 4 Gbytes DDR4 SDRAM (Matrox Rapixo CXP Quad Data Forwarding base model) 8 Gbytes DDR4 SDRAM (Matrox Rapixo CXP Pro Quad CXP-12) Processing FPGA No (Matrox Rapixo CXP base model)/ Yes (Matrox Rapixo CXP Pro Quad CXP-12) Digitizer LUTs Yes 1 Frame burst technology Yes Flat-field correction Yes 2 Peak-extraction Yes 3 Acquisition section CoaXPress Number of acquisition paths 4 Number of auxiliary signals 32 shared (16 in, 4 out, 12 in/out) Number of timers 4 shared Number of quadrature decoders for input from linear or rotary encoders 4 Number of CoaXPress trigger signals (to camera only) 1/digitizer Number of data latches 16/digitizer (allocated using M_DEV0 or M_DEV1 only) 1 Only for 8, 10, or 12-bit data (monochrome or color). When a link is receiving color data, all bands of the data use the same specified LUT mapping. In addition, as soon as one link is receiving 12-bit data, all links (CoaXPress connectors) share the same specified LUT mapping. 2 Only available on Matrox Rapixo CXP Pro Quad CXP-12 (with the appropriate firmware selected). Not available when using Matrox Rapixo CXP Pro Quad CXP-12 with GenTL. 3 Only available on Matrox Rapixo CXP Pro Quad CXP-12 (with the appropriate firmware selected). Not available when using Matrox Rapixo CXP Pro Quad CXP-12 with GenTL. Note on nomenclature This manual refers to all versions of the board as Matrox Rapixo CXP. When necessary, this manual distinguishes between the boards using their full names (for example, Matrox Rapixo CXP Quad CXP-6, Matrox Rapixo CXP Quad CXP-12, or Matrox Rapixo CXP Pro Quad CXP-12), or their abbreviated forms (Quad CXP-6, Quad CXP-12, and Pro Quad CXP-12). Matrox Rapixo CXP overview Summary of Matrox Rapixo CXP features Note on nomenclature ",
      "wordCount": 589,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Using_Matrox_Rapixo-CXP_with_MIL",
      "version": null,
      "title": "Using Matrox Rapixo CXP with MIL",
      "subTitles": [
        "Grabbing and the MIL buffer formats to use for each camera pixel format",
        "Using the CoaXPress trigger signal on Matrox Rapixo CXP",
        "Performing Bayer color conversion in hardware",
        "Using frame burst with a multi-frame buffer",
        "Using on-board flat-field correction",
        "Extracting peaks from an on-board multi-frame image buffer",
        "Data forwarding with Matrox Rapixo CXP"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Using_Matrox_Rapixo-CXP_with_MIL.htm",
      "text": " Using Matrox Rapixo CXP with MIL To use Matrox Rapixo CXP, you must allocate it as a MIL Rapixo CXP system (using MsysAlloc() with M_SYSTEM_RAPIXOCXP). This allocation opens communication with the Matrox Rapixo CXP board and allows MIL to use its resources. You can allocate a MIL Rapixo CXP system for your board in multiple processes (executables). However, different processes cannot allocate a digitizer for the same acquisition paths. All Matrox Rapixo CXP boards feature 4 quadrature decoders that can decode input from linear or rotary encoders with quadrature output. For information on this feature, refer to the Using quadrature input from a rotary encoder section of Chapter 56: I/O signals and communicating with external devices. This chapter also provides information on how to configure and use the auxiliary I/O signals. For information on how to use the Processing FPGA of Matrox Rapixo CXP Pro, see Chapter 66: Using MIL with a Processing FPGA. Refer to the Matrox Rapixo CXP release notes for any additions/modifications to the MIL Hardware-specific Notes in this chapter or in the MIL Reference. Grabbing and the MIL buffer formats to use for each camera pixel format The following table outlines which MIL buffer format to use with each supported camera pixel format. Note that these are the officially supported camera pixel formats. Camera pixel format 1 MIL buffer format (type and attribute) Operation Mono8, Mono10, Mono12, Mono14, Mono16, Mono32 1-band 8-bit, 1-band 16-bit, 1-band 32-bit, 3-band 8-bit 2 , 3-band 16-bit 3 Data will automatically be bit-shifted to have most-significant bits (MSB) in destination buffer BayerXX8, BayerXX10, BayerXX12, BayerXX14, BayerXX16 where XX = GR, GB, BG or RG 1-band 8-bit, 1-band 16-bit Demosaicing followed by RGB to Y (bit shift for MSB) 3-band 8-bit, 3-band 16-bit Demosaicing (bit shift for MSB) 3-band YUV16 + M_PACKED Demosaicing followed by RGB to YUV RGB8, RGBA8, 1-band 8-bit RGB to Y 3-band 8-bit Direct copy 3-band YUV16 + M_PACKED RGB to YUV RGB10, RGBA10, RGB12, RGBA12, RGB14, RGBA14, RGB16, RGBA16 1-band 8-bit RGB to Y (bit shift for MSB) 1-band 16-bit RGB to Y 3-band 16-bit M_PLANAR Packed destination buffers are not supported YUV422_8, YCbCr601_422_8, YCbCr709_422_8 1-band 8-bit Only Y component 3-band YUV16 + M_PACKED Direct copy 1 All of the values available for RGB are also available in BGR format. 2 3-band 8-bit buffers can be in any of the following formats: M_RGB24 + M_PLANAR, M_RGB24 + M_PACKED, M_BGR24 + M_PACKED, or M_BGR32 + M_PACKED. 3 3-band 16-bit buffers can be in either an M_RGB48 + M_PLANAR or M_RGB48 + M_PACKED format. Using the CoaXPress trigger signal on Matrox Rapixo CXP The CoaXPress trigger signal is an embedded signal transmitted along the physical transport layer connection of your camera. Typically, the CoaXPress trigger signal is reserved for trigger information and is sent with other control and data signals along the same cable. On Matrox Rapixo CXP, the CoaXPress trigger signal is only supported from the frame grabber to the camera (that is, as an output signal). To use this signal to trigger the camera, use MdigControl() with M_IO_SOURCE + M_TL_TRIGGER set to the appropriate auxiliary input signals (for example, M_AUX_IO4). Note that when you set the camera to capture an image only upon a trigger, you should disable grab triggered mode on the frame grabber (M_GRAB_TRIGGER_STATE set to M_DISABLE). For more information on performing a triggered grab, see the Grabbing with triggers section of Chapter 27: Grabbing with your digitizer. Performing Bayer color conversion in hardware When Matrox Rapixo CXP grabs color images from a video source with a Bayer color filter (as specified by the DCF), it performs Bayer color conversion in hardware, as it transfers the images to the Host. If the images require white balancing, Matrox Rapixo CXP can perform this automatically if white balancing is enabled using MdigControl() with M_WHITE_BALANCE set to M_ENABLE. If performing white balancing, you can use the default white balance coefficients, automatically have them calculated (using MdigControl() with M_WHITE_BALANCE set to M_CALCULATE), or set explicit coefficients (M_BAYER_COEFFICIENTS_ID). For information on Bayer color conversion, refer to the Using images acquired with a Bayer color filter section of Chapter 23: Data buffers. If you don't want to perform Bayer color conversion in hardware, disable it using MdigControl() with M_BAYER_CONVERSION set to M_DISABLE. The M_BAYER... control types of MdigControl() can only be used when grabbing from a camera that has a Bayer color filter (as specified by the DCF); otherwise, an error will be generated. Using frame burst with a multi-frame buffer Matrox Rapixo CXP supports frame burst technology. This technology allows you to grab a group of sequential frames into a multi-frame buffer with one grab command (MdigGrab(), or one grab of MdigProcess()); the defined number of frames are stored contiguously in the same buffer. The end-of-grab event only occurs once the entire group of frames has been grabbed, reducing the number of events that need to be handled. This is useful in cases where you have a high frame rate and need to ensure that no frames are missed. Note that a user-defined function hooked to the end-of-grab event (MdigProcess(), or MdigHookFunction() with M_GRAB_END) is executed only once the entire group of frames has been grabbed. For information on creating a multi-frame image buffer to store sequential frames, see the Specifying the dimensions of a multi-frame image buffer subsection of the Specifying the dimensions of a data buffer section of Chapter 23: Data buffers. Using on-board flat-field correction Matrox Rapixo CXP Pro Quad CXP-12 supports flat-field correction on-board without Host intervention. Images taken in environments with uneven lighting can affect the quality of your processing. To correct this, an on-board flat-field correction can be applied to images so that the intensity across the image is even before processing begins. To use flat-field correction, you need to specify an on-board buffer that contains the gain values, and optionally another that contains the offset values, using MdigControl() with M_SHADING_CORRECTION_GAIN_ID and M_SHADING_CORRECTION_OFFSET_ID, respectively. The buffers should be the same size as the grabbed image, and the gain values should be in the specified fixed point format (M_SHADING_CORRECTION_GAIN_FIXED_POINT). The aggregate bandwidth to read the gain buffer and offset buffer from on-board memory cannot be bigger than the internal maximum bandwidth of the DMA port (8 Gbytes/sec). There is a line limitation of 64 K pixels per line and 1 M lines per frame. Once you have set the buffers, enable the correction using MdigControl() with M_SHADING_CORRECTION. Note that, flat-field correction is only available on Matrox Rapixo CXP Pro Quad CXP-12 with the appropriate firmware installed. Flat-field correction is not available when using Matrox Rapixo CXP Pro Quad CXP-12 with GenTL. Extracting peaks from an on-board multi-frame image buffer Matrox Rapixo CXP Pro Quad CXP-12 can perform MimLocatePeak1d() on-board without Host intervention if the specified buffer is an on-board buffer. This functionality is only available if the loaded FPGA configuration contains the Matrox PU that supports this functionality. Supporting this function on-board allows the board to perform sheet of light (laser line) extraction. The sheet of light must appear horizontally in the image. The board can extract more than one peak per lane (up to 3). In addition, the board can operate on a single frame or multi-frame on-board image buffer. For more information on how to use MimLocatePeak1d() for peak extraction from a multi-frame image buffer, see the Extraction of peaks from a multi-frame buffer subsection of the Peak intensity detection and depth maps section of Chapter 5: Specialized image processing. Note that, peak-extraction is only available on Matrox Rapixo CXP Pro Quad CXP-12 with the appropriate firmware installed. Peak-extraction is not available when using Matrox Rapixo CXP Pro Quad CXP-12 with GenTL. Data forwarding with Matrox Rapixo CXP The Matrox Rapixo CXP Quad Data Forwarding model supports data forwarding. This allows you to distribute the image processing workload across multiple computers. This features enables the relaying of images to another computer using up to four output connections running at up to 12.5 Gbits/sec. The number of output connections used must equal the number of input connections. Data forwarding is necessary in situations where the amount of information to process is too much for a single computer to keep up with, without dropping frames. Images can be retransmitted to multiple computers in a daisy chain fashion by equipping each computer with a Matrox Rapixo CXP Quad Data Forwarding board; the last node in the chain does not need the Data Forwarding model. Depending on the processing that must be done, each computer in the chain can process a different portion of each incoming image, process alternate images (or nth image), or perform different independent required operations on each image. The following diagram depicts two Data Forwarding boards in daisy chain fashion, with a master connection and an extension connection. Note that, you should connect the master connection to connector C0. To use data forwarding, the Data Forwarding board in the first computer in the chain must go through the standard discovery procedure with the master connection and establish its speed. Only the first Data Forwarding board in the chain has direct communication with the camera and can have either a line scan or frame scan DCF. The subsequent Data Forwarding boards will need to have their slave DCFs configured with the speed, number of links, size of the image, and pixel format information. This tool creates a slave-mode DCF file that stores the connection details and feature settings of a CoaXpress camera connected to a Matrox Rapixo CXP or Matrox Radient CXP. A slave-mode DCF can only be used with slave Matrox CXP boards connected to a master Matrox Rapixo CXP DF. Once the speed is established with the camera and the DCFs are configured, start a grab on the input of the first Data Forwarding board before an output can be grabbed by the next board. Note that, when using PoCXP with the Data Forwarding board, only the board connected to the camera needs to have its 12 V auxiliary connector connected to a 12 V auxiliary source, since it is only this board that will provide power to the camera. Using Matrox Rapixo CXP with MIL Grabbing and the MIL buffer formats to use for each camera pixel format Using the CoaXPress trigger signal on Matrox Rapixo CXP Performing Bayer color conversion in hardware Using frame burst with a multi-frame buffer Using on-board flat-field correction Extracting peaks from an on-board multi-frame image buffer Data forwarding with Matrox Rapixo CXP ",
      "wordCount": 1749,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Allocating_independent_MIL_digitizers_on_Rapixo-CXP_boards",
      "version": null,
      "title": "Allocating independent MIL digitizers on Matrox Rapixo CXP boards",
      "subTitles": null,
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Allocating_independent_MIL_digitizers_on_Rapixo-CXP_boards.htm",
      "text": " Allocating independent MIL digitizers on Matrox Rapixo CXP boards You can allocate up to four independent MIL digitizers on your Matrox Rapixo CXP, using MdigAlloc(). Independent digitizers have different device numbers and use different acquisition paths. You must allocate a digitizer for each CoaXPress link. A CoaXPress link contains all the connections and components to capture from one video source. When connecting a video source with multiple connections to Matrox Rapixo CXP, the master connection determines which device number should be used when allocating your digitizer. For example, if the master connector is plugged into CXP 0, use M_DEV0 to allocate the digitizer. If, however, the master connector is plugged into CXP 3, use M_DEV3 to allocate the digitizer. The other connectors for the same video source (called extension connectors) combine with the master connection to form a CXP link. Both of the following configurations depict two CXP links, each with a master connection and an extension connection. In configuration 1, you should allocate a digitizer for video source 1 using M_DEV0; whereas, you should allocate a digitizer for video source 2 using M_DEV2. In configuration 2, you should allocate a digitizer for video source 1 using M_DEV0; whereas, you should allocate a digitizer for video source 2 using M_DEV1. Configuration 2 has a slight speed advantage to configuration 1 when the digitizer initializes, since the available devices will be scanned for initialization from 0 to 3. Allocating independent MIL digitizers on Matrox Rapixo CXP boards ",
      "wordCount": 248,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Minimum_latency_and_grabbing_all_frames",
      "version": null,
      "title": "Minimum latency and grabbing all frames",
      "subTitles": [
        "Detecting missed frames",
        "Efficiently copying an on-board buffer to a destination buffer in Host memory",
        "Efficiently converting buffer formats while copying"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Minimum_latency_and_grabbing_all_frames.htm",
      "text": " Minimum latency and grabbing all frames When grabbing with either MdigGrab() or MdigProcess(), Matrox Rapixo CXP is optimized to have the smallest latency possible between the last pixel sent from the camera to the last pixel written into the buffer. This allows the buffer to be available for processing with a minimum amount of delay. By default, Matrox Rapixo CXP grabs into buffers in Host memory. On-board memory is used to protect against PCIe latency. To perform real-time grabs, your rate of acquisition (grabbing bandwidth) must be lower than the PCIe maximum transfer rate (PCIe bandwidth). If the acquisition rate is higher than the transfer rate across the PCIe bus, frames will be skipped rather than allowing a grab over-run to occur. To determine the image transfer speed from Matrox Rapixo CXP to the Host, use the Matrox Rapixo CXP Bench utility. Detecting missed frames To be certain that no frames were missed when MdigProcess() was last used, use MdigInquire() with M_PROCESS_FRAME_MISSED. This value reads the number of frames that were transmitted by the camera when no buffer was available to receive the frame; for example, if a grab is triggered and the associated hooked function is slow, then a frame can be missed. Efficiently copying an on-board buffer to a destination buffer in Host memory When copying an on-board buffer into a destination buffer in Host memory, the copy operation is performed by your Matrox Rapixo CXP using the board's DMA write engine, rather than the Host. Your Matrox Rapixo CXP will perform the operation faster than the Host. To ensure that Matrox Rapixo CXP performs the operation, use the following: To copy an on-board buffer into a destination buffer in Host memory, use MbufCopy(). To resize an on-board buffer while copying it to a destination buffer in Host memory, use MimResize() with a factor of 1/n, where n is a value between 1 to 16, and with an interpolation mode of M_NEAREST_NEIGHBOR. Alternatively, you can use MbufTransfer() to perform the same operation. To flip an on-board buffer while copying it to a destination buffer in Host memory, use MimFlip(). Note that for your Matrox Rapixo CXP to perform these operations, the destination buffer must be allocated in non-paged memory (that is, using MbufAlloc...() with + M_IMAGE + M_NON_PAGED). Efficiently converting buffer formats while copying When copying an on-board buffer into a destination buffer in Host memory, the color space converter and image formatter can automatically convert the bit-depth and color format of the source buffer to the bit-depth and color format of the destination buffer. For on-board conversion of buffers to take place, the following on-board buffer and destination buffer depth and color formats are supported. On-board buffer depth and color format (specified in the DCF) Destination buffer depth and color format 8-bit monochrome 16-bit monochrome M_PACKED + M_BGR24 M_PACKED + M_BGR32 M_YUV16_YUYV / M_YUV16 M_PLANAR + M_RGB24 M_PLANAR + M_RGB48 8-bit monochrome Yes No Yes Yes Yes Yes No 16-bit monochrome Yes Yes Yes Yes Yes Yes Yes M_PACKED + M_BGR24 Yes No Yes Yes Yes Yes Yes M_RGB48 + M_PACKED Yes Yes No No No Yes Yes For information about YUV or RGB/BGR buffers, refer to Chapter 23: Data buffers. For the calculations used to convert to YUV, refer to the Matrox Rapixo CXP Hardware and Installation manual. Minimum latency and grabbing all frames Detecting missed frames Efficiently copying an on-board buffer to a destination buffer in Host memory Efficiently converting buffer formats while copying ",
      "wordCount": 581,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Using_Hook_Data",
      "version": null,
      "title": "Using Matrox Rapixo CXP data latches",
      "subTitles": [
        "Steps to configure and retrieve data from a data latch",
        "Triggering a data latch",
        "Data latch limitations",
        "Retrieving data latch information",
        "Data latch example"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Using_Hook_Data.htm",
      "text": " Using Matrox Rapixo CXP data latches Matrox Rapixo CXP has data latches to store signal state information, the quadrature decoder's counter value, or a timestamp at a specific point during a grab. Data latches are reset at every end of grabbed frame event. Data latches do not suffer the delays typical to hooking a hook-handler function to these specific points during the grab and inquiring and storing related information using software. Data latches are only available when using a MIL digitizer allocated using MdigAlloc() with M_DEV0 or M_DEV1. Matrox Rapixo has 16 data latches for use with a digitizer allocated with M_DEV0 and 16 data latches for use with a digitizer allocated with M_DEV1. You can specify the data latch trigger source and the data to record upon the trigger using MdigControl() with the M_DATA_LATCH... control types. To retrieve data from a data latch, use MdigGetHookInfo() with M_DATA_LATCH.... Steps to configure and retrieve data from a data latch The following steps provide a basic methodology for configuring and retrieving data from a data latch: Specify what triggers storing the specified information to the specified data latch, using MdigControl() with M_DATA_LATCH_TRIGGER_SOURCE + M_LATCHn. The trigger can be a specific auxiliary signal, a quadrature decoder's counter value, a timer active event, or one of a limited number of grab events (such as a start of frame event). If necessary, specify the trigger signal transition upon which to store the information, using M_DATA_LATCH_TRIGGER_ACTIVATION + M_LATCHn. Note that this is only useful when M_DATA_LATCH_TRIGGER_SOURCE + M_LATCHn is set to M_AUX_IOn or M_TIMER_ACTIVE. Specify the type of information to store, using M_DATA_LATCH_TYPE + M_LATCHn. Note that a data latch can store only one type of information, and each type of information can only be associated with one data latch, except for timestamp, which can be associated with up to four data latches. MIL returns an error when this limitation is not respected. To latch data before the start of the first grabbed frame, set M_DATA_LATCH_MODE + M_LATCHn to M_PREFETCH. Otherwise, if the data latch is triggered before the start of the first grabbed frame, no information is stored. To latch data only once the grab has started (that is, as of the start of the first grabbed frame), set M_DATA_LATCH_MODE to M_DEFAULT; this is the default value. Enable the data latch using M_DATA_LATCH_STATE + M_LATCHn set to M_ENABLE. If necessary, repeat steps 1 to 5 for each data latch used. Perform the grab. You can use MdigProcess() to grab an image; in the hook-handler function, retrieve and make use of the information stored in the data latch, using MdigGetHookInfo() with M_DATA_LATCH_VALUE. Alternatively, hook a hook-handler function to the end of grab frame event (M_GRAB_FRAME_END) using MdigHookFunction(), and call MdigGrab() to grab an image; then, to retrieve and make use of the information stored in the data latch, call MdigGetHookInfo() with M_DATA_LATCH_VALUE. When done, disable the data latches using MdigControl() with M_DATA_LATCH_STATE + M_LATCHn set to M_DISABLE. Triggering a data latch Data latches can store data at several different points during a grab. Below are a few events that can trigger a data latch. Callout # MdigControl() with M_DATA_LATCH_TRIGGER_SOURCE MdigControl() with M_DATA_LATCH_TRIGGER_ACTIVATION 1, 4, and 8 M_AUX_IOn M_EDGE_RISING 2, 5, and 9 M_TIMER_ACTIVE M_EDGE_RISING or M_EDGE_FALLING 3 and 7 M_GRAB_FRAME_START 6 and 10 M_GRAB_FRAME_END Events that occur before the start of the first grabbed frame of queued grabs or a grab sequence (such as, any auxiliary I/O change event, rotary decoder position change, or timer active event) can only trigger a data latch if the data latch has its mode set to prefetch (using MdigControl() with M_DATA_LATCH_MODE set to M_PREFETCH). In the above image, if the data latch mode is set to prefetch (using M_DATA_LATCH_MODE set to M_PREFETCH), reading the data latch at the end of frame 1 could return the information latched at captions 1 through 6, depending on which event triggers the data latch. However, if the data latch mode is set to default (M_DATA_LATCH_MODE to M_DEFAULT), reading the data latch at the end of frame 1 could only return captions 3 through 6. In both cases, reading the data latch at the end of frame 2 could return captions 7 though 10. Captions 5 and 6 are returned at the end of frame 1, even though they relate to frame 2 because the data of all enabled data latches is returned at the end of every grabbed frame end event (that is, at the end of each grabbed frame). If calls to MdigGrab() occur while no other grab is currently being performed and M_DATA_LATCH_MODE is set to M_PREFETCH, events that occur from the moment the grab command is issued until the start of the grabbed frame can also trigger a data latch and be retrieved at the end of the grabbed frame, for each MdigGrab() call. Callout # MdigControl() with M_DATA_LATCH_TRIGGER_SOURCE MdigControl() with M_DATA_LATCH_TRIGGER_ACTIVATION A and F M_AUX_IOn M_EDGE_RISING B and G M_TIMER_ACTIVE M_EDGE_RISING or M_EDGE_FALLING C and H M_GRAB_FRAME_START D and I M_GRAB_FRAME_END E No data can be latched during this period In the above image, if the data latch mode is set to M_PREFETCH, reading the data latch at the end of frame 1 could return the information latched at captions A through D, depending on which event triggers the data latch. In this example, no data latch can return information relating to events during caption E. Frame 2 could return the information latched at captions F through I. Note that, when using MdigProcess() or when queuing grabs using MdigGrab() in asynchronous mode, there is no dead zone. Data latch limitations To set the type of data that a data latch should store, use M_DATA_LATCH_TYPE. In most cases, you can set up only one data latch to record a specific type of data (for example, only one data latch can store the status of all I/O signals). The exceptions to this are data latches that store timestamps; you can set up four data latches to store timestamps. MIL returns an error when this limitation is not respected. Retrieving data latch information MIL allows each data latch to store multiple instances of the same type of data. You can retrieve a specific instance using the combination value M_VALUE_INDEX(). For example, when latching the timestamp at the end of each grabbed line of a frame with 1024 lines, to retrieve the 1024th timestamp, use MdigGetHookInfo() with M_DATA_LATCH_VALUE + M_LATCHn + M_VALUE_INDEX(1023), where n is the number associated with the data latch. To retrieve all the stored information associated with a specific data latch, use M_DATA_LATCH_VALUE_ALL + M_LATCHn. Using the previous example, this would return 1024 timestamps. To inquire how many pieces of information are stored inside a data latch, use M_DATA_LATCH_VALUE_COUNT. To convert a timestamp from clock ticks to seconds, use the following equation: Timestamp * ( TimestampFrequencyInHz). To inquire the clock frequency, use MdigInquire() with M_DATA_LATCH_CLOCK_FREQUENCY. Data latch example For an example of how to use the Matrox Rapixo CXP family data latches, refer to the DataLatch.cpp example. Using Matrox Rapixo CXP data latches Steps to configure and retrieve data from a data latch Triggering a data latch Data latch limitations Retrieving data latch information Data latch example ",
      "wordCount": 1198,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Matrox_Rapixo-CXP_utilities",
      "version": null,
      "title": "Matrox Rapixo CXP utilities and tools",
      "subTitles": [
        "Matrox Usage Meter utility",
        "Matrox Rapixo CXP Performance Monitor utility",
        "Matrox Rapixo CXP Bench utility",
        "Matrox Rapixo CXP EyeScan",
        "Matrox Rapixo CXP PCIe Information tool",
        "Matrox Rapixo CXP System Monitor tool"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Matrox_Rapixo-CXP_utilities.htm",
      "text": " Matrox Rapixo CXP utilities and tools There are four Matrox Rapixo CXP external applications (utilities) available (Matrox Usage Meter, Matrox Performance Monitor, Matrox Rapixo CXP Bench, and Matrox Rapixo CXP EyeScan) and a series of tools integrated in the MILConfig utility (such as, the PCIe Information tool and the System Monitor tool). To access these utilities and tools, launch the MILConfig utility. Then, expand the Boards item in the tree structure and then click on the Rapixo CXP subitem from the tree structure in the presented interface. The utilities are located in the Launch external applications and Matrox Rapixo CXP System Monitor pages, respectively. Matrox Usage Meter utility The Matrox Usage Meter utility calculates how much of the grab section and the transfer section of each DMA write engine is being used. This rate of utilization is expressed as a percentage. This utility also shows the usage of on-board memory. Matrox Rapixo CXP Performance Monitor utility The Matrox Rapixo CXP Performance Monitor utility is integrated in the Windows Performance Monitor utility and is used to monitor information about Matrox Rapixo CXP, such as: Grab usage. Transfer usage of each DMA write engine. Memory size of the memory bank. Current and maximum temperatures of the FPGA. Matrox Rapixo CXP Bench utility The Matrox Rapixo CXP Bench utility calculates the real-time transfer speed of the PCIe slot (in Mbytes/sec) from: Matrox Rapixo CXP to Host. Host to Matrox Rapixo CXP. Matrox Rapixo CXP EyeScan The Matrox Rapixo CXP EyeScan utility displays an eye diagram of the high speed incoming CoaXPress video signal as it is seen inside the FPGA's transceiver. This tool could help physical error diagnosis (for example, jitter or signal amplitude). Generally, the wider the opening of the eye in the X and Y-axis the better the quality of the signal. Be aware that differences in FPGA transceivers and external PHY might produce channel differences between signals of the same quality. For Matrox Rapixo Single, Dual, Quad CXP-12, and Pro Quad operating at speeds of CXP-12, CXP-6, or CXP-3, if you don't deactivate the re-timer (which smooths the data), then the signal that you see will always appear as a perfect eye. To see a non-retimed signal for these boards, call the EyeScan utility using the ByPassEq command line parameter. Matrox Rapixo CXP PCIe Information tool The Matrox Rapixo CXP PCIe Information tool returns information about the board's PCIe connection. Use the acquisition (device) selector to set the acquisition path about which to inquire (M_DEVn). Note that this selector is shared with the Matrox Rapixo CXP System Monitor tool. This tool presents the following information inside the MILConfig utility: Current number of PCIe lanes. Current speed of the PCIe lanes. Maximum number of PCIe lanes. Maximum speed of the PCIe lanes. Matrox Rapixo CXP System Monitor tool The Matrox Rapixo CXP System Monitor tool displays board properties of the specified digitizer (M_DEVn). Use the acquisition (device) selector to set the acquisition path about which to inquire (M_DEVn). Note that this selector is shared with the Matrox Rapixo CXP PCIe Information tool. This tool presents the following information inside the MILConfig utility: The grab FPGA's current temperature, shown on a sliding scale from 0 to 85 degrees Celsius (for Matrox Rapixo CXP Quad CXP-6), or 0 to 100 (for all other Matrox Rapixo CXP boards), in degrees Celsius. The speed of the fan on the board, in RPM (Matrox Rapixo CXP Pro only). Whether a power source is detected on the internal auxiliary 12 V power connection. If your Matrox Rapixo CXP is operating in the normal range of temperatures, a check mark is presented at the bottom of the Matrox Rapixo CXP System Monitor tool. If your Matrox Rapixo CXP is operating above or below the normal range of temperatures, an X is presented. Matrox Rapixo CXP utilities and tools Matrox Usage Meter utility Matrox Rapixo CXP Performance Monitor utility Matrox Rapixo CXP Bench utility Matrox Rapixo CXP EyeScan Matrox Rapixo CXP PCIe Information tool Matrox Rapixo CXP System Monitor tool ",
      "wordCount": 673,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Matrox_Rapixo-CXP_connectors_and_signal_names",
      "version": null,
      "title": "Matrox Rapixo CXP connectors and signal names",
      "subTitles": [
        "Board connectors",
        "Signal names and their matching MIL constants"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Matrox_Rapixo-CXP_connectors_and_signal_names.htm",
      "text": " Matrox Rapixo CXP connectors and signal names This section serves as a reference to match Matrox Rapixo CXP's connectors and auxiliary signals with MIL information, such as MIL auxiliary signal numbers. To set/inquire all the settings for this board's auxiliary signals (for example, signal routing and timer settings), use MdigControl() / MdigInquire(), respectively. On Matrox Rapixo CXP, the auxiliary signals are acquisition path independent. Any digitizer allocated on the board (M_DEV0 through M_DEV3) can access any of the auxiliary signals. Auxiliary I/O signals can have one or more functionalities (for example, trigger input, timer output, or user output, depending on the signal). Their possible functionalities are described in their description in the pinout table below. Note that, unlike some other Matrox frame grabbers, there is no limit to the number of events that can be triggered simultaneously using the auxiliary input signals, nor is there a restriction on which auxiliary signal can be used to trigger the event. Only those auxiliary signals that have matching MIL information are included in this section. For information on internal connectors and a comprehensive list of all available input and output signals, refer to the board's installation and hardware reference manual. Board connectors The Matrox Rapixo CXP board provides two interface options: the mDP-to-HD15 adapter cable or the HD-15 cable adapter bracket. On the mDP-to-HD15 adapter cables, which connect to the main bracket, there are two external auxiliary I/O connectors. On the cable adapter bracket, there are two external auxiliary I/O connectors. Only the following connectors have auxiliary signals with matching MIL information. Connector Name Connector Abbreviation Image Description External auxiliary I/O connectors HD-15 (0, 1, 2 and 3) The external auxiliary I/O connectors are high-density D-subminiature 15-pin male connectors. They are used to transmit/receive auxiliary signals. External auxiliary I/O connector 0 and 1 are located on the mDP-to-HD15 adapter cables, and external auxiliary I/O connectors 2 and 3 are located on the cable adapter bracket. Signal names and their matching MIL constants The table below lists the auxiliary signals with their associated MIL information. The pinout for auxiliary I/O connector 0 is as follows. Auxiliary I/O connectors 1, 2, and 3 have the same pinout as auxiliary I/O connector 0, except you must add 8, 16, or 24, respectively, to the number at the end of their hardware signal name and MIL constant. For example, AUX(TRIG)_TTL_IO_4 ( M_AUX_IO4 ) on connector 0 would be AUX(TRIG)_TTL_IO_12 ( M_AUX_IO12 ) on connector 1. Sort by: MIL I/O information Connector and pin Hardware manual signal name Filter by: Show all Direction: input Direction: output Direction: input/output Timers Triggers Tables: Expanded Collapsed Digitizer device # Description MIL I/O # Pin information Direction User-bit information Trigger information Timer information Hardware manual signal name Digitizer device #: M_DEVn 1 Indicates the following. MIL I/O #: M_AUX_IO0 Opto-isolated auziliary signal 0 (input), which supports: trigger input or user input. Pin information Connector: HD-15 (0)&nbsp;Pin: 15+, 9- Direction Input Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT0; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_OPTO_IN0 MIL I/O #: M_AUX_IO1 Opto-isolated auxiliary signal 1 (input), which supports: trigger input or user input. Pin information Connector: HD-15 (0)&nbsp;Pin: 12+, 11- Direction Input Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT1; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_OPTO_IN1 MIL I/O #: M_AUX_IO2 LVDS auxiliary signal 2 (input), which supports: trigger input, user input, or quadrature input bit 0. Pin information Connector: HD-15 (0)&nbsp;Pin: 4+, 5- Direction Input Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT2; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_LVDS_IN2 MIL I/O #: M_AUX_IO3 LVDS auxiliary signal 3 (input), which supports: trigger input, user input, or quadrature input bit 1. Pin information Connector: HD-15 (0)&nbsp;Pin: 6+, 8- Direction Input Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT3; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_LVDS_IN3 MIL I/O #: M_AUX_IO4 TTL auxiliary signal 4 (input/output), which supports: timer output, trigger input, user input, or user output. Pin information Connector: HD-15 (0)&nbsp;Pin: 1+ Direction Input/Output User-bit information MIL user-bit #: M_USER_BIT4; Digitizer device #: M_DEVn 1 ; Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT4; Digitizer device #: M_DEVn 1 ; Timer information Timer: M_TIMER1/M_TIMER2/M_TIMER3/M_TIMER4; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_TTL_IO_4 MIL I/O #: M_AUX_IO5 TTL auxiliary signal 5 (input/output), which supports: timer output, trigger input, user input, or user output. Pin information Connector: HD-15 (0)&nbsp;Pin: 2+ Direction Input/Output User-bit information MIL user-bit #: M_USER_BIT5; Digitizer device #: M_DEVn 1 ; Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT5; Digitizer device #: M_DEVn 1 ; Timer information Timer: M_TIMER1/M_TIMER2/M_TIMER3/M_TIMER4; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_TTL_IO_5 MIL I/O #: M_AUX_IO6 TTL auxiliary signal 6 (input/output), which supports: timer output, trigger input, user input, or user output. Pin information Connector: HD-15 (0)&nbsp;Pin: 3+ Direction Input/Output User-bit information MIL user-bit #: M_USER_BIT6; Digitizer device #: M_DEVn 1 ; Trigger information Trigger controller selected automatically. Trigger shared between acq paths. 1 M_HARDWARE_PORT6; Digitizer device #: M_DEVn 1 ; Timer information Timer: M_TIMER1/M_TIMER2/M_TIMER3/M_TIMER4; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(TRIG)_TTL_IO_6 MIL I/O #: M_AUX_IO7 LVDS auxiliary signal 7 (output), which supports: timer output or user output. Pin information Connector: HD-15 (0)&nbsp;Pin: 13+, 14- Direction Output User-bit information MIL user-bit #: M_USER_BIT7; Digitizer device #: M_DEVn 1 ; Timer information Timer: M_TIMER1/M_TIMER2/M_TIMER3/M_TIMER4; Digitizer device #: M_DEVn 1 ; Hardware manual signal name AUX(EXP)_LVDS_OUT7 expandTable(\"mil_io_information_show_all\"); 1 Note that these are shared auxiliary signals between digitizers. If used by one digitizer, they can be simultaneously used by the other that shares this auxiliary signal. The value of n can be a number from 0 to 3, because those signals can be shared among the four different acquisition paths. Note that you must ensure that only one digitizer is driving an output signal. Matrox Rapixo CXP connectors and signal names Board connectors Signal names and their matching MIL constants ",
      "wordCount": 1026,
      "subEntries": []
    },
    {
      "id": "BSN_rapixo-cxp_Matrox_Rapixo-CXP_board_flow_diagrams",
      "version": null,
      "title": "Matrox Rapixo CXP board flow diagrams",
      "subTitles": [
        "Matrox Rapixo CXP Single and Dual model",
        "Matrox Rapixo CXP Quad CXP-6 and Quad CXP-12 model",
        "Matrox Rapixo CXP Quad Data Forwarding model",
        "Matrox Rapixo CXP Pro model"
      ],
      "location": "MIL Hardware-specific Notes",
      "pageURL": "content\\BoardSpecificNotes\\rapixo-cxp\\Matrox_Rapixo-CXP_board_flow_diagrams.htm",
      "text": " Matrox Rapixo CXP board flow diagrams This section contains data flow diagrams for Matrox Rapixo CXP boards. Matrox Rapixo CXP Single and Dual model The following diagram illustrates the data flow of Matrox Rapixo base models (Single and Dual). Matrox Rapixo CXP Quad CXP-6 and Quad CXP-12 model The following diagram illustrates the data flow of Matrox Rapixo base models (Quad CXP-6 and Quad CXP-12). Matrox Rapixo CXP Quad Data Forwarding model The following diagram illustrates the data flow of Matrox Rapixo base model (Quad Data Forwarding). Matrox Rapixo CXP Pro model The following diagram illustrates the data flow of Matrox Rapixo CXP Pro model (Pro Quad CXP-12). Matrox Rapixo CXP board flow diagrams Matrox Rapixo CXP Single and Dual model Matrox Rapixo CXP Quad CXP-6 and Quad CXP-12 model Matrox Rapixo CXP Quad Data Forwarding model Matrox Rapixo CXP Pro model ",
      "wordCount": 144,
      "subEntries": []
    }
  ]
}]