[{
  "id": "UG_MILweb",
  "version": "2024020714",
  "title": "Using MILweb to monitor your application",
  "subTitles": null,
  "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
  "pageURL": "content\\UserGuide\\MILweb\\ChapterInformation.htm",
  "text": " Chapter 58: Using MILweb to monitor your application This chapter explains how to monitor your application from a remote computer using MILweb. MILweb overview Capabilities of MILweb client applications Basic concepts for MILweb Fundamentals for creating your MILweb client application Conventions for referring to MILweb functions and constants MILweb allocations and functions Publishing MIL objects Connecting to a MILweb server application MILweb displays Size of a MILweb display Interacting with a display Hooking to display events MILweb messages Sending messages from your MILweb server application Sending messages from your MILweb client application Creating a MILweb client application with JavaScript JavaScript primer for C/C++ MIL developers MIL primer for JavaScript developers Writing a MILweb client application in JavaScript Differences between MIL and MILweb Returned values in MILweb Accessing MILweb server applications and published MIL objects Running your JavaScript MILweb client application Deploying your MILweb client application Browser compatibility JavaScript MILweb function reference MilWeb.Mapp MilWeb.MappCloseConnection MilWeb.MappControl MilWeb.MappGetHookInfo MilWeb.MappHookFunction MilWeb.MappInquire MilWeb.MappInquireConnection MilWeb.MappOpenConnection MilWeb.Mdisp MilWeb.MdispControl MilWeb.MdispGetHookInfo MilWeb.MdispHookFunction MilWeb.MdispInquire MilWeb.MdispMessage MilWeb.MdispPan MilWeb.MdispSelectWindow MilWeb.MdispZoom MilWeb.Mobj MilWeb.MobjGetHookInfo MilWeb.MobjHookFunction MilWeb.MobjInquire MilWeb.MobjMessageRead MilWeb.MobjMessageWrite Creating a MILweb client application with C/C++ Writing a MILweb client application in C/C++ Presenting and interacting with MIL displays Presenting a display Making a presented display interactive C/C++ MILweb function reference MilWeb::Mapp MilWeb::MappCloseConnection MilWeb::MappControl MilWeb::MappGetHookInfo MilWeb::MappHookFunction MilWeb::MappInquire MilWeb::MappInquireConnection MilWeb::MappOpenConnection MilWeb::Mdisp MilWeb::MdispControl MilWeb::MdispGetHookInfo MilWeb::MdispHookFunction MilWeb::MdispInquire MilWeb::MdispMessage MilWeb::MdispPan MilWeb::MdispZoom MilWeb::Mobj MilWeb::MobjGetHookInfo MilWeb::MobjHookFunction MilWeb::MobjInquire MilWeb::MobjMessageRead MilWeb::MobjMessageWrite ",
  "wordCount": 230,
  "subEntries": [
    {
      "id": "UG_MILweb_MILweb_overview",
      "version": null,
      "title": "MILweb overview",
      "subTitles": [
        "Capabilities of MILweb client applications"
      ],
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\MILweb_overview.htm",
      "text": " MILweb overview You can monitor your MIL application from one or more remote computers by configuring it to be a MILweb server application. When MILweb functionality is enabled for your application, you can make some MIL objects (such as 2D and 3D displays) available over the network. Published MIL objects can be accessed by a MILweb client application, which you write using the provided MILweb JavaScript or C/C++ API. The MILweb JavaScript API is suitable for writing a client application that can run in a compatible web browser on a variety of devices (including computers, phones, and tablets) under a variety of operating systems (including Windows, Linux, MacOS, Android, iOS, and others). The MILweb C/C++ API is suitable for writing a standalone client application that can run under Windows or Linux. Regardless of the chosen API, the remote computer is not required to have MIL installed, have a MIL license, nor contain Matrox hardware to run a MILweb client application. You can create a single MILweb client application that simultaneously connects to multiple MILweb server applications. You can also create more than one MILweb client application for connecting to the same MILweb server application. For example, it can be useful to have one MILweb client application used to monitor a single vision controller in an HMI, and another used to monitor several vision controllers simultaneously from another location. You do not need to use the same MILweb API (JavaScript or C/C++) for each MILweb client application you create. Capabilities of MILweb client applications Both the MILweb C/C++ API and MILweb JavaScript API are designed for you to create a MILweb client application that performs the following tasks: Show 2D displays published by the MILweb server application (including annotations). For example, you might select the last processed image to a display in your MIL application, and show that display in your MILweb client application. Manipulate displays of the MILweb server application (including annotations). For example, you might design your MILweb client application to allow the user to interactively pan, zoom, and annotate a display of your MIL application. Receive other information from the MILweb server application in the form of messages. For example, you might design your MIL application to send a message to your MILweb client application indicating whether the last image passed or failed an inspection process. You can then show this pass or failure result to the user in your MILweb client application. Send information to the MILweb server application in the form of messages. For example, your MILweb server application might have some operational settings that can be changed at runtime (such as which digitizer to use for grabbing images, or the parameter settings for image processing functions). You can design your MILweb client so that the user can select new settings from an interface; your MILweb client can then send the updated setting in a message, which is received and applied by your MIL application. Since you can send any type of information in a message, you can control any aspect of your MIL application using messages by establishing your own protocol. For example, you might design your MILweb server application to grab an image every time a MILweb client application sends the number 12345 in a message. For more information, see the MILweb messages subsection of the Fundamentals for creating your MILweb client application section later in this chapter. MILweb overview Capabilities of MILweb client applications ",
      "wordCount": 573,
      "subEntries": []
    },
    {
      "id": "UG_MILweb_Basic_concepts",
      "version": null,
      "title": "Basic concepts for MILweb",
      "subTitles": null,
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\Basic_concepts.htm",
      "text": " Basic concepts for MILweb The basic concepts and vocabulary conventions for MILweb are: MILweb server application. Any MIL application with MILweb server functionality enabled. For brevity, this is sometimes shortened to MILweb server. MILweb client application. An application that connects to a MILweb server application, using either the MILweb JavaScript library or the MILweb C/C++ library. For brevity, this is sometimes shortened to MILweb client. Since a MILweb client application does not require MIL to be installed, it is not considered to be a MIL application. Instance of a MILweb client application. Your MILweb client application, running on a particular computer. It is possible for your MILweb client application to be run on multiple computers simultaneously; each of these computers is running its own instance of the application. Some MILweb functions affect only the local instance of your MILweb application. Some functions affect both the MILweb server application and the local instance of the MILweb client application. Some functions affect both the MILweb server application and all connected instances of the MILweb client application. Client-side MIL identifier. The MIL identifier used in your MILweb client application to identify a MILweb server application or published MIL object. Each instance of your MILweb client application uses a different client-side MIL identifier to refer to the same MILweb server application or published MIL object. Therefore, you cannot share or compare client-side MIL identifiers between instances of your MILweb client application, or with the MILweb server application. For JavaScript, the client-side MIL identifier of a MILweb server application (or a published object) is assigned before the connection is established with that particular MILweb server application (or published object). Therefore, the client-side MIL identifier of an object can be inquired at any time, but is not usable until the connection is made and a connection event is generated. MIL HTTP server. A MIL object that you can use to host files on the local computer so that they are accessible in a web browser by remote computers. Typically, you can use a MIL HTTP server to host your MILweb client application. In this case, users access your MILweb client application on the HTTP server (using a compatible web browser), and the MILweb client application connects to the MILweb server. Using a MIL HTTP server is optional; you can distribute your MILweb client application to users by other means (for example, using third-party HTTP server software or manually copying the application files to the remote computer using a USB storage device). Basic concepts for MILweb ",
      "wordCount": 421,
      "subEntries": []
    },
    {
      "id": "UG_MILweb_Using_MILweb_to_monitor_your_application",
      "version": null,
      "title": "Fundamentals for creating your MILweb client application",
      "subTitles": [
        "Conventions for referring to MILweb functions and constants",
        "MILweb allocations and functions",
        "Publishing MIL objects ",
        "Connecting to a MILweb server application",
        "MILweb displays",
        "Size of a MILweb display",
        "Interacting with a display",
        "Hooking to display events",
        "MILweb messages ",
        "Sending messages from your MILweb server application",
        "Sending messages from your MILweb client application"
      ],
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\Using_MILweb_to_monitor_your_application.htm",
      "text": " Fundamentals for creating your MILweb client application This section discusses how to create a MILweb application, using either the JavaScript or C/C++ API. For additional information specific to each language (including their respective function references), see the Creating a MILweb client application with JavaScript section later in this chapter and the Creating a MILweb client application with C/C++ section later in this chapter. MILweb uses a client-server architecture. Your MILweb client application connects to your MILweb server application and requests data about a published MIL object. Your MILweb server application accepts the request and sends data about the object back to the client. You can also send custom data between the client and server using MIL messages. Conventions for referring to MILweb functions and constants The following conventions for referring to MILweb functions and constants are used in this chapter: MilWeb.FunctionName. A function in the MILweb API. If a language is not specified, this refers to a function that is available in both JavaScript and C/C++. For JavaScript, you use the name MilWeb.FunctionName to call the function. For C, you use MilWebFunctionName. For C++, you use MilWeb::FunctionName (or use the namespace MilWeb). If a function exists in both the JavaScript and MILweb C/C++ API, a link is provided to the JavaScript version of the function. MilWeb.M_CONSTANT_NAME. A constant in the MILweb API. If a language is not specified, this refers to a constant that is available in both JavaScript and C/C++. For JavaScript, the name of the constant is MilWeb.M_CONSTANT_NAME. For C/C++, you do not include the MilWeb prefix (just use M_CONSTANT_NAME). MILweb allocations and functions There are no mandatory allocations for a MILweb client application. One MILweb client application can connect to multiple MILweb servers; you do not allocate a separate application context for each one. However, you must connect to the MILweb server using MilWeb.MappOpenConnection. This function returns the client-side MIL identifier of the MILweb server. You use the client-side MIL identifier of a connected MILweb server application, or that of a MIL object published by the application, to specify with which MILweb server application a function will interact. This is similar to most MIL functions, for which you must specify the MIL identifier of either a system or an object that was allocated on that system. Just as specifying the identifier of a MIL object (such as a digitizer) allocated on a particular system implicitly specifies to use that system, specifying the client-side identifier of a MIL object (such as a display) allocated in a MILweb server application implicitly specifies to interact with that MILweb server application. Most MILweb functions interact with the connected MILweb server in some way. These functions will return an error if the MILweb client is not connected to the MILweb server. You should not use any MILweb functions except MilWeb.MappOpenConnection and MilWeb.MappHookFunction until your MILweb client is connected to a MILweb server. Publishing MIL objects Before your MILweb client application can access a MIL object, you must publish the object in your MILweb server application. To do so, use MobjControl() with M_WEB_PUBLISH and M_READ_ONLY or M_READ_WRITE. You must also assign a name to the object using MobjControl() with M_OBJECT_NAME. In your MILweb client application, to learn the client-side MIL identifier of the published object, use MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME and the name you assigned to the object. You use this client-side identifier to access the object, with appropriate functions. Note that for JavaScript, you cannot use the client-side MIL identifier immediately after inquiring it; you must hook a function to be executed when the connection to the server or object has been established (which happens asynchronously). For more information, see the Accessing MILweb server applications and published MIL objects subsection of the Creating a MILweb client application with JavaScript section later in this chapter. The only MIL objects that can be published are MILweb displays and message mailboxes. You use client-side MIL identifiers in your MILweb client applications, to identify both your MILweb server and the MIL objects it has published. However, the literal value of the client-side identifier, assigned to a particular MILweb server or MIL object, is not the same for each instance of your MILweb client. Therefore, you must separately inquire the client-side identifier of a MIL object in each instance of your MILweb client (using MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME). Connecting to a MILweb server application The following steps provide a typical methodology to establish a connection between your MILweb client and MILweb server: In your MIL application, enable MILweb using MappControl() with M_WEB_CONNECTION. Your MIL application is now a MILweb server application. MILweb servers are intended to be run on a segmented LAN that has no internet/WAN access; MILweb servers offer no internal security mechanisms. When MILweb is enabled, you should typically ensure that your network administrator configures your network to prevent incoming connections from the internet/WAN to the computer running your MIL application (and from any other devices on your network which do not need access). If this is not possible, at a minimum you should block incoming connections from the internet to the listening port of the MILweb server. You can inquire which port is used for this purpose, using MappInquire() with M_WEB_CONNECTION_PORT. Optionally, specify the listening port on which the MILweb server application receives incoming connections, using MappControl() with M_WEB_CONNECTION_PORT. This must be a port not used by any other application running on the computer. The default port is 7861. In your MILweb client application, open a connection to your MIL application using MilWeb.MappOpenConnection with the URL of the computer running your MILweb server application. MilWeb.MappOpenConnection writes (to the object or variable specified by the UserVarPtr or RemoteContextAppIdPtr parameter) the client-side MIL application identifier that you use with some other MILweb functions, such as MilWeb.MappInquireConnection. For JavaScript, the connection is completed asynchronously after MilWeb.MappOpenConnection has returned; therefore, you cannot use the client-side identifier until the connection is established. A MilWeb.M_CONNECT event is generated when the connection is established. The URL is ws://, followed by the Hostname or local static IP address of the computer running the MILweb server, and a colon (for example, ws://192.168.1.58: or ws://VisionController42:). If you changed the MILweb listening port, or there is more than one MILweb server application running on the same computer, you must append to the URL a colon (:) followed by the listening port. For example, ws://192.168.1.58:7861. You might find it useful to create a MILweb client application that allows the user to enter the IP address or Hostname dynamically before connecting (for example, using a dialog box). When running an instance of your MILweb client application on the same computer as your MILweb server application, you can always use the name localhost in place of the IP address or Hostname. For JavaScript only, in your MILweb client application, hook a function to new connection events using MilWeb.MappHookFunction with MilWeb.M_CONNECT and the client-side application identifier that was written by MilWeb.MappInquireConnection. When the hooked function is called, the connection has been established and you can use the client-side application identifier with other functions in your application. You might find it useful to set a global Boolean variable within the hooked function as a flag to indicate that the connection has been established. Since the connection to the MILweb server application is made asynchronously (after the call to MilWeb.MappOpenConnection has returned and execution of your code has continued), the hook-handler function will be called when the connection is established (as long as MilWeb.MappHookFunction immediately follows MilWeb.MappOpenConnection). This does not apply to C/C++; MilWeb::MappOpenConnection does not return until after the connection has been established. The client-side application identifier can therefore be used immediately. MILweb displays You can send the contents of a MIL 2D or 3D display to one or more MILweb clients, if the display was allocated with M_WEB and was published (as described in the Publishing MIL objects subsection of this section). All connected MILweb clients showing the display receive the same image information; if the MILweb server or a connected instance of the MILweb client modifies the display (for example, using MilWeb.MdispZoom or interactive keyboard controls), the display is modified for all instances of the MILweb client showing that display. To give each instance of your MILweb client an independent display, you must allocate multiple displays. You cannot show an M_WEB display in your MILweb server application. The following steps provide a typical methodology to present a display from your MILweb server application in a connected MILweb client application: In your MILweb server application, allocate a MILweb display using MdispAlloc() or M3ddispAlloc() with M_WEB. In your MILweb server application, assign a unique name to the display using MobjControl() with M_OBJECT_NAME. In your MILweb server application, publish the display using MobjControl() with M_WEB_PUBLISH and either M_READ_ONLY or M_READ_WRITE (for displays, there is no difference between these settings). In your MILweb server application, select a buffer/container to display. To do so: For a 2D display, select an image buffer to the display using MdispSelect(). For a 3D display, select a 3D-displayable point cloud container or depth map image buffer to the display using M3ddispSelect(). In your MILweb client application, retrieve the MIL identifier of the display using MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME and the name you assigned to the display. Present the display in your MILweb client application. To do so: For JavaScript, create an HTML5 canvas element in your HTML file and present the display in that canvas using MilWeb.MdispSelectWindow (this function supports both 2D and 3D displays). For example, you can create an HTML5 canvas element by including the following in your HTML file: &lt;canvas id=\"PlaceToShowAMILDisplay\" width=\"1600\" height=\"900\"&gt;&lt;/canvas&gt; Use MilWeb.MdispSelectWindow with the canvas id that you set, and the client-side MIL identifier of the display. The display will be automatically presented in the HTML5 canvas. For C/C++, the output of the 2D or 3D display is automatically transmitted to the MILweb client as a bitmap image (including annotations). To display it, you must map a bitmap data structure appropriate for the third-party GUI toolkit that you are using (for example, Windows GDI (win32), Qt, or GTK) onto the image data. For more information, see the Presenting a display subsection of the Creating a MILweb client application with C/C++ section later in this chapter. Optionally, control the display in your MILweb server application (using functions in the Mdisp or M3ddisp module) or in your MILweb client application (using functions in the MilWeb.Mdisp module). MILweb displays support most of the same functionality as windowed displays. The MILweb API only provides a subset of the functionality of the full Mdisp and M3ddisp modules. To perform tasks not supported by the MILweb API, you must use the standard MIL display functions in your MILweb server application. For example, to associate a 2D display with a 2D graphics list, use MdispControl(). To associate a 2D display with a LUT, use MdispLut(). To change the view of a 3D display, use M3ddispSetView(). Size of a MILweb display A 2D MILweb display is always the same size as the currently selected image buffer. You can set the size of a 3D MILweb display using M3ddispControl() with M_SIZE_X and M_SIZE_Y. In both cases, the visible content of a MILweb display is transmitted to the MILweb client as bitmap image data after panning, zooming, annotations, and other settings/transformations are applied. Any data outside of the visible area of the MILweb display is not transmitted to the MILweb client. For example, if you present a 2D display in an HTML5 canvas using MilWeb.MdispSelectWindow (only available for JavaScript), and the original HTML5 canvas is larger than the selected image buffer, the display is presented in an area the size of the image buffer. If you scale the displayed image using MilWeb.MdispZoom (equivalent to using MdispZoom() directly in the MILweb server application), the size of the presented display does not change; it remains the same size as the image buffer, but shows only the zoomed region of the image. For JavaScript, the canvas size is always updated to match the size of the image buffer for a 2D display. Similarly, for a 3D display, the display is always shown at the specified output resolution regardless of the original canvas size (this can be set by using M3ddispControl() with M_SIZE_X and M_SIZE_Y). Interacting with a display You can allow a user to interactively control a display through your MILweb client application, as though they were interacting with a windowed display shown on the computer running your MILweb server application. To do so, in your MILweb client application, use MilWeb.MdispControl with MilWeb.M_INTERACTIVE and MilWeb.M_ENABLE. For a 2D display annotated by a 2D graphics list that has been made editable (using MgraControl() with M_EDITABLE), the user is also able to edit the annotations interactively. For more information, see the Creating and modifying graphics interactively section of Chapter 26: Generating graphics. You can also simulate user input using MilWeb.MdispMessage. MIL does not have a similar function. For C/C++, user interaction is not sent to the display automatically. Instead, you must forward user input from your MILweb client application to the display using MilWeb::MdispMessage. For more information, see the Making a presented display interactive subsection of the Creating a MILweb client application with C/C++ section later in this chapter. Note that although a display can be shown simultaneously in many instances of your MILweb client, only one instance can have interactive control at a time. To give each instance of your MILweb client an independent display, you must allocate multiple displays (using MdispAlloc() or M3ddispAlloc() with M_WEB). Hooking to display events You can hook a function to mouse or key press events in both your MILweb client and MILweb server applications (using MilWeb.MdispHookFunction and MdispHookFunction() respectively). For your MILweb client, the function is hooked locally; the function is only called when the specified event is generated in the same instance of your MILweb client, and MilWeb.MdispGetHookInfo returns results (such as the mouse position) relative to this instance. For your MILweb server, the function is hooked to whichever instance of the MILweb client has interactive control of the display; the function is only called when the specified event is generated on the computer with interactive control, and MdispGetHookInfo() returns results (such as the mouse position) about that instance. For example, there might be 2 instances of your MILweb client (named client A and client B) running on 2 different computers, both connected to the same MILweb server and showing the same MILweb display. In this case, both clients have hooked a function to the MilWeb.M_MOUSE_LEFT_BUTTON_DOWN event and the MILweb server has hooked a function to the M_MOUSE_LEFT_BUTTON_DOWN event. Client A has interactive control of the display. When the user of client A clicks on the display with the left mouse button, both client A and the MILweb server application call the functions that they have hooked to the event. MilWeb.MdispGetHookInfo and MdispGetHookInfo() return results about client A. When the user of client B clicks on the display with the left mouse button, only client B calls the function that it has hooked to the event. MilWeb.MdispGetHookInfo returns results about client B. The MILweb server application does not call its hook function when the user of client B clicks on the display because interactive control is disabled for client B. MILweb messages You can exchange any type of data between the MILweb client and MILweb server using message-passing through MIL message mailboxes. Message mailboxes are allocated in your MILweb server application and accessed remotely by your MILweb client application. Your MILweb client can only access a message mailbox while connected to the MILweb server in which the message mailbox was allocated. Sending messages from your MILweb server application The following is a basic methodology to send a message from your MILweb server application to your MILweb client application: In your MILweb server application, allocate a message mailbox using MobjAlloc() with M_MESSAGE_MAILBOX and M_OVERWRITE. It is recommended to allocate message mailboxes for sending messages to MILweb clients with M_OVERWRITE. However, this is not a requirement. For more information, see the Message mailbox operation modes subsection of the Message mailboxes section of Chapter 62: Distributed MIL. In your MILweb server application, set the message mailbox to be published for access by MILweb clients using MobjControl() with M_WEB_PUBLISH and M_READ_ONLY. It is recommended to set message mailboxes for sending messages to MILweb clients to be M_READ_ONLY. However, this is not a requirement. In your MILweb server application, assign a name to the message mailbox using MobjControl() with M_OBJECT_NAME. In your MILweb client application, retrieve the MIL identifier of the message mailbox using MilWeb.MappInquireConnection and the name that you assigned to the message mailbox. In your MILweb client application, hook a function to new messages being added to the message mailbox using MilWeb.MobjHookFunction with MilWeb.M_UPDATE_WEB. In your MILweb server application, write a message and add it to the message mailbox using MobjMessageWrite(). In your MILweb client application, in the hook-handler function, read the contents of the message using MilWeb.MobjMessageRead. Messages are always transmitted as an array of type MIL_UINT8. For JavaScript, if the message contains text, you can convert the data to a string using the utility function MilWeb.convertUTF8ToString, which takes the message data as a parameter and returns it as a string. In rare cases where you send a message using UTF-16 encoding, use MilWeb.convertUTF16ToString instead. Sending messages from your MILweb client application The following is a basic methodology to send a message from your MILweb client application to your MILweb server application: In your MILweb server application, allocate a message mailbox using MobjAlloc() with M_MESSAGE_MAILBOX and M_QUEUE. It is recommended to allocate message mailboxes for receiving messages from MILweb clients with M_QUEUE. However, this is not a requirement. For more information, see the Message mailbox operation modes subsection of the Message mailboxes section of Chapter 62: Distributed MIL. In your MILweb server application, set the message mailbox to be published for access by MILweb clients using MobjControl() with M_WEB_PUBLISH and M_READ_WRITE. In your MILweb server application, assign a name to the message mailbox using MobjControl() with M_OBJECT_NAME. In your MILweb server application, hook a function to messages being added to the message mailbox by the MILweb client(s), using MobjHookFunction() with M_MESSAGE_RECEIVED. In your MILweb client application, retrieve the MIL identifier of the message mailbox using MilWeb.MappInquireConnection and the name that you assigned to the message mailbox. In your MILweb client application, write a message and add it to the message mailbox using MilWeb.MobjMessageWrite. In your MILweb server application, in the hook-handler function, read the contents of the message using MobjMessageRead(). Fundamentals for creating your MILweb client application Conventions for referring to MILweb functions and constants MILweb allocations and functions Publishing MIL objects Connecting to a MILweb server application MILweb displays Size of a MILweb display Interacting with a display Hooking to display events MILweb messages Sending messages from your MILweb server application Sending messages from your MILweb client application ",
      "wordCount": 3148,
      "subEntries": []
    },
    {
      "id": "UG_MILweb_Creating_a_MILweb_client_with_JavaScript",
      "version": null,
      "title": "Creating a MILweb client application with JavaScript",
      "subTitles": [
        "JavaScript primer for C/C++ MIL developers",
        "MIL primer for JavaScript developers",
        "Writing a MILweb client application in JavaScript",
        "Differences between MIL and MILweb",
        "Returned values in MILweb",
        "Accessing MILweb server applications and published MIL objects",
        "Running your JavaScript MILweb client application",
        "Deploying your MILweb client application",
        "Browser compatibility"
      ],
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\Creating_a_MILweb_client_with_JavaScript.htm",
      "text": " Creating a MILweb client application with JavaScript The MILweb JavaScript API is suitable for writing a client application that can run in a compatible web browser on a wide variety of platforms. This section only discusses information specific to the MILweb JavaScript API. For general information about creating a MILweb client application, see the Fundamentals for creating your MILweb client application section earlier in this chapter. For details about the JavaScript versions of specific MILweb functions, see the JavaScript MILweb function reference section later in this chapter. JavaScript primer for C/C++ MIL developers Since JavaScript shares much of its syntax with C/C++, in general you should find it easy to write a simple JavaScript application that uses MILweb. It is useful to bear in mind the following differences between C/C++ and JavaScript: JavaScript is an interpreted language. You do not need to compile JavaScript code, nor do you need any kind of linking mechanism to access mil.js (except for putting it in the folder with your application). You can create and modify your JavaScript application using any text editor. You can run your application in a compatible web browser by calling your main JavaScript function from within an HTML file (as long as the HTML file, your application source code, and mil.js are in the same folder). For more information, see the Running your JavaScript MILweb client application subsection of this section. JavaScript is a dynamically-typed language. You do not assign a data type to variables; the type of data in a variable is determined automatically each time you assign a value to it. In general, casting is done automatically when required (and possible). For example, in the following code, multiplicationResult is set to the number 30 (someVariable is automatically cast as a number), and printableOutput is set to the string \"That other variable is the number 30\" (multiplicationResult is automatically cast as a string): var someVariable = \"5\"; var multiplicationResult = someVariable * 6; var printableOutput = \"That other variable is the number \" + multiplicationResult; This can lead to ambiguous situations, in which the JavaScript interpreter must decide how to cast a variable. For example in the following code, the JavaScript interpreter must decide whether to cast firstVariable and secondVariable as strings or numbers for the purposes of addition. In this case, firstAddition is set to the number 8, while secondAddition is set to the string \"26\": var firstVariable = 2; var firstAddition = firstVariable + 6; var secondVariable = \"2\"; var secondAddition = secondVariable + 6; You can determine what data type is currently stored in a variable using the built-in function typeof. For example, typeof(2) returns \"number\", while typeof(\"2\") returns \"string\". Note that this does not work for arrays; typeof(anArray) returns \"object\". The MILweb JavaScript function reference lists the expected data type for each parameter. If you set a parameter to a variable that stores a different type of data, the JavaScript interpreter will attempt to cast the data to the correct data type. If a cast is not possible, either an error is generated or the value \"undefined\" is used. You should be aware of this when debugging your MILweb client application. JavaScript does not distinguish between integers and decimal values. All types of numbers have the data type number, unless they were defined by values within quotation marks; in this case, they have the data type string. An array is a type of JavaScript object. Arrays in JavaScript are similar to vectors in C++. You can increase or decrease the size of an array after it has been defined. You do not need to declare that a variable is an array object before assigning values to it, nor do you need to explicitly specify the size of an array. JavaScript objects are similar to C++ objects, but the terminology is different. Member variables in C++ are referred to as properties in JavaScript. Member functions in C++ are referred to as methods in JavaScript. Web browsers typically execute JavaScript in a single thread. However, some procedures (such as establishing a connection to a MILweb server) are completed asynchronously. To learn more about using JavaScript, refer to third-party resources such as the Mozilla JavaScript documentation at https://developer.mozilla.org/en-US/docs/Web/JavaScript. MIL primer for JavaScript developers The MILweb JavaScript API is closely modeled on the MIL C API. Unlike JavaScript, C is not an object-oriented programming language. However, MIL implements an object-oriented model within the framework of C. The following information will help you to understand the model for accessing MIL objects. Each MIL object has a client-side MIL identifier. Instead of accessing the MIL object directly, you store the client-side identifier of the MIL object in a variable and pass that variable to a function. For example, you can zoom a MILweb display using the function MilWeb.MdispZoom. This function is not a method of the display; it is a global function that you call with the client-side identifier of the display, as shown below. The first line inquires the identifier of the display named \"MyDisplay\". The second line zooms the display by calling MilWeb.MdispZoom with that identifier. var displayIdentifier = MilWeb.MappInquireConnection(MilWebApp, MilWeb.M_WEB_PUBLISHED_NAME, \"MyDisplay\", MilWeb.M_DEFAULT); MilWeb.MdispZoom(displayIdentifier, 2, 2); For clarity, this example assumes that a connection has already been established with the MILweb display using a previous call to MilWeb.MappInquireConnection. Normally, you cannot access a MIL object immediately after inquiring its client-side MIL identifier. For more information, see the Accessing MILweb server applications and published MIL objects subsection of this section. You do not access the properties of a MIL object directly. Instead, you use a control or inquire function with the setting that specifies the property that you want to access. You can think of control and inquire functions as setter and getter functions for the MIL object that you specify (using its client-side MIL identifier). In MILweb, there are functions that take a callback function and set it up as the event handler for a specific type of event (hooks it to the event). When the event then happens, the callback function is executed. The MIL functions capable of attaching (hooking) a callback function to an event are referred to as hook-type functions (for example, MilWeb.MappHookFunction), and the callback functions are referred to as hook-handler functions. Within a hook-handler function, you can retrieve information about the event that caused the hook-handler function to be called, using a hook-information function (for example, MilWeb.MappGetHookInfo). Hook-handler functions should have the prototype function HookHandler(HookType, EventId, UserVar). The following is an example of a hook-handler function, previously hooked to MilWeb.M_CONNECT events using MilWeb.MappHookFunction, which stores the client-side MIL identifier of the connected object. function NameOfYourFunction(hookType, eventId, userVar) { var ObjectId = MilWeb.MobjGetHookInfo(eventId, MilWeb.M_OBJECT_ID); } Optionally, when you hook a function, you can specify a JavaScript object that will be passed to the hook-handler function when it is called. This object is passed to the hook-handler function through its UserVar parameter. Omit this parameter if not used. Writing a MILweb client application in JavaScript Your JavaScript MILweb client application must use the mil.js library (located by default in C:\\Program Files\\Matrox Imaging\\tools\\milweb). This library provides functions to access MIL objects, hook to updates, present a display in an HTML5 canvas, and send input data to your MILweb server application. The MILweb JavaScript API is closely modeled on the standard MIL API. Differences between MIL and MILweb You should be aware of the following differences between MIL and the MILweb JavaScript API: Client-side MIL identifiers are not valid until MILweb has asynchronously completed the connection to the MILweb server application or MIL object. For more information, see the Accessing MILweb server applications and published MIL objects subsection of this section. Client-side MIL identifiers have the data type number. JavaScript does not have a pass-by-pointer or pass-by-reference mechanism for number and string data types. MILweb functions that return data in a parameter instead write the data to the data property of a JavaScript object that you specify. Typically, this is optional, since most MILweb functions also return their result (MilWeb.MappOpenConnection is a notable exception). For more information, see the Returned values in MILweb subsection of this section. Hook-handler functions must be declared as: function hookHandler(hookType, eventId, UserVar). MilWeb.MdispSelectWindow does not select an image buffer to a display; it presents a display in an existing HTML5 canvas. For a 3D display, only the final rendered image of the display is transmitted to your MILweb client application. 3D displays are therefore functionally equivalent to 2D displays from the perspective of your MILweb client. For this reason, with MILweb you use functions from the MilWeb.Mdisp module to work with both 2D and 3D displays (you still use functions from the M3ddisp...() module to work with 3D displays in your MILweb server application). Returned values in MILweb To maintain similarity with the MIL API, many functions in MILweb can both return their result (such as an inquired value) and/or store it in an object that you specify. However, unlike C and C++, JavaScript does not have a pass-by-pointer or pass-by-reference mechanism for number and string data types (numbers and strings are always passed to functions by value; they cannot be used as \"out\" parameters). Conversely, JavaScript objects are always passed by sharing, which is functionally equivalent to pass-by-reference. Therefore, to mirror MIL, functions in the MILweb API write their result to the data property of the specified JavaScript object. You do not need to declare a data property for the object beforehand; MILweb does this automatically. Any existing properties of the object are removed. For example, the following code creates the JavaScript object variable UserVar, and then uses it to store the result of a MILweb function: var UserVar = {}; MilWeb.MappOpenConnection(\"ws://localhost:7861\", MilWeb.M_DEFAULT, MilWeb.M_DEFAULT, UserVar); var AppId = UserVar.data; After this code is executed, AppId stores the MIL application identifier of the MILweb server application. Note that storing the data in another variable (AppId) is not necessary; however, doing so will typically improve the readability of your program. Accessing MILweb server applications and published MIL objects Before you pass the identifier of a MILweb server application or published MIL object to a MILweb function, you must first establish a connection between your MILweb client application and the server application or MIL object. You do this using MilWeb.MappOpenConnection (for the MILweb server application) and using MilWeb.MappInquireConnection with MILweb.M_WEB_PUBLISHED_NAME (for published MIL objects). You cannot use MilWeb.MappInquireConnection until a connection to a MILweb server application is established. Each published MIL object occupies one WebSocket in the user's web browser. If the web browser limits the number of open WebSockets per connection, this also limits the number of published MIL objects that the MILweb client application can access. Both MilWeb.MappOpenConnection and MilWeb.MappInquireConnection are executed asynchronously. Your program will continue to execute after calling one of these functions, before MILweb has established the connection. To ensure that code is executed after a connection event has finished, you must put that code in a hook-handler function. You can hook to connection events using MilWeb.MappHookFunction or MilWeb.MobjHookFunction with MilWeb.M_CONNECT. This does not apply to the MILweb C/C++ API. For C/C++, these functions are executed synchronously. Therefore, you do not need to hook to connection events, or be aware of connections to individual objects. To hook a function to an application or object connection event, you must pass the client-side MIL identifier of the MILweb server application or object to the appropriate function (MilWeb.MappHookFunction or MilWeb.MobjHookFunction). This identifier is returned when you initiate the connection (for example, using MilWeb.MappOpenConnection). You should hook to the connection event immediately after calling MilWeb.MappOpenConnection to ensure that the hook-handler function is executed when the connection is finally established. For example: var UserVar = {}; var URL = \"ws://192.168.1.58:7861\"; MilWeb.MappOpenConnection(URL, MilWeb.M_DEFAULT, MilWeb.M_DEFAULT, UserVar); var AppId = UserVar.data; MilWeb.MappHookFunction(AppId, MilWeb.M_CONNECT, ConnectHandler); Since MilWeb.MappOpenConnection returns before the connection is established (asynchronously), the ConnectHandler callback function will be executed on the connection event (even though MilWeb.MappHookFunction is called after MilWeb.MappOpenConnection). MilWeb.MappCloseConnection is also executed asynchronously. You can hook to the disconnection event using MilWeb.M_DISCONNECT. Running your JavaScript MILweb client application To test a JavaScript MILweb client application, you must create a simple HTML page and access that page from an HTML5-compatible web browser. Create the application folder (for example, C:\\working\\YourMILwebClientApplication). Copy the MILweb JavaScript library (mil.js) to the application folder. By default, this file is located in C:\\Program Files\\Matrox Imaging\\tools\\milweb. Save the source code for your JavaScript application as a file with the js file extension (for example, MyMILwebClientApplication.js) and copy this file to the application folder. Create an HTML page that loads the mil.js library and your JavaScript application. For example: &lt;script type=\"text/javascript\" src=\"mil.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"MyMILwebClientApplication.js\"&gt;&lt;/script&gt; If you want to present a display in your MILweb client application, also create an HTML5 canvas in your HTML page. For example: &lt;canvas id=\"displaycanvas\" width=\"640\" height=\"480\"&gt; &lt;/canvas&gt; You can present a MIL display in this HTML5 canvas by passing the id attribute of the canvas to MilWeb.MdispSelectWindow. Save this page with the HTML file extension, in the application folder. Open the HTML file with a compatible web browser. Deploying your MILweb client application Once you have finished developing your MILweb client application and embedding it in a web page, typically you will want to make it available for access by one or more remote computers. In most cases, you should use one of the following methods to make the web page available: Host the web page files on a MIL HTTP server. For more information, see the Hosting files on a MIL HTTP server section of Chapter 63: Hosting files on a MIL HTTP server. Host the web page files on an HTTP server using third-party software. Manually copy the web page files to the remote computer (for example, using a network share or USB drive). If your MILweb client application does not work correctly when you access the HTML files directly on the remote computer, use an HTTP server instead. This animation shows the relationship between a web-enabled device, a MIL HTTP server object hosting the MILweb client application, and the MILweb server application. Play speed: Default (x1.0) Quarter (x0.25) Half (x0.5) Double (x2.0) Start position: Current image First image Looping: Continuous play Single iteration 1 of 7 Browser compatibility The MILweb JavaScript library requires a web browser that supports both JavaScript and the HTML5 WebSocket protocol. MILweb client applications have been tested successfully with the desktop versions of the following third-party web browsers: Google Chrome (version 16 and higher). Microsoft Edge (all versions). Microsoft Edge Legacy (all versions). This browser is limited to accessing 5 published MIL objects (such as displays) at a time. Mozilla Firefox (version 11 and higher). Note that, by default, some web browsers have a file URI strict-origin policy. This means that they treat each HTML file on your computer as though it was downloaded from a different source. This is a security feature to mitigate cross-site scripting attacks; however, if you are accessing your MILweb client application files locally (for example, using a path that starts with file:// instead of http://) it can also prevent scripts from loading correctly (especially if your web page uses more than one HTML source file). If your MILweb client application does not work correctly when you access the HTML files directly, use an HTTP server instead (for example, a MIL HTTP server). The MILweb JavaScript library adheres to industry-standard JavaScript development practices, including standards-compliant use of the HTML5 WebSocket protocol. However, third-party web browsers are frequently updated. Matrox can only guarantee compatibility with the versions of these third-party browsers that were current when the most recent MILweb driver update was released. Creating a MILweb client application with JavaScript JavaScript primer for C/C++ MIL developers MIL primer for JavaScript developers Writing a MILweb client application in JavaScript Differences between MIL and MILweb Returned values in MILweb Accessing MILweb server applications and published MIL objects Running your JavaScript MILweb client application Deploying your MILweb client application Browser compatibility ",
      "wordCount": 2654,
      "subEntries": []
    },
    {
      "id": "UG_MILweb_JavaScript_MILWeb_function_reference",
      "version": null,
      "title": "JavaScript MILweb function reference",
      "subTitles": [
        "MilWeb.Mapp",
        "MilWeb.MappCloseConnection",
        "MilWeb.MappControl",
        "MilWeb.MappGetHookInfo",
        "MilWeb.MappHookFunction",
        "MilWeb.MappInquire",
        "MilWeb.MappInquireConnection",
        "MilWeb.MappOpenConnection",
        "MilWeb.Mdisp",
        "MilWeb.MdispControl",
        "MilWeb.MdispGetHookInfo",
        "MilWeb.MdispHookFunction",
        "MilWeb.MdispInquire",
        "MilWeb.MdispMessage",
        "MilWeb.MdispPan",
        "MilWeb.MdispSelectWindow",
        "MilWeb.MdispZoom",
        "MilWeb.Mobj",
        "MilWeb.MobjGetHookInfo",
        "MilWeb.MobjHookFunction",
        "MilWeb.MobjInquire",
        "MilWeb.MobjMessageRead",
        "MilWeb.MobjMessageWrite"
      ],
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\JavaScript_MILWeb_function_reference.htm",
      "text": " JavaScript MILweb function reference The following functions are available for creating a MILweb client with JavaScript. To use these functions, you must load mil.js before loading your MILweb client application. MilWeb.Mapp The functions prefixed with MilWeb.Mapp make up the MILweb Application module. The MILweb Application module allows you to connect to a MILweb server, inquire the client-side MIL identifiers of objects published by a MILweb server, and hook functions to connection and publishing events. MilWeb.MappCloseConnection This function closes a connection to a MILweb server application opened by MilWeb.MappOpenConnection. MilWeb.MappCloseConnection is executed asynchronously; this function returns, and execution of your program continues, before the connection is closed. You can hook to the disconnection event using MilWeb.MappHookFunction with MilWeb.M_DISCONNECT. This function is similar, but not identical, to the MIL function MappCloseConnection(). void MilWeb.MappCloseConnection (number ApplicationId) ApplicationId Specifies the client-side MIL application context identifier of the MILweb server application from which to disconnect. The application identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb.MappOpenConnection. MilWeb.MappControl This function controls a specified application setting of this instance of the MILweb client application, or closes a connection to a MIL object. For some settings, MilWeb.MappControl is executed asynchronously; this function returns, and execution of your program continues, before the operation is complete. Refer to an individual setting to learn if it is asynchronous and, if so, how to hook to the operation completion event. This function is similar, but not identical, to the MIL function MappControl(). void MilWeb.MappControl (number ApplicationId, number ControlType, number ControlValue) ApplicationId This parameter is reserved for future expansion and must be set to MilWeb.M_DEFAULT. ControlType Specifies the type of application setting to control. This parameter can be set to one of the following values: MilWeb.M_CLOSE_CONNECTION Closes the connection to the MIL object, specified by the ControlValue parameter. This operation is completed asynchronously. You can hook to the disconnection event using MilWeb.MobjHookFunction with MilWeb.M_DISCONNECT. Once the connection is closed (asynchronously), you will not be able to access the specified object until you reinquire its client-side MIL identifier using MilWeb.MappInquireConnection with MilWeb.M_OBJECT_ID and a new connection to the object is established (asynchronously). MilWeb.M_ERROR Controls whether to print error messages generated by this instance of the MILweb client application to the developer console of the web browser. Note that this does not print standard MIL error messages (generated by the MILweb server application). In this case, set ControlValue to one of the following values: MilWeb.M_PRINT_DISABLE Specifies not to print MILweb error messages to the developer console of the web browser. If error printing is disabled, you can still check for MILweb errors. To do so, hook a function to application errors using MilWeb.MappHookFunction with MilWeb.M_ERROR. You can retrieve the error code within the hook-handler function, using MilWeb.MappGetHookInfo with MilWeb.M_ERROR. MilWeb.M_PRINT_ENABLE Specifies to print MILweb error messages to the developer console of the web browser. This is the default value. ControlValue Specifies the setting's new value, or the identifier of the MIL object for which to close the connection. MilWeb.MappGetHookInfo This function retrieves information about the event that caused the hook-handler function to be called. This function should only be called within the scope of an application hook-handler function call (see MilWeb.MappHookFunction). The returned value is the requested information. This function is similar, but not identical, to the MIL function MappGetHookInfo(). number MilWeb.MappGetHookInfo (number ApplicationId, number EventId, number InfoType, object UserVar) ApplicationId This parameter is reserved for future expansion and must be set to MilWeb.M_DEFAULT. EventId Specifies the client-side MIL application event identifier that was received by the hook-handler function. InfoType Specifies the type of information to get. This parameter can be set to the following value: MilWeb.M_OBJECT_ID Retrieves the client-side MIL identifier of the MILweb server application or MIL object that generated the event. Note that this client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. In this case, this function returns the client-side MIL identifier as a number. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MappHookFunction This function allows you to attach or detach a user-defined function to a specified application event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. This function is similar, but not identical, to the MIL function MappHookFunction(). void MilWeb.MappHookFunction (number ApplicationId, number HookType, string HookHandler, object UserData) ApplicationId Specifies the client-side MIL identifier of the MILweb server application to which to hook the function. The application identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb.MappOpenConnection. HookType Specifies the event type. This parameter can be set to one of the following values. To detach (unhook) a function that you previously hooked, combine the event type with MilWeb.M_UNHOOK (for example, MilWeb.M_CONNECT + MilWeb.M_UNHOOK). MilWeb.M_CONNECT Specifies to call the hook-handler function when your MILweb client application establishes a connection to the specified MILweb server application (or one of its published MIL objects). You can use MilWeb.MappGetHookInfo with MilWeb.M_OBJECT_ID to learn which application or object connected, and MilWeb.MobjInquire with MilWeb.M_OBJECT_TYPE to learn the type of the application or object. MilWeb.M_DISCONNECT Specifies to call the hook-handler function when your MILweb client application disconnects from the specified MILweb server application (or one of its published MIL objects). You can use MilWeb.MappGetHookInfo with MilWeb.M_OBJECT_ID to learn which application or object disconnected, and MilWeb.MobjInquire with MilWeb.M_OBJECT_TYPE to learn the type of the application or object. MilWeb.M_ERROR Specifies to call the hook-handler function when an error occurs while attempting to connect to the MILweb server application or published MIL object. MilWeb.M_OBJECT_PUBLISH_WEB Specifies to call the hook-handler function when the MILweb server application publishes or unpublishes a MIL object. HookHandler Specifies the name of the JavaScript function that should be called when the event occurs. This function should have the following prototype: function HookHandler(HookType, EventId, UserVar) . For more information about hook-handler functions in JavaScript, see the MIL primer for JavaScript developers subsection of the Creating a MILweb client application with JavaScript section earlier in this chapter. UserData Specifies the JavaScript object containing the user data that you want to make available to the hook-handler function. This object is passed to the hook-handler function, through its UserVar parameter, when the specified event occurs. Omit this parameter if not used. MilWeb.MappInquire This function inquires about a specified application setting of this instance of the MILweb client application, or a connected MILweb server application. The returned value is the requested information. This function is similar, but not identical, to the MIL function MappInquire(). number MilWeb.MappInquire (number ApplicationId, number InquireType, object UserVar) ApplicationId Specifies the client-side MIL identifier of the MILweb server application about which to inquire the application settings. The application identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb.MappOpenConnection. If not used, set this parameter to MilWeb.M_DEFAULT. InquireType Specifies the type of application setting about which to inquire. This parameter can be set to one of the following values: MilWeb.M_ERROR Inquires whether error messages generated by this instance of the MILweb client application are printed to the console of the web browser. In this case, the function returns one of the following values: MilWeb.M_PRINT_DISABLE Specifies that error messages will not be printed to the developer console of the web browser. MilWeb.M_PRINT_ENABLE Specifies that error messages will be printed to the developer console of the web browser. MilWeb.M_WEB_CLIENT_INDEX Inquires the index used by the MILweb server application to identify this instance of the MILweb client application. This index is guaranteed not to change until this instance of the MILweb client application is disconnected. Note that this is not an iterable index; connected instances of your MILweb client are not guaranteed to be assigned sequential indices, and the indices do not shift when a client disconnects. In this case, this function returns the index as a number. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MappInquireConnection This function inquires about the MIL web objects published by a MILweb server application. The returned value is the requested information. For some settings, MilWeb.MappInquireConnection is executed asynchronously; this function returns, and execution of your program continues, before the operation is complete. Refer to an individual setting to learn if it is asynchronous and, if so, how to hook to the operation completion event. This function is similar, but not identical, to the MIL function MappInquireConnection(). number or number[] MilWeb.MappInquireConnection (number ApplicationId, number InquireType, string ControlFlag, number ExtraFlag, object UserVar) ApplicationId Specifies the client-side MIL identifier of the MILweb server application, about which to inquire information related to published objects. The application identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb.MappOpenConnection. InquireType Specifies the type of published object information about which to inquire. This parameter can be set to one of the following values: MilWeb.M_WEB_PUBLISHED_LIST Inquires the list of client-side MIL identifiers associated with all MIL objects that have been published by the MILweb server application. In this case, this function returns an array of client-side MIL identifiers of the published objects as a number[]. Note that these client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other MILweb client applications, use different MIL identifiers to refer to the same objects. MilWeb.M_WEB_PUBLISHED_LIST_SIZE Inquires the current number of MIL objects published by the MILweb server application. In this case, the function returns the number of published objects as a number. MilWeb.M_WEB_PUBLISHED_NAME Inquires the client-side MIL identifier of a published MIL object associated with the name specified by the ControlFlag parameter. This name must have been previously associated with an object in the MILweb server application using MobjControl() with M_OBJECT_NAME. When inquiring the client-side MIL identifier, this function also asynchronously creates a connection to the published object (if this connection had not already been made by a previous call to MilWeb.MappInquireConnection). Execution of your program will continue before this connection process has completed. Therefore, the application identifier returned by this function is not valid at the time it is returned; you must not use it with any MILweb function except MilWeb.MobjHookFunction. To know when the connection is made (or canceled due to an error), you can hook to these events using MilWeb.MobjHookFunction with MilWeb.M_CONNECT and MilWeb.M_ERROR, respectively. After the MilWeb.M_CONNECT event is generated, the client-side MIL identifier is valid and can be used with other MILweb functions. In this case, this function returns the client-side MIL identifier as a number. Note that this client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. ControlFlag Specifies an attribute of the inquire operation to perform. If this parameter is not required for the inquire operation, it must be set to MilWeb.M_DEFAULT. ExtraFlag The Extraflag parameter is reserved for future use and must be set to MilWeb.M_NULL. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MappOpenConnection This function initiates a connection to a local or remote computer running a MILweb server application. It returns the client-side MIL application context identifier of the MILweb server application, and optionally writes it in the data property of the object that you passed to UserVar. Note that this client-side MIL identifier should only be used within the instance of the MILweb client application that called this function. The MILweb server application, and other MILweb client applications, use a different MIL identifier to refer to the same application context. The connection is created asynchronously, meaning that your program will continue to execute before the connection is established. Therefore, the application identifier returned by this function is not valid at the time it is returned; you must not use it with any MILweb function except MilWeb.MappHookFunction. To know when the connection is made or canceled due to an error, you can hook to these events using MilWeb.MappHookFunction with MilWeb.M_CONNECT and MilWeb.M_ERROR, respectively. After the MilWeb.M_CONNECT event is generated, the MIL identifier is valid and can be used with other MILweb functions. Note that MilWeb.MappHookFunction requires that you pass the application identifier written to the UserVar parameter by this function. Therefore, you cannot hook to the connection event until after you have called MilWeb.MappOpenConnection (unless you hook to all application connection events by setting the ApplicationId parameter of MilWeb.MappHookFunction to MilWeb.M_DEFAULT). You should typically call MilWeb.MappHookFunction immediately after MilWeb.MappOpenConnection to ensure that the connection or error event is caught. You can close the connection to the MILweb server application using MilWeb.MappCloseConnection in the MILweb client application. This function is similar, but not identical, to the MIL function MappOpenConnection(). void MilWeb.MappOpenConnection (string URL, number InitFlag, number ControlFlag, object UserVar) URL Specifies the computer to which to connect, and if necessary, the listening port of the MILweb server application. You must specify the prefix \"ws://\", followed by the Hostname or IP address of the computer, optionally followed by the listening port number. For example, \"ws://localhost:7861\" or \"ws://192.168.1.51:7861\". You can always use the Hostname localhost to connect to a MILweb server application running on the same computer as the instance of the MILweb client application. In your MIL application, you can set the listening port using MappControl() with M_WEB_CONNECTION_PORT. The default port is 7861. You might find it useful to create a MILweb client application that allows the user to enter the IP address or Hostname dynamically before connecting (for example, using a dialog box). InitFlag This parameter is reserved for future expansion and must be set to MilWeb.M_DEFAULT. ControlFlag This parameter is reserved for future expansion and must be set to MilWeb.M_DEFAULT. UserVar Specifies the JavaScript object in which to write the MILweb server application identifier. The information is written to the data property of the object. MilWeb.Mdisp The functions prefixed with MilWeb.Mdisp make up the MILweb Display module. The MILweb Display module allows you to show a published 2D or 3D display in an HTML5 canvas, enable interactive manipulation of a published display, and hook functions to display events (such as user interaction). Unlike MIL, MILweb uses the same module for both 2D and 3D displays. For a 3D display, only the final rendered image of the display is transmitted to your MILweb client application; 3D displays are therefore functionally equivalent to 2D displays from the perspective of a MILweb client. All functions and settings in this module are supported for both 2D and 3D displays, except where otherwise noted. MilWeb.MdispControl This function controls a specified display setting. This function is similar, but not identical, to the MIL function MdispControl(). void MilWeb.MdispControl (number DisplayId, number ControlType, number ControlValue) DisplayId Specifies the client-side MIL identifier of the display. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. ControlType Specifies the type of display setting to control. This parameter can be set to one of the values below: MilWeb.M_INTERACTIVE Sets whether the user can interact with the display. To learn the default keyboard controls, see M_KEYBOARD_USE. In this case, set ControlValue to one of the following values: MilWeb.M_DISABLE Specifies that the user cannot interact with the display. Note that this instance of your MILweb client application will still generate mouse and keyboard events for the purposes of hooked functions. However, the events are not sent to the MILweb server application or other instances of your MILweb client application. This is the default value. MilWeb.M_ENABLE Specifies that the user can interact with the display, using a keyboard and mouse. Only one connected instance at a time of the MILweb client application can enable this feature for the specified display. If another instance of the MILweb client application has this feature enabled for the specified display, this function has no effect. MilWeb.M_UPDATE_WEB Sets whether the MILweb server application should send updated images of this display to this instance of the MILweb client application. To control updating of the display for all instances of the MILweb client application, use MdispControl() with M_UPDATE in the MILweb server application. In this case, set ControlValue to one of the following values: MilWeb.M_DISABLE Specifies not to send updated images of the display. MilWeb.M_ENABLE Specifies to send updated images of the display. Also, the display is forced to update immediately. This is the default value. MilWeb.M_NOW Forces an immediate update of the display. In this case, the display is updated even if MilWeb.M_UPDATE_WEB is set to MilWeb.M_DISABLE. ControlValue Specifies the setting's new value. MilWeb.MdispGetHookInfo This function retrieves information about the event that caused the hook-handler function to be called. This function should only be called within the scope of a display hook-handler function call (see MilWeb.MdispHookFunction). The returned value is the requested information. This function is similar, but not identical, to the MIL function MdispGetHookInfo(). number MilWeb.MdispGetHookInfo (number EventId number InfoType, object UserVar) EventId Specifies the display event identifier that was received by the hook-handler function. InfoType Specifies the type of information to get. This parameter can be set to one of the following values: MilWeb.M_DISPLAY Retrieves the client-side MIL identifier of the display that generated the event. In this case, this function returns the client-side MIL identifier as a number. Note that this client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. MilWeb.M_MOUSE_POSITION_X Retrieves the X-position of the cursor, in display coordinates (which might not be the same as canvas coordinates). This setting is only available if the function was called due to a MilWeb.M_MOUSE_MOVE event. In this case, this function returns the X-position of the cursor as a number. MilWeb.M_MOUSE_POSITION_Y Retrieves the Y-position of the cursor, in display coordinates (which might not be the same as canvas coordinates). This setting is only available if the function was called due to a MilWeb.M_MOUSE_MOVE event. In this case, this function returns the Y-position of the cursor as a number. MilWeb.M_MOUSE_WHEEL_VALUE Retrieves the value for the mouse wheel's rotation. This setting is only available if the function was called due to a MilWeb.M_MOUSE_WHEEL event. In this case, this function returns the mouse wheel's rotation as a number. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MdispHookFunction This function allows you to attach a user-defined function to a specified display event. The hook-handler function is only called if a display event is generated in this instance of your MILweb client application. If a display event is generated in another instance, or in the MILweb server application, the hook-handler function is not called. For more information, see the Hooking to display events subsection of the Fundamentals for creating your MILweb client application section earlier in this chapter. This function is similar, but not identical, to the MIL function MdispHookFunction(). void MilWeb.MdispHookFunction (number DisplayId, number HookType, string HookHandler, object UserVar) DisplayId Specifies the client-side MIL identifier of the display. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. HookType Specifies the display-related event on which to hook the function. This parameter can be set to one of the following values: To detach (unhook) a function that you previously hooked, combine the event type with MilWeb.M_UNHOOK (for example, MilWeb.M_KEY_DOWN + MilWeb.M_UNHOOK). MilWeb.M_KEY_DOWN Specifies to call the hook-handler function each time the user presses a keyboard key, while the mouse cursor is in the display. MilWeb.M_KEY_UP Specifies to call the hook-handler function each time the user releases a keyboard key, while the mouse cursor is in the display. MilWeb.M_MOUSE_LEFT_BUTTON_DOWN Specifies to call the hook-handler function each time the user presses the left mouse button, while the mouse cursor is in the display. MilWeb.M_MOUSE_LEFT_BUTTON_UP Specifies to call the hook-handler function each time the user releases the left mouse button, while the mouse cursor is in the display. MilWeb.M_MOUSE_MIDDLE_BUTTON_DOWN Specifies to call the hook-handler function each time the user presses the middle mouse button, while the mouse cursor is in the display. MilWeb.M_MOUSE_MIDDLE_BUTTON_UP Specifies to call the hook-handler function each time the user releases the middle mouse button, while the mouse cursor is in the display. MilWeb.M_MOUSE_RIGHT_BUTTON_DOWN Specifies to call the hook-handler function each time the user presses the right mouse button, while the mouse cursor is in the display. MilWeb.M_MOUSE_RIGHT_BUTTON_UP Specifies to call the hook-handler function each time the user releases the right mouse button, while the mouse cursor is in the display. MilWeb.M_MOUSE_MOVE Specifies to call the hook-handler function each time the mouse cursor moves, while in the display. MilWeb.M_MOUSE_WHEEL Specifies to call the hook-handler function each time the user moves the mouse wheel, while the mouse cursor is in the display. MilWeb.M_UPDATE_INTERACTIVE_STATE Specifies to call the hook-handler function each time any MILweb client application enables or disables interactive control of the display (using MilWeb.MdispControl with MilWeb.M_INTERACTIVE). MilWeb.M_UPDATE_WEB Specifies to call the hook-handler function each time the contents of the display is changed. HookHandler Specifies the name of the JavaScript function that should be called when the event occurs. This function should have the following prototype: function HookHandler(HookType, EventId, UserVar) . For more information about hook-handler functions in JavaScript, see the MIL primer for JavaScript developers subsection of the Creating a MILweb client application with JavaScript section earlier in this chapter. UserVar Specifies the JavaScript object containing the user data that you want to make available to the hook-handler function. This object is passed to the hook-handler function, through its UserVar parameter, when the specified event occurs. Set this parameter to MilWeb.M_NULL if not used. MilWeb.MdispInquire This function inquires about a specified display setting. The returned value is the requested information. This function is similar, but not identical, to the MIL function MdispInquire(). number MilWeb.MdispInquire (number DisplayId, number InquireType, object UserVar) DisplayId Specifies the client-side MIL identifier of the display. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. InquireType Specifies the type of display setting about which to inquire. This parameter can be set to one of the following values: MilWeb.M_IMAGE_HOST_ADDRESS Inquires the pixel color values of the last bitmap image of the display transmitted by the MILweb server application. This information is returned as an array of type number, whereby the different color components of the pixel are stored in separate entries. For a 3D display, this bitmap image is the rendered output of the display. This is functionally equivalent to receiving the output of a 2D display; you can present both 2D and 3D displays using the same methods, including automatically using MilWeb.MdispSelectWindow. This setting does not return an address. It is named MilWeb.M_IMAGE_HOST_ADDRESS for consistency with the MILweb C/C++ API. The pixel values are always returned in the RGBA packed format. The first 4 values store the color components of the first pixel (0,0) (starting with the R value), the next 4 values store the color components of the second pixel (1,0) and so on. You do not need to consider pitch when using this data. Typically, you should hook a function to the display update event using MilWeb.MdispHookFunction with MilWeb.M_UPDATE_WEB, so that you can inquire new image data when the contents of the display changes. In this case, this function returns the array of pixel values as a number[]. MilWeb.M_INTERACTIVE Inquires whether the user can interact with the display. This inquiry only returns information about this instance of your MILweb client application. If another instance of your MILweb client application is interactively controlling the specified display, this function returns MilWeb.M_DISABLE. In this case, the function returns one of the following number values: M_DISABLE Specifies that the local user cannot interact with the display. This is the default value. M_ENABLE Specifies that the local user can interact with the display, using a keyboard and mouse. MilWeb.M_SIZE_X Inquires the width of the displayed image, in pixels. Note that this is unrelated to the size of the HTML5 canvas in which the display is presented. In this case, the function returns the width as a number. MilWeb.M_SIZE_Y Inquires the height of the displayed image, in pixels. Note that this is unrelated to the size of the HTML5 canvas in which the display is presented. In this case, the function returns the height as a number. MilWeb.M_UPDATE_WEB Inquires whether the MILweb server application should send updated images of the display to this instance of the MILweb client application. In this case, the function returns one of the following values: MilWeb.M_DISABLE Specifies not to send updated images of the display. MilWeb.M_ENABLE Specifies to send updated images of the display. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MdispMessage This function generates a mouse or keyboard event for the specified display. This manipulates the display if interactive control is enabled (using MilWeb.MdispControl with MilWeb.M_INTERACTIVE), and generates an event for the purposes of hooked functions. This allows you to simulate keyboard and mouse input. Note that if interactive control is not enabled, the event is only generated for this instance of your MILweb client application (not for the MILweb server application). The event is never generated for other instances of your MILweb client application. This function is not similar to any MIL function. void MilWeb.MdispMessage (number DisplayId, number EventType, number MousePositionX, number MousePositionY, number EventValue, number CombinationKeys, number UserVar) DisplayId Specifies the client-side MIL identifier of the display for which to generate the event. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. EventType Specifies the type of event to generate. This parameter can be set to one of the following number values: MilWeb.M_KEY_DOWN Specifies to generate an event as though a key was pressed. In this case, set EventValue to the JavaScript standard keycode of the key to simulate being pressed. MilWeb.M_KEY_UP Specifies to generate an event as though a key was released. In this case, set EventValue to the JavaScript standard keycode of the key to simulate being released. MilWeb.M_MOUSE_LEFT_BUTTON_DOWN Specifies to generate an event as though the left mouse button was pressed. In this case, set EventValue to MilWeb.M_NULL. MilWeb.M_MOUSE_LEFT_BUTTON_UP Specifies to generate an event as though the left mouse button was released. In this case, set EventValue to MilWeb.M_NULL. MilWeb.M_MOUSE_MIDDLE_BUTTON_DOWN Specifies to generate an event as though the middle mouse button was pressed. In this case, set EventValue to MilWeb.M_NULL. MilWeb.M_MOUSE_MIDDLE_BUTTON_UP Specifies to generate an event as though the middle mouse button was released. In this case, set EventValue to MilWeb.M_NULL. MilWeb.M_MOUSE_MOVE Specifies to generate an event as though the mouse was moved. In this case, set MousePositionX and MousePositionY to the X and Y positions (in display coordinates) to which to simulate moving the mouse. MilWeb.M_MOUSE_RIGHT_BUTTON_DOWN Specifies to generate an event as though the right mouse button was pressed. In this case, set EventValue to MilWeb.M_NULL. MilWeb.M_MOUSE_RIGHT_BUTTON_UP Specifies to generate an event as though the right mouse button was released. In this case, set EventValue to MilWeb.M_NULL. MilWeb.M_MOUSE_WHEEL Specifies to generate an event as though the mouse wheel was moved. In this case, set EventValue to the simulated value for the wheel's rotation. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotate backward, toward the user. EventValue Specifies additional information related to the event specified by the EventType parameter. If not used, set this parameter to MilWeb.M_NULL. MousePositionX Specifies the simulated position of the mouse cursor along the X-axis in display coordinates. If not used, set this value to MilWeb.M_DEFAULT. MousePositionY Specifies the simulated position of the mouse cursor along the Y-axis in display coordinates. If not used, set this value to MilWeb.M_DEFAULT. CombinationKeys Specifies which combination keys to simulate holding. This parameter can be set to MilWeb.M_NULL (which specifies no combination keys), or any combination of the following number values: MilWeb.M_KEY_ALT Specifies the Alt key. MilWeb.M_KEY_CTRL Specifies the CTRL key. MilWeb.M_KEY_SHIFT Specifies the Shift key. MilWeb.M_KEY_WIN Specifies the Windows key. UserVar Reserved for future expansion and must be set to MilWeb.M_NULL. MilWeb.MdispPan This function associates X- and Y-panning offsets with the specified display. The selected image buffer is displaced on the display, from the top-left corner of the HTML5 canvas. This pans the display for all instances of your MILweb client application. If you need to pan the image separately for each instance of your MILweb client application, you must allocate and publish a separate display for each instance and select the image to each display. This function is not supported for 3D displays. This function causes the MILweb server application to call the MIL function MdispPan(). void MilWeb.MdispPan (number DisplayId, number XOffset, number YOffset) DisplayId Specifies the client-side MIL identifier of the 2D display. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. XOffset Specifies the number of image pixels by which to pan an image buffer horizontally when it is displayed. Specify a positive offset value to displace the image to the left. This value can be a decimal fraction. YOffset Specifies the number of image pixels by which to pan an image buffer vertically when it is displayed. Specify a positive offset value to displace the image upwards. This value can be a decimal fraction. MilWeb.MdispSelectWindow Presents the display in a user-defined HTML5 canvas element. Unlike MdispSelectWindow() or M3ddispSelectWindow(), this function does not select a buffer or container to a display. To do so, instead use MdispSelect() (for a 2D display) or M3ddispSelect() (for a 3D display) in your MILweb server application. void MilWeb.MdispSelectWindow (number DisplayId, string CanvasElement) DisplayId Specifies the client-side MIL identifier of the display. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. CanvasElement Specifies the id attribute of the user-defined HTML5 canvas element in which to present the display. You manually set the id attribute when you create an HTML5 canvas element in the HTML file for your webpage. For example, you might include the following in the HTML file: &lt;canvas id=\"PlaceToShowAMILDisplay\" width=\"1600\" height=\"900\"&gt;&lt;/canvas&gt; Note that the width and height of the displayed image is always the same as the width and height of the selected image buffer (or of the 3D display), regardless of the size of the HTML5 canvas. For more information, see the Size of a MILweb display subsection of the Fundamentals for creating your MILweb client application section earlier in this chapter. MilWeb.MdispZoom This function associates a zoom factor in X and/or in Y with the specified display. This zooms the display for all instances of your MILweb client application. If you need to zoom the image separately for each instance of your MILweb client application, you must allocate and publish a separate display for each instance and select the image to each display. This function is not supported for 3D displays. This function causes the MILweb server application to call the MIL function MdispZoom(). void MilWeb.MdispZoom (number DisplayId, number XFactor, number YFactor) DisplayId Specifies the client-side MIL identifier of the 2D display. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with M_WEB_PUBLISHED_NAME. XFactor Specifies the zoom factor for the X-direction of the display. This value must be larger than 0. A value greater than 1.0 will zoom in, while a value less than 1.0 will zoom out. YFactor Specifies the zoom factor for the Y-direction of the display. This value must be larger than 0. This value must be larger than 0. A value greater than 1.0 will zoom in, while a value less than 1.0 will zoom out. MilWeb.Mobj The functions prefixed with MilWeb.Mobj make up the MILweb Object module. The MILweb Object module allows you to read and write messages in MIL message mailboxes, inquire the types of published objects, and hook functions to the update and connection events of published objects. MilWeb.MobjGetHookInfo This function retrieves information about the event that caused the hook-handler function to be called. This function should only be called within the scope of an object hook-handler function call (see MilWeb.MobjHookFunction). The returned value is the requested information. This function is similar, but not identical, to the MIL function MobjGetHookInfo(). number MilWeb.MobjGetHookInfo (number EventId, number InfoType, object UserVar) EventId Specifies the client-side MIL object event identifier that was received by the hook-handler function. InfoType Specifies the type of information about which to inquire. This parameter can be set to the following value: MilWeb.M_OBJECT_ID Retrieves the client-side MIL identifier of the object that generated the event. In this case, this function returns the client-side MIL identifier as a number. Note that this client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MobjHookFunction This function allows you to attach a user-defined function to a specified object-related event. This function is similar, but not identical, to the MIL function MobjHookFunction(). void MilWeb.MobjHookFunction (number ObjectId, number HookType, string HookHandler, object UserVar) ObjectId Specifies the client-side MIL identifier of the object to which to hook the function. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME. HookType Specifies the object-related event to which to hook the function. This parameter can be set to one of the following number values: To detach (unhook) a function that you previously hooked, combine the event type with MilWeb.M_UNHOOK (for example, MilWeb.M_CONNECT + MilWeb.M_UNHOOK). MilWeb.M_CONNECT Specifies to call the hook-handler function when the connection to the MILweb object is established. MilWeb.M_DISCONNECT Specifies to call the hook-handler function when the connection to the MILweb object is closed (either using MilWeb.MappCloseConnection, or MilWeb.MappControl with MilWeb.M_CLOSE_CONNECTION, or because of a network error). MilWeb.M_UPDATE_WEB Specifies to call the hook-handler function each time the contents of the object changes. HookHandler Specifies the name of the JavaScript function that should be called when the event occurs. This function should have the following prototype: function HookHandler(HookType, EventId, UserVar) . For more information about hook-handler functions in JavaScript, see the MIL primer for JavaScript developers subsection of the Creating a MILweb client application with JavaScript section earlier in this chapter. UserVar Specifies the JavaScript object containing the user data that you want to make available to the hook-handler function. This object is passed to the hook-handler function, through its UserVar parameter, when the specified event occurs. Omit this parameter if not used. MilWeb.MobjInquire This function inquires about general MIL object settings in a publishing application. The returned value is the requested information. This function is similar, but not identical, to the MIL function MobjInquire(). number or string MilWeb.MobjInquire (number ObjectId, number InquireType, object UserVar) ObjectId Specifies the client-side MIL identifier of the object. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME. InquireType Specifies the type of object setting about which to inquire. This parameter can be set to one of the values below. MilWeb.M_OBJECT_NAME Inquires the MIL object's user-defined name (set in the MILweb server application, using MobjControl() with M_OBJECT_NAME). In this case, the function returns a string containing the name. MilWeb.M_OBJECT_TYPE Inquires the type of the specified MIL object. In this case, the function returns one of the following number values: MilWeb.M_APPLICATION Specifies a MILweb server application. MilWeb.M_DISPLAY Specifies a MIL display (allocated using MdispAlloc() in the MILweb server application). MilWeb.M_MESSAGE_MAILBOX Specifies a MIL message mailbox (allocated using MobjAlloc() with M_MESSAGE_MAILBOX in the MILweb server application). MilWeb.M_WEB_PUBLISH Inquires what type of access to the object your MILweb client application has (set in the MILweb server application, using MobjControl() with M_WEB_PUBLISH). In this case, the function returns one of the following number values: MilWeb.M_READ_ONLY Specifies that the object can only be read from by the MILweb client application. MilWeb.M_READ_WRITE Specifies that the object can be read from and written to by the MILweb client application. UserVar Specifies the JavaScript object in which to write the requested information. The information is written to the data property of the object. Since this function also returns the requested information, you can set this parameter to MilWeb.M_NULL. MilWeb.MobjMessageRead This function reads data from a message sent to a message mailbox (previously published by a MILweb server application). The returned value is the size of the message (the same value written in the data property of the object you pass to MessageOutSize). This function is similar, but not identical, to the MIL function MobjMessageRead(). number MilWeb.MobjMessageRead (number MessageId, object MessageVar, number MessageInSize, object MessageOutSize, object MessageTag, object MessageStatus, number OperationFlag) MessageId Specifies the client-side MIL identifier of the message mailbox. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME. MessageVar Specifies the JavaScript object in which to write the contents of the message. If the read operation is successful, MessageVar.Data is set to the contents of the message (as an array of type number). Otherwise, it is set to MilWeb.M_NULL. MessageInSize This parameter is reserved for future expansion and must be set to MilWeb.M_NULL. MessageOutSize Specifies the JavaScript object in which to write the length of the message. If the read operation is successful, MessageOutSize.data is set to the length of the message (as a number). Otherwise, it is set to MilWeb.M_NULL. If unused, set this parameter to MilWeb.M_NULL. MessageTag Optionally specifies the JavaScript object in which to write the user-defined tag sent with the message. If the read operation is successful MessageTag.Data is set to the message tag (as a number). Otherwise, it is set to MilWeb.M_NULL. If unused, set this parameter to MilWeb.M_NULL. MessageStatus Specifies the JavaScript object in which to write the status of the read operation. MessageTag.Data is set to the one of the following number values: MilWeb.M_NULL Specifies that the read operation was not successful. The returned message has a length of 0. MilWeb.M_SUCCESS Specifies that the read operation is successful. The message is copied to MessageVar.Data. OperationFlag Reserved for future expansion and must be set to MilWeb.M_NULL. MilWeb.MobjMessageWrite This function writes a message to a message mailbox (previously published by a MILweb server application). This function is similar, but not identical, to the MIL function MobjMessageWrite(). void MilWeb.MobjMessageWrite (number MessageId, string or number[] MessageData, number MessageLength, number MessageTag, number OperationFlag) MessageId Specifies the client-side MIL identifier of the message mailbox. This identifier must have been previously inquired, typically using MilWeb.MappInquireConnection with MilWeb.M_WEB_PUBLISHED_NAME. MessageData Specifies the message to send. You must set this parameter to a string, or an array of whole numbers. If you set this parameter to a string, it is sent using UTF-8 encoding. MessageLength Specifies the length of the message to send, in number of characters or array elements. If the message specified by the MessageData parameter is longer than this length, the message is truncated. If the message is shorter than this length, the entire message is sent. To send the entire message, you can also set this parameter to MilWeb.M_DEFAULT. MessageTag Specifies a user-defined tag to send with the message. You must set this parameter to a whole number. OperationFlag This parameter is reserved for future expansion and must be set to MilWeb.M_DEFAULT. JavaScript MILweb function reference MilWeb.Mapp MilWeb.MappCloseConnection MilWeb.MappControl MilWeb.MappGetHookInfo MilWeb.MappHookFunction MilWeb.MappInquire MilWeb.MappInquireConnection MilWeb.MappOpenConnection MilWeb.Mdisp MilWeb.MdispControl MilWeb.MdispGetHookInfo MilWeb.MdispHookFunction MilWeb.MdispInquire MilWeb.MdispMessage MilWeb.MdispPan MilWeb.MdispSelectWindow MilWeb.MdispZoom MilWeb.Mobj MilWeb.MobjGetHookInfo MilWeb.MobjHookFunction MilWeb.MobjInquire MilWeb.MobjMessageRead MilWeb.MobjMessageWrite ",
      "wordCount": 6715,
      "subEntries": []
    },
    {
      "id": "UG_MILweb_Creating_a_MILweb_client_with_C",
      "version": null,
      "title": "Creating a MILweb client application with C/C++",
      "subTitles": [
        "Writing a MILweb client application in C/C++",
        "Presenting and interacting with MIL displays",
        "Presenting a display",
        "Making a presented display interactive"
      ],
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\Creating_a_MILweb_client_with_C.htm",
      "text": " Creating a MILweb client application with C/C++ The MILweb C/C++ API is suitable for writing a standalone MILweb client application executable. Unlike a MIL application, a MILweb client application can run on a Windows or Linux computer without MIL installed; it only requires the MILweb client application and MILweb library (DLL or DSO) file to be installed. Typically, you should write your MILweb client application using JavaScript, unless C/C++ is specifically required (for example, if you are integrating MILweb client functionality into an existing C/C++ application). A MILweb client application written in JavaScript can be run in a web browser on a wide variety of platforms, without the need to install any files on the user's computer. This section only discusses information specific to the MILweb C/C++ API. For general information about creating a MILweb client application, see the Fundamentals for creating your MILweb client application section earlier in this chapter. For details about the C/C++ versions of specific MILweb functions, see the C/C++ MILweb function reference section later in this chapter. Writing a MILweb client application in C/C++ The C/C++ web client application uses milwebclient.dll (under Windows) or milwebclient.so (under Linux). These libraries provide functions to access objects, hook on updates, and send input data to the server. To access these libraries, you must include milweb.h in your project. When deploying a C/C++ MILweb client application, milwebclient.dll or milwebclient.so must be added as a dependency and installed on the user's computer. Note that no MIL dependency is required. C/C++ MILweb client applications are only supported on Windows and Linux platforms. The Windows version of MIL only includes milwebclient.dll. The Linux version of MIL only includes milwebclient.so. Presenting and interacting with MIL displays The output of a MIL 2D or 3D display is transmitted from your MILweb server application to your MILweb client application as a bitmap image, after all transformations (such as zooming) and annotations are applied. You must manually present the transmitted image in the client window of your application using your chosen GUI toolkit. To enable interactive control of the display, you must also manually capture user input and send it to the display using MilWeb::MdispMessage. This only applies to C/C++. For JavaScript, presenting and interacting with a display are handled automatically. For a 3D display, only the final rendered image of the display is transmitted to your MILweb client application. 3D displays are therefore functionally equivalent to 2D displays from the perspective of your MILweb client. For this reason, with MILweb you use functions from the MilWeb::Mdisp module to work with both 2D and 3D displays (you still use functions from the M3ddisp...() module to work with 3D displays in your MILweb server application). Presenting a display The exact steps to present a MILweb display in a client window depend upon the GUI toolkit that you are using in your MILweb client application. Specific C++ MIL examples are provided for Windows GDI (win32), Qt, and GTK. Regardless of the GUI toolkit that you use to present the display in a client window, your MILweb client application will need to inquire the Host address, width, height, and pixel pitch of the transmitted image using MilWeb::MdispInquire. Typically, you should also hook a function to display updates using MilWeb::MobjHookFunction with M_UPDATE_WEB. You can then update the presented image within the hook-handler function whenever the content of the display is changed in the MILweb server application (including if that change was initiated by a MILweb client application (for example, using MilWeb::MdispZoom)). Some GUI toolkits (such as Windows GDI and Qt) do not support the default RGBA32 color format of the transmitted image. You can specify that the client-side computer should automatically convert the transmitted image to the BGRA32 color format using MilWeb::MdispControl with M_WEB_PUBLISHED_FORMAT and M_BGR_32. Note that, once enabled, you cannot disable this automatic conversion using MilWeb::MdispControl. To disable conversion, you must disconnect from the MILweb server application and reconnect. When you do this, the display is also assigned a new client-side MIL identifier. Making a presented display interactive To allow users of your MILweb client application to interactively control a display, you must manually pass their mouse and keyboard interactions to the display using MilWeb::MdispMessage (in addition to making the display interactive using MilWeb::MdispControl with M_INTERACTIVE). For example, if the user clicks the mouse button within the display, you can use MilWeb::MdispMessage with M_MOUSE_LEFT_BUTTON_DOWN to forward the interaction to the display. In general, if you are using the Microsoft Win32 API, you can map Win32 mouse and keyboard input messages directly to settings for MilWeb::MdispMessage. For example, the following code snippet demonstrates a standard window processing callback function. Whenever the user moves the cursor within the window's client area, the callback function receives the WM_MOUSEMOVE notification and sends the updated cursor position to the display. /* Forward user mouse input to a display using MILweb */ LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) { switch(message) { case WM_MOUSEMOVE: MilWeb::MdispMessage(displayIdentifier, M_MOUSE_MOVE, LOWORD(lParam), HIWORD(lParam), M_NULL, M_DEFAULT); break; } return 0; } For each input event that you want to forward to the display, you can include a separate case. If you are forwarding many types of events, you might find it useful to store a mapping between the Win32 and MIL constants, instead of writing a separate call to MilWeb::MdispMessage for each case. The MilWeb::MdispMessage CombinationKeys parameter does not support the same set of keys that are provided as combination keys with some Win32 input messages. Creating a MILweb client application with C/C++ Writing a MILweb client application in C/C++ Presenting and interacting with MIL displays Presenting a display Making a presented display interactive ",
      "wordCount": 939,
      "subEntries": []
    },
    {
      "id": "UG_MILweb_C_MILWeb_function_reference",
      "version": null,
      "title": "C/C++ MILweb function reference",
      "subTitles": [
        "MilWeb::Mapp",
        "MilWeb::MappCloseConnection",
        "MilWeb::MappControl",
        "MilWeb::MappGetHookInfo",
        "MilWeb::MappHookFunction",
        "MilWeb::MappInquire",
        "MilWeb::MappInquireConnection",
        "MilWeb::MappOpenConnection",
        "MilWeb::Mdisp",
        "MilWeb::MdispControl",
        "MilWeb::MdispGetHookInfo",
        "MilWeb::MdispHookFunction",
        "MilWeb::MdispInquire",
        "MilWeb::MdispMessage",
        "MilWeb::MdispPan",
        "MilWeb::MdispZoom",
        "MilWeb::Mobj",
        "MilWeb::MobjGetHookInfo",
        "MilWeb::MobjHookFunction",
        "MilWeb::MobjInquire",
        "MilWeb::MobjMessageRead",
        "MilWeb::MobjMessageWrite"
      ],
      "location": "MIL UG P10: Other programming languages, APIs, and operating systems",
      "pageURL": "content\\UserGuide\\MILweb\\C_MILWeb_function_reference.htm",
      "text": " C/C++ MILweb function reference The following functions are available for creating a MILweb client using C/C++. To use these functions, you must include milweb.h and link to milwebclient.dll (under Windows) or milwebclient.so (under Linux). The C++ function names (including the MilWeb namespace) are used. For C, replace the namespace with the prefix MilWeb. For example, instead of MilWeb::MappCloseConnection, use MilWebMappCloseConnection. Unlike JavaScript, MIL constants have no prefix in C nor namespace in C++. MilWeb::Mapp The functions prefixed with MilWeb::Mapp make up the MILweb Application module. The MILweb Application module allows you to connect to a MILweb server, inquire the MIL identifiers of objects published by a MILweb server, and hook functions to connection and publishing events. MilWeb::MappCloseConnection This function closes a connection to a MILweb server application opened by MilWeb::MappOpenConnection. This function is similar, but not identical, to the MIL function MappCloseConnection(). void MilWeb::MappCloseConnection (MIL_ID ContextAppId) ContextAppId Specifies the client-side MIL application context identifier of the MILweb server application from which to disconnect. The application context identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb::MappOpenConnection. MilWeb::MappControl This function controls the settings of your MILweb client application environment. This function is similar, but not identical, to the MIL function MappControl(). void MilWeb::MappControl (MIL_ID ContextAppId, MIL_INT64 ControlType, MIL_INT ControlValue) ContextAppId This parameter is reserved for future expansion and must be set to M_DEFAULT. ControlType Specifies the type of application setting about which to inquire. This parameter can be set to one of the following values: M_ERROR Sets whether the printing of error messages to screen is enabled. In this case, set ControlValue to one of the following values: M_PRINT_DISABLE Specifies not to print error messages. If error printing is disabled, you can still check for errors. To do so, hook a function to application errors using MilWeb::MappHookFunction with M_ERROR. You can retrieve the error code within the hook-handler function, using MilWeb::MappGetHookInfo with M_ERROR. M_PRINT_ENABLE Specifies to print error messages. This is the default value. ControlValue Specifies the setting's new value. MilWeb::MappGetHookInfo This function retrieves information about the event that caused the hook-handler function to be called. This function should only be called within the scope of an application hook-handler function call (see MilWeb::MappHookFunction). The returned value is the requested information. This function is similar, but not identical, to the MIL function MappGetHookInfo(). MIL_INT MilWeb::MappGetHookInfo (MIL_ID ContextAppId, MIL_ID EventId, MIL_INT64 InfoType, void * UserVarPtr) ContextAppId This parameter is reserved for future expansion and must be set to M_DEFAULT. EventId Specifies the application event identifier received by the hook-handler function InfoType Specifies the type of information to get. This parameter can be set to one of the following values: M_CURRENT Retrieves the error code returned by the last MILweb function call (if the hook-handler function was called due to an M_ERROR event type). The current-error code is reset to M_NULL_ERROR before each MILweb function call and is set to a specific error code if an error occurs while trying to execute the function. This only retrieves error codes for your MILweb client application; it does not retrieve error codes for the MILweb server. In this case, UserVarPtr returns the error code; the recommended casting type for the data is MIL_INT. You can combine this value with M_MESSAGE. M_CURRENT_SUB_1 Retrieves the first error subcode returned by the last MILweb function call (if the hook-handler function was called due to an M_ERROR event type). Note that when there is no error, the error subcode is set to M_NULL_ERROR. This only retrieves error subcodes for your MILweb client application; it does not retrieve error codes for the MILweb server. In this case, UserVarPtr returns the error subcode; the recommended casting type for the data is MIL_INT. You can combine this value with M_MESSAGE. M_CURRENT_SUB_NB Retrieves the number of error subcodes associated with the last MILweb function called, when it returns an error (if the hook-handler function was called due to an M_ERROR event type). In this case, UserVarPtr returns the number of error subcodes; the recommended casting type for the data is MIL_INT. M_OBJECT_ID Retrieves the client-side MIL identifier of the MILweb server application or MIL object that generated the event. Note that this MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. In this case, UserVarPtr returns the client-side MIL identifier of the MILweb server application; the recommended casting type for the data is MIL_ID. M_WEB_CLIENT_INDEX Retrieves the index of this instance of the MILweb client application, from the perspective of the MILweb server application that generated the event. This index is guaranteed not to change until this instance of the MILweb client application is disconnected. Note that this is not an iterable index; connected instances of your MILweb client are not guaranteed to be assigned sequential indices, and the indices do not shift when a client disconnects. If this instance of the MILweb client is connected to multiple MILweb servers, each MILweb server assigns a different index to this instance of the MILweb client. In this case, UserVarPtr returns the index of this instance of the MILweb client; the recommended casting type for the data is MIL_INT. You can combine M_CURRENT and M_CURRENT_SUB_1 with the following: M_MESSAGE Returns the error message instead of the error code. In this case, the recommended casting type for the data written to UserVarPtr is an array of MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ]. You can combine this value with M_STRING_SIZE. You can combine M_MESSAGE with the following: M_STRING_SIZE Retrieves the length of the string, including the terminating null character (\"\\0\"). In this case, the recommended casting type for the data written to UserVarPtr is MIL_INT. UserVarPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MappHookFunction This function allows you to attach or detach a user-defined function to a specified application event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. This function is similar, but not identical, to the MIL function MappHookFunction(). void MilWeb::MappHookFunction (MIL_ID ContextAppId, MIL_INT HookType, MIL_HOOK_FUNCTION_PTR HookHandlerPtr, void * UserDataPtr) ContextAppId Specifies the client-side MIL application context identifier of the MILweb server application to which to hook the function. The application context identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb::MappOpenConnection. HookType Specifies the event type. This parameter can be set to one of the following values: To detach (unhook) a function that you previously hooked, combine the event type with M_UNHOOK (for example, M_CONNECT + M_UNHOOK). M_CONNECT Specifies to call the hook-handler function when your MILweb client application establishes a connection with the specified MILweb server application (or one of its published MIL objects). You can use MilWeb::MappGetHookInfo with M_OBJECT_ID to learn which application or object connected, and MilWeb::MobjInquire with M_OBJECT_TYPE to learn the type of the application or object. M_DISCONNECT Specifies to call the hook-handler function when your MILweb client application disconnects from the specified MILweb server application (or one of its published MIL objects). You can use MilWeb::MappGetHookInfo with M_OBJECT_ID to learn which application or object disconnected, and MilWeb::MobjInquire with M_OBJECT_TYPE to learn the type of the application or object. M_ERROR Specifies to call the hook-handler function when an error occurs while attempting to connected to the MILweb server application or published MIL object. M_OBJECT_PUBLISH_WEB Specifies to call the hook-handler function each time the specified MILweb server application publishes or unpublishes an object. HookHandlerPtr Specifies the address of the function that should be called when an event occurs. This function must have the following prototype: MIL_INT MFTYPE HookHandler(MIL_INT HookType, MIL_ID EventId, void * UserDataPtr). UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if user data is not required. MilWeb::MappInquire This function inquires about the specified application setting of either the MILweb client or MILweb server application. The returned value is the requested information. This function is similar, but not identical, to the MIL function MappInquire(). MIL_INT MilWeb::MappInquire (MIL_ID ContextAppId, MIL_INT64 InquireType, void * UserDataPtr) ContextAppId Specifies the client-side MIL application context identifier of the MILweb server application for which to inquire the settings. The application context identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb::MappOpenConnection. To inquire about a setting of the MILweb client application, set this parameter to M_DEFAULT. See the description of a setting for the InquireType parameter to learn whether the setting inquires the MILweb client application or MILweb server application. InquireType Specifies the type of application setting about which to inquire. This parameter can be set to one of the following values: M_ERROR Inquires the error printing mode of the MILweb client application. In this case, the recommended casting type for the data written to UserDataPtr is MIL_INT, and it returns one of the following values: M_PRINT_DISABLE Specifies not to print error messages. M_PRINT_ENABLE Specifies to print error messages. M_WEB_CLIENT_INDEX Retrieves the index of this instance of the MILweb client application, from the perspective of the specified MILweb server application. This index does not change for this instance of the MILweb client as long as it is connected. If this instance of the client disconnects and then reconnects, it is assigned a new index by the MILweb server. If this instance of the MILweb client is connected to multiple MILweb servers, each MILweb server assigns a different index to this instance of the MILweb client. Indices of MILweb clients are not zero or one-based, nor are they sequential. In this case, UserDataPtr returns the index of this instance of the MILweb client; the recommended casting type for the data is MIL_INT. UserDataPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MappInquireConnection This function inquires about the published MIL objects in the MILweb server application. The returned value is the requested information. This function is similar, but not identical, to the MIL function MappInquireConnection(). MIL_INT MilWeb::MappInquireConnection (MIL_ID ContextAppId, MIL_INT64 InquireType, MIL_INT64 ControlFlag, MIL_INT64 ExtraFlag, void * UserVarPtr) ContextAppId Specifies the client-side MIL application context identifier of the MILweb server application, For which to inquire the settings of published objects. The application context identifier must have been previously obtained, typically when connecting to the MILweb server application using MilWeb::MappOpenConnection. InquireType Specifies the type of application setting about which to inquire. This parameter can be set to one of the following values: M_WEB_PUBLISHED_LIST Inquires the list of client-side MIL identifiers associated with the MIL objects published by the MILweb server application. Published MIL objects are those MIL objects set to read or read/write. In this case, UserVarPtr returns an array of client-side MIL identifiers of the published objects; the recommended casting type for the data is an array of type MIL_ID. Use this function with M_WEB_PUBLISHED_LIST_SIZE to learn the number of published objects. M_WEB_PUBLISHED_LIST_SIZE Inquires the current number of MIL objects published by the MILweb server application. In this case, UserVarPtr returns the number of published objects; the recommended casting type for the data is MIL_INT. M_WEB_PUBLISHED_NAME Inquires the client-side MIL identifier of a published MIL object associated with the name specified by the ControlFlag parameter. This name must have been previously associated with an object in the MILweb server application using MobjControl() with M_OBJECT_NAME. In this case, set ControlFlag to M_PTR_TO_MIL_INT(MIL_TEXT(\"ObjectName\")). If you are passing the object name in a variable, don't enclose it in MIL_TEXT(). In this case, UserVarPtr returns the client-side MIL identifier of the published object; the recommended casting type for the data is MIL_ID. Note that this client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. ControlFlag Specifies an attribute of the inquire operation to perform. If this parameter is not required for the inquire operation, it must be set to M_DEFAULT. ExtraFlag This parameter is reserved for future expansion and must be set to M_DEFAULT. UserVarPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MappOpenConnection This function opens a connection to a MILweb server application, through the listening port of the MILweb server application. The MILweb server application can be running on a local or remote computer. You can later close the connection using MilWeb::MappCloseConnection. This function is similar, but not identical, to the MIL function MappOpenConnection(). void MilWeb::MappOpenConnection (MIL_CONST_TEXT_PTR ConnectionDescriptor, MIL_INT64 InitFlag, MIL_INT64 ControlFlag, MIL_ID * RemoteContextAppIdPtr) ConnectionDescriptor Specifies the computer to which to connect, and if necessary the listening port of the MILweb server application. You must specify the prefix \"ws://\", followed by the domain name or IP address of the computer, optionally followed by the listening port number. This should be enclosed in the MIL_TEXT macro. For example, MIL_TEXT(\"ws://localhost:7861\") or MIL_TEXT(\"ws://192.168.1.51:7861\"). You can always use the Hostname localhost to connect to a MILweb server application running on the same computer as the instance of the MILweb client application. In your MIL application, you can set the listening port using MappControl() with M_WEB_CONNECTION_PORT. The default port is 7861. You might find it useful to create a MILweb client application that allows the user to enter the IP address or Hostname dynamically before connecting (for example, using a dialog box). InitFlag This parameter is reserved for future expansion and must be set to M_DEFAULT. ControlFlag This parameter is reserved for future expansion and must be set to M_DEFAULT. RemoteContextAppIdPtr Specifies the address in which to write the client-side identifier of the MILweb server application. If the connection fails, the value M_NULL is written. Note that this client-side MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. MilWeb::Mdisp The functions prefixed with MilWeb::Mdisp make up the MILweb Display module. The MILweb Display module allows you to access the image output of a published 2D or 3D display, enable interactive manipulation of a published display, and hook functions to display events (such as user interaction). Unlike MIL, MILweb uses the same module for both 2D and 3D displays. For a 3D display, only the final rendered image of the display is transmitted to your MILweb client application; 3D displays are therefore functionally equivalent to 2D displays from the perspective of a MILweb client. All functions and settings in this module are supported for both 2D and 3D displays, except where otherwise noted. MilWeb::MdispControl This function controls the specified MIL display setting. This function is similar, but not identical, to the MIL function MdispControl(). void MilWeb::MdispControl (MIL_ID DisplayId, MIL_INT64 ControlType, MIL_DOUBLE ControlValue) DisplayId Specifies the client-side MIL display identifier of the display. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. ControlType Specifies the type of display setting to control. This parameter can be set to one of the following values: M_INTERACTIVE Sets whether the local user can interact with the display. For C/C++, MILweb does not automatically transmit user input to the MILweb server. You must manually pass user input to the MIL display using MilWeb::MdispMessage. For more information, see the Making a presented display interactive subsection of the Creating a MILweb client application with C/C++ section earlier in this chapter. To learn the default keyboard controls, see M_KEYBOARD_USE. In this case, set ControlValue to one of the following values: M_DISABLE Specifies that the user cannot interact with the display. Note that this instance of your MILweb client application will still generate mouse and keyboard events for the purposes of hooked functions (if you generate those events using MilWeb::MdispMessage). However, the events are not sent to the MILweb server application, or other instances of your MILweb client application. This is the default value. M_ENABLE Specifies that the user can interact with the display, using a keyboard and mouse. Only one connected instance of your MILweb client application can enable this feature at a time for the specified display. If another instance of the MILweb client application has this feature enabled for the specified display, this function has no effect. M_UPDATE_WEB Sets whether the MILweb server application should send updated images of this display to this instance of the MILweb client application. In this case, set ControlValue to one of the following values: M_DISABLE Specifies not to update the display. M_ENABLE Specifies to update the display. Also, the display is forced to update immediately. This is the default value. M_NOW Forces an immediate update of the display. In this case, the display is updated even if M_UPDATE_WEB is set to M_DISABLE. M_WEB_PUBLISHED_FORMAT Sets whether to automatically convert the transmitted image to a different color format. The image of the display is always transmitted in the RGBA32 color format (the alpha channel always specifies 100 percent opacity for all pixels). If you specify to convert the image to a different color format, the conversion is performed on the local computer. This setting does not affect the display on the MILweb server, or other instances of the MILweb client. In this case, set ControlValue to oe of the following values: M_BGR32 Specifies to convert the image to the BGRA32 color format (the alpha channel always specifies 100 percent opacity for all pixels). M_RGB32 Specifies that the image is not converted; it remains in the transmitted RGBA32 format (the alpha channel always specifies 100 percent opacity for all pixels). This is the default value. ControlValue Specifies the setting's new value. MilWeb::MdispGetHookInfo This function retrieves information about the event that caused the hook-handler function to be called. This function should only be called within the scope of a display hook-handler function call (see MilWeb::MdispHookFunction). The returned value is the requested information. This function is similar, but not identical, to the MIL function MdispGetHookInfo(). MIL_INT MilWeb::MdispGetHookInfo (MIL_ID EventId MIL_INT64 InfoType, void * UserVarPtr) EventId Specifies the display event identifier received by the hook-handler function. InfoType Specifies the type of information to get. This parameter can be set to one of the following values: M_DISPLAY Retrieves the client-side MIL identifier of the display that generated the event. Note that this MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. In this case, UserVarPtr returns the client-side MIL identifier of the display; the recommended casting type for the data is MIL_ID. UserVarPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MdispHookFunction This function allows you to attach or detach a user-defined function to a specified display event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. For more information, see the Hooking to display events subsection of the Fundamentals for creating your MILweb client application section earlier in this chapter. This function is similar, but not identical, to the MIL function MdispHookFunction(). void MilWeb::MdispHookFunction (MIL_ID DisplayId, MIL_INT HookType, MIL_HOOK_FUNCTION_PTR HookHandlerPtr, void * UserDataPtr) DisplayId Specifies the client-side MIL display identifier of the display to use. This identifier must have been previously inquired, typically using MappInquireConnection with M_WEB_PUBLISHED_NAME. HookType Specifies the event type. This parameter can be set to one of the following values: To detach (unhook) a function that you previously hooked, combine the event type with M_UNHOOK (for example, M_UPDATE_INTERACTIVE_STATE + M_UNHOOK). M_UPDATE_INTERACTIVE_STATE Specifies to call the hook-handler function each time a MILweb client takes or releases interactive control of the display (using MilWeb::MdispControl with M_INTERACTIVE). This includes other connected instances of your MILweb client application. HookHandlerPtr Specifies the address of the function that should be called when an event occurs. This function must have the following prototype: MIL_INT MFTYPE HookHandler(MIL_INT HookType, MIL_ID EventId, void * UserDataPtr). UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if user data is not required. MilWeb::MdispInquire This function inquires about the specified display setting. The returned value is the requested information. This function is similar, but not identical, to the MIL function MdispInquire(). MIL_INT MilWeb::MdispInquire (MIL_ID DisplayId, MIL_INT64 InquireType, void * UserVarPtr) DisplayId Specifies the client-side MIL display identifier of the display to use. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. InquireType Specifies the type of display setting about which to inquire. This parameter can be set to one of the following values: M_IMAGE_HOST_ADDRESS Inquires the Host address (on the computer running your MILweb client application) of the image of the display transmitted by the MILweb server application. This address can be used to directly access the data of the transmitted image with the Host CPU. For a 3D display, this image is the rendered output of the display. This is functionally equivalent to receiving the output of a 2D display; you can present both 2D and 3D displays using the same methods. The image is always transmitted in the RGBA32 packed format, whereby the different color components of each pixel are stored sequentially as 8-bit values (starting with the R value). You can specify to automatically convert the data to the BGRA32 packed format using MilWeb::MdispControl with M_WEB_PUBLISHED_FORMAT and M_BGR32. In this case, MilWeb::MdispInquire returns the Host address of the converted image data. To learn the size and pitch of the image, use MilWeb::MdispInquire with M_SIZE_X, M_SIZE_Y, and M_PITCH_BYTE. In this case, UserVarPtr returns the Host address of the image; the recommended casting type for the data is MIL_INT8 *. M_INTERACTIVE Inquires whether the user can interact with the display. In this case, the recommended casting type for the data written to UserVarPtr is MIL_INT, and it returns one of the following values: M_DISABLE Specifies that the user cannot interact with the display, using a keyboard and mouse. M_ENABLE Specifies that the user can interact with the display, using a keyboard and mouse. M_PITCH_BYTE Inquires the number of bytes between the beginnings of any two adjacent lines of the transmitted image data. In this case, UserVarPtr returns the pitch of the transmitted image (in bytes); the recommended casting type for the data is MIL_INT. M_SIZE_BYTE Inquires the total number of bytes in the transmitted image data. In this case, UserVarPtr returns the size of the image data (in bytes); the recommended casting type for the data is MIL_INT. M_SIZE_X Inquires the width of the transmitted image. In this case, UserVarPtr returns the width of the transmitted image (in pixels); the recommended casting type for the data is MIL_INT. M_SIZE_Y Inquires the height of the transmitted image. In this case, UserVarPtr returns the height of the transmitted image (in pixels); the recommended casting type for the data is MIL_INT. M_WEB_PUBLISHED_FORMAT Inquires the color format of the image of the display, transmitted by the MILweb server application. The image of the display is always transmitted in the RGBA32 format. If another color format is specified, the conversion is performed automatically on the local computer. In this case, the recommended casting type for the data written to UserDataPtr is MIL_INT, and it returns one of the following values: M_BGR32 Specifies that the image is automatically converted to the BGRA32 format (the alpha channel always specifies 100 percent opacity for all pixels). M_RGB32 Specifies that the image is not converted; it remains in the transmitted RGBA32 format (the alpha channel always specifies 100 percent opacity for all pixels). UserVarPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MdispMessage This function generates a mouse or keyboard event for the specified display. This manipulates the display if interactive control is enabled (using MilWeb::MdispControl with MilWeb.M_INTERACTIVE), and generates an event for the purposes of hooked functions. This allows you to simulate keyboard and mouse input. Note that if interactive control is not enabled, the event is only generated for this instance of your MILweb client application (not for the MILweb server application). The event is never generated for other instances of your MILweb client application. This function is not similar to any MIL function. void MilWeb::MdispMessage (MIL_ID DisplayId, MIL_INT EventType, MIL_INT MousePositionX, MIL_INT MousePositionY, MIL_INT EventValue, MIL_INT CombinationKeys, MIL_INT UserValue) DisplayId Specifies the client-side MIL display identifier of the display to use. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. EventType Specifies the type of event to generate. This parameter can be set to one of the following values: M_KEY_DOWN Specifies to generate an event as though a key was pressed. In this case, set EventValue to one of the MIL constants that can be written to the UserVarPtr parameter of MdispGetHookInfo() when the InfoType parameter is set to M_MIL_KEY_VALUE. M_KEY_UP Specifies to generate an event as though a key was released. In this case, set EventValue to one of the MIL constants that can be written to the UserVarPtr parameter of MdispGetHookInfo() when the InfoType parameter is set to M_MIL_KEY_VALUE. M_MOUSE_LEFT_BUTTON_DOWN Specifies to generate an event as though the left mouse button was pressed. In this case, set EventValue to M_NULL. M_MOUSE_LEFT_BUTTON_UP Specifies to generate an event as though the left mouse button was released. In this case, set EventValue to M_NULL. M_MOUSE_MIDDLE_BUTTON_DOWN Specifies to generate an event as though the middle mouse button was pressed. In this case, set EventValue to M_NULL. M_MOUSE_MIDDLE_BUTTON_UP Specifies to generate an event as though the middle mouse button was released. In this case, set EventValue to M_NULL. M_MOUSE_MOVE Specifies to generate an event as though the mouse was moved. In this case, set MousePositionX and MousePositionY to the X and Y positions (in display coordinates) to which to simulate moving the mouse. M_MOUSE_RIGHT_BUTTON_DOWN Specifies to generate an event as though the right mouse button was pressed. In this case, set EventValue to M_NULL. M_MOUSE_RIGHT_BUTTON_UP Specifies to generate an event as though the right mouse button was released. In this case, set EventValue to M_NULL. M_MOUSE_WHEEL Specifies to generate an event as though the mouse wheel was moved. In this case, set EventValue to the simulated value for the wheel's rotation. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotate backward, toward the user. MousePositionX Specifies the simulated position of the mouse cursor along the X-axis in display coordinates. If not used, set this value to M_DEFAULT. MousePositionY Specifies the simulated position of the mouse cursor along the Y-axis in display coordinates. If not used, set this value to M_DEFAULT. EventValue Specifies additional information related to the event specified by the EventType parameter. If not used, set this parameter to M_NULL. CombinationKeys Specifies which combination keys to simulate holding. This parameter can be set to M_NULL (which specifies no combination keys), or any combination of the following values: M_KEY_ALT Specifies the Alt key. M_KEY_CTRL Specifies the CTRL key. M_KEY_SHIFT Specifies the Shift key. M_KEY_WIN Specifies the Windows key. UserVar This parameter is reserved for future expansion and must be set to M_NULL. MilWeb::MdispPan This function associates X- and Y-panning offsets with the specified display. The transmitted image is a panned version of the selected image buffer, offset from the top-left corner and cropped to that image buffer's pixel dimensions. For more information, see the Size of a MILweb display subsection of the Fundamentals for creating your MILweb client application section earlier in this chapter. This pans the display for all instances of your MILweb client application. If you need to pan the image separately for each instance of your MILweb client application, you must allocate and publish a separate display for each instance and select the image to each display. This function is not supported for 3D displays. This function causes the MILweb server application to call the MIL function MdispPan(). void MilWeb::MdispPan (MIL_ID DisplayId, MIL_DOUBLE XOffset, MIL_DOUBLE YOffset) DisplayId Specifies the client-side MIL display identifier of the 2D display to use. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. XFactor Specifies the number of image pixels by which to pan the display. Specify a positive offset value to displace the image to the left. YFactor Specifies the number of image pixels by which to pan the display. Specify a positive offset value to displace the image upwards. MilWeb::MdispZoom This function associates a zoom factor in X and/or in Y with the specified display. The transmitted image is a zoomed version of the selected image buffer, cropped to that image buffer's pixel dimensions. For more information, see the Size of a MILweb display subsection of the Fundamentals for creating your MILweb client application section earlier in this chapter. This zooms the display for all instances of your MILweb client application. If you need to zoom the image separately for each instance of your MILweb client application, you must allocate and publish a separate display for each instance and select the image to each display. This function is not supported for 3D displays. This function causes the MILweb server application to call the MIL function MdispZoom(). void MilWeb::MdispZoom (MIL_ID DisplayId, MIL_DOUBLE XFactor, MIL_DOUBLE YFactor) DisplayId Specifies the client-side MIL display identifier of the 2D display to use. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. XFactor Specifies the zoom factor for the X-direction of the display. This value must be larger than 0. A value greater than 1.0 will zoom in, while a value less than 1.0 will zoom out. YFactor Specifies the zoom factor for the Y-direction of the display. This value must be larger than 0. A value greater than 1.0 will zoom in, while a value less than 1.0 will zoom out. MilWeb::Mobj The functions prefixed with MilWeb::Mobj make up the MILweb Object module. The MILweb Object module allows you to read and write messages in MIL message mailboxes, inquire the types of published objects, and hook functions to the update and connection events of published objects. MilWeb::MobjGetHookInfo This function retrieves information about the event that caused the hook-handler function to be called. This function should only be called within the scope of an object hook-handler function call (see MilWeb::MobjHookFunction). The returned value is the requested information. This function is similar, but not identical, to the MIL function MobjGetHookInfo(). MIL_INT MilWeb::MobjGetHookInfo (MIL_ID EventId, MIL_INT64 InfoType, void * UserPtr) EventId Specifies the object event identifier that was received by the hook-handler function. InfoType Specifies the type of information to return about the event. This parameter can be set to the following value: M_OBJECT_ID Retrieves the MIL identifier of the object that generated the event. Note that this MIL identifier should only be used within the instance of your MILweb client application that called this function. The MILweb server application, and other instances of your MILweb client application, use a different MIL identifier to refer to the same object. UserPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MobjHookFunction This function allows you to attach or detach a user-defined function to a specified object event. Once a hook-handler function is defined and hooked to an event, it is automatically called when the event occurs. This function is similar, but not identical, to the MIL function MobjHookFunction(). void MilWeb::MobjHookFunction (MIL_ID ObjectId, MIL_INT HookType, MIL_HOOK_FUNCTION_PTR HookHandlerPtr, void * UserDataPtr) ObjectId Specifies the client-side MIL identifier of the object to use. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. HookType Specifies the event type. This parameter can be set to one of the following values: To detach (unhook) a function that you previously hooked, combine the event type with M_UNHOOK (for example, M_UPDATE_WEB + M_UNHOOK). M_UPDATE_WEB Specifies to call the hook-handler function each time the contents of the object changes. HookHandlerPtr Specifies the address of the function that should be called when an event occurs. This function must have the following prototype: MIL_INT MFTYPE HookHandler(MIL_INT HookType, MIL_ID EventId, void * UserDataPtr). UserDataPtr Specifies the address of the user data that you want to make available to the hook-handler function. This address is passed to the hook-handler function, through its UserDataPtr parameter, when the specified event occurs. Set this parameter to M_NULL if user data is not required. MilWeb::MobjInquire This function inquires about the specified object setting. The returned value is the requested information. This function is similar, but not identical, to the MIL function MobjInquire(). MIL_INT MilWeb:: MobjInquire (MIL_ID ObjectId, MIL_INT64 InquireType, void * UserDataPtr) ObjectId Specifies the client-side MIL identifier of the object about which to inquire. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. InquireType Specifies the type of display setting about which to inquire. This parameter can be set to one of the following values: M_OBJECT_NAME Inquires the MIL object's user-defined name (set in the MILweb server application, using MobjControl() with M_OBJECT_NAME). In this case, UserDataPtr returns the name,; the recommended casting type for the data is an array of MIL_TEXT_CHAR [optionally, in C++: MIL_STRING ]. M_OBJECT_TYPE Inquires what type of access to the object your MILweb client application has (set in the MILweb server application, using MobjControl() with M_WEB_PUBLISH). In this case, the recommended casting type for the data written to UserDataPtr is MIL_INT, and it returns one of the following values: M_APPLICATION Specifies a MILweb server application. M_DISPLAY Specifies a MIL display (allocated using MdispAlloc() in the MILweb server application). M_MESSAGE_MAILBOX Specifies a MIL message mailbox (allocated using MobjAlloc() with M_MESSAGE_MAILBOX in the MILweb server application). M_WEB_PUBLISH Inquires what type of access to the object your MILweb client application has (set in the MILweb server application, using MobjControl() with M_WEB_PUBLISH). In this case, the recommended casting type for the data written to UserDataPtr is MIL_INT, and it returns one of the following values: M_READ_ONLY Specifies that the MILweb client application has read-only access to the object. M_READ_WRITE Specifies that the MILweb client application has both read and write access to the object. UserDataPtr Specifies the address in which to write the requested information. Since this function also returns the requested information, you can set this parameter to M_NULL. MilWeb::MobjMessageRead This function reads data from a message sent to a message mailbox (previously published by a MILweb server application). Reading a message using this function always removes the message from the mailbox (if the read operation is successful). The returned value is the size of the message (the same as the value written in MessageOutSizePtr). This function is similar, but not identical, to the MIL function MobjMessageRead(). MIL_INT64 MilWeb::MobjMessageRead (MIL_ID MessageId, MIL_INT64 * MessagePtr, MIL_INT64 MessageInSize, MIL_INT64 * MessageTagPtr, MIL_INT64 * StatusPtr, MIL_INT64 OperationFlag) MessageId Specifies the client-side MIL identifier of the message mailbox. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. MessagePtr Specifies the address of the variable in which to write the message. This must be a pointer to an array of type MIL_UINT8 [optionally, in C++: a reference to a std::vector&lt;MIL_UINT8&gt; ]. If M_NULL is specified, this function will instead return the length of the message. MessageInSize Specifies the size of the array pointed to by MessagePtr, in bytes. You must set this value to 0 if MessagePtr is set to M_NULL. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the parameter. MessageOutSizePtr Specifies the address of the variable in which to write the size of the message to be read. If unused, set this parameter to M_NULL. MessageTagPtr Specifies the address of the variable in which to write the message tag associated with the message. If unused, set this parameter to M_NULL. StatusPtr Specifies the address of the variable in which the status of the read operation will be written. This parameter returns one of the following values. M_BUFFER_TOO_SMALL Specifies the current message is not copied to MessagePtr or deleted. The returned message length will be the required length in bytes. M_SUCCESS Specifies the message is copied to MessagePtr. OperationFlag This parameter is reserved for future expansion and must be set to M_DEFAULT. MilWeb::MobjMessageWrite This function writes a message that will be added to a message mailbox (previously published by a MILweb server application). This function is similar, but not identical, to the MIL function MobjMessageWrite(). void MilWeb::MobjMessageWrite (MIL_ID MessageId, const void * MessagePtr, MIL_INT64 MessageSize, MIL_INT64 MessageTag, MIL_INT64 OperationFlag) MessageId Specifies the client-side MIL identifier of the message mailbox. This identifier must have been previously inquired, typically using MilWeb::MappInquireConnection with M_WEB_PUBLISHED_NAME. MessagePtr Specifies the address of the variable of the user message to write. This must be a pointer to an array of type MIL_UINT8 [optionally, in C++: a reference to a std::vector&lt;MIL_UINT8&gt; ]. MessageSize Specifies the length of the message to write, in bytes. When using a standard vector (std::vector) overload function in C++, you can pass M_DEFAULT to this parameter and MIL will automatically determine the size based on the number of items in the vector passed to the parameter. MessageTag Specifies a user-defined tag to send with the message. OperationFlag This parameter is reserved for future expansion and must be set to M_DEFAULT. C/C++ MILweb function reference MilWeb::Mapp MilWeb::MappCloseConnection MilWeb::MappControl MilWeb::MappGetHookInfo MilWeb::MappHookFunction MilWeb::MappInquire MilWeb::MappInquireConnection MilWeb::MappOpenConnection MilWeb::Mdisp MilWeb::MdispControl MilWeb::MdispGetHookInfo MilWeb::MdispHookFunction MilWeb::MdispInquire MilWeb::MdispMessage MilWeb::MdispPan MilWeb::MdispZoom MilWeb::Mobj MilWeb::MobjGetHookInfo MilWeb::MobjHookFunction MilWeb::MobjInquire MilWeb::MobjMessageRead MilWeb::MobjMessageWrite ",
      "wordCount": 6352,
      "subEntries": []
    }
  ]
}]