[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Core_General_SystemDetection_CPP_systemdetection_cpp",
      "version": "2024020714",
      "title": "systemdetection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top /****************************************************************************** /* * File name: SystemDetection.cpp * Location: See Matrox Example Launcher in the MIL Control Center * * * Synopsis: This program shows how to use the MappInquire(M_INSTALLED_... inquires to detect * installed systems types and display their names using SystemDetection. * * Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. * All Rights Reserved */ #include &lt;mil.h&gt; #include &lt;algorithm&gt; #include &lt;iostream&gt; #define IMAGE_SIZEX 640 #define IMAGE_SIZEY 480 int MosMain(void) { MIL_ID MilApplication; MIL_INT NbAvailableSystems; MappAlloc(M_DEFAULT, &amp;MilApplication); MappInquire(M_DEFAULT, M_INSTALLED_SYSTEM_COUNT, &amp;NbAvailableSystems); std::vector&lt;MIL_ID&gt; MilSystems; std::vector&lt;MIL_ID&gt; MilDisplays; std::vector&lt;MIL_ID&gt; MilBuffers; MIL_STRING CurrentBoardName; MIL_STRING CurrentDisplayableBoardName; MIL_INT CurrentSystemType = 0; MIL_INT DeviceCount = 0; MappControl(M_DEFAULT, M_ERROR, M_PRINT_DISABLE); MosPrintf(MIL_TEXT(\"%d system(s) found\\n\\n\\n\"), NbAvailableSystems); for(MIL_INT i = 0; i &lt; NbAvailableSystems; i++) { MappInquire(M_DEFAULT, M_INSTALLED_SYSTEM_PRINT_NAME + i, CurrentDisplayableBoardName); MappInquire(M_DEFAULT, M_INSTALLED_SYSTEM_DESCRIPTOR + i, CurrentBoardName); MappInquire(M_DEFAULT, M_INSTALLED_SYSTEM_TYPE + i, &amp;CurrentSystemType); MappInquire(M_DEFAULT, M_INSTALLED_SYSTEM_DEVICE_COUNT + i, &amp;DeviceCount); MosPrintf(MIL_TEXT(\"\\nSystem Print Name: %s\"), CurrentDisplayableBoardName.c_str()); MosPrintf(MIL_TEXT(\"\\nSystem Descriptor: %s\"), CurrentBoardName.c_str()); MosPrintf(MIL_TEXT(\"\\nSystem Type : %-d\"), (MIL_INT32)CurrentSystemType); MosPrintf(MIL_TEXT(\"\\nSystem Count : \")); if(DeviceCount == M_UNKNOWN) MosPrintf(MIL_TEXT(\"unknown\\n\")); else MosPrintf(MIL_TEXT(\"%-d\\n\"), (MIL_INT32)DeviceCount); if(DeviceCount == 0) continue; MIL_ID SystemId = M_NULL; MsysAlloc(M_DEFAULT, CurrentBoardName, M_DEFAULT, M_DEFAULT, &amp;SystemId); if(SystemId) { MIL_ID DisplayId = M_NULL; MIL_ID BufferId = M_NULL; MbufAlloc2d(SystemId, IMAGE_SIZEX, IMAGE_SIZEY, 8 + M_UNSIGNED, M_IMAGE + M_DISP, &amp;BufferId); MdispAlloc(SystemId, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, &amp;DisplayId); MbufClear(BufferId, M_COLOR_BLACK); MdispControl(DisplayId, M_TITLE, CurrentDisplayableBoardName); MdispSelect(DisplayId, BufferId); MIL_STRING_STREAM WriteMessage; WriteMessage &lt;&lt; MIL_TEXT(\"Allocated \") &lt;&lt; CurrentDisplayableBoardName; MgraText(M_DEFAULT, BufferId, IMAGE_SIZEX / 5, IMAGE_SIZEY / 3, WriteMessage.str()); if(DeviceCount == M_UNKNOWN) MosPrintf(MIL_TEXT(\"%s.\\n\"), WriteMessage.str().c_str()); MilBuffers.push_back(BufferId); MilDisplays.push_back(DisplayId); MilSystems.push_back(SystemId); } else { if(DeviceCount == M_UNKNOWN) { MosPrintf(MIL_TEXT(\"No %s are present in the system.\\n\"), CurrentDisplayableBoardName.c_str()); } else { MIL_STRING ErrorMessageFunction; MIL_STRING ErrorMessage; MIL_STRING ErrorSubMessage1; MIL_STRING_STREAM ErrorStream; MappGetError(M_DEFAULT, M_MESSAGE + M_CURRENT_OPCODE, ErrorMessageFunction); MappGetError(M_DEFAULT, M_MESSAGE + M_CURRENT, ErrorMessage); MappGetError(M_DEFAULT, M_MESSAGE + M_CURRENT_SUB_1, ErrorSubMessage1); ErrorStream &lt;&lt; MIL_TEXT(\"Error allocating \") &lt;&lt; CurrentDisplayableBoardName &lt;&lt; MIL_TEXT(\": \") &lt;&lt; ErrorMessage &lt;&lt; MIL_TEXT(\" \") &lt;&lt; ErrorSubMessage1 &lt;&lt; MIL_TEXT(\"\\n\"); MosPrintf(MIL_TEXT(\"%s\"), ErrorStream.str().c_str()); } } } MosPrintf(MIL_TEXT(\"\\nPress any key to quit the application\\n\")); MosGetch(); for(MIL_UINT i = 0; i &lt; MilSystems.size(); ++i) { MdispFree(MilDisplays[i]); MbufFree(MilBuffers[i]); MsysFree(MilSystems[i]); } MappControl(M_DEFAULT, M_ERROR, M_PRINT_ENABLE); MappFree(MilApplication); return 0; } ",
      "wordCount": 325
    }
  ]
}]