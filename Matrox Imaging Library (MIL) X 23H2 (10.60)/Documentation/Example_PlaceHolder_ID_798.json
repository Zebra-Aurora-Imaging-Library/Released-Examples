[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_3dReconstruction_StitchOrganized3dData_CPP_stitchorganized3ddata_cpp",
      "version": "2024020714",
      "title": "stitchorganized3ddata.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //***************************************************************************************/ // // File name: StitchOrganized3dData.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program demonstrates how to stitch depth maps or organized // point clouds. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved //***************************************************************************************/ #include &lt;mil.h&gt; #include \"Utilities.h\" #include \"../../../../Processing/3dUtil/C++/Display3dLinker.h\" #include &lt;memory&gt; //****************************************************************************** // Constants. //****************************************************************************** static const MIL_INT NB_DEPTH_MAPS = 2; static const MIL_INT NB_POINT_CLOUDS = 3; static const MIL_DOUBLE ROI_SIZE_X = 117; // in world units static const MIL_DOUBLE ROI_SIZE_Y = 170; // in world units static const MIL_DOUBLE ROI_OFFSET_X = -25; // in world units static const MIL_DOUBLE ROI_OFFSET_Y = 5; // in world units static const MIL_DOUBLE Z_MIN = -30; // in world units static const MIL_DOUBLE Z_MAX = 10; // in world units static const MIL_DOUBLE OPACITY = 50; // in % static const MIL_INT ROI_COLOR = M_COLOR_RED; static const MIL_DOUBLE DISTANCE_VIEW = 650; //****************************************************************************** // Example files. //****************************************************************************** #define EX_PATH(x) (M_IMAGE_PATH MIL_TEXT(\"StitchOrganized3dData/\") MIL_TEXT(x)) static const MIL_STRING DEPTH_MAP_FILES[NB_DEPTH_MAPS] = { EX_PATH(\"Depthmap1.mim\"), EX_PATH(\"Depthmap2.mim\"), }; static const MIL_STRING PARTIAL_FACE_FILES[NB_POINT_CLOUDS] = { EX_PATH(\"PartialFace1.mbufc\"), EX_PATH(\"PartialFace2.mbufc\"), EX_PATH(\"PartialFace3.mbufc\"), }; //****************************************************************************** // Function declarations. //****************************************************************************** void PrintHeader(); void StitchDepthMaps(MIL_ID MilSystem); bool StitchOrganizedPointClouds(MIL_ID MilSystem); //******************************************************************************* // Prints the example's description. //******************************************************************************* void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"StitchOrganized3dData\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This example demonstrates how to stitch depth maps or organized \\n\") MIL_TEXT(\"point clouds into one.\\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: Application, System, Display, Graphics, Buffer,\\n\") MIL_TEXT(\"3D Image Processing, 3D Display, 3D Geometry, and 3D Graphics.\\n\\n\")); } //******************************************************************************* // Stitches depth maps into one depth map. //******************************************************************************* void StitchDepthMaps(MIL_ID MilSystem) { MosPrintf(MIL_TEXT(\"---------------------------- Depth map stitching ----------------------------\\n\\n\")); MIL_UNIQUE_BUF_ID MilSrcDepthMaps[NB_DEPTH_MAPS]; MIL_UNIQUE_3DDISP_ID MilSrc3DDisplays[NB_DEPTH_MAPS]; MIL_ID GraList3DIds[NB_DEPTH_MAPS]; MIL_UNIQUE_DISP_ID MilSrc2DDisplays[NB_DEPTH_MAPS]; MIL_UNIQUE_GRA_ID MilGraLists2D[NB_DEPTH_MAPS]; // Restore source buffers and display them. for(MIL_INT i = 0; i &lt; NB_DEPTH_MAPS; ++i) { MilSrcDepthMaps[i] = MbufImport(DEPTH_MAP_FILES[i], M_MIL_TIFF + M_WITH_CALIBRATION, M_RESTORE, MilSystem, M_UNIQUE_ID); MilSrc3DDisplays[i] = Alloc3dDisplay(MilSystem, DEPTHMAP_3DDISPLAY_INFOS[i]); if(MilSrc3DDisplays[i]) { auto DepthMapLabel = M3ddispSelect(MilSrc3DDisplays[i], MilSrcDepthMaps[i], M_SELECT, M_DEFAULT); GraList3DIds[i] = M3ddispInquire(MilSrc3DDisplays[i], M_3D_GRAPHIC_LIST_ID, M_NULL); M3dgraControl(GraList3DIds[i], DepthMapLabel, M_COLOR_COMPONENT, M_COMPONENT_RANGE); M3dgraControl(GraList3DIds[i], DepthMapLabel, M_COLOR_COMPONENT_BAND, 2); } MilSrc2DDisplays[i] = Alloc2dDisplay(MilSystem, DEPTHMAP_2DDISPLAY_INFOS[i]); MilGraLists2D[i] = MgraAllocList(MilSystem, M_DEFAULT, M_UNIQUE_ID); MdispControl(MilSrc2DDisplays[i], M_ASSOCIATED_GRAPHIC_LIST_ID, MilGraLists2D[i]); MdispSelect(MilSrc2DDisplays[i], MilSrcDepthMaps[i]); MdispControl(MilSrc2DDisplays[i], M_VIEW_MODE, M_AUTO_SCALE); } // Allocate destination displays. auto MilDst3DDisplay = Alloc3dDisplay(MilSystem, DST_DEPTHMAP_3DDISPLAY_INFO); auto GraListDst = M3ddispInquire(MilDst3DDisplay, M_3D_GRAPHIC_LIST_ID, M_NULL); auto MilDst2DDisplay = Alloc2dDisplay(MilSystem, DST_DEPTHMAP_2DDISPLAY_INFO); // Allocate destination buffer. auto MilStitchedDepthMapContainer = MbufAllocContainer(MilSystem, M_PROC | M_DISP, M_DEFAULT, M_UNIQUE_ID); // Synchronize 3D displays. bool Is3DDisplayAvailable = MilSrc3DDisplays[0] != 0; std::unique_ptr&lt;CDisplayLinker&gt; pDisplayLinker; if(Is3DDisplayAvailable) { pDisplayLinker = std::make_unique&lt;CDisplayLinker&gt;(std::vector&lt;MIL_INT&gt;({&amp;MilSrc3DDisplays[0], &amp;MilSrc3DDisplays[NB_DEPTH_MAPS]})); } MosPrintf(MIL_TEXT(\"We will perform a merge of the displayed depth maps using the fast stitch mode.\\n\")); MosPrintf(MIL_TEXT(\"Note that the source depth maps must have the same pixel sizes (M_PIXEL_SIZE_X/Y)\\n\")); MosPrintf(MIL_TEXT(\"and depth calibration (M_GRAY_LEVEL_SIZE_Z and M_WORLD_POS_Z).\\n\\n\")); WaitForKey(); auto MilStitchContext = M3dimAlloc(MilSystem, M_STITCH_CONTEXT, M_DEFAULT, M_UNIQUE_ID); M3dimControl(MilStitchContext, M_STITCH_MODE, M_FAST); M3dimControl(MilStitchContext, M_OVERLAP_MODE, M_MIN); M3dimMerge(&amp;MilSrcDepthMaps[0], MilStitchedDepthMapContainer, NB_DEPTH_MAPS, MilStitchContext, M_DEFAULT); if(Is3DDisplayAvailable) { auto StitchedDepthMapLabel = M3ddispSelect(MilDst3DDisplay, MilStitchedDepthMapContainer, M_SELECT, M_DEFAULT); M3dgraControl(GraListDst, StitchedDepthMapLabel, M_COLOR_COMPONENT, M_COMPONENT_RANGE); M3dgraControl(GraListDst, StitchedDepthMapLabel, M_COLOR_COMPONENT_BAND, 2); pDisplayLinker-&gt;AddDisplay(MilDst3DDisplay); } // Convert depth map container to depth map image. auto DstRangeId = MbufInquireContainer(MilStitchedDepthMapContainer, M_COMPONENT_RANGE, M_COMPONENT_ID, M_NULL); auto MilStitchedDepthMap = MbufClone(DstRangeId, MilSystem, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_IMAGE + M_DISP + M_PROC, M_DEFAULT, M_UNIQUE_ID); MbufConvert3d(MilStitchedDepthMapContainer, MilStitchedDepthMap, M_NULL, M_DEFAULT, M_DEFAULT); // Display destination depth map image. MdispSelect(MilDst2DDisplay, MilStitchedDepthMap); MdispControl(MilDst2DDisplay, M_VIEW_MODE, M_AUTO_SCALE); MosPrintf(MIL_TEXT(\"The merged depth map is displayed.\\n\\n\")); WaitForKey(); auto MilBox = M3dgeoAlloc(MilSystem, M_GEOMETRY, M_DEFAULT, M_UNIQUE_ID); M3dgeoBox(MilBox, M_BOTH_CORNERS, ROI_OFFSET_X, ROI_OFFSET_Y, Z_MIN, ROI_OFFSET_X + ROI_SIZE_X, ROI_OFFSET_Y + ROI_SIZE_Y, Z_MAX, M_DEFAULT); auto MilGra2DContext = MgraAlloc(MilSystem, M_UNIQUE_ID); MgraControl(MilGra2DContext, M_COLOR, ROI_COLOR); MgraControl(MilGra2DContext, M_INPUT_UNITS, M_WORLD); for(MIL_INT i = 0; i &lt; NB_DEPTH_MAPS; ++i) { if(Is3DDisplayAvailable) { auto BoxLabel = M3dgeoDraw3d(M_DEFAULT, MilBox, GraList3DIds[i], M_DEFAULT, M_DEFAULT); M3dgraControl(GraList3DIds[i], BoxLabel, M_OPACITY, OPACITY); M3dgraControl(GraList3DIds[i], BoxLabel, M_COLOR, ROI_COLOR); } MgraRect(MilGra2DContext, MilGraLists2D[i], ROI_OFFSET_X, ROI_OFFSET_Y, ROI_OFFSET_X + ROI_SIZE_X, ROI_OFFSET_Y + ROI_SIZE_Y); } if(Is3DDisplayAvailable) M3ddispSelect(MilDst3DDisplay, M_NULL, M_CLOSE, M_DEFAULT); MdispSelect(MilDst2DDisplay, M_NULL); MosPrintf(MIL_TEXT(\"Finally, we will perform a partial merge of the depth maps in the destination\\n\")); MosPrintf(MIL_TEXT(\"region of interest, displayed in red, using the precise stitch mode.\\n\\n\")); WaitForKey(); M3dimControl(MilStitchContext, M_CALIBRATION_MODE, M_USER_DEFINED); M3dimControl(MilStitchContext, M_STITCH_MODE, M_PRECISE); M3dimControl(MilStitchContext, M_INTERPOLATION_FALLBACK_MODE, M_NEAREST_NEIGHBOR); M3dimControl(MilStitchContext, M_OFFSET_X, ROI_OFFSET_X); M3dimControl(MilStitchContext, M_OFFSET_Y, ROI_OFFSET_Y); M3dimControl(MilStitchContext, M_SIZE_X, ROI_SIZE_X); M3dimControl(MilStitchContext, M_SIZE_Y, ROI_SIZE_Y); M3dimMerge(&amp;MilSrcDepthMaps[0], MilStitchedDepthMapContainer, NB_DEPTH_MAPS, MilStitchContext, M_DEFAULT); DstRangeId = MbufInquireContainer(MilStitchedDepthMapContainer, M_COMPONENT_RANGE, M_COMPONENT_ID, M_NULL); MilStitchedDepthMap = MbufClone(DstRangeId, MilSystem, M_DEFAULT, M_DEFAULT, M_DEFAULT, M_IMAGE + M_DISP + M_PROC, M_DEFAULT, M_UNIQUE_ID); MbufConvert3d(MilStitchedDepthMapContainer, MilStitchedDepthMap, M_NULL, M_DEFAULT, M_DEFAULT); if(Is3DDisplayAvailable) { auto StitchedDepthMapLabel = M3ddispSelect(MilDst3DDisplay, MilStitchedDepthMapContainer, M_SELECT, M_DEFAULT); M3dgraControl(GraListDst, StitchedDepthMapLabel, M_COLOR_COMPONENT, M_COMPONENT_RANGE); M3dgraControl(GraListDst, StitchedDepthMapLabel, M_COLOR_COMPONENT_BAND, 2); } MdispSelect(MilDst2DDisplay, MilStitchedDepthMap); MosPrintf(MIL_TEXT(\"The merged depth map is displayed.\\n\\n\")); WaitForKey(); } //******************************************************************************* // Stitches organized point clouds into one organized point cloud. //******************************************************************************* bool StitchOrganizedPointClouds(MIL_ID MilSystem) { MosPrintf(MIL_TEXT(\"--------------------------- Point cloud stitching ---------------------------\\n\\n\")); MIL_UNIQUE_BUF_ID MilPointClouds[NB_POINT_CLOUDS]; MIL_UNIQUE_3DDISP_ID MilSrcDisplays[NB_POINT_CLOUDS]; // Restore source buffers and display them. for(MIL_INT i = 0; i &lt; NB_POINT_CLOUDS; ++i) { MilPointClouds[i] = MbufRestore(PARTIAL_FACE_FILES[i], MilSystem, M_UNIQUE_ID); MilSrcDisplays[i] = Alloc3dDisplay(MilSystem, ORGANIZED_3DDISPLAY_INFOS[i]); if(!MilSrcDisplays[i]) return false; M3ddispControl(MilSrcDisplays[i], M_UPDATE, M_DISABLE); auto PCLabel = M3ddispSelect(MilSrcDisplays[i], MilPointClouds[i], M_SELECT, M_DEFAULT); auto GraList = M3ddispInquire(MilSrcDisplays[i], M_3D_GRAPHIC_LIST_ID, M_NULL); M3dgraControl(GraList, PCLabel, M_COLOR_COMPONENT, M_COMPONENT_RANGE); M3dgraControl(GraList, PCLabel, M_COLOR_COMPONENT_BAND, 2); } // Allocate destination display. auto MilDstDisplay = Alloc3dDisplay(MilSystem, DST_ORGANIZED_3DDISPLAY_INFO); if(!MilDstDisplay) return false; auto DstGraList = M3ddispInquire(MilDstDisplay, M_3D_GRAPHIC_LIST_ID, M_NULL); // Allocate destination buffer. auto MilStitchedPC = MbufAllocContainer(MilSystem, M_PROC | M_DISP, M_DEFAULT, M_UNIQUE_ID); M3ddispSetView(MilSrcDisplays[0], M_AUTO, M_BOTTOM_VIEW, M_DEFAULT, M_DEFAULT, M_DEFAULT); M3ddispSetView(MilSrcDisplays[0], M_DISTANCE, DISTANCE_VIEW, M_DEFAULT, M_DEFAULT, M_DEFAULT); for(auto&amp; Disp : MilSrcDisplays) { M3ddispControl(Disp, M_UPDATE, M_ENABLE); } // Synchronize displays. CDisplayLinker DisplayLinker({&amp;MilSrcDisplays[0], &amp;MilSrcDisplays[NB_POINT_CLOUDS]}); DisplayLinker.AddDisplay(MilDstDisplay); MosPrintf(MIL_TEXT(\"We will stitch the 3 organized point clouds into one point cloud.\\n\\n\")); WaitForKey(); // Setup stitch context. auto MilStitchContext = M3dimAlloc(MilSystem, M_STITCH_CONTEXT, M_DEFAULT, M_UNIQUE_ID); M3dimControl(MilStitchContext, M_STITCH_DIRECTION, M_DIRECTION_Y); // Stitch point clouds. M3dimMerge(&amp;MilPointClouds[0], MilStitchedPC, NB_POINT_CLOUDS, MilStitchContext, M_DEFAULT); // Display stitched point cloud. auto StitchedPCLabel = M3ddispSelect(MilDstDisplay, MilStitchedPC, M_SELECT, M_DEFAULT); M3dgraControl(DstGraList, StitchedPCLabel, M_COLOR_COMPONENT, M_COMPONENT_RANGE); M3dgraControl(DstGraList, StitchedPCLabel, M_COLOR_COMPONENT_BAND, 2); M3ddispSetView(MilDstDisplay, M_AUTO, M_BOTTOM_VIEW, M_DEFAULT, M_DEFAULT, M_DEFAULT); M3ddispSetView(MilDstDisplay, M_VIEW_BOX, M_WHOLE_SCENE, M_DEFAULT, M_DEFAULT, M_DEFAULT); DisplayLinker.Update(); MosPrintf(MIL_TEXT(\"The resulting stitched organized point cloud is shown.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); return true; } //******************************************************************************* // Main function. //******************************************************************************* int MosMain(void) { // Allocate a MIL Application and System. auto MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_UNIQUE_ID); auto MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_UNIQUE_ID); PrintHeader(); // Ensure data files exist. if(!CheckForRequiredMILFile(DEPTH_MAP_FILES[0])) return EXIT_FAILURE; StitchDepthMaps(MilSystem); if (!StitchOrganizedPointClouds(MilSystem)) return EXIT_FAILURE; return 0; } ",
      "wordCount": 975
    }
  ]
}]