[{
  "id": "UG_CorrelationStitchingRegistration",
  "version": "2024020714",
  "title": "Correlation stitching registration and mosaicing",
  "subTitles": null,
  "location": "MIL UG P03: 2D processing and analysis",
  "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\ChapterInformation.htm",
  "text": " Chapter 12: Correlation stitching registration and mosaicing This chapter explains how to use correlation-stitching and mosaicing in the MIL Registration module to find the transformations that optimally position images in a common coordinate system; this process is referred to as image registration and the common coordinate system is referred to as the global pixel coordinate system. Correlation-stitching registration and mosaicing overview Correlation-stitching registration Mosaicing and super-resolution Steps to performing a correlation-stitching registration Basic concepts for correlation-stitching registration Correlation-stitching registration process Registration elements and images for correlation-stitching Setting the rough location of your images Selecting an image's reference coordinate system Specifying the type of transformation and its settings Copying the rough location Precision of the rough location and its effect on speed Customizing your registration settings Selecting the transformation type Specifying the maximum allowable displacement Skipping the optimization step Specifying the minimum overlap between images Accuracy Setting the origin of an image's pixel coordinate system Retrieving and analyzing results Possible results Using the results Drawing results Mosaicing and super-resolution Positioning and scaling your mosaic in the destination image buffer Mosaic composition in the overlapping regions Mosaic composition using super-resolution Correlation-stitching registration and mosaicing example ",
  "wordCount": 195,
  "subEntries": [
    {
      "id": "UG_CorrelationStitchingRegistration_Correlation_stitching_registration_and_mosaicing_overview",
      "version": null,
      "title": "Correlation-stitching registration and mosaicing overview",
      "subTitles": [
        "Correlation-stitching registration",
        "Mosaicing and super-resolution"
      ],
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Correlation_stitching_registration_and_mosaicing_overview.htm",
      "text": " Correlation-stitching registration and mosaicing overview Besides the registration operations discussed in the previous chapter, the MIL Registration module can also perform correlation-stitching registration, and can find the positional correlation between images in a common coordinate system. This information can be used for mosaicing and super-resolution. Although the correlation-stitching registration operation accepts color images, only band 0 is used. In contrast, color images are fully supported with the mosaicing operation. Correlation-stitching registration The MIL Registration module allows you to find the transformations that optimally position images in a common coordinate system. The common coordinate system is referred to as the global pixel coordinate system. Registering images is necessary, for example, in industries that need to combine small images and analyze the larger one, recover the geometry of a scene, or superimpose and align two images to see the differences between them. The following animation illustrates the process of correlation-stitching registration. The operation determines exactly how images overlap and fit together, based on the pixels in the images and some preliminary information that you supply. This information includes the rough location of all the images and the type of transformation to use to optimize their alignment. Using this information with advanced algorithms, the MIL Registration module finds the best match between the overlapping regions of the images. It then calculates the transformation that needs to be applied to each image to obtain the optimal match in the overlapping regions. Mosaicing and super-resolution The correlation-stitching registration operation can be used to perform mosaicing operations, which combine images to form one larger image or to create an image with improved resolution (super-resolution). It also supports converting coordinates between two of the following coordinate systems: the global pixel coordinate system, any image's pixel coordinate system, and the mosaic's coordinate system. Using the mosaicing operation, the registration module physically combines the images used in a correlation registration, and can draw the outlines of how they fit together. This is often useful for taking images of small components that do not completely fit inside of a single image taken by your camera setup at a given resolution. This also allows you to take multiple images of large objects and add them together for a larger image combination. Super-resolution is a process which combines images to enhance the resolution of an image. This is implemented by supplying the Registration module with multiple images of the same scene, which can be at varying zoom levels. These are used to average out noise and produce a better quality image. Super-resolution can be applied on camera setups to enhance the effective resolution of an imaging setup and produce images that can be scaled with less loss of information. You will need to first perform a correlation-stitching registration with high accuracy. Correlation-stitching registration and mosaicing overview Correlation-stitching registration Mosaicing and super-resolution ",
      "wordCount": 471,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Steps_to_performing_correlation_stitching_registration",
      "version": null,
      "title": "Steps to performing a correlation-stitching registration",
      "subTitles": null,
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Steps_to_performing_correlation_stitching_registration.htm",
      "text": " Steps to performing a correlation-stitching registration The following steps provide a basic methodology for using the Registration module to perform a correlation-stitching registration operation. Allocate a registration context, using MregAlloc() with M_STITCHING. Allocate a registration result buffer to hold the results of the registration operation, using MregAllocResult() with M_STITCHING_RESULT. Verify that the number of registration elements is sufficient for your application (by default, it is 256); you can inquire the number using MregInquire() with M_NUMBER_OF_REGISTRATION_ELEMENTS. A registration element contains the information required to register an image; therefore, the context must contain at least the same number of registration elements as images that need to be registered. To change the number of registration elements, use MregControl() with M_NUMBER_OF_REGISTRATION_ELEMENTS. Optionally, specify the rough location of the images, using MregSetLocation() with each of the images' registration element. Specify the global registration settings, using MregControl(). Specify the registration settings for the individual registration elements, using MregControl(). Perform the registration, using MregCalculate(). Retrieve the required results from the result buffer, using MregGetResult(). If necessary, save your registration context or your result buffer, using MregSave() or MregStream(). If necessary, use the registration results to perform mosaicing, using MregTransformImage(). If necessary, use the correlation-stitching registration results to convert positions between two of the following coordinate systems: the global pixel coordinate system, any registered image's pixel coordinate system, or a mosaic's coordinate system. This is done using MregTransformCoordinate() or MregTransformCoordinateList(). Free all your allocated objects, using MregFree(), unless M_UNIQUE_ID was specified during allocation. Using the correlation-stitching registration results, you can create a mosaic. For more information, refer to the Mosaicing and super-resolution section later in this chapter. Steps to performing a correlation-stitching registration ",
      "wordCount": 277,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Basic_concepts_when_performing_correlation_stitching",
      "version": null,
      "title": "Basic concepts for correlation-stitching registration",
      "subTitles": null,
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Basic_concepts_when_performing_correlation_stitching.htm",
      "text": " Basic concepts for correlation-stitching registration The basic concepts and vocabulary conventions for the MIL Registration module are: Global pixel coordinate system. The coordinate system in which the transformations, resulting from the registration calculation, position the images. Mosaicing. The process of combining many smaller images to form one larger image, using the results of the correlation-stitching registration calculation. Overlapping region. The region in images that share the same coordinates in a common coordinate system. Reference image. The image with respect to whose coordinate system you set the rough location of another image. Each image must be positioned with respect to either a reference image's pixel coordinate system or the global pixel coordinate system. Registration. The registration of images involves the fusion of multiple images of a common scene to obtain some resulting image. Registration element. A data structure that stores the settings used to control the registration of a specific image. Registration elements are located in the registration context. Registration element's image. The image whose index in the image array is the same as the index of a particular registration element. The registration of an image is controlled by the contents of its associated registration element. Registration context. A MIL object that stores the registration information and each individual registration element. Rough location. Approximate location of an image in its reference image's pixel coordinate system. The registration calculation finds the transformation that will convert the image's rough location into its optimal location in the global pixel coordinate system. Transformation matrix. A matrix that maps a set of coordinates from a source coordinate system into a destination coordinate system. Basic concepts for correlation-stitching registration ",
      "wordCount": 274,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Correlation_stitching_registration_process",
      "version": null,
      "title": "Correlation-stitching registration process",
      "subTitles": null,
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Correlation_stitching_registration_process.htm",
      "text": " Correlation-stitching registration process For correlation-stitching registration, MregCalculate() takes a series of images and their rough locations in another image's pixel coordinate system or the global pixel coordinate system, and applies the following three step process to determine the transformations that optimally position each image in the global pixel coordinate system. Each image is first transformed into its rough location in the pixel coordinate system of its reference image (specified using MregSetLocation()). This initial rough alignment of each image with its reference image creates a region in which both images overlap, which is necessary for the correlation-stitching registration process to be successful. For each image, the correlation-stitching registration operation then finds the transformation that optimizes the match in the overlapping region between the image and its reference image; this is referred to as the optimization step. You can control the type of transformation that the algorithm can use to reposition the image from its rough location (for example, a translation or a perspective warping), using MregControl() with M_TRANSFORMATION_TYPE. For more information, see the Selecting the transformation type subsection of the Customizing your registration settings section later in this chapter. Once the optimal transformations that place each image in its reference image's pixel coordinate system are found, each transformation is converted so that it maps the image into the global pixel coordinate system instead. Note that for the image whose reference coordinate system is the global pixel coordinate system, no correlation-stitching registration is performed and the optimal transformation is the same as the one set with MregSetLocation(). Correlation-stitching registration uses normalized grayscale correlation to optimize the match in the overlapping regions. Subsections within the overlapping regions are chosen and a pixel by pixel normalized grayscale correlation is calculated on each of the subsections. The MregCalculate() function then finds the best possible correlation between the subsections of the overlapping regions and computes the transformations required to obtain this alignment. By applying the correlation algorithm on subsections within an overlapping region instead of on the whole overlapping region, the algorithm is more resistant to local changes in contrast and intensity within the images. For a better understanding of the normalized grayscale correlation algorithm, see the Pattern matching algorithm (for advanced users) section of Chapter 7: Pattern matching. Correlation-stitching registration process ",
      "wordCount": 378,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Registration_elements_for_correlation_stitching",
      "version": null,
      "title": "Registration elements and images for correlation-stitching",
      "subTitles": null,
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Registration_elements_for_correlation_stitching.htm",
      "text": " Registration elements and images for correlation-stitching The settings used to control the correlation-stitching registration calculation are specified in registration elements, located in the registration context. The results of the calculation are stored, per image in the registration result buffer. The result buffer can also store the settings for operations that use the correlation-stitching registration results, such as mosaicing. Each image in the image array passed to MregCalculate() is associated with the registration element and its registration image result whose index matches its own array index. For a correlation-stitching registration or mosaicing operation, each registration element controls how the registration of its associated image is performed. Each registration image result stores the results and settings for its associated image. This offers you the flexibility of being able to reuse registration settings and/or results with many different series of input images. For example, when composing a mosaic, images are combined to form one larger image according to the positions calculated during the registration. The freedom to reuse registration results with more than one series of input images allows you to perform the registration calculation once and quickly generate multiple mosaics. The following diagram illustrates the relationship that exists between the registration elements, the input images, and the registration image results. It is important to know the index of the images in the input image array so that you can properly set up their corresponding registration elements. Also, you need to have at least as many registration elements as images. To verify that the number of registration elements is sufficient for your application, use MregInquire() with M_NUMBER_OF_REGISTRATION_ELEMENTS. The default number is 256. To increase or decrease the number of registration elements, use MregControl() with M_NUMBER_OF_REGISTRATION_ELEMENTS. Note that it is possible to have more registration elements than images; for information on this, see the Skipping the optimization step subsection of the Customizing your registration settings section later in this chapter. The following diagram illustrates how images and registration elements tie in with MregSetLocation(), MregTransformImage(), MregTransformCoordinate(), MregTransformCoordinateList(), and MregCalculate() in the Registration module. Note that there is no direct link in the diagram between the images and the MregSetLocation() function because you set the rough location of your images using registration elements, and not the images themselves. However, knowledge of the relationships between your images is necessary and will be discussed in the Setting the rough location of your images section later in this chapter. With the functions that do require input images (MregCalculate() and MregTransformImage()), you can use more than one series of images with the same registration context or registration result buffer. Registration elements and images for correlation-stitching ",
      "wordCount": 437,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Setting_the_rough_location_of_your_images",
      "version": null,
      "title": "Setting the rough location of your images",
      "subTitles": [
        "Selecting an image's reference coordinate system",
        "Specifying the type of transformation and its settings",
        "Copying the rough location",
        "Precision of the rough location and its effect on speed"
      ],
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Setting_the_rough_location_of_your_images.htm",
      "text": " Setting the rough location of your images Once you have specified an appropriate number of registration elements, you can specify the rough location of the images. To do so, call MregSetLocation() for each input image and set its rough location by specifying the following: The registration element that will store the rough location information for the image. Relative to which coordinate system you are specifying the location. The transformation that specifies the rough location of the image in this reference coordinate system. MregSetLocation() also allows you to copy this information from another registration element or from the results of a previous registration operation. Selecting an image's reference coordinate system When specifying the rough location, one image must be positioned relative to the global pixel coordinate system; all other images must be positioned relative to another image's pixel coordinate system. This coordinate system is referred to as the image's reference coordinate system. By default, an image's reference coordinate system is that of the registration element's image whose index precedes the current registration element's index. For the image associated with registration element 0, the default reference coordinate system is the global pixel coordinate system. This is illustrated in the image below. To set an image relative to another image's pixel coordinate system, you must specify the index of that image's registration element when calling MregSetLocation(). Also, for the registration to be successful, it is necessary that each image and its reference image overlap. For information on the required minimum overlap between images, see the Specifying the minimum overlap between images subsection of the Customizing your registration settings section later in this chapter. For the image positioned relative to the global pixel coordinate system, the concept of overlapping does not apply. For this image, the transformation that roughly positions it in the global pixel coordinate system is also the optimal transformation. When you call MregCalculate() this transformation is copied to the result buffer as the resulting transformation for the image. You must not define the images' reference coordinate systems in a circular manner (see the diagram below). Note that MregSetLocation() will not return an error if the reference coordinate systems have been defined in a circular manner. An error will only be generated once you call MregCalculate(). Specifying the type of transformation and its settings Once you have set each image's reference coordinate system, specify the transformation that will roughly map the image into this coordinate system, and thereby set the image's rough location. Specifying the rough location is optional, but improves performance. To set the rough location, use MregSetLocation() to copy transformation settings, or specify a translation, translation with rotation, or perspective warping transformation. When you specify a translation transformation (using MregSetLocation() with M_POSITION_XY), you must specify the X- and Y-offsets between any point in the current image's pixel coordinate system and the same point in its reference coordinate system. These offsets specify the rough location of the current image within the reference coordinate system. The following example illustrates these X- and Y-offsets. In the case of an image that is rotated relative to its reference coordinate system you can set the rough location via a translation transformation and a rotation transformation (using MregSetLocation() with M_POSITION_XY_ANGLE). The other type of transformation that you can specify is a perspective warping, using MregSetLocation() with M_WARP_POLYNOMIAL, M_WARP_4_CORNER, or M_WARP_4_CORNER_REVERSE. If you specify a perspective warping, you can specify the mapping between the image's pixel coordinate system and the reference coordinate system in one of the following ways: Using a transformation matrix (when using a warping of type M_WARP_POLYNOMIAL). Using a table containing 4 points in the source image and their corresponding points in the destination image (when using a warping of type M_WARP_4_CORNER or M_WARP_4_CORNER_REVERSE). For more information on warping, see the Warping section of Chapter 4: Advanced image processing. Note that when you are setting the location of your images, the transformation used to position an image relative to its reference coordinate system can be different from one image to the next. For example, you can position one image using a translation and another image using a perspective warping. Copying the rough location In some cases, you might have cameras set up at a fixed distance from one another to take sequential, partially overlapping images of a large object. The transformation information, as it relates to the previous image, is the same for each image. Rather than specifying this information for each image, you can copy this information from one registration element to another, using MregSetLocation() with M_COPY_REG_CONTEXT or M_COPY_REG_RESULT. In some other cases, you might take several images of the same area to ensure that the registration results are extremely precise. To perform the registration you would probably want to select one of these images as the reference image and obtain registration results for one image in the selected reference image. Then, you would want to use the transformation results of the registration, to specify the rough location of another image relative to the same reference image. Rather than repeatedly getting results to set the rough locations, you can copy this transformation information directly from the result buffer to the registration element using MregSetLocation() with M_COPY_REG_RESULT. When copying the transformation information, you can also copy the reference index of the element from which you are copying by setting the Target parameter to M_COPY. Alternatively, you can specify a different reference index. The following image shows how you can use MregSetLocation() to recursively optimize references by copying optimized transformations into new registration contexts: The following code snippet demonstrates how using MregSetLocation() simplifies copying the transformation information: ElementArray[0] = ReferenceImageId; ElementArray[1] = GrabImageId; // WITHOUT M_COPY_REG_RESULT. // Grab the reference image. MdigGrab(DigId, ReferenceImageId); // Set the origin reference MregSetLocation(ContextId, 0, M_REGISTRATION_GLOBAL, M_POSITION_XY, 0, 0, M_NULL, M_NULL, M_DEFAULT); // Continuously grab new images and align them to the reference image. while (1) { // Grab a new image. MdigGrab(DigId, GrabImageId); // Calculate the transformation that aligns the grabbed image // with the reference image. MregCalculate(ContextId, ElementArray, RegResultId, 2, M_DEFAULT); // The rough location of the next iteration will be the position // that has just been calculated in this iteration. MregGetResult(RegResultId, 1, M_POSITION_X+M_REFERENCE, &amp;PositionX); MregGetResult(RegResultId, 1, M_POSITION_Y+M_REFERENCE, &amp;PositionY); MregSetLocation(ContextId, 1, 0, M_POSITION_XY, PositionX, PositionY, M_NULL, M_NULL, M_DEFAULT); } // WITH M_COPY_REG_RESULT. // Grab a reference image. MdigGrab(DigId, ReferenceImageId); // Set the origin reference MregSetLocation(ContextId, 0, M_REGISTRATION_GLOBAL, M_POSITION_XY, 0, 0, M_NULL, M_NULL, M_DEFAULT); // Continuously grab new images and align them to the reference image. while (1) { // Grab a new image. MdigGrab(DigId, GrabImageId); // Calculate the transformation that aligns the grabbed image // with the reference image. MregCalculate(ContextId, ElementArray, RegResultId, 2, M_DEFAULT); // The rough location of the next iteration will be the position // that has just been calculated in this iteration. MregSetLocation(ContextId, 1, 0, M_COPY_REG_RESULT, (MIL_DOUBLE)RegResultId, M_DEFAULT, M_DEFAULT, M_NULL, M_DEFAULT); } Precision of the rough location and its effect on speed In general, the more precise the rough location of your images (specified with MregSetLocation()), the faster your registration calculation will be. For example, you might know the precise location of your images. If this situation arises, it is possible to skip the optimization step of the registration calculation and only convert the transformations which specify the images' rough locations into the global pixel coordinate system (discussed later in this chapter). This is much faster than having to optimize each transformation in addition to performing the conversion. Alternatively, you might not know anything about your images aside from how they relate to each other. In this case, the rough locations will be very vague and the optimization step of the registration calculation could be relatively long. Customize the optimization step of the registration calculation using MregControl() with M_TRANSFORMATION_TYPE. For example, once the rough location is specified, and if you know that rotation will be necessary to align the images correctly, then you must change the M_TRANSFORMATION_TYPE control type from its default value. For more information, see the Selecting the transformation type subsection of the Customizing your registration settings section later in this chapter. Setting the rough location of your images Selecting an image's reference coordinate system Specifying the type of transformation and its settings Copying the rough location Precision of the rough location and its effect on speed ",
      "wordCount": 1377,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Customizing_your_correlation_stitching_registration_settings",
      "version": null,
      "title": "Customizing your registration settings",
      "subTitles": [
        "Selecting the transformation type",
        "Specifying the maximum allowable displacement",
        "Skipping the optimization step",
        "Specifying the minimum overlap between images",
        "Accuracy",
        "Setting the origin of an image's pixel coordinate system"
      ],
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Customizing_your_correlation_stitching_registration_settings.htm",
      "text": " Customizing your registration settings Once you have set the rough location of your images, you can customize how to perform the registration operation, using MregControl(). Some of the following settings will affect the registration process in general, whereas others will affect the registration of a specific image. Selecting the transformation type You can control the type of transformation that the registration operation can use to optimize the match in the overlapping region, using MregControl() with M_TRANSFORMATION_TYPE. This is a global setting and it will affect the registration of all your images. The Registration module can optimize the match using a translation, a translation with rotation, a translation with rotation and scale, or a perspective transformation (M_TRANSLATION, M_TRANSLATION_ROTATION, M_TRANSLATION_ROTATION_SCALE, and M_PERSPECTIVE respectively). Choosing between the types is not always obvious and will depend on the way the images were taken, as well as the precision used when setting the rough location of the images. For example, if the camera that captured the images moved only from side to side or up and down, then a translation transformation should be sufficient to optimize the alignment. Alternatively, if the camera made more complex movements when capturing the series of images, such as rotating, tilting, zooming, or panning, a perspective transformation should produce a more accurate alignment. The optimal transformation depends on how you specified the rough location of your images. Taking the latter example, although the camera made complex movements, if you precisely specified how each image maps into its reference image's pixel coordinate system, you might only need a translation to perfect the alignment. Note that if you are not sure which transformation type to select, select the perspective transformation since it is more general. However, if you are sure a translation will result in an optimal alignment, it is faster to use a translation transformation than it is to use the more general perspective transformation. The following example shows a pair of images, first placed according to their rough locations and then according to their positions calculated using MregCalculate(), in which a perspective warping transformation type was permitted. Notice how the distorted quadrilateral was successfully warped so that it overlaps with the corresponding square in its reference image. Specifying the maximum allowable displacement You can set the maximum displacement that the transformation can shift the pixels in the images during registration to optimize the match in the overlapping regions. To do so, use MregControl() with M_LOCATION_DELTA and specify the maximum displacement as a percentage of the biggest dimension in the images to align. The default setting is 5%. This is a global setting and it will affect the registration of all your images. In general, the more precise you are in setting the rough location of your images (using MregSetLocation()), the faster your registration calculation can be. Being more precise when setting the location of your images allows you to set a smaller value for the maximum displacement, which results in a faster calculation. A more general location means that you must specify a larger maximum displacement; consequently, the algorithm will have to search a much broader area of the images to find an optimal match, making the calculation longer. Skipping the optimization step When the precise location of one or more images is already known, you can bypass the optimization step of the registration calculation. If you choose to do so, for each of these images, the transformation specified in MregSetLocation() represents the optimal transformation. When you call MregCalculate(), the specified transformation will be converted so that it maps the image into the global pixel coordinate system instead of into its reference image's pixel coordinate system. There are two ways of bypassing the optimization step of the registration of an image (image X). They differ in how other images using image X as their reference will be registered. You can disable the MregControl() M_OPTIMIZE_LOCATION control type of image X's registration element. If another image (image A) is to be registered with respect to image X, the optimization step of image A's registration will still be performed. You can replace image X in the image array by M_NULL. Since the registration calculation does not have access to image X, no overlapping region will exist between it and any other images. Therefore, if image A is to be registered with respect to image X, the optimization step of image A's registration will not be performed (even if M_OPTIMIZE_LOCATION is enabled). In this case, image A's optimal transformation is the one set with MregSetLocation(). The following illustration gives an example of the two ways of bypassing the optimization step during the registration of an image, and their different effects on other images. Specifying the minimum overlap between images To increase the speed and robustness of the registration, you can specify the minimum overlap between each image and its reference image, using MregControl() with M_MIN_OVERLAP. This is a global setting and affects the registration of all images. Express the overlap as a percentage of the smallest of the two images. MregSetLocation() will not generate an error if the specified rough location does not comply with the minimum overlap setting. However, when you call MregCalculate(), the optimization step of the registration calculation is not performed for this particular image. In addition, you will get M_FAILURE if you retrieve the calculation result using MregGetResult() with M_RESULT, for either the overall registration process or the registration of the individual image. Accuracy You can control the accuracy of the registration calculation using MregControl() with M_ACCURACY. This is a global setting and it will affect the registration of all your images. Registration accuracy can be set to one of the following: M_LOW or M_HIGH. The default setting is M_HIGH. When you set the accuracy to high, the registration calculation is performed with subpixel accuracy. To perform the calculation with pixel accuracy, set M_ACCURACY to M_LOW. Setting the origin of an image's pixel coordinate system In certain cases, it can be useful to individually choose the origin of an image's pixel coordinate system instead of using the image's default coordinate system (the center of the image's top-left pixel). To do so, use MregControl() with M_REFERENCE_X and M_REFERENCE_Y to set the coordinates of the origin to any point inside or outside of the image. An example of when this is useful is when the image is stored in a child buffer, and you know its exact location within the parent buffer. Another example is when images are taken with respect to a moving point, such as the corner of a moving table. In this case, the origin of your images' pixel coordinate systems can be set to that point. It is very important to be aware of the origin of each image's pixel coordinate system, especially when trying to set the location of your images with MregSetLocation(). It is also crucial to know the origin of an image's pixel coordinate system when performing other operations in the Registration module, such as composing a mosaic or transforming coordinates from a source coordinate system to a destination coordinate system. Customizing your registration settings Selecting the transformation type Specifying the maximum allowable displacement Skipping the optimization step Specifying the minimum overlap between images Accuracy Setting the origin of an image's pixel coordinate system ",
      "wordCount": 1211,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Retrieving_and_analyzing_correlation_stitching_registration_settings",
      "version": null,
      "title": "Retrieving and analyzing results",
      "subTitles": [
        "Possible results",
        "Using the results",
        "Drawing results"
      ],
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Retrieving_and_analyzing_correlation_stitching_registration_settings.htm",
      "text": " Retrieving and analyzing results After having successfully registered your images using MregCalculate(), you can extract the required results from your result buffer using MregGetResult(). Possible results Registration produces several types of results which provide information on the calculated positions for the images in the global pixel coordinate system and the success of the registration calculation. Results can be returned for: Whether the registration was successful, globally or for an individual image (M_RESULT). The score of the registration, globally or for an individual image (M_SCORE). The X- and Y-coordinates of the origin of each image's pixel coordinate system in the global/reference coordinate system (M_POSITION_X and M_POSITION_Y). The coordinates of the four corners of each image in the global/reference coordinate system (M_TRANSFORMED_...). The identifier of the internal buffer that stores the forward or reverse transformation matrix, used to transform a position in an image into its position in the global/reference coordinate system or vice versa (M_TRANSFORMATION_MATRIX_ID, M_REVERSE_TRANSFORMATION_MATRIX_ID). The forward or reverse transformation matrix data, used to transform a position in an image into its position in the global/reference coordinate system or vice versa (M_TRANSFORMATION_MATRIX, M_REVERSE_TRANSFORMATION_MATRIX). The width and height that the mosaic will have when it is composed (M_MOSAIC_SIZE_X and M_MOSAIC_SIZE_Y). This information is useful to determine the size of the destination image buffer needed to hold the mosaic. You can retrieve general results for the entire registration calculation or specific results for each registration image. For a complete description of all possible results, refer to the description of MregGetResult() in the MIL Reference. Using the results There are several ways that you can use the results of the registration. You can use them to create a mosaic, or to improve the resolution of the images using super-resolution. For more information on mosaicing, see the Mosaicing and super-resolution section later in this chapter. Furthermore, you can use MregTransformCoordinate() or MregTransformCoordinateList() to convert a pair or a list of coordinates between two of the following coordinate systems: the global pixel coordinate system, an image's pixel coordinate system, or a mosaic's coordinate system. In addition, you can pass the retrieved identifier of the buffer containing the forward or reverse transformation matrix to MimWarp() and use it to warp other images. Drawing results Using the MregDraw() function, you can draw boxes in a destination image buffer or 2D graphics list that outline the calculated positions (in the global pixel coordinate system) for the images. You can choose to draw in the display's overlay buffer. By drawing into the display's overlay buffer, you can annotate an image non-destructively (see the Annotating the displayed image non-destructively section of Chapter 25: Displaying an image). You can use a previously allocated 2D graphics context (see Chapter 26: Generating graphics) to control the drawing color, or use the default 2D graphics context (M_DEFAULT). You can also draw a zoomed version of the boxes that outline the images' positions. To do so, use MgraControl() with M_DRAW_OFFSET_X, M_DRAW_OFFSET_Y, M_DRAW_ZOOM_X, and M_DRAW_ZOOM_Y. The relative origin values must be specified in pixels and represent the coordinates in the mosaic's coordinate system that will appear at the top-left corner of the destination buffer. The scale values specify the X- and Y-scaling factors used to fill the destination buffer. Retrieving and analyzing results Possible results Using the results Drawing results ",
      "wordCount": 546,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Mosaicing",
      "version": null,
      "title": "Mosaicing and super-resolution",
      "subTitles": [
        "Positioning and scaling your mosaic in the destination image buffer",
        "Mosaic composition in the overlapping regions",
        "Mosaic composition using super-resolution"
      ],
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Mosaicing.htm",
      "text": " Mosaicing and super-resolution Once you have performed the registration of images, you can use the results to create a mosaic. Mosaicing combines images to form one larger image or to create an image with improved resolution (super-resolution). To combine the images, mosaicing uses the transformations calculated during the registration. To perform mosaicing, use MregTransformImage(). You can create mosaics from different series of images using the results of one correlation-stitching registration calculation. This is useful, for example, if you have a camera that is taking a series of images and the camera's position is moved between each snapshot. If you take another series of images and the camera's position for each individual image is the same as it was for the previous series of images, then you can perform the registration calculation once (for the first series), and re-use the results, stored in the registration result buffer, to compose a mosaic with the subsequent series of images. Note that any slight change between the original camera position and the ones used to take a subsequent series of images will result in a mosaic in which the images are not optimally aligned. You can also omit certain images from a series of images when producing a mosaic. For example, you might want to add each image to a mosaic as soon as it is grabbed. You can do this by calling MregTransformImage(), omitting all the images in the input array except for the grabbed one, and passing the same destination image (the one containing the partial mosaic) upon each call. To omit an image from the input array, replace the identifier of the image by M_NULL. There also exist various correlation-stitching registration result buffer settings that affect the composition of your mosaic; you can control their settings using MregControl() with M_GENERAL. These are discussed in the following subsections. Positioning and scaling your mosaic in the destination image buffer You can control the orientation, position, and scale of your mosaic in the destination image buffer using MregControl() with M_MOSAIC_STATIC_INDEX, M_MOSAIC_OFFSET_X, M_MOSAIC_OFFSET_Y, and M_MOSAIC_SCALE respectively. You specify the coordinate system relative to which your mosaic will be oriented when it is composed, using M_MOSAIC_STATIC_INDEX. To compose the mosaic relative to a specific image, specify the image's index; the origin of the image's pixel coordinate system will be placed at the center of the top-left pixel of the destination image (assuming no offsets were specified). In addition, this image will be placed upright in the mosaic, and the other images will be positioned relative to its coordinate system. The other possible choice is to compose the mosaic relative to the global pixel coordinate system, in which case the origin of the global pixel coordinate system will appear at the center of the top-left of the destination image buffer (assuming no offsets were specified). Consequently, the images in the mosaic will be oriented according to their calculated positions. The default is the coordinate system of the image associated with the first registration result element. Once you have specified the coordinate system relative to which the mosaic will be composed, you can set the X- and Y-offset between the origin of this coordinate system and the center of the top-left pixel of the destination image buffer, using MregControl() with M_MOSAIC_OFFSET_X and M_MOSAIC_OFFSET_Y. This offset allows you to control the location of the mosaic in the destination image buffer. You can compose the mosaic so that the left-most point of the mosaic appears at the complete left of the destination image buffer; to do so, set M_MOSAIC_OFFSET_X to M_ALIGN_LEFT. Similarly, to place the top-most point of the mosaic at the complete top of the destination image, set M_MOSAIC_OFFSET_Y to M_ALIGN_TOP. The X- and Y-offsets are illustrated below. You can also apply a scale factor to produce an enlarged mosaic, using MregControl() with M_MOSAIC_SCALE. A value greater than 1.0 produces an enlarged mosaic, while a value less than 1.0 produces a reduced one. Mosaic composition in the overlapping regions Although images have been aligned during the registration process to optimize the match in the overlapping regions, the pixels in these overlapping regions are not always superimposed perfectly. Furthermore, the contrast and pixel intensity of one image is not always the same as in the image it overlaps. Therefore, to create a mosaic, you must specify how the Registration module handles the overlapping regions of the images, using MregControl() with M_MOSAIC_COMPOSITION. You can choose to: Use the pixels of the image associated with the registration result element with the lowest index (M_FIRST_IMAGE). Use the pixels of the image associated with the registration result element with the highest index (M_LAST_IMAGE). This is the default. Use the average value of the images' pixels in the overlapping region (M_AVERAGE_IMAGE). Fuse the images by progressively blending overlapping pixels (M_FUSION_IMAGE). That is, overlapping pixel values are modified (blended) to form a transitional portion. Blending is based on the distance between each pixel and the edges of the images in the mosaic. Use the pixels of all the images to create a new image with enhanced resolution (M_SUPER_RESOLUTION). The following example illustrates the types of mosaic compositions that you can specify to create a larger image: The following section explains how to combine images of the same area to increase their resolution. Mosaic composition using super-resolution Super-resolution is a process where multiple source images are used to create a new image with enhanced resolution. Details that are difficult to see in the original source images are extracted and can be seen in the mosaic when it is enlarged. To compose a super-resolution mosaic, use MregControl() with M_MOSAIC_COMPOSITION set to M_SUPER_RESOLUTION. Set M_MOSAIC_SCALE to a value greater than one to enlarge the mosaic image. The following shows the comparison of an image resized using bilinear interpolation and the result of a super-resolution mosaic composition. Four source images are taken to create the mosaic and the result is scaled up three times with M_MOSAIC_SCALE. The source images need to be very accurately aligned before the mosaic composition can take place. To ensure that the images are aligned with subpixel accuracy, call MregControl() with M_ACCURACY set to M_HIGH before using MregTransformImage(). During super-resolution calculation, the Registration module tries to remove the effect of blurring caused by your image acquisition setup. For optimal results, you should set M_SR_PSF_TYPE to the point spread function (PSF) that best models how a point of light is blurred by the lens and CCD of your acquisition setup. An M_CIRCULAR PSF assumes that the setup blurs each point of light as a uniform circle. An M_GAUSSIAN PSF assumes the setup blurs each point of light according to a radially symmetric Gaussian function. An M_SQUARE PSF assumes the setup blurs each point of light according to a symmetric square function. You must specify a radius for each of these PSFs using M_SR_PSF_RADIUS; for an M_GAUSSIAN PSF, the radius corresponds to the standard deviation of the Gaussian function, and for an M_SQUARE PSF, the radius corresponds to half the length of a side of the square. A correctly estimated PSF radius can enhance the super-resolution mosaic further, while a radius which is estimated too large can create large artifacts. If your source images have noise, super-resolution mosaicing will enhance the noise in the final image. To avoid the amplification of noise, you can specify a smoothness value. However, a smoothing value which is too high can blur the image. Mosaicing and super-resolution Positioning and scaling your mosaic in the destination image buffer Mosaic composition in the overlapping regions Mosaic composition using super-resolution ",
      "wordCount": 1257,
      "subEntries": []
    },
    {
      "id": "UG_CorrelationStitchingRegistration_Correlation_stitching_registration_and_mosaicing_example",
      "version": null,
      "title": "Correlation-stitching registration and mosaicing example",
      "subTitles": null,
      "location": "MIL UG P03: 2D processing and analysis",
      "pageURL": "content\\UserGuide\\CorrelationStitchingRegistration\\Correlation_stitching_registration_and_mosaicing_example.htm",
      "text": " Correlation-stitching registration and mosaicing example The correlation stitching registration example Mreg.cpp illustrates how the module can be used to register images and compose a mosaic. mreg.cpp To run this example, use the Matrox Example Launcher in the MIL Control Center. Correlation-stitching registration and mosaicing example ",
      "wordCount": 47,
      "subEntries": []
    }
  ]
}]