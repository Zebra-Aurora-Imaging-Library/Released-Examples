[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_Processing_ProductInspection_AmpouleAndPackageInspection_CPP_ampouleandpackageinspection_cpp",
      "version": "2024020714",
      "title": "ampouleandpackageinspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //***************************************************************************************/ // // File name: AmpouleAndPackageInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program contains an example of bottle inspection using various modules. // See the PrintHeader() function below for detailed description. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ExampleManager.h\" // Include the different tasks that can be performed #include \"SimpleFixture.h\" #include \"ProductCountInspection.h\" #include \"HorizontalAndAngleAlignment.h\" #include \"VerticalAlignment.h\" #include \"PositionInspection.h\" #include \"CapOrientation.h\" //**************************************************************************** // Example description. //**************************************************************************** void PrintHeader() { MosPrintf(MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"AmpouleAndPackageInspection\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This example shows some basic inspection of ampoules\\n\") MIL_TEXT(\"and their packaging. The following features will be inspected:\\n\") MIL_TEXT(\" 1-2. Fill level and cap\\n\") MIL_TEXT(\" - Verification of the fill level\\n\") MIL_TEXT(\" - Verification of the cap position\\n\") MIL_TEXT(\" - Verification of the cap orientation\\n\") MIL_TEXT(\" 3. Packaging ampoule count\\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: Application, system, graphic, measurement,\\n\") MIL_TEXT(\" pattern matching\\n\\n\") MIL_TEXT(\"[ADDITIONNAL INSTRUCTIONS]\\n\") MIL_TEXT(\"Left click on an image to view results in a zoomable display.\\n\\n\") MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); } //**************************************************************************** // General Constants //**************************************************************************** #define ARRAY_COUNT(x) (sizeof((x))/sizeof((x)[0])) // for array on the stack only // Root filename. #define EXAMPLE_IMAGE_PATH M_IMAGE_PATH MIL_TEXT(\"AmpouleAndPackageInspection/\") //**************************************************************************** // Product 0 : Ampoules //**************************************************************************** // Image path #define PRODUCT0_PATH EXAMPLE_IMAGE_PATH MIL_TEXT(\"Product0/\") //***************************************************************************** // Main. //***************************************************************************** int MosMain(void) { // Declare the tasks to be done on the product. // View 0: Front label of the bottle with the cap. CHorizontalAndAngleAlignment Prod0HorzAlignment (PRODUCT0_PATH MIL_TEXT(\"HorizontalAlignmentAmpoule.mrk\"), M_RED); CVerticalAlignment Prod0VertAlignment (PRODUCT0_PATH MIL_TEXT(\"VerticalAlignmentAmpoule.mrk\"), M_RED, &amp;Prod0HorzAlignment); CSimpleFixture Prod0FillLevelFixture (0, 68, 90, &amp;Prod0VertAlignment); CPositionInspection Prod0FillLevel (PRODUCT0_PATH MIL_TEXT(\"FillLevel.mrk\"), MIL_TEXT(\"fill level\"), 0, 10, M_RED, &amp;Prod0FillLevelFixture); CCapOrientation Prod0CapOrientation (PRODUCT0_PATH MIL_TEXT(\"CapOrientation.mrk\"), 83, 5, M_RED, &amp;Prod0VertAlignment); CSimpleFixture Prod0CapPositionFixture (0, -170, 90, &amp;Prod0VertAlignment); CPositionInspection Prod0CapPosition (PRODUCT0_PATH MIL_TEXT(\"CapPosition.mrk\"), MIL_TEXT(\"cap\"), 0, 5, M_RED, &amp;Prod0CapPositionFixture); // View1 : Front label of the bottle with the cap. CHorizontalAndAngleAlignment Prod0HorzAlignment2 (PRODUCT0_PATH MIL_TEXT(\"HorizontalAlignmentAmpoule.mrk\"), M_RED); CVerticalAlignment Prod0VertAlignment2 (PRODUCT0_PATH MIL_TEXT(\"VerticalAlignmentAmpoule.mrk\"), M_RED, &amp;Prod0HorzAlignment2); CSimpleFixture Prod0FillLevelFixture2 (0, 68, 90, &amp;Prod0VertAlignment2); CPositionInspection Prod0FillLevel2 (PRODUCT0_PATH MIL_TEXT(\"FillLevel.mrk\"), MIL_TEXT(\"fill level\"), 0, 10, M_RED, &amp;Prod0FillLevelFixture2); CCapOrientation Prod0CapOrientation2 (PRODUCT0_PATH MIL_TEXT(\"CapOrientation.mrk\"), 83, 5, M_RED, &amp;Prod0VertAlignment2); CSimpleFixture Prod0CapPositionFixture2 (0, -170, 90, &amp;Prod0VertAlignment2); CPositionInspection Prod0CapPosition2 (PRODUCT0_PATH MIL_TEXT(\"CapPosition.mrk\"), MIL_TEXT(\"cap\"), 0, 5, M_RED, &amp;Prod0CapPositionFixture2); // View 2: The box containing the ampoules. CProductCountInspection Prod0Count (PRODUCT0_PATH MIL_TEXT(\"Pattern.mpat\"), 30, M_RED); CInspectionTask* Prod0Image0Tasks[] = { &amp;Prod0HorzAlignment , &amp;Prod0VertAlignment , &amp;Prod0FillLevelFixture , &amp;Prod0FillLevel , &amp;Prod0CapOrientation , &amp;Prod0CapPositionFixture , &amp;Prod0CapPosition }; CInspectionTask* Prod0Image1Tasks[] = { &amp;Prod0HorzAlignment2, &amp;Prod0VertAlignment2, &amp;Prod0FillLevelFixture2, &amp;Prod0FillLevel2, &amp;Prod0CapOrientation2, &amp;Prod0CapPositionFixture2, &amp;Prod0CapPosition2 }; CInspectionTask* Prod0Image2Tasks[] = { &amp;Prod0Count }; // Table of the task associated to each image SImageTaskList Prod0ImagesTaskList[] = { CREATE_LIST(Prod0Image0Tasks, MIL_TEXT(\"Fill level and cap\")), CREATE_LIST(Prod0Image1Tasks, MIL_TEXT(\"Fill level and cap\")), CREATE_LIST(Prod0Image2Tasks, MIL_TEXT(\"Packaging ampoule count\")) }; // The filenames of the avi files. static MIL_CONST_TEXT_PTR Prod0ImagesAvi[ARRAY_COUNT(Prod0ImagesTaskList)] = { PRODUCT0_PATH MIL_TEXT(\"View0.avi\"), PRODUCT0_PATH MIL_TEXT(\"View1.avi\"), PRODUCT0_PATH MIL_TEXT(\"View2.avi\") }; //***************************************************************************** SProductInfo ProductsInfoList[] = { { ARRAY_COUNT(Prod0ImagesTaskList), enParallel, Prod0ImagesAvi, Prod0ImagesTaskList }, }; //***************************************************************************** // Allocate application. MIL_ID MilApplication = MappAlloc(M_NULL, M_DEFAULT, M_NULL); // Allocate system. MIL_ID MilSystem = MsysAlloc(M_DEFAULT, M_SYSTEM_HOST, M_DEFAULT, M_DEFAULT, M_NULL); MosPrintf(MIL_TEXT(\"AMPOULE AND PACKAGE INSPECTION:\\n\")); MosPrintf(MIL_TEXT(\"---------------------------------------\\n\\n\")); // Print the header. PrintHeader(); // Allocate the example manager. CExampleMngr *pExampleManager = new CExampleMngr(MilSystem); // Run the example. pExampleManager-&gt;Run(ProductsInfoList, ARRAY_COUNT(ProductsInfoList)); // Free the example manager. delete pExampleManager; // Free the system MsysFree(MilSystem); // Free the application MappFree(MilApplication); return 0; } ",
      "wordCount": 526
    },
    {
      "id": "Examples_Processing_ProductInspection_AmpouleAndPackageInspection_CPP_caporientation_cpp",
      "version": "2024020714",
      "title": "caporientation.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: CapOrientation.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CSimpleFixture class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include &lt;math.h&gt; #include \"CapOrientation.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CCapOrientation::CCapOrientation(MIL_CONST_TEXT_PTR MeasMarkerPath, MIL_DOUBLE ExpectedWidth, MIL_DOUBLE WidthTolerance, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasMarkerPath, ColorConversion, FixtureProvider, ImageProvider), m_ExpectedWidth(ExpectedWidth), m_WidthTolerance(WidthTolerance) { } //***************************************************************************** // Destructor. //***************************************************************************** CCapOrientation::~CCapOrientation() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CCapOrientation::Calculate(MIL_ID MilImage) { // Calculate the measurement marker if(CMeasInspectionTask::Calculate(MilImage)) { // Get the results MmeasGetResult(MilResult(), M_STRIPE_WIDTH, &amp;m_Width, M_NULL); } // Even if the stripe is not found the inspection is still valid. return true; } //***************************************************************************** // Draw text result //***************************************************************************** void CCapOrientation::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Cap orientation: UNKNOWN\")); } else { if(IsResultValid() &amp;&amp; fabs(m_ExpectedWidth - m_Width) &lt;= m_WidthTolerance) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Cap orientation: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Cap orientation: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } //***************************************************************************** // Draw graphical result //***************************************************************************** void CCapOrientation::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_EDGES, M_DEFAULT, M_RESULT); } ",
      "wordCount": 238
    },
    {
      "id": "Examples_Processing_ProductInspection_AmpouleAndPackageInspection_CPP_horizontalandanglealignment_cpp",
      "version": "2024020714",
      "title": "horizontalandanglealignment.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: HorizontalAndAngleAlignment.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CHorizontalALignment class // which is the class that manages the use of a region in an inspection task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"HorizontalAndAngleAlignment.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CHorizontalAndAngleAlignment::CHorizontalAndAngleAlignment(MIL_CONST_TEXT_PTR MeasMarkerPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasMarkerPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CHorizontalAndAngleAlignment::~CHorizontalAndAngleAlignment() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CHorizontalAndAngleAlignment::Calculate(MIL_ID MilImage) { // Do the measurement task if(CMeasInspectionTask::Calculate(MilImage)) { // Get the measurement results. MmeasGetResult(MilResult(), M_ANGLE, &amp;m_Angle, M_NULL); MmeasGetResult(MilResult(), M_POSITION, &amp;m_PosX, &amp;m_PosY); // Put the angle between -PI and PI PutAngleBetweenMinus180And180(m_Angle); return true; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CHorizontalAndAngleAlignment::SetFixture() { MIL_DOUBLE LineA, LineC; MmeasGetResult(MilResult(), M_LINE_A, &amp;LineA, M_NULL); MmeasGetResult(MilResult(), M_LINE_C, &amp;LineC, M_NULL); // Create the output fixture intersection of the line and the y = 0(according to the source fixture) vertical axis SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, -LineC/LineA, 0, m_Angle-90, M_DEFAULT); } //***************************************************************************** // Draw graphical result //***************************************************************************** void CHorizontalAndAngleAlignment::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_RESULT); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_POSITION, M_DEFAULT, M_RESULT); } //***************************************************************************** // Draw text result //***************************************************************************** void CHorizontalAndAngleAlignment::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Horizontal alignment: UNKNOWN\")); } else { if(IsResultValid()) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Horizontal alignment: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Horizontal alignment: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 290
    },
    {
      "id": "Examples_Processing_ProductInspection_AmpouleAndPackageInspection_CPP_productcountinspection_cpp",
      "version": "2024020714",
      "title": "productcountinspection.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: ProductCountInspection.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CSimpleFixture class. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"ProductCountInspection.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CProductCountInspection::CProductCountInspection(MIL_CONST_TEXT_PTR PatModelPath, MIL_INT ExpectedNumber, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CPatMatchingTask(PatModelPath, ColorConversion, FixtureProvider, ImageProvider), m_ExpectedNumber(ExpectedNumber) { } //***************************************************************************** // Destructor. //***************************************************************************** CProductCountInspection::~CProductCountInspection() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CProductCountInspection::Calculate(MIL_ID MilImage) { // Calculate the number of products. CPatMatchingTask::Calculate(MilImage); return true; } //***************************************************************************** // Draw text result //***************************************************************************** void CProductCountInspection::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Product count: UNKNOWN\")); } else { if(IsResultValid() &amp;&amp; GetNumberFound() == m_ExpectedNumber) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Product count: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Product count: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } //***************************************************************************** // Draw graphical result //***************************************************************************** void CProductCountInspection::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { // Draw the position MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MpatDraw(MilGraContext, MilResult(), MilDest, M_DRAW_POSITION, M_DEFAULT, M_DEFAULT); } ",
      "wordCount": 202
    },
    {
      "id": "Examples_Processing_ProductInspection_AmpouleAndPackageInspection_CPP_verticalalignment_cpp",
      "version": "2024020714",
      "title": "verticalalignment.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //*************************************************************************************** // // File name: VerticalAlignment.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This file contains the implementation of the CVerticalAlignment class // which is the class that manages the use of a region in an inspection task. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved #include &lt;mil.h&gt; #include \"VerticalAlignment.h\" //***************************************************************************** // Constants. //***************************************************************************** //***************************************************************************** // Constructor. //***************************************************************************** CVerticalAlignment::CVerticalAlignment(MIL_CONST_TEXT_PTR MeasMarkerPath, MIL_INT ColorConversion /* = M_NONE */, CInspectionTask* FixtureProvider /* = M_NULL */, CInspectionTask* ImageProvider /* = M_NULL */) : CMeasInspectionTask(MeasMarkerPath, ColorConversion, FixtureProvider, ImageProvider) { } //***************************************************************************** // Destructor. //***************************************************************************** CVerticalAlignment::~CVerticalAlignment() { } //***************************************************************************** // Inspect. //***************************************************************************** bool CVerticalAlignment::Calculate(MIL_ID MilImage) { // Do the measurement task if(CMeasInspectionTask::Calculate(MilImage)) { // Get the measurement result MIL_DOUBLE PosX; MmeasGetResult(MilResult(), M_POSITION, &amp;PosX, &amp;m_PosY); return true; } return false; } //***************************************************************************** // Set fixture. //***************************************************************************** void CVerticalAlignment::SetFixture() { SetOutputFixture(M_POINT_AND_ANGLE, M_NULL, M_DEFAULT, 0, m_PosY, 0, M_DEFAULT); } //***************************************************************************** // Draw graphical result //***************************************************************************** void CVerticalAlignment::DrawGraphicalResult(MIL_ID MilGraContext, MIL_ID MilDest) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_SEARCH_REGION + M_DRAW_SEARCH_DIRECTION, M_DEFAULT, M_MARKER); MgraControl(MilGraContext, M_COLOR, M_COLOR_MAGENTA); MmeasDraw(MilGraContext, MilResult(), MilDest, M_DRAW_POSITION, M_DEFAULT, M_RESULT); } //***************************************************************************** // Draw text result //***************************************************************************** void CVerticalAlignment::DrawTextResult(MIL_ID MilGraContext, MIL_ID MilDest) { if(GetResultStatus() == eUnknown) { MgraControl(MilGraContext, M_COLOR, M_COLOR_YELLOW); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Vertical alignment: UNKNOWN\")); } else { if(IsResultValid()) { MgraControl(MilGraContext, M_COLOR, M_COLOR_GREEN); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Vertical alignment: PASS\")); } else { MgraControl(MilGraContext, M_COLOR, M_COLOR_RED); MgraText(MilGraContext, MilDest, 0, 0, MIL_TEXT(\"Vertical alignment: FAIL\")); } } MoveGraphicContextYOffset(MilGraContext, 1); } ",
      "wordCount": 248
    }
  ]
}]