[{
  "id": "Example_PlaceHolder_ID",
  "version": "2024020714",
  "title": "Example_PlaceHolder_Title",
  "wordCount": 0,
  "subEntries": [
    {
      "id": "Examples_General_M3dgraInteractive_CPP_m3dgrainteractive_cpp",
      "version": "2024020714",
      "title": "m3dgrainteractive.cpp",
      "location": "Sample Code from MIL Examples",
      "text": " Top //---------------------------------------------------------------------------- // // File name: M3dgraInteractive.cpp // Location: See Matrox Example Launcher in the MIL Control Center // // // Synopsis: This program contains an example on how to interactively edit a // 3D box geometry and control its individual handlers. It also // shows a brief usage of LOD (level of detail) settings. // // Copyright (C) Matrox Electronic Systems Ltd., 1992-2024. // All Rights Reserved //---------------------------------------------------------------------------- #include &lt;mil.h&gt; //----------------------------------------------------------------------------- // Constants. //----------------------------------------------------------------------------- static const MIL_INT DEFAULT_EDITABLE_OPACITY = 30; static const MIL_STRING PT_CLD_FILE = M_IMAGE_PATH MIL_TEXT(\"M3dgra/MaskOrganized.mbufc\"); static const MIL_STRING SAVE_PATH = MIL_TEXT(\"\"); static const MIL_STRING OUTPUT_PC_NAME = SAVE_PATH + MIL_TEXT(\"CroppedPointCloud.ply\"); //---------------------------------------------------------------------------- // Structure declarations. //---------------------------------------------------------------------------- struct SPickStruct { MIL_INT64 BoxLabel; MIL_ID Box; MIL_ID Gralist; MIL_ID OriginalContainer; MIL_ID CroppedContainer; }; enum eParentControl { Translatable, Rotatable, Scalable }; //---------------------------------------------------------------------------- // Function Declaration. //---------------------------------------------------------------------------- bool CheckForRequiredMILFile(const MIL_STRING&amp; FileName); MIL_ID Alloc3dDisplayId(MIL_ID MilSystem); MIL_INT MFTYPE BoxModifiedHandler(MIL_INT HookType, MIL_ID EventId, void* UserDataPtr); MIL_INT MFTYPE DispKeyHandler(MIL_INT HookType, MIL_ID EventId, void* UserDataPtr); void RetrieveBoxAndCrop(SPickStruct* PickStruct); void ChangeEditability(MIL_ID Mil3dGraList, MIL_ID BoxLabel, eParentControl ParentControl); MIL_INT AskMakeChoice(const std::vector&lt;MIL_CONST_TEXT_PTR&gt;&amp; Choices, const std::vector&lt;bool&gt;&amp; Values, bool Print = true); bool AskYesNo(MIL_CONST_TEXT_PTR QuestionString); MIL_INT ObtainPointCloud(MIL_STRING&amp; PointCloudFile); MIL_INT RestorePointCloud(MIL_CONST_TEXT_PTR PointCloudFilename); //----------------------------------------------------------------------------- // Main. //----------------------------------------------------------------------------- int MosMain() { MosPrintf( MIL_TEXT(\"[EXAMPLE NAME]\\n\") MIL_TEXT(\"M3dgraInteractive\\n\\n\") MIL_TEXT(\"[SYNOPSIS]\\n\") MIL_TEXT(\"This example demonstrates how to interactively edit a 3D box \\n\")\\ MIL_TEXT(\"geometry as well as setting up and using the LOD settings \\n\") MIL_TEXT(\"(level of detail) and changing the editable controls to enable \\n\") MIL_TEXT(\"and disable individual editable handles. \\n\\n\") MIL_TEXT(\"[MODULES USED]\\n\") MIL_TEXT(\"Modules used: application, system, buffer, 3D display, \") MIL_TEXT(\"3D graphics, 3D image processing. \\n\\n\")); MIL_ID MilApplication, // Application identifier. MilSystem; // System identifier. // Allocate defaults. MappAllocDefault(M_DEFAULT, &amp;MilApplication, &amp;MilSystem, M_NULL, M_NULL, M_NULL); // Check for required example files. if(!CheckForRequiredMILFile(PT_CLD_FILE)) { MappFreeDefault(MilApplication, MilSystem, M_NULL, M_NULL, M_NULL); return 0; } // Allocate the display. MIL_ID Mil3dDisplay = Alloc3dDisplayId(MilSystem); if(!Mil3dDisplay) { MappFreeDefault(MilApplication, MilSystem, M_NULL, M_NULL, M_NULL); return 0; } MIL_ID Mil3dGraList = (MIL_ID)M3ddispInquire(Mil3dDisplay, M_3D_GRAPHIC_LIST_ID, M_NULL); // Allocate and restore a point cloud. MIL_STRING PointCloudFile = MIL_TEXT(\"\"); MIL_ID PointCloud = ObtainPointCloud(PointCloudFile); MIL_ID OriginalContainer = MbufAllocContainer(MilSystem, M_PROC + M_DISP, M_DEFAULT, M_NULL); MbufConvert3d(PointCloud, OriginalContainer, M_NULL, M_REMOVE_NON_FINITE, M_COMPENSATE); if(!OriginalContainer) return EXIT_FAILURE; // Create a cropped copy of the point cloud and add it to the graphics list. MIL_ID CroppedContainer = MbufAllocContainer(MilSystem, M_PROC + M_DISP, M_DEFAULT, M_NULL); MIL_ID PointCloudLabel = M3dgraAdd(Mil3dGraList, M_ROOT_NODE, CroppedContainer, M_DEFAULT); // Create an editable box in the graphics list. // Initialize the size of the box to a fraction of the original point cloud's size. MIL_ID BoundingBox = M3dgeoAlloc(MilSystem, M_GEOMETRY, M_DEFAULT, M_NULL); M3dimStat(M_STAT_CONTEXT_BOUNDING_BOX, OriginalContainer, BoundingBox, M_DEFAULT); M3dgeoBox(BoundingBox, M_CENTER_AND_DIMENSION, M_UNCHANGED, M_UNCHANGED, M_UNCHANGED, M3dgeoInquire(BoundingBox, M_SIZE_X, M_NULL) * 0.5, M3dgeoInquire(BoundingBox, M_SIZE_Y, M_NULL) * 0.5, M_UNCHANGED, M_DEFAULT); MIL_INT64 BoxLabel = M3dgeoDraw3d(M_DEFAULT, BoundingBox, Mil3dGraList, M_ROOT_NODE, M_DEFAULT); M3dgraControl(Mil3dGraList, BoxLabel, M_EDITABLE, M_ENABLE); // This sets the boxes properties to be the same as editable. M3dgraControl(Mil3dGraList, BoxLabel, M_OPACITY, DEFAULT_EDITABLE_OPACITY); // This sets the LOD controls to make apparent the changes if active. M3dgraControl(Mil3dGraList, PointCloudLabel, M_VIEW_BASED_LOD, M_ENABLE); MIL_ID CroppingBox = M3dgeoAlloc(MilSystem, M_GEOMETRY, M_DEFAULT, M_NULL); // Create a hook to crop the container when the box is modified in the graphics list. SPickStruct PickStruct; PickStruct.Box = CroppingBox; PickStruct.BoxLabel = BoxLabel; PickStruct.Gralist = Mil3dGraList; PickStruct.OriginalContainer = OriginalContainer; PickStruct.CroppedContainer = CroppedContainer; M3dgraHookFunction( Mil3dGraList, M_EDITABLE_GRAPHIC_MODIFIED, BoxModifiedHandler, &amp;PickStruct); // Crop a first time before starting the interactivity. RetrieveBoxAndCrop(&amp;PickStruct); // Open the 3d display. M3ddispSelect(Mil3dDisplay, M_NULL, M_OPEN, M_DEFAULT); MosPrintf(MIL_TEXT(\"A 3D point cloud is restored from a ply file and displayed.\\n\")); MosPrintf(MIL_TEXT(\"The box is editable.\\n\")); MosPrintf(MIL_TEXT(\"Only the points inside the interactive box are shown.\\n\\n\")); MosPrintf(MIL_TEXT(\"- Use side box handles to resize.\\n\")); MosPrintf(MIL_TEXT(\"- Use axis arrow tips to translate.\\n\")); MosPrintf(MIL_TEXT(\"- Use axis arcs to rotate.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosGetch(); // Enable LOD degradation on action. M3ddispControl(Mil3dDisplay, M_LOD_DEGRADE_ON_ACTION, M_ENABLE); M3ddispHookFunction( Mil3dDisplay, M_KEY_DOWN, DispKeyHandler, (void*)Mil3dDisplay); M3ddispControl(Mil3dDisplay, M_AUTO_ROTATE, M_ENABLE); MosPrintf(MIL_TEXT(\"You can control the LOD (level of detail) of a point cloud \\n\")); MosPrintf(MIL_TEXT(\"and have this be shown when interacting with the display.\\n\")); MosPrintf(MIL_TEXT(\"This is used to speedup rendering during movement at the cost\\n\")); MosPrintf(MIL_TEXT(\"of temporarily hidding points and needing to calculate these LODs.\\n\")); MosPrintf(MIL_TEXT(\"The degradation on movement can be toggled using the \\\"L\\\" key in\\n\")); MosPrintf(MIL_TEXT(\"the display window. The usage of LODs must be enabled on the point\\n\")); MosPrintf(MIL_TEXT(\"cloud to see a change in the display movements.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to continue.\\n\\n\")); MosPrintf(MIL_TEXT(\"Level of Detail (lod) degrade on action : Enabled \\r\")); for(int i = 0; (i &lt;= 100) &amp;&amp; !MosKbhit(); i++) { MosSleep(50); } M3ddispControl(Mil3dDisplay, M_AUTO_ROTATE, M_DISABLE); MosGetch(); M3ddispHookFunction( Mil3dDisplay, M_KEY_DOWN + M_UNHOOK, DispKeyHandler, (void*)Mil3dDisplay); MosPrintf(MIL_TEXT(\"\\n\\n\")); ChangeEditability(Mil3dGraList, BoxLabel, Translatable); ChangeEditability(Mil3dGraList, BoxLabel, Rotatable ); ChangeEditability(Mil3dGraList, BoxLabel, Scalable ); if(AskYesNo(MIL_TEXT(\"Do you want to save the point cloud?\"))) { MbufSave(OUTPUT_PC_NAME, CroppedContainer); } MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); M3dgeoFree(CroppingBox); M3dgeoFree(BoundingBox); MbufFree(PointCloud); MbufFree(CroppedContainer); MbufFree(OriginalContainer); M3ddispFree(Mil3dDisplay); MappFreeDefault(MilApplication, MilSystem, M_NULL, M_NULL, M_NULL); return 0; } //----------------------------------------------------------------------------- // Handler call for modifying the editable box. //----------------------------------------------------------------------------- MIL_INT MFTYPE BoxModifiedHandler(MIL_INT /*HookType*/, MIL_ID /*EventId*/, void* UserDataPtr) { SPickStruct* PickStruct = static_cast&lt;SPickStruct*&gt;(UserDataPtr); RetrieveBoxAndCrop(PickStruct); return 0; } //----------------------------------------------------------------------------- // Handler call when key hit in disp. //----------------------------------------------------------------------------- MIL_INT MFTYPE DispKeyHandler(MIL_INT /*HookType*/, MIL_ID EventId, void* UserDataPtr) { // Not LOD key (M_KEY_L) so we ignore it. MIL_INT HitKey = M_NULL; M3ddispGetHookInfo(EventId, M_MIL_KEY_VALUE, &amp;HitKey); if(HitKey != M_KEY_L) { return 0; } MIL_INT DisplayId = reinterpret_cast&lt;MIL_INT&gt;(UserDataPtr); MIL_INT LodDegrade = M3ddispInquire(DisplayId, M_LOD_DEGRADE_ON_ACTION, M_NULL); // The hook is called before the setting is changed, therefore we write what it will be. MosPrintf(MIL_TEXT(\"Level of Detail (lod) degrade on action : %s \\r\"), LodDegrade == M_DISABLE ? MIL_TEXT(\"Enabled\") : MIL_TEXT(\"Disabled\")); return 0; } //----------------------------------------------------------------------------- // Crops container based on associated box. //----------------------------------------------------------------------------- void RetrieveBoxAndCrop(SPickStruct* PickStruct) { // Retrieve the edited box from the graphics list. M3dgraCopy(PickStruct-&gt;Gralist, PickStruct-&gt;BoxLabel, PickStruct-&gt;Box, M_DEFAULT, M_GEOMETRY, M_DEFAULT); // Crop the point cloud using the retrieved box. M3dimCrop(PickStruct-&gt;OriginalContainer, PickStruct-&gt;CroppedContainer, PickStruct-&gt;Box, M_NULL, M_SAME, M_DEFAULT); } //---------------------------------------------------------------------------- // Check for required files to run the example. //---------------------------------------------------------------------------- bool CheckForRequiredMILFile(const MIL_STRING&amp; FileName) { MIL_INT FilePresent = M_NO; MappFileOperation(M_DEFAULT, FileName, M_NULL, M_NULL, M_FILE_EXISTS, M_DEFAULT, &amp;FilePresent); if(FilePresent == M_NO) { MosPrintf(MIL_TEXT(\"The footage needed to run this example is missing. You need \\n\") MIL_TEXT(\"to obtain and apply a separate specific update to have it.\\n\\n\")); MosPrintf(MIL_TEXT(\"Press any key to end.\\n\\n\")); MosGetch(); } return (FilePresent == M_YES); } //----------------------------------------------------------------------------- // Allocates a 3D display and returns its MIL identifier. //----------------------------------------------------------------------------- MIL_ID Alloc3dDisplayId(MIL_ID MilSystem) { MappControl(M_DEFAULT, M_ERROR, M_PRINT_DISABLE); MIL_ID MilDisplay3D = M3ddispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(\"M_DEFAULT\"), M_DEFAULT, M_NULL); MappControl(M_DEFAULT, M_ERROR, M_PRINT_ENABLE); if(!MilDisplay3D) { MosPrintf(MIL_TEXT(\"\\n\") MIL_TEXT(\"The current system does not support the 3D display.\\n\") MIL_TEXT(\"Press any key to exit.\\n\")); MosGetch(); } return MilDisplay3D; } //---------------------------------------------------------------------------- // Modify editable settings. //---------------------------------------------------------------------------- void ChangeEditability(MIL_ID Mil3dGraList, MIL_ID BoxLabel, eParentControl ParentControl) { std::vector&lt;MIL_INT&gt; Controls; std::vector&lt;MIL_CONST_TEXT_PTR&gt; Choices; std::vector&lt;bool&gt; Values; switch(ParentControl) { case Translatable: Controls = { M_EDITABLE, M_TRANSLATABLE, M_TRANSLATABLE_X, M_TRANSLATABLE_Y, M_TRANSLATABLE_Z }; Choices = { MIL_TEXT(\"M_EDITABLE\"), MIL_TEXT(\"M_TRANSLATABLE\"), MIL_TEXT(\"M_TRANSLATABLE_X\"), MIL_TEXT(\"M_TRANSLATABLE_Y\"), MIL_TEXT(\"M_TRANSLATABLE_Z\"), MIL_TEXT(\"continue\") }; break; case Rotatable: Controls = { M_EDITABLE, M_ROTATABLE, M_ROTATABLE_X, M_ROTATABLE_Y, M_ROTATABLE_Z}; Choices = { MIL_TEXT(\"M_EDITABLE\"), MIL_TEXT(\"M_ROTATABLE\"), MIL_TEXT(\"M_ROTATABLE_X\"), MIL_TEXT(\"M_ROTATABLE_Y\"), MIL_TEXT(\"M_ROTATABLE_Z\"), MIL_TEXT(\"continue\") }; break; case Scalable: Controls = { M_EDITABLE, M_SCALABLE, M_SCALABLE_X, M_SCALABLE_Y, M_SCALABLE_Z, M_SCALABLE_X0, M_SCALABLE_X1 }; Choices = { MIL_TEXT(\"M_EDITABLE\"), MIL_TEXT(\"M_SCALABLE\"), MIL_TEXT(\"M_SCALABLE_X\"), MIL_TEXT(\"M_SCALABLE_Y\"), MIL_TEXT(\"M_SCALABLE_Z\"), MIL_TEXT(\"M_SCALABLE_X0\"), MIL_TEXT(\"M_SCALABLE_X1\"), MIL_TEXT(\"continue\") }; break; } for(int c = 0; c &lt; Controls.size(); c++) { Values.emplace_back( M3dgraInquire(Mil3dGraList, BoxLabel, Controls[c], M_NULL) == M_ENABLE); } // Get user choice MosPrintf(MIL_TEXT(\"Select a control to swap (between M_ENABLE and M_DISABLE) \\n\")); MosPrintf(MIL_TEXT(\"by pressing its respective key in the console. \\n\")); MosPrintf(MIL_TEXT(\"%s takes precedence when disabled followed by %s\"), Choices[0], Choices[1]); if(ParentControl == Scalable) { MosPrintf(MIL_TEXT(\", %s, and %s\"), Choices[2], Choices[5]); } else { MosPrintf(MIL_TEXT(\" and %s\"), Choices[2]); } MosPrintf(MIL_TEXT(\".\\n\")); MIL_INT Choice = AskMakeChoice(Choices, Values); MIL_INT Control = M_NULL; if(Choice &gt;= 0) { Control = Controls[Choice]; } while(Control != M_NULL) { // Swap control value. M3dgraControl(Mil3dGraList, BoxLabel, Control, Values[Choice] ? M_DISABLE : M_ENABLE); Values[Choice] = !Values[Choice]; // Get user choice. Choice = AskMakeChoice(Choices, Values, false); Control = M_NULL; if(Choice &gt;= 0) { Control = Controls[Choice]; } } MosPrintf(MIL_TEXT(\"\\n\\n\")); } //---------------------------------------------------------------------------- // Helper function for getting user choices. //---------------------------------------------------------------------------- MIL_INT AskMakeChoice(const std::vector&lt;MIL_CONST_TEXT_PTR&gt;&amp; Choices, const std::vector&lt;bool&gt;&amp; Values, bool Print) { MIL_INT Choice; // Print the choices. if(Print) { for(MIL_INT c = 0; c &lt; (MIL_INT)Choices.size() - 1; c++) { MIL_STRING_STREAM ChoiceStream; ChoiceStream &lt;&lt; c + 0 &lt;&lt; \". \"; ChoiceStream &lt;&lt; Choices[c]; MosPrintf(MIL_TEXT(\"\\t%s\\n\"), ChoiceStream.str().c_str()); } MosPrintf(MIL_TEXT(\"\\tPress \\\"Enter\\\" to %s. \\n\\n\"), Choices[Choices.size() - 1]); } // Print the choice values. for(int c = 0; c &lt; Values.size(); c++) { if(c != 0) { MosPrintf(MIL_TEXT(\", \")); } MIL_CONST_TEXT_PTR Value = Values[c] ? MIL_TEXT(\"Enabled\") : MIL_TEXT(\"Disabled\"); MosPrintf(MIL_TEXT(\"%d: %s\"), c, Value); } MosPrintf(MIL_TEXT(\" \\r\")); // Get the choice. do { Choice = MosGetch(); if(Choice == '\\r') { return -1; } Choice -= ('0' + 0); } while(Choice &lt; 0 || Choice &gt;= (MIL_INT)Choices.size() - 1); return Choice; } //---------------------------------------------------------------------------- // Prompts user for yes/no. //---------------------------------------------------------------------------- bool AskYesNo(MIL_CONST_TEXT_PTR QuestionString) { MosPrintf(MIL_TEXT(\"%s (y/n)?\\n\"), QuestionString); while(true) { switch(MosGetch()) { case MIL_TEXT('y'): case MIL_TEXT('Y'): return true; case MIL_TEXT('n'): case MIL_TEXT('N'): case MIL_TEXT('\\r'): return false; } } } //---------------------------------------------------------------------------- // Obtains a point cloud either from file or by calculating with example data. //---------------------------------------------------------------------------- MIL_ID ObtainPointCloud(MIL_STRING&amp; PointCloudFile) { MIL_ID MilPointCloud; do { if(PointCloudFile != MIL_TEXT(\"\")) MilPointCloud = RestorePointCloud(PointCloudFile.c_str()); else if(AskYesNo(MIL_TEXT(\"Do you want to load a user point cloud\"))) { MosPrintf(MIL_TEXT(\"Select a .mbufc or .ply point cloud file.\\n\\n\")); MilPointCloud = RestorePointCloud(M_NULL); } else { MosPrintf(MIL_TEXT(\"The example will run using a point cloud \") MIL_TEXT(\"from example source data.\\n\\n\")); if(!CheckForRequiredMILFile(PT_CLD_FILE)) return M_NULL; MilPointCloud = RestorePointCloud(PT_CLD_FILE.c_str()); } } while(!MilPointCloud); return MilPointCloud; } //---------------------------------------------------------------------------- // Restores the registration result from file. //---------------------------------------------------------------------------- MIL_ID RestorePointCloud(MIL_CONST_TEXT_PTR PointCloudFilename) { // Restore the 3dreg result. MappControl(M_DEFAULT, M_ERROR, M_PRINT_DISABLE); auto MilPointCloud = MbufImport(PointCloudFilename, M_DEFAULT, M_RESTORE, M_DEFAULT_HOST, M_NULL); MappControl(M_DEFAULT, M_ERROR, M_PRINT_ENABLE); // The restored file must be a convertible container. if(MilPointCloud &amp;&amp; (MobjInquire(MilPointCloud, M_OBJECT_TYPE, M_NULL) != M_CONTAINER || MbufInquireContainer(MilPointCloud, M_CONTAINER, M_3D_CONVERTIBLE, M_NULL) == M_NOT_CONVERTIBLE)) { MbufFree(MilPointCloud); MilPointCloud = M_NULL; } // Verify that the result is valid. if(!MilPointCloud) MosPrintf(MIL_TEXT(\"No valid .mbufc file restored.\\n\\n\")); return MilPointCloud; } ",
      "wordCount": 1593
    }
  ]
}]