[{
  "id": "UG_fixturing",
  "version": "2024020714",
  "title": "Fixturing in MIL",
  "subTitles": null,
  "location": "MIL UG P04: 2D related information",
  "pageURL": "content\\UserGuide\\fixturing\\ChapterInformation.htm",
  "text": " Chapter 29: Fixturing in MIL This chapter describes the technique of fixturing and how to apply it. Fixturing in MIL Steps for fixturing Basic concepts for fixturing Calibration and one or many fixtures If you don't really need to work in real world units except for fixturing purposes Multiple relative coordinate systems Moving the relative coordinate system Moving using a model Moving using a metrology reference frame Moving using a position and angle expressed in a specified relative coordinate system Moving using a position and angle that are with respect to the absolute coordinate system Moving using a point and direction point that are with respect to the relative coordinate system Moving the relative coordinate system in 3D Copying the new relative coordinate system to other images Fixturing offset Fixturing offset for convenience Moving the reference location prior to searching Moving the relative coordinate system to a logical offset from a reference location Fixturing offset to decouple the reference location from the object to analyze Establishing the positional and angular offset for the fixturing offset object After fixturing Inputting values in real-world units Results in world units Restricting processing/analysis to a region of interest defined in world units Transforming your images after fixturing ",
  "wordCount": 205,
  "subEntries": [
    {
      "id": "UG_fixturing_Fixturing_in_MIL",
      "version": null,
      "title": "Fixturing in MIL",
      "subTitles": null,
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\Fixturing_in_MIL.htm",
      "text": " Fixturing in MIL Some production methods use mechanical fixtures or robots to present a part to be inspected. In those cases, the vision system always sees the part in the same position and orientation. However, in many cases, the objects are not physically fixtured and move in the field of view; in these cases, MIL allows you to fixture the objects in software. In MIL, fixturing is implemented using the relative coordinate system of an image. For each instance of an object, you move the relative coordinate system of the image to a fixed positional and angular offset from the object, based upon some previous analysis. If you specify settings for the processing and analysis of the object relative to this coordinate system, you won't need to re-adjust these settings for each object. Since the distance and orientation between the relative coordinate system and the target object are kept the same, the coordinates of the target object are the same. This also means that you also avoid transforming results obtained from different instances of an object for comparison purposes. The relative coordinate system is a coordinate system defined in real-world units in the absolute (world) coordinate system of an image. You define both the absolute and relative coordinate systems using the MIL Camera Calibration module. The absolute coordinate system is established when calibrating the camera setup. If you don't really need to work in real-world units except for fixturing purposes, you can associate the default uniform camera calibration context with your image; this sets the absolute coordinate system to have the same origin and orientation as the pixel coordinate system and sets the world units equal to 1 pixel. Fixturing is a useful precursor, for example, to using the MIL Measurement module because the box search region must be placed very precisely around the object characteristics to analyze. If the object is not at a fixed location and fixturing is not used, you would need to explicitly move the box search region at different locations. With fixturing, the box search region placement settings can be left untouched; the box will be moved automatically according to the movement of the relative coordinate system. The following animation illustrates the general process of fixturing, where the relative coordinate system is fixtured to each instance of the nail, before placing the MIL Measurement module's search region with respect to the relative coordinate system and then performing the analysis. Choosing the new location (position and angle) for the relative coordinate system is crucial for fixturing. For flexibility, the new location can be specified as a combination of a calculated reference location for the object and a preestablished offset to apply to this reference location. This is useful if the reference location is not at an ideal location for the relative coordinate system. When fixturing, you can also restrict processing and analysis to a region of the object, using a region of interest in the image buffer. If the region of interest is defined with respect to the relative coordinate system, it will automatically be moved when the relative coordinate system moves. Fixturing in MIL ",
      "wordCount": 521,
      "subEntries": []
    },
    {
      "id": "UG_fixturing_Steps_for_fixturing",
      "version": null,
      "title": "Steps for fixturing",
      "subTitles": null,
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\Steps_for_fixturing.htm",
      "text": " Steps for fixturing The following steps provide a basic methodology for fixturing in MIL: Set up the analysis operation that will return a reference location that you can use to displace the relative coordinate system. The reference location must be at a fixed positional and angular offset from the object to analyze or process. For example, set up a Model Finder or Pattern Matching model that appears at a fixed offset from the target object. Optionally, allocate and set up a fixturing offset object, using McalAlloc() with M_FIXTURING_OFFSET and McalFixture() with M_LEARN_OFFSET. This allows you to place the relative coordinate system at an offset from the calculated reference location. Optionally, define a region of interest in the target image buffer with respect to the relative coordinate system, using MbufSetRegion(). This allows you to restrict processing and analysis to a region of the object. Set up the processing and analysis operations that you need to perform once the relative coordinate system is fixtured to the object. You must set positions and angles in world units, since you want these to be with respect to the relative coordinate system. Most position and angle control types can be specified in world units if you set their corresponding control type (for example, MmeasSetMarker() with M_SEARCH_REGION_INPUT_UNITS) to M_WORLD. Perform the analysis operation that will determine the reference location for each instance of the object to analyze/process in the image. Then, for each established reference location: Call McalFixture() with M_MOVE_RELATIVE, the reference location, and if set up, the fixturing offset object. This places the relative coordinate system at the specified offset from the reference location. Analyze or process the object, using the analysis/processing operations set up in step 4. Repeat step 5 for each grabbed image. Free the fixturing offset object using McalFree(), unless M_UNIQUE_ID was specified during allocation. If you know the position and angle for the new relative coordinate system with respect to the absolute coordinate system, you can skip step 2 and set the new relative coordinate system directly, using McalRelativeOrigin() or McalSetCoordinateSystem() instead of using McalFixture(). Steps for fixturing ",
      "wordCount": 349,
      "subEntries": []
    },
    {
      "id": "UG_fixturing_Basic_concepts",
      "version": null,
      "title": "Basic concepts for fixturing",
      "subTitles": null,
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\Basic_concepts.htm",
      "text": " Basic concepts for fixturing The basic concepts and vocabulary conventions for fixturing are: Absolute coordinate system (also known as absolute world coordinate system). The coordinate system in the world from which all other world coordinate systems are defined and to which the pixel coordinate system maps. The absolute coordinate system is implicitly defined from the calibration points specified when calibrating the camera setup. If the default uniform camera calibration context is used instead of calibration points, the absolute coordinate system is set, by default, to have the same origin and orientation as the pixel coordinate system and to have world units equal to 1 pixel. The absolute coordinate system is unmovable. Its unit of measure is user-defined (for example, mm, cm, or inches). Calibrated image. An image associated with a camera calibration context. Upon association, the image receives its own copy of the world coordinate systems and extrinsic camera attributes; it receives a reference to the camera calibration context for all other settings, including the intrinsic camera attributes. If the coordinate systems of the camera calibration context are changed after the association, the change will not affect the image. The image only refers back to the camera calibration context for non-uniform pixel-to-world mapping information and for information about the original camera calibration setup. Camera calibration context. A MIL object that stores the mapping between the pixel coordinate system and the world coordinate system, as well as information about the camera calibration setup, and the initial locations of all the coordinate systems. Camera calibration. Relates the pixel coordinate system to the absolute coordinate system. Fixturing offset object. A MIL object that stores the learned positional and angular offset required between the relative coordinate system and the calculated reference location of an object. Location. A position and angle, expressed in a specified coordinate system. Pixel units. The most basic unit in an image. Pixel units are used to measure sizes, distances, and positions in an uncalibrated image. World units (also known as real-world units). Units used to measure sizes, distances, and positions as they exist in the real world. Relative coordinate system (also known as relative world coordinate system). Coordinate system defined in the absolute coordinate system and used to set spatial information and retrieve spatial results in real-world units. The relative coordinate system can be moved anywhere in the absolute coordinate system to set spatial information and retrieve spatial results relative to a different location in the world. Before modification, the relative coordinate system is equivalent to the absolute coordinate system. Reference location. A location that represents the location of an object (for example, the center of an object) and is at a fixed offset from the object. Training image. A typical image used to set up processing, analysis, or a fixturing offset object, at the beginning of your application (outside of any time critical loop). Basic concepts for fixturing ",
      "wordCount": 481,
      "subEntries": []
    },
    {
      "id": "UG_fixturing_Calibration_and_one_or_many_fixtures",
      "version": null,
      "title": "Calibration and one or many fixtures",
      "subTitles": [
        "If you don't really need to work in real world units except for fixturing purposes",
        "Multiple relative coordinate systems"
      ],
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\Calibration_and_one_or_many_fixtures.htm",
      "text": " Calibration and one or many fixtures In MIL, fixturing is implemented using the relative coordinate system of an image. For each instance of an object, you move the relative coordinate system of the image to a fixed positional and angular offset from the object, based upon some previous analysis. The relative coordinate system is a coordinate system defined in real-world units in the absolute (world) coordinate system of an image. You define both the absolute and relative coordinate systems using the MIL Camera Calibration module. The absolute coordinate system is established when calibrating the camera setup. If you don't want to calibrate your camera set up, you can still use fixturing, using the default uniform calibration context. Regardless if you use the default calibration context or perform a full camera calibration, you can also set up multiple relative coordinate systems for multiple fixtures using child buffers. If you don't really need to work in real world units except for fixturing purposes If you don't really need to work in real-world units except for fixturing purposes, you can associate the default uniform camera calibration context with your image. This sets the absolute coordinate system to have the same origin and orientation as the pixel coordinate system and sets the world units equal to 1 pixel. For more information on calibrating and defining more meaningful pixel-to-world mappings, see the Camera calibration modes section of Chapter 28: Calibrating your camera setup. The following code snippet shows how to associate a uniform camera calibration context with an image of a set of nails, so that you can use the relative coordinate system for fixturing. The example then fixtures the relative coordinate system to each instance of the nail, before placing the MIL Measurement module's search region with respect to the relative coordinate system and then performing the analysis as illustrated in the following animation. // [...] // Associates the default uniform calibration context with your image; // this sets the absolute coordinate system to have the same origin // and orientation as the pixel coordinate system // and sets the world units equal to 1 pixel. McalUniform(TargetImage, 0.0, 0.0, 1.0, 1.0, 0.0, M_DEFAULT); // Find all occurrences of the model in the target image. MmodFind(ModCtx, TargetImage, ModRes); // Allocate a stripe marker. MIL_ID MeasStripe = MmeasAllocMarker(System, M_STRIPE, M_DEFAULT, M_NULL); MmeasSetMarker(MeasStripe, M_ORIENTATION, M_HORIZONTAL, M_NULL); // Use a graphics list to define the region to be fixtured and used by measurement. const MIL_DOUBLE SearchRegionOriginX = 30; const MIL_DOUBLE SearchRegionOriginY = 10; const MIL_DOUBLE SearchRegionSizeX = 200; const MIL_DOUBLE SearchRegionSizeY = 70; MgraControl(M_DEFAULT, M_INPUT_UNITS, M_WORLD); MgraRect(M_DEFAULT, GraphicLst, SearchRegionOriginX, SearchRegionOriginY, SearchRegionSizeX, SearchRegionSizeY); MbufSetRegion(TargetImage, GraphicLst, M_DEFAULT, M_NO_RASTERIZE + M_FILL_REGION, M_DEFAULT); // [...] MIL_INT NbFound = 0; MmodGetResult(ModRes, M_GENERAL, M_NUMBER + M_TYPE_MIL_INT, &amp;NbFound); // For each found occurrence of the model. for(MIL_INT i = 0; i &lt; NbFound; i++) { // [...] // Moves the image's relative coordinate system to the reference position and // orientation of the current model occurrence. McalFixture(TargetImage, M_NULL, M_MOVE_RELATIVE, M_RESULT_MOD, ModRes, i, M_DEFAULT, M_DEFAULT, M_DEFAULT); // Measure the stripe in the fixtured search region. MmeasFindMarker(M_DEFAULT, TargetImage, MeasStripe, M_DEFAULT); // Analyze the results of the measured stripe. MmeasGetResult(MeasStripe, M_ANGLE + M_EDGE_FIRST , &amp;Edge1AngleDeg, M_NULL); MmeasGetResult(MeasStripe, M_ANGLE + M_EDGE_SECOND , &amp;Edge2AngleDeg, M_NULL); // [...] } Multiple relative coordinate systems You can have more than one relative coordinate system in an image by creating child buffers. A child buffer can have the same size as the its parent buffer or a portion of it. Since each child buffer receives a copy of the camera calibration information stored in the parent, they initially have a copy of the parent's relative coordinate system that takes into account the different origin in the pixel coordinate system. You can displace the relative coordinate system of the child buffer; this does not affect the relative coordinate system of the parent. This allows you to analyze different aspects of an image with respect to different relative coordinate systems, while preserving the location of the relative coordinate system of the parent buffer. In addition, if you change the relative coordinate system of the parent, the relative coordinate system of each of the child buffers will also be displaced. There exists a rigid link between the position and orientation of the parent and child buffers' relative coordinate systems. Consequently, if you have multiple child buffers, their relative coordinate system will be changed to maintain the same pose that was previously established with respect to the parent coordinate system. The following animation illustrates the relationship between the relative coordinate systems of the parent and its children. Having multiple relative coordinate systems allows you to perform operations with respect to different reference points. If you have an image that contains a complex object with multiple features that you want to analyze, you can fixture the relative coordinate system of the parent to the object, and then fixture each child buffer's relative coordinate system to one of the object's features. This ensures that when you locate the object in general and move the relative coordinate system of the parents buffer, the relative coordinate system of the child buffers are relocated to the correct position, due to the rigid link between the coordinate systems. This allows the complex features of the object to be easily analyzed when the parent's relative coordinate system is fixtured to a new instance of the object. Calibration and one or many fixtures If you don't really need to work in real world units except for fixturing purposes Multiple relative coordinate systems ",
      "wordCount": 918,
      "subEntries": []
    },
    {
      "id": "UG_fixturing_Moving_the_relative_coordinate_system",
      "version": null,
      "title": "Moving the relative coordinate system",
      "subTitles": [
        "Moving using a model",
        "Moving using a metrology reference frame",
        "Moving using a position and angle expressed in a specified relative coordinate system",
        "Moving using a position and angle that are with respect to the absolute coordinate system",
        "Moving using a point and direction point that are with respect to the relative coordinate system",
        "Moving the relative coordinate system in 3D",
        "Copying the new relative coordinate system to other images"
      ],
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\Moving_the_relative_coordinate_system.htm",
      "text": " Moving the relative coordinate system There are five ways to fixture the relative coordinate system to an object: Move it to the position and angle of a specified occurrence of a MIL Pattern Matching or Model Finder model. Move it to the position and angle of a specified Metrology reference frame feature. Move it to a position and angle that are with respect to a relative coordinate system. Move it to a position and angle that are with respect to the absolute coordinate system. Move it to a position and angle using one of the above techniques, and then copy its position and angle to other images that require the same relative coordinate system displacement. Moving using a model The easiest way to move the relative coordinate system for fixturing is to use a MIL Pattern Matching or Model Finder model that is at a fixed positional and angular offset from the object to analyze or process. In this case, search for the model. Then, to move the relative coordinate system to the reference location of a found occurrence, call McalFixture() with M_MOVE_RELATIVE, the Model Finder/Pattern Matching result buffer, and the index of the occurrence. For example, to move the relative coordinate system of an image to the reference location of the first occurrence of a pattern matching model: /* Move the relative coordinate system of ImageId, with no offset, at the location of occurrence 0 of the pattern matching model, (location is contained in the pattern matching result PatResultId). */ McalFixture(ImageId, M_NULL, M_MOVE_RELATIVE, M_RESULT_PAT, PatResultId, 0, /* Occurrence index = 0. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); You should ensure that the Pattern Matching or Model Finder model used to establish the location has good, unique features so that there is no ambiguity over where to move the relative coordinate system. By default, when using this technique, the relative coordinate system is placed at the reference location of the specified model occurrence. You can, however, set the relative coordinate system at an offset from this location. See the Fixturing offset section later in this chapter. For more information about defining a Pattern Matching model, see Chapter 7: Pattern matching. For more information about defining a Model Finder model, see Chapter 8: Geometric Model Finder. Moving using a metrology reference frame You can specify the new location for the relative coordinate system using the position and angle of a Metrology reference frame. To do so, call McalFixture() with M_MOVE_RELATIVE, the identifier of a Metrology result buffer, and the index of the reference frame feature to use. MIL will move the relative coordinate system to the location, offset, and angle specified by the constructed Metrology reference frame. The constructed frames used in metrology cannot be used directly in other modules, and so moving the relative coordinate system to the location specified by the constructed frame could be useful to, for example, process the same image using a different module after having processed it with Metrology. /* Move the relative coordinate system of ImageId, with no offset, at the location of the local frame 1 of the metrology context, (location is contained in the metrology result MetResultId). */ McalFixture(ImageId, M_NULL, M_MOVE_RELATIVE, M_RESULT_MET, MetResultId, 1, /* Local frame index = 1. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); By default, when using this technique, the relative coordinate system is placed at the reference location of the specified Metrology global or local frame result. You can, however, set the relative coordinate system at an offset from this location. See the Fixturing offset section later in this chapter. Moving using a position and angle expressed in a specified relative coordinate system You can have MIL establish the new location for the relative coordinate system based on an explicitly specified position and angle that are expressed in a specified relative coordinate system. In this case, the position and angle would correspond to a calculated reference location for the object to analyze or process. To move the relative coordinate system using this technique, call McalFixture() with all of the following: M_MOVE_RELATIVE. The position and angle expressed in a relative coordinate system. If different from the target's current relative coordinate system, specify the calibrated image/camera calibration context with the relative coordinate system of the position and angle. Otherwise, use M_DEFAULT (for CalOrLocSourceId). Internally, McalFixture() converts the specified position and angle to be with respect to the absolute coordinate system. It then uses the converted position and angle to place the new relative coordinate system. The following animation illustrates the above mentioned process. The animation above shows the position and angle of the relative coordinate system before and after calling McalFixture(). When you call McalFixture() with the position (X2, Y2) and angle Theta2 expressed in the current relative coordinate system, the position (X3, Y3) and angle Theta3 for the new relative coordinate system are internally calculated in the absolute coordinate system. Finally, the relative coordinate system is moved to the new position and angle in the absolute coordinate system. /* Move the relative coordinate system of ImageId, with no offset, at the position (X2, Y2) and angle Theta2. This point and this angle are expressed in the relative coordinate system of ImageId (before the move). After the move, the relative coordinate system will be placed at position (X3, Y3) and angle Theta3. */ McalFixture(ImageId, M_NULL, M_MOVE_RELATIVE, M_POINT_AND_ANGLE, M_DEFAULT, /* CS for (X2, Y2) and Theta2: M_DEFAULT means use ImageId. */ X2, Y2, Theta2, M_DEFAULT); By default, the relative coordinate system is placed at the calculated position and angle. You can, however, set the relative coordinate system at an offset from the calculated position and angle. See the Fixturing offset section later in this chapter. Moving using a position and angle that are with respect to the absolute coordinate system If you know the position and angle for the new relative coordinate system with respect to the absolute coordinate system, you can set the new relative coordinate system directly, using McalRelativeOrigin() or McalSetCoordinateSystem(). For example, if in the previous example, you knew the position (X3, Y3) and angle Theta3 in the absolute coordinate system, you could call McalRelativeOrigin() as follows: /* Move the relative coordinate system of ImageId, with no offset, at the position (X3, Y3) and angle Theta3. This point and this angle are expressed in the absolute coordinate system. */ McalRelativeOrigin(ImageId, X3, Y3, 0.0, Theta3, M_DEFAULT); Moving using a point and direction point that are with respect to the relative coordinate system You can specify the location of the new relative coordinate system using two points. The first point defines the position, and the vector going from the first point to the second point defines the angle and direction of the X-axis. To move the relative coordinate system using this technique, call McalFixture() with all of the following: M_MOVE_RELATIVE. M_POINT_AND_DIRECTION_POINT. The first and second points expressed in the relative coordinate system. Note that you can only pass X and Y-coordinates for the points. So, essentially you are moving the relative coordinate system along its current XY-plane. The following animation illustrates how to move the relative coordinate system using two points in the current relative coordinate system. Moving the relative coordinate system in 3D Typically when using McalFixture(), you can only move the relative coordinate system along its XY-plane (Z = 0) and you can only rotate the relative coordinate system around the Z-axis or an axis parallel to it (the direction and angle of the Z-axis remains unchanged). The animation below shows a 3D view on how the relative coordinate system is moved using McalFixture() with M_POINT_AND_DIRECTION_POINT. This rule does not apply if you are using McalFixture() with M_LASER_3DMAP or M_RESULT_POINT_CLOUD_3DMAP; these allow you to move the relative coordinate system in 3D. If you need to move the relative coordinate system in 3D and can't use McalFixture(), you can use McalSetCoordinateSystem(). Copying the new relative coordinate system to other images When working with multiple images of the same scene taken from different view points, you might want to move the relative coordinate system in one image, and then copy the position and angle of the new relative coordinate system to the other images. To perform the copy, iteratively call McalFixture() with all of the following: Call McalFixture() with M_MOVE_RELATIVE as the Operation and M_SAME_AS_SOURCE as the LocationType. Specify the source calibrated object to be copied in CalOrLocSourceId. Specify the destination of the copy operation in DstCalibratedMilObjectId. This operation does not copy the absolute coordinate system information. It assumes that the absolute coordinate systems of the different images are the same, although the mapping between the world and pixel coordinate systems might be different. Moving the relative coordinate system Moving using a model Moving using a metrology reference frame Moving using a position and angle expressed in a specified relative coordinate system Moving using a position and angle that are with respect to the absolute coordinate system Moving using a point and direction point that are with respect to the relative coordinate system Moving the relative coordinate system in 3D Copying the new relative coordinate system to other images ",
      "wordCount": 1507,
      "subEntries": []
    },
    {
      "id": "UG_fixturing_Fixturing_offset",
      "version": null,
      "title": "Fixturing offset",
      "subTitles": [
        "Fixturing offset for convenience",
        "Moving the reference location prior to searching",
        "Moving the relative coordinate system to a logical offset from a reference location",
        "Fixturing offset to decouple the reference location from the object to analyze",
        "Establishing the positional and angular offset for the fixturing offset object"
      ],
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\Fixturing_offset.htm",
      "text": " Fixturing offset When fixturing, you might need to offset the relative coordinate system from the default reference location that you can automatically establish from analysis/processing. There are different ways to apply a fixturing offset depending on the reason that you want to apply an offset: Fixturing offset for convenience. Fixturing offset to decouple the reference location from the object to analyze. Fixturing offset for convenience If placing the relative coordinate system at the default reference location is not convenient, you can have MIL automatically apply a required offset to the default reference location. This can be useful, for example, if the default reference location would cause you to deal with negative coordinates during analysis. In this case, there are two ways to automatically apply a fixturing offset. If using a model occurrence to displace the relative coordinate system, you can offset the reference location of the model to the required location prior to searching for occurrences of it. If using McalFixture() to move the relative coordinate system to a specific location, regardless of how you pass the reference location, you can use a fixturing offset object. Moving the reference location prior to searching If using a model occurrence to displace the relative coordinate system and you need to apply an offset from the occurrence's center, you can move the reference location of the model so that the returned location of each occurrence is at the required offset from the occurrence. To move the reference location of a pattern matching model, use MpatControl() with M_REFERENCE.... To move the reference location of a Model Finder model, use MmodControl() with M_REFERENCE_X, M_REFERENCE_Y, and M_REFERENCE_ANGLE. The following code snippet shows how to move the reference location of a model and then place the relative coordinate system at the reference location of a model occurrence: /* Set up phase. */ /* Set the model reference location (model 0 in Model Finder context ModContextId). */ MmodControl(ModContextId, 0, M_REFERENCE_X, ReferenceX); MmodControl(ModContextId, 0, M_REFERENCE_Y, ReferenceY); MmodControl(ModContextId, 0, M_REFERENCE_ANGLE, ReferenceAngle); /* Critical loop. */ while (!Stop) { /* Acquire image. */ /* ... */ /* Find the model in GrabbedImageId. */ MmodFind(ModContextId, GrabbedImageId, ModResultId); /* Loop on all model occurrences. */ MmodGetResult(ModResultId, M_GENERAL, M_NUMBER+M_TYPE_MIL_INT, &amp;Number); for (ResultIndex = 0; ResultIndex &lt; Number; ResultIndex++) { /* Move the relative coordinate system to the reference location of the found model. */ McalFixture(GrabbedImageId, M_NULL, M_MOVE_RELATIVE, M_RESULT_MOD, ModResultId, ResultIndex, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Do some analysis. */ /* ... */ } } Note that moving the relative coordinate system using this technique can result in the returned locations being far from the actual occurrences of the model. This might not be ideal when using the locations not only to place the relative coordinate system, but also to, for example, draw the locations of the occurrences. Moving the relative coordinate system to a logical offset from a reference location You can also add a fixturing offset to the reference location using a fixturing offset object. Besides being useful if you are not using a model occurrence, it can also be useful if using a model occurrence. In the latter case, a fixturing offset object offers the advantage of keeping the model's reference location at its original location, while specifying an offset for the relative coordinate system. A fixturing offset object is a MIL object that stores a positional and angular offset. You can use the following steps to allocate and set up a fixturing offset object: Allocate a fixturing offset object using McalAlloc() with M_FIXTURING_OFFSET. In a training image, ensure that the relative coordinate system is at a required location in the image; if it isn't, move it using McalRelativeOrigin() or McalSetCoordinateSystem(). Typically, you would place the relative coordinate system at the required offset from a location that you can automatically establish in the training image (the reference location). Establish a location in the training image that has the required positional and angular offset from the relative coordinate system. This is typically the reference location in the training image. Call McalFixture() with M_LEARN_OFFSET, the fixturing offset object, the training image, and the established location. MIL will learn the positional and angular offset that the established location has from the relative coordinate system, and will save it in the fixturing offset object. At runtime, call McalFixture() with M_MOVE_RELATIVE and the fixturing offset object. The following animation offers a visual representation of the above steps. In the example above, we want to obtain the exact location and angle of the bar code with respect to the board because we want to check if the location and angle are correct compared to the schematics. The following code snippet illustrates how to move the relative coordinate system to a preestablished offset from the reference location of a model occurrence, without moving the model's default reference location: /* Set up phase. */ /* Optionally, move the relative coordinate system at the required location in the image. No need to move if relative is already at the required location. */ if (MoveRelativeInTrainingImage) { McalRelativeOrigin(TrainingImageId, TrainingX, TrainingY, 0, TrainingAngle, M_DEFAULT); } /* Find the model contained in the Model Finder context ContextId in the training image. */ MmodFind(ModContextId, TrainingImageId, ModResultId); /* Make sure the model is found. */ /* ... */ /* Learn the location of the model reference location in the relative coordinate system of the training image. */ McalFixture(M_NULL, FixturingOffsetId, M_LEARN_OFFSET, M_RESULT_MOD, ModResultId, 0, /* Model finder result and occurrence index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Critical loop. */ while (!Stop) { /* Acquire image. */ /* ... */ /* Find the model in GrabbedImageId. */ MmodFind(ModContextId, GrabbedImageId, ModResultId); /* Make sure the model is found. */ /* ... */ /* Move the relative coordinate system of GrabbedImageId, with the learned offset, according to the location of the occurrence of the model. */ McalFixture(GrabbedImageId, FixturingOffsetId, M_MOVE_RELATIVE, M_RESULT_MOD, ModResultId, 0, /* Model finder result and occurrence index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Do some analysis. */ /* ... */ } Fixturing offset to decouple the reference location from the object to analyze You can also use a fixturing offset object to decouple the reference location from the location of the object to analyze. This might be useful, for example, if you are testing which is the best model to use to establish the reference location. In this case, when setting up the fixturing offset object, you can keep the relative coordinate system fixed at an arbitrary location from the object to analyze, while you try setting up the fixturing offset object on the different reference locations. By keeping the relative coordinate system fixed, you don't have to keep updating the region in which the object to analyze is located with respect to the new relative coordinate system; you just have to learn the offset from the new reference location. While setting up the fixturing offset object, leave the relative coordinate system at its current position or place it at any arbitrary location. This assumes that the actual location of the relative coordinate system is not crucial to the analysis process as long as it is at a fixed location from the object to analyze (for example, you want to fixture the location from which to read a bar code but you don't need to compare the location of the bar code against specifications). For this case, you can use the following steps to allocate and set up a fixturing offset object: Allocate a fixturing offset object using McalAlloc() with M_FIXTURING_OFFSET. Without moving the relative coordinate system, establish a location in the training image. Typically, this is a location that you can automatically establish in the training image (the reference location). This can be, for example, the reference location of a model or a pattern, or the center of gravity of a blob. Call McalFixture() with M_LEARN_OFFSET, the fixturing offset object, the training image, and the established location. MIL will learn the positional and angular offset that the established location has from the relative coordinate system, and saves it in the fixturing offset object. At runtime, call McalFixture() with M_MOVE_RELATIVE and the fixturing offset object. The following animation offers a visual representation of the above steps. In the example above, we want to read the bar code but we don't care about its precise location on the board; we just want to be able to find the bar code and read it, regardless of its angle or location with respect to the board. The following code snippet illustrates how to move the relative coordinate system to a preestablished offset from the reference location of a model occurrence, without moving the model's default reference location or the relative coordinate system during design-time: /* Set up phase. */ /* Find the model contained in the Model Finder context ContextId in the training image. */ MmodFind(ModContextId, TrainingImageId, ModResultId); /* Make sure the model is found. */ /* ... */ /* Learn the location of the model reference location in the relative coordinate system of the training image. */ McalFixture(M_NULL, FixturingOffsetId, M_LEARN_OFFSET, M_RESULT_MOD, ModResultId, 0, /* Model finder result and occurrence index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Critical loop. */ while (!Stop) { /* Acquire image. */ /* ... */ /* Find the model in GrabbedImageId. */ MmodFind(ModContextId, GrabbedImageId, ModResultId); /* Make sure the model is found. */ /* ... */ /* Move the relative coordinate system of GrabbedImageId, with the learned offset, according to the location of the occurrence of the model. */ McalFixture(GrabbedImageId, FixturingOffsetId, M_MOVE_RELATIVE, M_RESULT_MOD, ModResultId, 0, /* Model finder result and occurrence index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Do some analysis. */ /* ... */ } Establishing the positional and angular offset for the fixturing offset object As mentioned above, to establish the positional and angular offset for the fixturing offset object, you must call McalFixture() with M_LEARN_OFFSET, the fixturing offset object in the training image, and the established reference location that has the required positional and angular offset from the relative coordinate system. There are several ways of specifying the reference location such as: You can define a Model Finder or Pattern Matching model in the training image, and then pass the Model Finder/Pattern Matching context and model index to McalFixture(). MIL will extract the offset of the reference location of the model from the relative coordinate system of the training image. You can search for a Model Finder or Pattern Matching model in the training image, and then pass the Model Finder/Pattern Matching result buffer and model occurrence index to McalFixture(). MIL will extract the offset of the model occurrence from the relative coordinate system of the training image. You can establish the location of the Metrology reference frame in the training image and then pass the identifier of a Metrology result buffer and the index of a Metrology reference frame feature to McalFixture(). MIL will extract the offset and angle of the reference frame feature from the relative coordinate system of the training image. You can pass the training image and a preestablished position and angle in this image to McalFixture(). MIL will extract the offset of the preestablished position and angle from the relative coordinate system of the training image. /* First way to learn a fixturing offset. */ /* Define models. */ /* ... */ /* Learn the offset from a Pattern Matching model or from a Model Finder model. */ McalFixture(M_NULL, FixturingOffset1Id, M_LEARN_OFFSET, M_MODEL_PAT, PatContextId, ImageModelDefinitionId, 0, /* Pattern Matching model index. */ M_DEFAULT, M_DEFAULT); McalFixture(M_NULL, FixturingOffset2Id, M_LEARN_OFFSET, M_MODEL_MOD, ModContextId, 0, /* Model finder context and model index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Second way to learn a fixturing offset. */ /* Find the models in a training image. */ /* ... */ /* Learn the offset from a Pattern Matching result or from a Model Finder result. */ McalFixture(M_NULL, FixturingOffset3Id, M_LEARN_OFFSET, M_RESULT_PAT, PatResultId, 0, /* Pattern matching result and occurrence index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); McalFixture(M_NULL, FixturingOffset4Id, M_LEARN_OFFSET, M_RESULT_MOD, ModResultId, 0, /* Model finder result and occurrence index. */ M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Third way to learn a fixturing offset. */ /* Learn the offset from a preestabilished position and angle expressed in the relative coordinate system of ImageId. */ McalFixture(M_NULL, FixturingOffset5Id, M_LEARN_OFFSET, M_POINT_AND_ANGLE, ImageId, X, Y, Angle, M_DEFAULT); To ensure that the appropriate offset has been established, you can draw a line from the current origin of the relative coordinate system to the position that must have been passed to establish the offset. To do so, use McalDraw() with the fixturing offset object and M_DRAW_FIXTURING_OFFSET. This also draws a small arrow at this position, which illustrates the angle that must have been passed. Fixturing offset Fixturing offset for convenience Moving the reference location prior to searching Moving the relative coordinate system to a logical offset from a reference location Fixturing offset to decouple the reference location from the object to analyze Establishing the positional and angular offset for the fixturing offset object ",
      "wordCount": 2141,
      "subEntries": []
    },
    {
      "id": "UG_fixturing_After_fixturing",
      "version": null,
      "title": "After fixturing",
      "subTitles": [
        "Inputting values in real-world units",
        "Results in world units",
        "Restricting processing/analysis to a region of interest defined in world units",
        "Transforming your images after fixturing"
      ],
      "location": "MIL UG P04: 2D related information",
      "pageURL": "content\\UserGuide\\fixturing\\After_fixturing.htm",
      "text": " After fixturing Fixturing is useful if, after moving the relative coordinate system, you perform and/or retrieve results from analysis operations in world units. It is also useful if you perform processing/analysis operations restricted to an image buffer's region of interest defined in world units. Essentially, you need to work in world units for the units to be with respect to the relative coordinate system. For a list of the modules that support input settings and returned results in world units, and those that support regions of interest defined in world units, see the Working with real-world units section of Chapter 28: Calibrating your camera setup. If you can't work in world units because the MIL module does not support it or you are using a third-party tool, it might still be useful to fixture the relative coordinate system to an object. In this case, you could use the relative coordinate system to transform the image so that the object has the same coordinates in the pixel coordinate system as it has in a training image. Note that if you don't need to work in real-world units, you can associate the default uniform camera calibration context with your image; this sets the absolute world coordinate system to have the same origin and orientation as the pixel coordinate system, and sets world units equal to 1 pixel. Inputting values in real-world units The modules that support settings in world units require that you set the working unit to M_WORLD and you use a calibrated image, before they interpret their settings as being in world units. Otherwise, by default, they interpret their settings as being in pixel units, even if a module natively works in world units. The function and constant to set the working unit depends on the module; for a list of these, see the Input settings in world units subsection of the Working with real-world units section of Chapter 28: Calibrating your camera setup. Results in world units When you use a calibrated image, the modules that support returning results in world units typically do so by default. In this case, to have results returned in pixel units, you must set the output units to pixels; to do so, call the module's control function with M_RESULT_OUTPUT_UNITS set to M_PIXEL. For more information, see the Getting results in world units subsection of the Working with real-world units section of Chapter 28: Calibrating your camera setup. Restricting processing/analysis to a region of interest defined in world units If supported by the function, you can restrict processing and analysis to an image buffer's region of interest; define the region of interest for the image buffer using MbufSetRegion(). If the region of interest is defined in world units, it will move according to the relative coordinate system of the image. So, if you fixture the relative coordinate system to an object, the region of interest will move accordingly, allowing you to restrict processing/analysis to the required object characteristics. Transforming your images after fixturing Even if you can't continue working in world units, fixturing can simplify your application when analyzing/processing objects that don't have a fixed location. In these cases, you can transform grabbed images so that the target object is at the same location as in a training image. This allows you to keep the same analysis setting for all instances of an object without taking into account the new location of the object. This also allows you to make comparisons between expected results and obtained results without conversion. To transform grabbed images so that the target object is at the same location as in a training image and then perform required analysis/processing on the object, do the following: Allocate an image buffer to store the transformed version of the grabbed image; it will be used as the working image buffer. Allocate it to have the same size as the training image. Copy the camera calibration information of the training image to the working image, using McalAssociate(). For each instance of the object in each grabbed image: Fixture the relative coordinate system to the target object in the grabbed image. Create a transformed version of the grabbed image and save it in the working image buffer, using McalTransformImage() with M_USE_DESTINATION_CALIBRATION. This transforms the grabbed image so that its relative coordinate system is placed at the same location as the current relative coordinate system of the working image buffer. Perform the required processing/analysis operations on the working image buffer. For example, to transform a grabbed image so that an object has the same size and position as in a training image: /* Set up phase. */ /* If the image is not yet corrected, do it now. */ McalTransformImage(GoldenTemplateImageId, GoldenTemplateImageId, M_NULL, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Define a model in the golden template image. */ MmodDefine(ModContextId, M_IMAGE, GoldenTemplateImageId, ModelOffsetX, ModelOffsetY, ModelWidth, ModelHeight); /* Learn the fixturing offset from the model. */ McalFixture(M_NULL, FixturingOffsetId, M_LEARN_OFFSET, M_MODEL_MOD, ModContextId, 0, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* ... */ /* Critical loop. */ while (!Stop) { /* Acquire image. */ /* ... */ /* Find the model in GrabbedImageId */ MmodFind(ModContextId, GrabbedImageId, ModResultId); /* Make sure the model is found. */ /* ... */ /* Move the relative coordinate system (with learned offset) according to the found location of the model. */ McalFixture(GrabbedImageId, FixturingOffsetId, M_MOVE_RELATIVE, M_RESULT_MOD, ModResultId, 0, M_DEFAULT, M_DEFAULT, M_DEFAULT); /* Transform the grabbed image such that its relative coordinate system is at the same position and angle as the golden template image. */ McalAssociate(GoldenTemplateImageId, TransformedGrabbedImageId, M_DEFAULT); McalTransformImage(GrabbedImageId, TransformedGrabbedImageId, M_NULL, M_DEFAULT, M_DEFAULT, M_USE_DESTINATION_CALIBRATION); /* Process transformed image (probably comparing it with GoldenTemplateImageId). ... */ } After fixturing Inputting values in real-world units Results in world units Restricting processing/analysis to a region of interest defined in world units Transforming your images after fixturing ",
      "wordCount": 963,
      "subEntries": []
    }
  ]
}]